
Stewart_motor_control_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005c78  08005c78  00006c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc8  08005cc8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd0  08005cd0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cd4  08005cd4  00006cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005cd8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000010  08005ce4  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005ce4  00007304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119fd  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275f  00000000  00000000  00018a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0001b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e22  00000000  00000000  0001c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002659  00000000  00000000  0001d1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157d7  00000000  00000000  0001f813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dec8d  00000000  00000000  00034fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113c77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f70  00000000  00000000  00113cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00118c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005c60 	.word	0x08005c60

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08005c60 	.word	0x08005c60

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b18:	f000 b96a 	b.w	8000df0 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14e      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b40:	4694      	mov	ip, r2
 8000b42:	458c      	cmp	ip, r1
 8000b44:	4686      	mov	lr, r0
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	d962      	bls.n	8000c12 <__udivmoddi4+0xde>
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	4091      	lsls	r1, r2
 8000b54:	fa20 f303 	lsr.w	r3, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f f68c 	uxth.w	r6, ip
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	fb07 1114 	mls	r1, r7, r4, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb04 f106 	mul.w	r1, r4, r6
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b8a:	f080 8112 	bcs.w	8000db2 <__udivmoddi4+0x27e>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 810f 	bls.w	8000db2 <__udivmoddi4+0x27e>
 8000b94:	3c02      	subs	r4, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	fb00 f606 	mul.w	r6, r0, r6
 8000bae:	429e      	cmp	r6, r3
 8000bb0:	d90a      	bls.n	8000bc8 <__udivmoddi4+0x94>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bba:	f080 80fc 	bcs.w	8000db6 <__udivmoddi4+0x282>
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	f240 80f9 	bls.w	8000db6 <__udivmoddi4+0x282>
 8000bc4:	4463      	add	r3, ip
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	1b9b      	subs	r3, r3, r6
 8000bca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	b11d      	cbz	r5, 8000bda <__udivmoddi4+0xa6>
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d905      	bls.n	8000bee <__udivmoddi4+0xba>
 8000be2:	b10d      	cbz	r5, 8000be8 <__udivmoddi4+0xb4>
 8000be4:	e9c5 0100 	strd	r0, r1, [r5]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4608      	mov	r0, r1
 8000bec:	e7f5      	b.n	8000bda <__udivmoddi4+0xa6>
 8000bee:	fab3 f183 	clz	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d146      	bne.n	8000c84 <__udivmoddi4+0x150>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xcc>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f0c0 80f0 	bcc.w	8000de0 <__udivmoddi4+0x2ac>
 8000c00:	1a86      	subs	r6, r0, r2
 8000c02:	eb64 0303 	sbc.w	r3, r4, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d0e6      	beq.n	8000bda <__udivmoddi4+0xa6>
 8000c0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c10:	e7e3      	b.n	8000bda <__udivmoddi4+0xa6>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f040 8090 	bne.w	8000d38 <__udivmoddi4+0x204>
 8000c18:	eba1 040c 	sub.w	r4, r1, ip
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	fa1f f78c 	uxth.w	r7, ip
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	fb07 f006 	mul.w	r0, r7, r6
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x11c>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x11a>
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c4e:	4626      	mov	r6, r4
 8000c50:	1a1c      	subs	r4, r3, r0
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	fb00 f707 	mul.w	r7, r0, r7
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x148>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x146>
 8000c74:	429f      	cmp	r7, r3
 8000c76:	f200 80b0 	bhi.w	8000dda <__udivmoddi4+0x2a6>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0x9c>
 8000c84:	f1c1 0620 	rsb	r6, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c94:	fa04 f301 	lsl.w	r3, r4, r1
 8000c98:	ea43 030c 	orr.w	r3, r3, ip
 8000c9c:	40f4      	lsrs	r4, r6
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x1a6>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cca:	f080 8084 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cce:	45a1      	cmp	r9, r4
 8000cd0:	f240 8081 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	eba4 0409 	sub.w	r4, r4, r9
 8000cde:	fa1f f983 	uxth.w	r9, r3
 8000ce2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x1d2>
 8000cf6:	193c      	adds	r4, r7, r4
 8000cf8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cfc:	d267      	bcs.n	8000dce <__udivmoddi4+0x29a>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0x29a>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	429c      	cmp	r4, r3
 8000d14:	46ce      	mov	lr, r9
 8000d16:	469c      	mov	ip, r3
 8000d18:	d351      	bcc.n	8000dbe <__udivmoddi4+0x28a>
 8000d1a:	d04e      	beq.n	8000dba <__udivmoddi4+0x286>
 8000d1c:	b155      	cbz	r5, 8000d34 <__udivmoddi4+0x200>
 8000d1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d22:	eb64 040c 	sbc.w	r4, r4, ip
 8000d26:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	431e      	orrs	r6, r3
 8000d2e:	40cc      	lsrs	r4, r1
 8000d30:	e9c5 6400 	strd	r6, r4, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e750      	b.n	8000bda <__udivmoddi4+0xa6>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa24 f303 	lsr.w	r3, r4, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x24c>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29e>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29e>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d88:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x276>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x296>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x296>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e739      	b.n	8000c26 <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f0      	b.n	8000b98 <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e706      	b.n	8000bc8 <__udivmoddi4+0x94>
 8000dba:	45c8      	cmp	r8, r9
 8000dbc:	d2ae      	bcs.n	8000d1c <__udivmoddi4+0x1e8>
 8000dbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a8      	b.n	8000d1c <__udivmoddi4+0x1e8>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x276>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e799      	b.n	8000d06 <__udivmoddi4+0x1d2>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x24c>
 8000dd6:	46d6      	mov	lr, sl
 8000dd8:	e77f      	b.n	8000cda <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74d      	b.n	8000c7c <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e70f      	b.n	8000c08 <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e730      	b.n	8000c50 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000df8:	f3bf 8f4f 	dsb	sy
}
 8000dfc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <__NVIC_SystemReset+0x24>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e06:	4904      	ldr	r1, [pc, #16]	@ (8000e18 <__NVIC_SystemReset+0x24>)
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <__NVIC_SystemReset+0x28>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e0e:	f3bf 8f4f 	dsb	sy
}
 8000e12:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <__NVIC_SystemReset+0x20>
 8000e18:	e000ed00 	.word	0xe000ed00
 8000e1c:	05fa0004 	.word	0x05fa0004

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f001 fa58 	bl	80022d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f8dc 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 fbe2 	bl	80015f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e30:	f000 fbc0 	bl	80015b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e34:	f000 f948 	bl	80010c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e38:	f000 fa78 	bl	800132c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e3c:	f000 fb3a 	bl	80014b4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e40:	f000 fa10 	bl	8001264 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e44:	f000 fa3c 	bl	80012c0 <MX_SPI1_Init>
  MX_CAN1_Init();
 8000e48:	f000 f9d6 	bl	80011f8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4859      	ldr	r0, [pc, #356]	@ (8000fb4 <main+0x194>)
 8000e50:	f004 f89e 	bl	8004f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e54:	2104      	movs	r1, #4
 8000e56:	4857      	ldr	r0, [pc, #348]	@ (8000fb4 <main+0x194>)
 8000e58:	f004 f89a 	bl	8004f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	4855      	ldr	r0, [pc, #340]	@ (8000fb4 <main+0x194>)
 8000e60:	f004 f896 	bl	8004f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000e64:	210c      	movs	r1, #12
 8000e66:	4853      	ldr	r0, [pc, #332]	@ (8000fb4 <main+0x194>)
 8000e68:	f004 f892 	bl	8004f90 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4852      	ldr	r0, [pc, #328]	@ (8000fb8 <main+0x198>)
 8000e70:	f004 f88e 	bl	8004f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e74:	2104      	movs	r1, #4
 8000e76:	4850      	ldr	r0, [pc, #320]	@ (8000fb8 <main+0x198>)
 8000e78:	f004 f88a 	bl	8004f90 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_raw, 12);
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	494f      	ldr	r1, [pc, #316]	@ (8000fbc <main+0x19c>)
 8000e80:	484f      	ldr	r0, [pc, #316]	@ (8000fc0 <main+0x1a0>)
 8000e82:	f001 fb03 	bl	800248c <HAL_ADC_Start_DMA>

	  // read and filter ADC values
	  if (adc_ready) {
 8000e86:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc4 <main+0x1a4>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d068      	beq.n	8000f60 <main+0x140>

		  curr_pot[0] = (curr_pot[0] + adc_raw[0] + adc_raw[6]) / 3;
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc8 <main+0x1a8>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b49      	ldr	r3, [pc, #292]	@ (8000fbc <main+0x19c>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a48      	ldr	r2, [pc, #288]	@ (8000fbc <main+0x19c>)
 8000e9c:	8992      	ldrh	r2, [r2, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8000fcc <main+0x1ac>)
 8000ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b46      	ldr	r3, [pc, #280]	@ (8000fc8 <main+0x1a8>)
 8000eae:	801a      	strh	r2, [r3, #0]
		  curr_pot[1] = (curr_pot[1] + adc_raw[1] + adc_raw[7]) / 3;
 8000eb0:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <main+0x1a8>)
 8000eb2:	885b      	ldrh	r3, [r3, #2]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b41      	ldr	r3, [pc, #260]	@ (8000fbc <main+0x19c>)
 8000eb8:	885b      	ldrh	r3, [r3, #2]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8000fbc <main+0x19c>)
 8000ebe:	89d2      	ldrh	r2, [r2, #14]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a42      	ldr	r2, [pc, #264]	@ (8000fcc <main+0x1ac>)
 8000ec4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec8:	17db      	asrs	r3, r3, #31
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc8 <main+0x1a8>)
 8000ed0:	805a      	strh	r2, [r3, #2]
		  curr_pot[2] = (curr_pot[2] + adc_raw[2] + adc_raw[8]) / 3;
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc8 <main+0x1a8>)
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b38      	ldr	r3, [pc, #224]	@ (8000fbc <main+0x19c>)
 8000eda:	889b      	ldrh	r3, [r3, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a37      	ldr	r2, [pc, #220]	@ (8000fbc <main+0x19c>)
 8000ee0:	8a12      	ldrh	r2, [r2, #16]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a39      	ldr	r2, [pc, #228]	@ (8000fcc <main+0x1ac>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	17db      	asrs	r3, r3, #31
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <main+0x1a8>)
 8000ef2:	809a      	strh	r2, [r3, #4]
		  curr_pot[3] = (curr_pot[3] + adc_raw[3] + adc_raw[9]) / 3;
 8000ef4:	4b34      	ldr	r3, [pc, #208]	@ (8000fc8 <main+0x1a8>)
 8000ef6:	88db      	ldrh	r3, [r3, #6]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <main+0x19c>)
 8000efc:	88db      	ldrh	r3, [r3, #6]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a2e      	ldr	r2, [pc, #184]	@ (8000fbc <main+0x19c>)
 8000f02:	8a52      	ldrh	r2, [r2, #18]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a31      	ldr	r2, [pc, #196]	@ (8000fcc <main+0x1ac>)
 8000f08:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0c:	17db      	asrs	r3, r3, #31
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <main+0x1a8>)
 8000f14:	80da      	strh	r2, [r3, #6]
		  curr_pot[4] = (curr_pot[4] + adc_raw[4] + adc_raw[10]) / 3;
 8000f16:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <main+0x1a8>)
 8000f18:	891b      	ldrh	r3, [r3, #8]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <main+0x19c>)
 8000f1e:	891b      	ldrh	r3, [r3, #8]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a26      	ldr	r2, [pc, #152]	@ (8000fbc <main+0x19c>)
 8000f24:	8a92      	ldrh	r2, [r2, #20]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a28      	ldr	r2, [pc, #160]	@ (8000fcc <main+0x1ac>)
 8000f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2e:	17db      	asrs	r3, r3, #31
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <main+0x1a8>)
 8000f36:	811a      	strh	r2, [r3, #8]
		  curr_pot[5] = (curr_pot[5] + adc_raw[5] + adc_raw[11]) / 3;
 8000f38:	4b23      	ldr	r3, [pc, #140]	@ (8000fc8 <main+0x1a8>)
 8000f3a:	895b      	ldrh	r3, [r3, #10]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <main+0x19c>)
 8000f40:	895b      	ldrh	r3, [r3, #10]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a1d      	ldr	r2, [pc, #116]	@ (8000fbc <main+0x19c>)
 8000f46:	8ad2      	ldrh	r2, [r2, #22]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <main+0x1ac>)
 8000f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f50:	17db      	asrs	r3, r3, #31
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <main+0x1a8>)
 8000f58:	815a      	strh	r2, [r3, #10]

		  adc_ready = 0;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <main+0x1a4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]

	  }

#ifdef I2C
	  if (HAL_I2C_Slave_Receive(&hi2c1, RxData, sizeof(RxData), 50) == HAL_OK) {
 8000f60:	2332      	movs	r3, #50	@ 0x32
 8000f62:	220d      	movs	r2, #13
 8000f64:	491a      	ldr	r1, [pc, #104]	@ (8000fd0 <main+0x1b0>)
 8000f66:	481b      	ldr	r0, [pc, #108]	@ (8000fd4 <main+0x1b4>)
 8000f68:	f002 feee 	bl	8003d48 <HAL_I2C_Slave_Receive>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d103      	bne.n	8000f7a <main+0x15a>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f72:	2120      	movs	r1, #32
 8000f74:	4818      	ldr	r0, [pc, #96]	@ (8000fd8 <main+0x1b8>)
 8000f76:	f002 fd88 	bl	8003a8a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  }

#endif

	  unpack_data();
 8000f7a:	f000 fbeb 	bl	8001754 <unpack_data>

	  CAN_Recieve_Unpack();

#endif

	  if (suction_signal == 1) {
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <main+0x1bc>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d105      	bne.n	8000f92 <main+0x172>
		  HAL_GPIO_WritePin(suction_enable_GPIO_Port, suction_enable_Pin, 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4815      	ldr	r0, [pc, #84]	@ (8000fe0 <main+0x1c0>)
 8000f8c:	f002 fd64 	bl	8003a58 <HAL_GPIO_WritePin>
 8000f90:	e008      	b.n	8000fa4 <main+0x184>
	  }
	  else if (suction_signal == 0){
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <main+0x1bc>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d104      	bne.n	8000fa4 <main+0x184>
		  HAL_GPIO_WritePin(suction_enable_GPIO_Port, suction_enable_Pin, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <main+0x1c0>)
 8000fa0:	f002 fd5a 	bl	8003a58 <HAL_GPIO_WritePin>
	  }

	  speed_control();
 8000fa4:	f000 fc60 	bl	8001868 <speed_control>
	  control_motors();
 8000fa8:	f000 fdf8 	bl	8001b9c <control_motors>

	  HAL_Delay(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f001 fa05 	bl	80023bc <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_raw, 12);
 8000fb2:	e763      	b.n	8000e7c <main+0x5c>
 8000fb4:	200001a8 	.word	0x200001a8
 8000fb8:	200001f0 	.word	0x200001f0
 8000fbc:	20000248 	.word	0x20000248
 8000fc0:	2000002c 	.word	0x2000002c
 8000fc4:	200002fc 	.word	0x200002fc
 8000fc8:	20000260 	.word	0x20000260
 8000fcc:	55555556 	.word	0x55555556
 8000fd0:	20000238 	.word	0x20000238
 8000fd4:	200000fc 	.word	0x200000fc
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	200002fd 	.word	0x200002fd
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	@ 0x50
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2234      	movs	r2, #52	@ 0x34
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fe08 	bl	8005c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <SystemClock_Config+0xdc>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <SystemClock_Config+0xdc>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	@ 0x40
 8001018:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <SystemClock_Config+0xdc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001024:	2300      	movs	r3, #0
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <SystemClock_Config+0xe0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a25      	ldr	r2, [pc, #148]	@ (80010c4 <SystemClock_Config+0xe0>)
 800102e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <SystemClock_Config+0xe0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001054:	2308      	movs	r3, #8
 8001056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001058:	23b4      	movs	r3, #180	@ 0xb4
 800105a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001064:	2302      	movs	r3, #2
 8001066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fbbf 	bl	80047f0 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001078:	f000 fe1c 	bl	8001cb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800107c:	f003 f8b8 	bl	80041f0 <HAL_PWREx_EnableOverDrive>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001086:	f000 fe15 	bl	8001cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2302      	movs	r3, #2
 8001090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001096:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2105      	movs	r1, #5
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 f8f1 	bl	8004290 <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010b4:	f000 fdfe 	bl	8001cb4 <Error_Handler>
  }
}
 80010b8:	bf00      	nop
 80010ba:	3750      	adds	r7, #80	@ 0x50
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010da:	4b44      	ldr	r3, [pc, #272]	@ (80011ec <MX_ADC1_Init+0x124>)
 80010dc:	4a44      	ldr	r2, [pc, #272]	@ (80011f0 <MX_ADC1_Init+0x128>)
 80010de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e0:	4b42      	ldr	r3, [pc, #264]	@ (80011ec <MX_ADC1_Init+0x124>)
 80010e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e8:	4b40      	ldr	r3, [pc, #256]	@ (80011ec <MX_ADC1_Init+0x124>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010ee:	4b3f      	ldr	r3, [pc, #252]	@ (80011ec <MX_ADC1_Init+0x124>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f4:	4b3d      	ldr	r3, [pc, #244]	@ (80011ec <MX_ADC1_Init+0x124>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fa:	4b3c      	ldr	r3, [pc, #240]	@ (80011ec <MX_ADC1_Init+0x124>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b3a      	ldr	r3, [pc, #232]	@ (80011ec <MX_ADC1_Init+0x124>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001108:	4b38      	ldr	r3, [pc, #224]	@ (80011ec <MX_ADC1_Init+0x124>)
 800110a:	4a3a      	ldr	r2, [pc, #232]	@ (80011f4 <MX_ADC1_Init+0x12c>)
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110e:	4b37      	ldr	r3, [pc, #220]	@ (80011ec <MX_ADC1_Init+0x124>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001114:	4b35      	ldr	r3, [pc, #212]	@ (80011ec <MX_ADC1_Init+0x124>)
 8001116:	2206      	movs	r2, #6
 8001118:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800111a:	4b34      	ldr	r3, [pc, #208]	@ (80011ec <MX_ADC1_Init+0x124>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001122:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <MX_ADC1_Init+0x124>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001128:	4830      	ldr	r0, [pc, #192]	@ (80011ec <MX_ADC1_Init+0x124>)
 800112a:	f001 f96b 	bl	8002404 <HAL_ADC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001134:	f000 fdbe 	bl	8001cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4828      	ldr	r0, [pc, #160]	@ (80011ec <MX_ADC1_Init+0x124>)
 800114a:	f001 fac3 	bl	80026d4 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001154:	f000 fdae 	bl	8001cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001158:	2301      	movs	r3, #1
 800115a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800115c:	2302      	movs	r3, #2
 800115e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4821      	ldr	r0, [pc, #132]	@ (80011ec <MX_ADC1_Init+0x124>)
 8001166:	f001 fab5 	bl	80026d4 <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001170:	f000 fda0 	bl	8001cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001174:	2307      	movs	r3, #7
 8001176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001178:	2303      	movs	r3, #3
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	481a      	ldr	r0, [pc, #104]	@ (80011ec <MX_ADC1_Init+0x124>)
 8001182:	f001 faa7 	bl	80026d4 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800118c:	f000 fd92 	bl	8001cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001190:	230a      	movs	r3, #10
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001194:	2304      	movs	r3, #4
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4813      	ldr	r0, [pc, #76]	@ (80011ec <MX_ADC1_Init+0x124>)
 800119e:	f001 fa99 	bl	80026d4 <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80011a8:	f000 fd84 	bl	8001cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011ac:	2304      	movs	r3, #4
 80011ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011b0:	2305      	movs	r3, #5
 80011b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <MX_ADC1_Init+0x124>)
 80011ba:	f001 fa8b 	bl	80026d4 <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80011c4:	f000 fd76 	bl	8001cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011c8:	230b      	movs	r3, #11
 80011ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80011cc:	2306      	movs	r3, #6
 80011ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_ADC1_Init+0x124>)
 80011d6:	f001 fa7d 	bl	80026d4 <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80011e0:	f000 fd68 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000002c 	.word	0x2000002c
 80011f0:	40012000 	.word	0x40012000
 80011f4:	0f000001 	.word	0x0f000001

080011f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_CAN1_Init+0x64>)
 80011fe:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <MX_CAN1_Init+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_CAN1_Init+0x64>)
 8001204:	220f      	movs	r2, #15
 8001206:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_CAN1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_CAN1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_CAN1_Init+0x64>)
 8001216:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800121a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_CAN1_Init+0x64>)
 800121e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001222:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <MX_CAN1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_CAN1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_CAN1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_CAN1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_CAN1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_CAN1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_CAN1_Init+0x64>)
 800124a:	f001 fcf3 	bl	8002c34 <HAL_CAN_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001254:	f000 fd2e 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000d4 	.word	0x200000d4
 8001260:	40006400 	.word	0x40006400

08001264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_I2C1_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <MX_I2C1_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001270:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <MX_I2C1_Init+0x58>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001282:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <MX_I2C1_Init+0x50>)
 80012a2:	f002 fc0d 	bl	8003ac0 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 fd02 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000fc 	.word	0x200000fc
 80012b8:	40005400 	.word	0x40005400
 80012bc:	000186a0 	.word	0x000186a0

080012c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012c6:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <MX_SPI1_Init+0x68>)
 80012c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012f4:	2208      	movs	r2, #8
 80012f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_SPI1_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <MX_SPI1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_SPI1_Init+0x64>)
 800130c:	220a      	movs	r2, #10
 800130e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	@ (8001324 <MX_SPI1_Init+0x64>)
 8001312:	f003 fd0b 	bl	8004d2c <HAL_SPI_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800131c:	f000 fcca 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000150 	.word	0x20000150
 8001328:	40013000 	.word	0x40013000

0800132c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b096      	sub	sp, #88	@ 0x58
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2220      	movs	r2, #32
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f004 fc4f 	bl	8005c08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136a:	4b50      	ldr	r3, [pc, #320]	@ (80014ac <MX_TIM1_Init+0x180>)
 800136c:	4a50      	ldr	r2, [pc, #320]	@ (80014b0 <MX_TIM1_Init+0x184>)
 800136e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001370:	4b4e      	ldr	r3, [pc, #312]	@ (80014ac <MX_TIM1_Init+0x180>)
 8001372:	2263      	movs	r2, #99	@ 0x63
 8001374:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b4d      	ldr	r3, [pc, #308]	@ (80014ac <MX_TIM1_Init+0x180>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096-1;
 800137c:	4b4b      	ldr	r3, [pc, #300]	@ (80014ac <MX_TIM1_Init+0x180>)
 800137e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001382:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b49      	ldr	r3, [pc, #292]	@ (80014ac <MX_TIM1_Init+0x180>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138a:	4b48      	ldr	r3, [pc, #288]	@ (80014ac <MX_TIM1_Init+0x180>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b46      	ldr	r3, [pc, #280]	@ (80014ac <MX_TIM1_Init+0x180>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001396:	4845      	ldr	r0, [pc, #276]	@ (80014ac <MX_TIM1_Init+0x180>)
 8001398:	f003 fd51 	bl	8004e3e <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013a2:	f000 fc87 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013b0:	4619      	mov	r1, r3
 80013b2:	483e      	ldr	r0, [pc, #248]	@ (80014ac <MX_TIM1_Init+0x180>)
 80013b4:	f003 ff76 	bl	80052a4 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013be:	f000 fc79 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013c2:	483a      	ldr	r0, [pc, #232]	@ (80014ac <MX_TIM1_Init+0x180>)
 80013c4:	f003 fd8a 	bl	8004edc <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ce:	f000 fc71 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013de:	4619      	mov	r1, r3
 80013e0:	4832      	ldr	r0, [pc, #200]	@ (80014ac <MX_TIM1_Init+0x180>)
 80013e2:	f004 fb43 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013ec:	f000 fc62 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f0:	2360      	movs	r3, #96	@ 0x60
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	4825      	ldr	r0, [pc, #148]	@ (80014ac <MX_TIM1_Init+0x180>)
 8001416:	f003 fe83 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001420:	f000 fc48 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001428:	2204      	movs	r2, #4
 800142a:	4619      	mov	r1, r3
 800142c:	481f      	ldr	r0, [pc, #124]	@ (80014ac <MX_TIM1_Init+0x180>)
 800142e:	f003 fe77 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001438:	f000 fc3c 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	2208      	movs	r2, #8
 8001442:	4619      	mov	r1, r3
 8001444:	4819      	ldr	r0, [pc, #100]	@ (80014ac <MX_TIM1_Init+0x180>)
 8001446:	f003 fe6b 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001450:	f000 fc30 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	220c      	movs	r2, #12
 800145a:	4619      	mov	r1, r3
 800145c:	4813      	ldr	r0, [pc, #76]	@ (80014ac <MX_TIM1_Init+0x180>)
 800145e:	f003 fe5f 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001468:	f000 fc24 	bl	8001cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_TIM1_Init+0x180>)
 8001490:	f004 fb68 	bl	8005b64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800149a:	f000 fc0b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800149e:	4803      	ldr	r0, [pc, #12]	@ (80014ac <MX_TIM1_Init+0x180>)
 80014a0:	f000 fe24 	bl	80020ec <HAL_TIM_MspPostInit>

}
 80014a4:	bf00      	nop
 80014a6:	3758      	adds	r7, #88	@ 0x58
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200001a8 	.word	0x200001a8
 80014b0:	40010000 	.word	0x40010000

080014b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	@ 0x38
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e4:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 80014e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80014ec:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 80014ee:	2231      	movs	r2, #49	@ 0x31
 80014f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096-1;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 80014fa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80014fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150c:	4828      	ldr	r0, [pc, #160]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 800150e:	f003 fc96 	bl	8004e3e <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001518:	f000 fbcc 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001526:	4619      	mov	r1, r3
 8001528:	4821      	ldr	r0, [pc, #132]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 800152a:	f003 febb 	bl	80052a4 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001534:	f000 fbbe 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001538:	481d      	ldr	r0, [pc, #116]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 800153a:	f003 fccf 	bl	8004edc <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001544:	f000 fbb6 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4619      	mov	r1, r3
 8001556:	4816      	ldr	r0, [pc, #88]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 8001558:	f004 fa88 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001562:	f000 fba7 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001566:	2360      	movs	r3, #96	@ 0x60
 8001568:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 800157e:	f003 fdcf 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001588:	f000 fb94 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2204      	movs	r2, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 8001594:	f003 fdc4 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800159e:	f000 fb89 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015a2:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <MX_TIM2_Init+0xfc>)
 80015a4:	f000 fda2 	bl	80020ec <HAL_TIM_MspPostInit>

}
 80015a8:	bf00      	nop
 80015aa:	3738      	adds	r7, #56	@ 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200001f0 	.word	0x200001f0

080015b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <MX_DMA_Init+0x3c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <MX_DMA_Init+0x3c>)
 80015c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <MX_DMA_Init+0x3c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2038      	movs	r0, #56	@ 0x38
 80015dc:	f001 fd01 	bl	8002fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015e0:	2038      	movs	r0, #56	@ 0x38
 80015e2:	f001 fd1a 	bl	800301a <HAL_NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b4c      	ldr	r3, [pc, #304]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a4b      	ldr	r2, [pc, #300]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <MX_GPIO_Init+0x14c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b45      	ldr	r3, [pc, #276]	@ (8001740 <MX_GPIO_Init+0x14c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a44      	ldr	r2, [pc, #272]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b42      	ldr	r3, [pc, #264]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b3e      	ldr	r3, [pc, #248]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a3d      	ldr	r2, [pc, #244]	@ (8001740 <MX_GPIO_Init+0x14c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b37      	ldr	r3, [pc, #220]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a36      	ldr	r2, [pc, #216]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b30      	ldr	r3, [pc, #192]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a2f      	ldr	r2, [pc, #188]	@ (8001740 <MX_GPIO_Init+0x14c>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <MX_GPIO_Init+0x14c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C6_In1_Pin|C6_In2_Pin|C2_In2_Pin|C2_In1_Pin
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 7173 	mov.w	r1, #972	@ 0x3cc
 800169c:	4829      	ldr	r0, [pc, #164]	@ (8001744 <MX_GPIO_Init+0x150>)
 800169e:	f002 f9db 	bl	8003a58 <HAL_GPIO_WritePin>
                          |C1_In2_Pin|C1_In1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2120      	movs	r1, #32
 80016a6:	4828      	ldr	r0, [pc, #160]	@ (8001748 <MX_GPIO_Init+0x154>)
 80016a8:	f002 f9d6 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C5_In1_Pin|C5_In2_Pin|CE_Pin|CSN_Pin
 80016ac:	2200      	movs	r2, #0
 80016ae:	f24f 4107 	movw	r1, #62471	@ 0xf407
 80016b2:	4826      	ldr	r0, [pc, #152]	@ (800174c <MX_GPIO_Init+0x158>)
 80016b4:	f002 f9d0 	bl	8003a58 <HAL_GPIO_WritePin>
                          |C4_In2_Pin|C4_In1_Pin|C3_In2_Pin|C3_In1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(suction_enable_GPIO_Port, suction_enable_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2104      	movs	r1, #4
 80016bc:	4824      	ldr	r0, [pc, #144]	@ (8001750 <MX_GPIO_Init+0x15c>)
 80016be:	f002 f9cb 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C6_In1_Pin C6_In2_Pin C2_In2_Pin C2_In1_Pin
                           C1_In2_Pin C1_In1_Pin */
  GPIO_InitStruct.Pin = C6_In1_Pin|C6_In2_Pin|C2_In2_Pin|C2_In1_Pin
 80016c2:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 80016c6:	617b      	str	r3, [r7, #20]
                          |C1_In2_Pin|C1_In1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	481a      	ldr	r0, [pc, #104]	@ (8001744 <MX_GPIO_Init+0x150>)
 80016dc:	f002 f828 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016e0:	2320      	movs	r3, #32
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4814      	ldr	r0, [pc, #80]	@ (8001748 <MX_GPIO_Init+0x154>)
 80016f8:	f002 f81a 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : C5_In1_Pin C5_In2_Pin CE_Pin CSN_Pin
                           C4_In2_Pin C4_In1_Pin C3_In2_Pin C3_In1_Pin */
  GPIO_InitStruct.Pin = C5_In1_Pin|C5_In2_Pin|CE_Pin|CSN_Pin
 80016fc:	f24f 4307 	movw	r3, #62471	@ 0xf407
 8001700:	617b      	str	r3, [r7, #20]
                          |C4_In2_Pin|C4_In1_Pin|C3_In2_Pin|C3_In1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	480d      	ldr	r0, [pc, #52]	@ (800174c <MX_GPIO_Init+0x158>)
 8001716:	f002 f80b 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : suction_enable_Pin */
  GPIO_InitStruct.Pin = suction_enable_Pin;
 800171a:	2304      	movs	r3, #4
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(suction_enable_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	@ (8001750 <MX_GPIO_Init+0x15c>)
 8001732:	f001 fffd 	bl	8003730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	@ 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40020800 	.word	0x40020800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40020c00 	.word	0x40020c00

08001754 <unpack_data>:

/* USER CODE BEGIN 4 */

void unpack_data(void) {
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

	target_pot[0] = (uint16_t) RxData[0];
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <unpack_data+0xe4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b37      	ldr	r3, [pc, #220]	@ (800183c <unpack_data+0xe8>)
 8001760:	801a      	strh	r2, [r3, #0]
	target_pot[0] |= (uint16_t) (RxData[1]<<8);
 8001762:	4b36      	ldr	r3, [pc, #216]	@ (800183c <unpack_data+0xe8>)
 8001764:	881a      	ldrh	r2, [r3, #0]
 8001766:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <unpack_data+0xe4>)
 8001768:	785b      	ldrb	r3, [r3, #1]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b29b      	uxth	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b32      	ldr	r3, [pc, #200]	@ (800183c <unpack_data+0xe8>)
 8001774:	801a      	strh	r2, [r3, #0]

	target_pot[1] = (uint16_t) RxData[2];
 8001776:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <unpack_data+0xe4>)
 8001778:	789b      	ldrb	r3, [r3, #2]
 800177a:	461a      	mov	r2, r3
 800177c:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <unpack_data+0xe8>)
 800177e:	805a      	strh	r2, [r3, #2]
	target_pot[1] |= (uint16_t) (RxData[3]<<8);
 8001780:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <unpack_data+0xe8>)
 8001782:	885a      	ldrh	r2, [r3, #2]
 8001784:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <unpack_data+0xe4>)
 8001786:	78db      	ldrb	r3, [r3, #3]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b29b      	uxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <unpack_data+0xe8>)
 8001792:	805a      	strh	r2, [r3, #2]

	target_pot[2] = (uint16_t) RxData[4];
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <unpack_data+0xe4>)
 8001796:	791b      	ldrb	r3, [r3, #4]
 8001798:	461a      	mov	r2, r3
 800179a:	4b28      	ldr	r3, [pc, #160]	@ (800183c <unpack_data+0xe8>)
 800179c:	809a      	strh	r2, [r3, #4]
	target_pot[2] |= (uint16_t) (RxData[5]<<8);
 800179e:	4b27      	ldr	r3, [pc, #156]	@ (800183c <unpack_data+0xe8>)
 80017a0:	889a      	ldrh	r2, [r3, #4]
 80017a2:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <unpack_data+0xe4>)
 80017a4:	795b      	ldrb	r3, [r3, #5]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b23      	ldr	r3, [pc, #140]	@ (800183c <unpack_data+0xe8>)
 80017b0:	809a      	strh	r2, [r3, #4]

	target_pot[3] = (uint16_t) RxData[6];
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <unpack_data+0xe4>)
 80017b4:	799b      	ldrb	r3, [r3, #6]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b20      	ldr	r3, [pc, #128]	@ (800183c <unpack_data+0xe8>)
 80017ba:	80da      	strh	r2, [r3, #6]
	target_pot[3] |= (uint16_t) (RxData[7]<<8);
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <unpack_data+0xe8>)
 80017be:	88da      	ldrh	r2, [r3, #6]
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <unpack_data+0xe4>)
 80017c2:	79db      	ldrb	r3, [r3, #7]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <unpack_data+0xe8>)
 80017ce:	80da      	strh	r2, [r3, #6]

	target_pot[4] = (uint16_t) RxData[8];
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <unpack_data+0xe4>)
 80017d2:	7a1b      	ldrb	r3, [r3, #8]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <unpack_data+0xe8>)
 80017d8:	811a      	strh	r2, [r3, #8]
	target_pot[4] |= (uint16_t) (RxData[9]<<8);
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <unpack_data+0xe8>)
 80017dc:	891a      	ldrh	r2, [r3, #8]
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <unpack_data+0xe4>)
 80017e0:	7a5b      	ldrb	r3, [r3, #9]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <unpack_data+0xe8>)
 80017ec:	811a      	strh	r2, [r3, #8]

	target_pot[5] = (uint16_t) RxData[10];
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <unpack_data+0xe4>)
 80017f0:	7a9b      	ldrb	r3, [r3, #10]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <unpack_data+0xe8>)
 80017f6:	815a      	strh	r2, [r3, #10]
	target_pot[5] |= (uint16_t) (RxData[11]<<8);
 80017f8:	4b10      	ldr	r3, [pc, #64]	@ (800183c <unpack_data+0xe8>)
 80017fa:	895a      	ldrh	r2, [r3, #10]
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <unpack_data+0xe4>)
 80017fe:	7adb      	ldrb	r3, [r3, #11]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	b29b      	uxth	r3, r3
 8001804:	4313      	orrs	r3, r2
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <unpack_data+0xe8>)
 800180a:	815a      	strh	r2, [r3, #10]

	suction_signal = (uint8_t) RxData[12] & 0x01;
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <unpack_data+0xe4>)
 800180e:	7b1b      	ldrb	r3, [r3, #12]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <unpack_data+0xec>)
 8001818:	701a      	strb	r2, [r3, #0]
	motor_en_signal = (uint8_t) (RxData[12] >> 1) & 0x01;
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <unpack_data+0xe4>)
 800181c:	7b1b      	ldrb	r3, [r3, #12]
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <unpack_data+0xf0>)
 800182a:	701a      	strb	r2, [r3, #0]



}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000238 	.word	0x20000238
 800183c:	2000026c 	.word	0x2000026c
 8001840:	200002fd 	.word	0x200002fd
 8001844:	200002fe 	.word	0x200002fe

08001848 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	adc_ready = 1;
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]

}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200002fc 	.word	0x200002fc

08001868 <speed_control>:


void speed_control(void) {
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b098      	sub	sp, #96	@ 0x60
 800186c:	af00      	add	r7, sp, #0


	int m_signal;
	double p[6] = {24,24,24,24,24,24};
 800186e:	4ba6      	ldr	r3, [pc, #664]	@ (8001b08 <speed_control+0x2a0>)
 8001870:	463c      	mov	r4, r7
 8001872:	461d      	mov	r5, r3
 8001874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double T_i = 20;
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4ba0      	ldr	r3, [pc, #640]	@ (8001b0c <speed_control+0x2a4>)
 800188a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double T_d = 15;
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b9f      	ldr	r3, [pc, #636]	@ (8001b10 <speed_control+0x2a8>)
 8001894:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	float elapsed_time = 0.01;
 8001898:	4b9e      	ldr	r3, [pc, #632]	@ (8001b14 <speed_control+0x2ac>)
 800189a:	647b      	str	r3, [r7, #68]	@ 0x44
	double error_curr;
	double d_error;


	for (int i=0; i<6;i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018a0:	e16f      	b.n	8001b82 <speed_control+0x31a>

		// error term
		error_curr = target_pot[i] - curr_pot[i];
 80018a2:	4a9d      	ldr	r2, [pc, #628]	@ (8001b18 <speed_control+0x2b0>)
 80018a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4a9b      	ldr	r2, [pc, #620]	@ (8001b1c <speed_control+0x2b4>)
 80018ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b4:	1acb      	subs	r3, r1, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fdf8 	bl	80004ac <__aeabi_i2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

		// derivative error
		d_error = (error_curr - error[i]);
 80018c4:	4a96      	ldr	r2, [pc, #600]	@ (8001b20 <speed_control+0x2b8>)
 80018c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018d4:	f7fe fc9c 	bl	8000210 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

		// update error array
		error[i] = error_curr;
 80018e0:	4a8f      	ldr	r2, [pc, #572]	@ (8001b20 <speed_control+0x2b8>)
 80018e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	18d1      	adds	r1, r2, r3
 80018e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018ec:	e9c1 2300 	strd	r2, r3, [r1]

		// integral error calculation and limiting wind up
		i_e[i] += elapsed_time * error_curr;
 80018f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001b24 <speed_control+0x2bc>)
 80018f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018fc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80018fe:	f7fe fde7 	bl	80004d0 <__aeabi_f2d>
 8001902:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001906:	f7fe fe3b 	bl	8000580 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe fc7f 	bl	8000214 <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4882      	ldr	r0, [pc, #520]	@ (8001b24 <speed_control+0x2bc>)
 800191c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800191e:	00c9      	lsls	r1, r1, #3
 8001920:	4401      	add	r1, r0
 8001922:	e9c1 2300 	strd	r2, r3, [r1]

		if (T_i * i_e[i] > 4095) i_e[i] = 4095 / T_i;
 8001926:	4a7f      	ldr	r2, [pc, #508]	@ (8001b24 <speed_control+0x2bc>)
 8001928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001932:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001936:	f7fe fe23 	bl	8000580 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	a36d      	add	r3, pc, #436	@ (adr r3, 8001af8 <speed_control+0x290>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7ff f8aa 	bl	8000aa0 <__aeabi_dcmpgt>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00f      	beq.n	8001972 <speed_control+0x10a>
 8001952:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001956:	a168      	add	r1, pc, #416	@ (adr r1, 8001af8 <speed_control+0x290>)
 8001958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800195c:	f7fe ff3a 	bl	80007d4 <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	486f      	ldr	r0, [pc, #444]	@ (8001b24 <speed_control+0x2bc>)
 8001966:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001968:	00c9      	lsls	r1, r1, #3
 800196a:	4401      	add	r1, r0
 800196c:	e9c1 2300 	strd	r2, r3, [r1]
 8001970:	e024      	b.n	80019bc <speed_control+0x154>

		else if (T_i * i_e[i] < -4095) i_e[i] = -4095 / T_i;
 8001972:	4a6c      	ldr	r2, [pc, #432]	@ (8001b24 <speed_control+0x2bc>)
 8001974:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001982:	f7fe fdfd 	bl	8000580 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	a35c      	add	r3, pc, #368	@ (adr r3, 8001b00 <speed_control+0x298>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7ff f866 	bl	8000a64 <__aeabi_dcmplt>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00e      	beq.n	80019bc <speed_control+0x154>
 800199e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019a2:	a157      	add	r1, pc, #348	@ (adr r1, 8001b00 <speed_control+0x298>)
 80019a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019a8:	f7fe ff14 	bl	80007d4 <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	485c      	ldr	r0, [pc, #368]	@ (8001b24 <speed_control+0x2bc>)
 80019b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80019b4:	00c9      	lsls	r1, r1, #3
 80019b6:	4401      	add	r1, r0
 80019b8:	e9c1 2300 	strd	r2, r3, [r1]

		// motor control signal
		m_signal = (int) p[i] * error_curr + T_i * i_e[i] + T_d * d_error;
 80019bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	3360      	adds	r3, #96	@ 0x60
 80019c2:	443b      	add	r3, r7
 80019c4:	3b60      	subs	r3, #96	@ 0x60
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f871 	bl	8000ab4 <__aeabi_d2iz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd69 	bl	80004ac <__aeabi_i2d>
 80019da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019de:	f7fe fdcf 	bl	8000580 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4614      	mov	r4, r2
 80019e8:	461d      	mov	r5, r3
 80019ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001b24 <speed_control+0x2bc>)
 80019ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019fa:	f7fe fdc1 	bl	8000580 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fc05 	bl	8000214 <__adddf3>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4614      	mov	r4, r2
 8001a10:	461d      	mov	r5, r3
 8001a12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001a1a:	f7fe fdb1 	bl	8000580 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4620      	mov	r0, r4
 8001a24:	4629      	mov	r1, r5
 8001a26:	f7fe fbf5 	bl	8000214 <__adddf3>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f83f 	bl	8000ab4 <__aeabi_d2iz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	65fb      	str	r3, [r7, #92]	@ 0x5c

		// cap the motor PWM signal at max value
		if (m_signal > 3500) m_signal = 3500;
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a3c:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001a40:	4293      	cmp	r3, r2
 8001a42:	dd03      	ble.n	8001a4c <speed_control+0x1e4>
 8001a44:	f640 53ac 	movw	r3, #3500	@ 0xdac
 8001a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a4a:	e005      	b.n	8001a58 <speed_control+0x1f0>
		else if (m_signal < -3500) m_signal = -3500;
 8001a4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a4e:	4a36      	ldr	r2, [pc, #216]	@ (8001b28 <speed_control+0x2c0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	da01      	bge.n	8001a58 <speed_control+0x1f0>
 8001a54:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <speed_control+0x2c0>)
 8001a56:	65fb      	str	r3, [r7, #92]	@ 0x5c


		if (m_signal > 0 && motor_en_signal == 1) {
 8001a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	dd23      	ble.n	8001aa6 <speed_control+0x23e>
 8001a5e:	4b33      	ldr	r3, [pc, #204]	@ (8001b2c <speed_control+0x2c4>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d11f      	bne.n	8001aa6 <speed_control+0x23e>
			mot_control_signal[i][0] =  m_signal;
 8001a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a68:	b298      	uxth	r0, r3
 8001a6a:	4931      	ldr	r1, [pc, #196]	@ (8001b30 <speed_control+0x2c8>)
 8001a6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	440b      	add	r3, r1
 8001a78:	4602      	mov	r2, r0
 8001a7a:	801a      	strh	r2, [r3, #0]
			mot_control_signal[i][1] = 1;
 8001a7c:	492c      	ldr	r1, [pc, #176]	@ (8001b30 <speed_control+0x2c8>)
 8001a7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	440b      	add	r3, r1
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	801a      	strh	r2, [r3, #0]
			mot_control_signal[i][2] = 0;
 8001a90:	4927      	ldr	r1, [pc, #156]	@ (8001b30 <speed_control+0x2c8>)
 8001a92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	801a      	strh	r2, [r3, #0]
 8001aa4:	e06a      	b.n	8001b7c <speed_control+0x314>

		}
		else if (m_signal < 0 && motor_en_signal == 1) {
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da43      	bge.n	8001b34 <speed_control+0x2cc>
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <speed_control+0x2c4>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d13f      	bne.n	8001b34 <speed_control+0x2cc>
			mot_control_signal[i][0] = - m_signal;
 8001ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	425b      	negs	r3, r3
 8001aba:	b298      	uxth	r0, r3
 8001abc:	491c      	ldr	r1, [pc, #112]	@ (8001b30 <speed_control+0x2c8>)
 8001abe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	440b      	add	r3, r1
 8001aca:	4602      	mov	r2, r0
 8001acc:	801a      	strh	r2, [r3, #0]
			mot_control_signal[i][1] = 0;
 8001ace:	4918      	ldr	r1, [pc, #96]	@ (8001b30 <speed_control+0x2c8>)
 8001ad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	440b      	add	r3, r1
 8001adc:	3302      	adds	r3, #2
 8001ade:	2200      	movs	r2, #0
 8001ae0:	801a      	strh	r2, [r3, #0]
			mot_control_signal[i][2] = 1;
 8001ae2:	4913      	ldr	r1, [pc, #76]	@ (8001b30 <speed_control+0x2c8>)
 8001ae4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	440b      	add	r3, r1
 8001af0:	3304      	adds	r3, #4
 8001af2:	2201      	movs	r2, #1
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	e041      	b.n	8001b7c <speed_control+0x314>
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40affe00 	.word	0x40affe00
 8001b00:	00000000 	.word	0x00000000
 8001b04:	c0affe00 	.word	0xc0affe00
 8001b08:	08005c78 	.word	0x08005c78
 8001b0c:	40340000 	.word	0x40340000
 8001b10:	402e0000 	.word	0x402e0000
 8001b14:	3c23d70a 	.word	0x3c23d70a
 8001b18:	2000026c 	.word	0x2000026c
 8001b1c:	20000260 	.word	0x20000260
 8001b20:	200002a8 	.word	0x200002a8
 8001b24:	20000278 	.word	0x20000278
 8001b28:	fffff254 	.word	0xfffff254
 8001b2c:	200002fe 	.word	0x200002fe
 8001b30:	200002d8 	.word	0x200002d8
		}

		else if (m_signal == 0 || motor_en_signal == 0) {
 8001b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <speed_control+0x2da>
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <speed_control+0x32c>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d11c      	bne.n	8001b7c <speed_control+0x314>
			mot_control_signal[i][0] = 0;
 8001b42:	4915      	ldr	r1, [pc, #84]	@ (8001b98 <speed_control+0x330>)
 8001b44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	440b      	add	r3, r1
 8001b50:	2200      	movs	r2, #0
 8001b52:	801a      	strh	r2, [r3, #0]
			mot_control_signal[i][1] = 0;
 8001b54:	4910      	ldr	r1, [pc, #64]	@ (8001b98 <speed_control+0x330>)
 8001b56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	440b      	add	r3, r1
 8001b62:	3302      	adds	r3, #2
 8001b64:	2200      	movs	r2, #0
 8001b66:	801a      	strh	r2, [r3, #0]
			mot_control_signal[i][2] = 0;
 8001b68:	490b      	ldr	r1, [pc, #44]	@ (8001b98 <speed_control+0x330>)
 8001b6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	440b      	add	r3, r1
 8001b76:	3304      	adds	r3, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<6;i++) {
 8001b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b7e:	3301      	adds	r3, #1
 8001b80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	f77f ae8c 	ble.w	80018a2 <speed_control+0x3a>

		}
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	3760      	adds	r7, #96	@ 0x60
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdb0      	pop	{r4, r5, r7, pc}
 8001b94:	200002fe 	.word	0x200002fe
 8001b98:	200002d8 	.word	0x200002d8

08001b9c <control_motors>:


void control_motors(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(C1_In1_GPIO_Port, C1_In1_Pin, mot_control_signal[0][1]);
 8001ba0:	4b40      	ldr	r3, [pc, #256]	@ (8001ca4 <control_motors+0x108>)
 8001ba2:	885b      	ldrh	r3, [r3, #2]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bac:	483e      	ldr	r0, [pc, #248]	@ (8001ca8 <control_motors+0x10c>)
 8001bae:	f001 ff53 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C1_In2_GPIO_Port, C1_In2_Pin, mot_control_signal[0][2]);
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca4 <control_motors+0x108>)
 8001bb4:	889b      	ldrh	r3, [r3, #4]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bbe:	483a      	ldr	r0, [pc, #232]	@ (8001ca8 <control_motors+0x10c>)
 8001bc0:	f001 ff4a 	bl	8003a58 <HAL_GPIO_WritePin>
	TIM1->CCR1 = mot_control_signal[0][0];
 8001bc4:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <control_motors+0x108>)
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	4b38      	ldr	r3, [pc, #224]	@ (8001cac <control_motors+0x110>)
 8001bca:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(C2_In1_GPIO_Port, C2_In1_Pin, mot_control_signal[1][1]);
 8001bcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <control_motors+0x108>)
 8001bce:	891b      	ldrh	r3, [r3, #8]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2180      	movs	r1, #128	@ 0x80
 8001bd6:	4834      	ldr	r0, [pc, #208]	@ (8001ca8 <control_motors+0x10c>)
 8001bd8:	f001 ff3e 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_In2_GPIO_Port, C2_In2_Pin, mot_control_signal[1][2]);
 8001bdc:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <control_motors+0x108>)
 8001bde:	895b      	ldrh	r3, [r3, #10]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	2140      	movs	r1, #64	@ 0x40
 8001be6:	4830      	ldr	r0, [pc, #192]	@ (8001ca8 <control_motors+0x10c>)
 8001be8:	f001 ff36 	bl	8003a58 <HAL_GPIO_WritePin>
	TIM1->CCR2 = mot_control_signal[1][0];
 8001bec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca4 <control_motors+0x108>)
 8001bee:	88da      	ldrh	r2, [r3, #6]
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001cac <control_motors+0x110>)
 8001bf2:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(C3_In1_GPIO_Port, C3_In1_Pin, mot_control_signal[2][1]);
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <control_motors+0x108>)
 8001bf6:	89db      	ldrh	r3, [r3, #14]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c00:	482b      	ldr	r0, [pc, #172]	@ (8001cb0 <control_motors+0x114>)
 8001c02:	f001 ff29 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_In2_GPIO_Port, C3_In2_Pin, mot_control_signal[2][2]);
 8001c06:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <control_motors+0x108>)
 8001c08:	8a1b      	ldrh	r3, [r3, #16]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c12:	4827      	ldr	r0, [pc, #156]	@ (8001cb0 <control_motors+0x114>)
 8001c14:	f001 ff20 	bl	8003a58 <HAL_GPIO_WritePin>
	TIM1->CCR3 = mot_control_signal[2][0];
 8001c18:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <control_motors+0x108>)
 8001c1a:	899a      	ldrh	r2, [r3, #12]
 8001c1c:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <control_motors+0x110>)
 8001c1e:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_GPIO_WritePin(C4_In1_GPIO_Port, C4_In1_Pin, mot_control_signal[3][1]);
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <control_motors+0x108>)
 8001c22:	8a9b      	ldrh	r3, [r3, #20]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c2c:	4820      	ldr	r0, [pc, #128]	@ (8001cb0 <control_motors+0x114>)
 8001c2e:	f001 ff13 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_In2_GPIO_Port, C4_In2_Pin, mot_control_signal[3][2]);
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <control_motors+0x108>)
 8001c34:	8adb      	ldrh	r3, [r3, #22]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c3e:	481c      	ldr	r0, [pc, #112]	@ (8001cb0 <control_motors+0x114>)
 8001c40:	f001 ff0a 	bl	8003a58 <HAL_GPIO_WritePin>
	TIM1->CCR4 = mot_control_signal[3][0];
 8001c44:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <control_motors+0x108>)
 8001c46:	8a5a      	ldrh	r2, [r3, #18]
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <control_motors+0x110>)
 8001c4a:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(C5_In1_GPIO_Port, C5_In1_Pin, mot_control_signal[4][1]);
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <control_motors+0x108>)
 8001c4e:	8b5b      	ldrh	r3, [r3, #26]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	2101      	movs	r1, #1
 8001c56:	4816      	ldr	r0, [pc, #88]	@ (8001cb0 <control_motors+0x114>)
 8001c58:	f001 fefe 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C5_In2_GPIO_Port, C5_In2_Pin, mot_control_signal[4][2]);
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <control_motors+0x108>)
 8001c5e:	8b9b      	ldrh	r3, [r3, #28]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	2102      	movs	r1, #2
 8001c66:	4812      	ldr	r0, [pc, #72]	@ (8001cb0 <control_motors+0x114>)
 8001c68:	f001 fef6 	bl	8003a58 <HAL_GPIO_WritePin>
	TIM2->CCR1 = mot_control_signal[4][0];
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <control_motors+0x108>)
 8001c6e:	8b1a      	ldrh	r2, [r3, #24]
 8001c70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(C6_In1_GPIO_Port, C6_In1_Pin, mot_control_signal[5][1]);
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <control_motors+0x108>)
 8001c78:	8c1b      	ldrh	r3, [r3, #32]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2104      	movs	r1, #4
 8001c80:	4809      	ldr	r0, [pc, #36]	@ (8001ca8 <control_motors+0x10c>)
 8001c82:	f001 fee9 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C6_In2_GPIO_Port, C6_In2_Pin, mot_control_signal[5][2]);
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <control_motors+0x108>)
 8001c88:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2108      	movs	r1, #8
 8001c90:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <control_motors+0x10c>)
 8001c92:	f001 fee1 	bl	8003a58 <HAL_GPIO_WritePin>
	TIM2->CCR2 = mot_control_signal[5][0];
 8001c96:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <control_motors+0x108>)
 8001c98:	8bda      	ldrh	r2, [r3, #30]
 8001c9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c9e:	639a      	str	r2, [r3, #56]	@ 0x38


}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200002d8 	.word	0x200002d8
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2120      	movs	r1, #32
 8001cbc:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <Error_Handler+0x1c>)
 8001cbe:	f001 fecb 	bl	8003a58 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8001cc2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001cc6:	f000 fb79 	bl	80023bc <HAL_Delay>

	  NVIC_SystemReset();
 8001cca:	f7ff f893 	bl	8000df4 <__NVIC_SystemReset>
 8001cce:	bf00      	nop
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a3c      	ldr	r2, [pc, #240]	@ (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d171      	bne.n	8001e2a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d56:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a33      	ldr	r2, [pc, #204]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a2c      	ldr	r2, [pc, #176]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e38 <HAL_ADC_MspInit+0x114>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = C4_pot_Pin|C6_pot_Pin;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	4823      	ldr	r0, [pc, #140]	@ (8001e3c <HAL_ADC_MspInit+0x118>)
 8001dae:	f001 fcbf 	bl	8003730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = C1_pot_Pin|C2_pot_Pin|C5_pot_Pin|C3_pot_Pin;
 8001db2:	2393      	movs	r3, #147	@ 0x93
 8001db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db6:	2303      	movs	r3, #3
 8001db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	481e      	ldr	r0, [pc, #120]	@ (8001e40 <HAL_ADC_MspInit+0x11c>)
 8001dc6:	f001 fcb3 	bl	8003730 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dca:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e48 <HAL_ADC_MspInit+0x124>)
 8001dce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dea:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001dec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001df0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001df4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e0e:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001e10:	f001 f91e 	bl	8003050 <HAL_DMA_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001e1a:	f7ff ff4b 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a08      	ldr	r2, [pc, #32]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001e22:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_ADC_MspInit+0x120>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3728      	adds	r7, #40	@ 0x28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40012000 	.word	0x40012000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	20000074 	.word	0x20000074
 8001e48:	40026410 	.word	0x40026410

08001e4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a29      	ldr	r2, [pc, #164]	@ (8001f10 <HAL_CAN_MspInit+0xc4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d14b      	bne.n	8001f06 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001e78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7e:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a20      	ldr	r2, [pc, #128]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <HAL_CAN_MspInit+0xc8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ed4:	2309      	movs	r3, #9
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480e      	ldr	r0, [pc, #56]	@ (8001f18 <HAL_CAN_MspInit+0xcc>)
 8001ee0:	f001 fc26 	bl	8003730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ef6:	2309      	movs	r3, #9
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <HAL_CAN_MspInit+0xd0>)
 8001f02:	f001 fc15 	bl	8003730 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	@ 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40006400 	.word	0x40006400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400

08001f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <HAL_I2C_MspInit+0x84>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d12b      	bne.n	8001f9a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f5e:	23c0      	movs	r3, #192	@ 0xc0
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f62:	2312      	movs	r3, #18
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	@ (8001fac <HAL_I2C_MspInit+0x8c>)
 8001f7a:	f001 fbd9 	bl	8003730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a08      	ldr	r2, [pc, #32]	@ (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	@ 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400

08001fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a28      	ldr	r2, [pc, #160]	@ (8002070 <HAL_SPI_MspInit+0xc0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d149      	bne.n	8002066 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a26      	ldr	r2, [pc, #152]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 8001fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	4a18      	ldr	r2, [pc, #96]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	@ 0x30
 800201a:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <HAL_SPI_MspInit+0xc4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002026:	2340      	movs	r3, #64	@ 0x40
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002036:	2305      	movs	r3, #5
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <HAL_SPI_MspInit+0xc8>)
 8002042:	f001 fb75 	bl	8003730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002046:	2328      	movs	r3, #40	@ 0x28
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002056:	2305      	movs	r3, #5
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4806      	ldr	r0, [pc, #24]	@ (800207c <HAL_SPI_MspInit+0xcc>)
 8002062:	f001 fb65 	bl	8003730 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40013000 	.word	0x40013000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400

08002080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a15      	ldr	r2, [pc, #84]	@ (80020e4 <HAL_TIM_Base_MspInit+0x64>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a13      	ldr	r2, [pc, #76]	@ (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020ae:	e012      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b8:	d10d      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a34      	ldr	r2, [pc, #208]	@ (80021dc <HAL_TIM_MspPostInit+0xf0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d11f      	bne.n	800214e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b33      	ldr	r3, [pc, #204]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a32      	ldr	r2, [pc, #200]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b30      	ldr	r3, [pc, #192]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = C1_PWM_Pin|C2_PWM_Pin|C3_PWM_Pin|C4_PWM_Pin;
 800212a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800213c:	2301      	movs	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4827      	ldr	r0, [pc, #156]	@ (80021e4 <HAL_TIM_MspPostInit+0xf8>)
 8002148:	f001 faf2 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800214c:	e042      	b.n	80021d4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002156:	d13d      	bne.n	80021d4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	4a1f      	ldr	r2, [pc, #124]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6313      	str	r3, [r2, #48]	@ 0x30
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	4a18      	ldr	r2, [pc, #96]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	6313      	str	r3, [r2, #48]	@ 0x30
 8002184:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = C5_PWM_Pin;
 8002190:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a2:	2301      	movs	r3, #1
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(C5_PWM_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <HAL_TIM_MspPostInit+0xf8>)
 80021ae:	f001 fabf 	bl	8003730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = C6_PWM_Pin;
 80021b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c4:	2301      	movs	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(C6_PWM_GPIO_Port, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	@ (80021e8 <HAL_TIM_MspPostInit+0xfc>)
 80021d0:	f001 faae 	bl	8003730 <HAL_GPIO_Init>
}
 80021d4:	bf00      	nop
 80021d6:	3728      	adds	r7, #40	@ 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40020400 	.word	0x40020400

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <NMI_Handler+0x4>

080021f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <MemManage_Handler+0x4>

08002204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <BusFault_Handler+0x4>

0800220c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <UsageFault_Handler+0x4>

08002214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002242:	f000 f89b 	bl	800237c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002250:	4802      	ldr	r0, [pc, #8]	@ (800225c <DMA2_Stream0_IRQHandler+0x10>)
 8002252:	f001 f803 	bl	800325c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000074 	.word	0x20000074

08002260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <SystemInit+0x20>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <SystemInit+0x20>)
 800226c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <Reset_Handler>:
 8002284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022bc <LoopFillZerobss+0xe>
 8002288:	f7ff ffea 	bl	8002260 <SystemInit>
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <LoopFillZerobss+0x12>)
 800228e:	490d      	ldr	r1, [pc, #52]	@ (80022c4 <LoopFillZerobss+0x16>)
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <LoopFillZerobss+0x1a>)
 8002292:	2300      	movs	r3, #0
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:
 8002296:	58d4      	ldr	r4, [r2, r3]
 8002298:	50c4      	str	r4, [r0, r3]
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:
 800229c:	18c4      	adds	r4, r0, r3
 800229e:	428c      	cmp	r4, r1
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
 80022a2:	4a0a      	ldr	r2, [pc, #40]	@ (80022cc <LoopFillZerobss+0x1e>)
 80022a4:	4c0a      	ldr	r4, [pc, #40]	@ (80022d0 <LoopFillZerobss+0x22>)
 80022a6:	2300      	movs	r3, #0
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>
 80022b2:	f003 fcb1 	bl	8005c18 <__libc_init_array>
 80022b6:	f7fe fdb3 	bl	8000e20 <main>
 80022ba:	4770      	bx	lr
 80022bc:	20020000 	.word	0x20020000
 80022c0:	20000000 	.word	0x20000000
 80022c4:	2000000c 	.word	0x2000000c
 80022c8:	08005cd8 	.word	0x08005cd8
 80022cc:	20000010 	.word	0x20000010
 80022d0:	20000304 	.word	0x20000304

080022d4 <ADC_IRQHandler>:
 80022d4:	e7fe      	b.n	80022d4 <ADC_IRQHandler>
	...

080022d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <HAL_Init+0x40>)
 80022e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <HAL_Init+0x40>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a07      	ldr	r2, [pc, #28]	@ (8002318 <HAL_Init+0x40>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002300:	2003      	movs	r0, #3
 8002302:	f000 fe63 	bl	8002fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002306:	200f      	movs	r0, #15
 8002308:	f000 f808 	bl	800231c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230c:	f7ff fce2 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00

0800231c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002324:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_InitTick+0x54>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_InitTick+0x58>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002332:	fbb3 f3f1 	udiv	r3, r3, r1
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fe7b 	bl	8003036 <HAL_SYSTICK_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00e      	b.n	8002368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d80a      	bhi.n	8002366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002358:	f000 fe43 	bl	8002fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800235c:	4a06      	ldr	r2, [pc, #24]	@ (8002378 <HAL_InitTick+0x5c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000000 	.word	0x20000000
 8002374:	20000008 	.word	0x20000008
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000300 	.word	0x20000300

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000300 	.word	0x20000300

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e033      	b.n	8002482 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fc7e 	bl	8001d24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800244a:	f023 0302 	bic.w	r3, r3, #2
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa6e 	bl	8002938 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40
 8002472:	e001      	b.n	8002478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Start_DMA+0x1e>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e0e9      	b.n	800267e <HAL_ADC_Start_DMA+0x1f2>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d018      	beq.n	80024f2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002688 <HAL_ADC_Start_DMA+0x1fc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6d      	ldr	r2, [pc, #436]	@ (800268c <HAL_ADC_Start_DMA+0x200>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0c9a      	lsrs	r2, r3, #18
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024e4:	e002      	b.n	80024ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002500:	d107      	bne.n	8002512 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002510:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	f040 80a1 	bne.w	8002664 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800254c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002560:	d106      	bne.n	8002570 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f023 0206 	bic.w	r2, r3, #6
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
 800256e:	e002      	b.n	8002576 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800257e:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <HAL_ADC_Start_DMA+0x204>)
 8002580:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002586:	4a43      	ldr	r2, [pc, #268]	@ (8002694 <HAL_ADC_Start_DMA+0x208>)
 8002588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	4a42      	ldr	r2, [pc, #264]	@ (8002698 <HAL_ADC_Start_DMA+0x20c>)
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002596:	4a41      	ldr	r2, [pc, #260]	@ (800269c <HAL_ADC_Start_DMA+0x210>)
 8002598:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025b2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	334c      	adds	r3, #76	@ 0x4c
 80025ce:	4619      	mov	r1, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f000 fdea 	bl	80031ac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d12a      	bne.n	800263a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2d      	ldr	r2, [pc, #180]	@ (80026a0 <HAL_ADC_Start_DMA+0x214>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d015      	beq.n	800261a <HAL_ADC_Start_DMA+0x18e>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2c      	ldr	r2, [pc, #176]	@ (80026a4 <HAL_ADC_Start_DMA+0x218>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d105      	bne.n	8002604 <HAL_ADC_Start_DMA+0x178>
 80025f8:	4b25      	ldr	r3, [pc, #148]	@ (8002690 <HAL_ADC_Start_DMA+0x204>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a27      	ldr	r2, [pc, #156]	@ (80026a8 <HAL_ADC_Start_DMA+0x21c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d136      	bne.n	800267c <HAL_ADC_Start_DMA+0x1f0>
 800260e:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_ADC_Start_DMA+0x204>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d130      	bne.n	800267c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d129      	bne.n	800267c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	e020      	b.n	800267c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <HAL_ADC_Start_DMA+0x214>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d11b      	bne.n	800267c <HAL_ADC_Start_DMA+0x1f0>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d114      	bne.n	800267c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	e00b      	b.n	800267c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	f043 0210 	orr.w	r2, r3, #16
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000
 800268c:	431bde83 	.word	0x431bde83
 8002690:	40012300 	.word	0x40012300
 8002694:	08002b31 	.word	0x08002b31
 8002698:	08002beb 	.word	0x08002beb
 800269c:	08002c07 	.word	0x08002c07
 80026a0:	40012000 	.word	0x40012000
 80026a4:	40012100 	.word	0x40012100
 80026a8:	40012200 	.word	0x40012200

080026ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1c>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e113      	b.n	8002918 <HAL_ADC_ConfigChannel+0x244>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b09      	cmp	r3, #9
 80026fe:	d925      	bls.n	800274c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68d9      	ldr	r1, [r3, #12]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	3b1e      	subs	r3, #30
 8002716:	2207      	movs	r2, #7
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43da      	mvns	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	400a      	ands	r2, r1
 8002724:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68d9      	ldr	r1, [r3, #12]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	4618      	mov	r0, r3
 8002738:	4603      	mov	r3, r0
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4403      	add	r3, r0
 800273e:	3b1e      	subs	r3, #30
 8002740:	409a      	lsls	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	e022      	b.n	8002792 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	2207      	movs	r2, #7
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	400a      	ands	r2, r1
 800276e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6919      	ldr	r1, [r3, #16]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4618      	mov	r0, r3
 8002782:	4603      	mov	r3, r0
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4403      	add	r3, r0
 8002788:	409a      	lsls	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b06      	cmp	r3, #6
 8002798:	d824      	bhi.n	80027e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b05      	subs	r3, #5
 80027ac:	221f      	movs	r2, #31
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	400a      	ands	r2, r1
 80027ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b05      	subs	r3, #5
 80027d6:	fa00 f203 	lsl.w	r2, r0, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80027e2:	e04c      	b.n	800287e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d824      	bhi.n	8002836 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	3b23      	subs	r3, #35	@ 0x23
 80027fe:	221f      	movs	r2, #31
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43da      	mvns	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	400a      	ands	r2, r1
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	4618      	mov	r0, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	3b23      	subs	r3, #35	@ 0x23
 8002828:	fa00 f203 	lsl.w	r2, r0, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30
 8002834:	e023      	b.n	800287e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	3b41      	subs	r3, #65	@ 0x41
 8002848:	221f      	movs	r2, #31
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	400a      	ands	r2, r1
 8002856:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	3b41      	subs	r3, #65	@ 0x41
 8002872:	fa00 f203 	lsl.w	r2, r0, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287e:	4b29      	ldr	r3, [pc, #164]	@ (8002924 <HAL_ADC_ConfigChannel+0x250>)
 8002880:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a28      	ldr	r2, [pc, #160]	@ (8002928 <HAL_ADC_ConfigChannel+0x254>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d10f      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1d8>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b12      	cmp	r3, #18
 8002892:	d10b      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002928 <HAL_ADC_ConfigChannel+0x254>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d12b      	bne.n	800290e <HAL_ADC_ConfigChannel+0x23a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1c      	ldr	r2, [pc, #112]	@ (800292c <HAL_ADC_ConfigChannel+0x258>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <HAL_ADC_ConfigChannel+0x1f4>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b11      	cmp	r3, #17
 80028c6:	d122      	bne.n	800290e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a11      	ldr	r2, [pc, #68]	@ (800292c <HAL_ADC_ConfigChannel+0x258>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d111      	bne.n	800290e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <HAL_ADC_ConfigChannel+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a11      	ldr	r2, [pc, #68]	@ (8002934 <HAL_ADC_ConfigChannel+0x260>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	0c9a      	lsrs	r2, r3, #18
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002900:	e002      	b.n	8002908 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3b01      	subs	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f9      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40012300 	.word	0x40012300
 8002928:	40012000 	.word	0x40012000
 800292c:	10000012 	.word	0x10000012
 8002930:	20000000 	.word	0x20000000
 8002934:	431bde83 	.word	0x431bde83

08002938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002940:	4b79      	ldr	r3, [pc, #484]	@ (8002b28 <ADC_Init+0x1f0>)
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	4a58      	ldr	r2, [pc, #352]	@ (8002b2c <ADC_Init+0x1f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00f      	b.n	8002a36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0202 	bic.w	r2, r2, #2
 8002a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7e1b      	ldrb	r3, [r3, #24]
 8002a50:	005a      	lsls	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	035a      	lsls	r2, r3, #13
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e007      	b.n	8002aac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	051a      	lsls	r2, r3, #20
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aee:	025a      	lsls	r2, r3, #9
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6899      	ldr	r1, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	029a      	lsls	r2, r3, #10
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	0f000001 	.word	0x0f000001

08002b30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d13c      	bne.n	8002bc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d12b      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d127      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d119      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7fe fe43 	bl	8001848 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bc2:	e00e      	b.n	8002be2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff fd75 	bl	80026c0 <HAL_ADC_ErrorCallback>
}
 8002bd6:	e004      	b.n	8002be2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fd57 	bl	80026ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2240      	movs	r2, #64	@ 0x40
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f043 0204 	orr.w	r2, r3, #4
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff fd4a 	bl	80026c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0ed      	b.n	8002e22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff f8fa 	bl	8001e4c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c68:	f7ff fb9c 	bl	80023a4 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c6e:	e012      	b.n	8002c96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c70:	f7ff fb98 	bl	80023a4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b0a      	cmp	r3, #10
 8002c7c:	d90b      	bls.n	8002c96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0c5      	b.n	8002e22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0e5      	beq.n	8002c70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0202 	bic.w	r2, r2, #2
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb4:	f7ff fb76 	bl	80023a4 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cba:	e012      	b.n	8002ce2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cbc:	f7ff fb72 	bl	80023a4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b0a      	cmp	r3, #10
 8002cc8:	d90b      	bls.n	8002ce2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2205      	movs	r2, #5
 8002cda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e09f      	b.n	8002e22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e5      	bne.n	8002cbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7e1b      	ldrb	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d108      	bne.n	8002d0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e007      	b.n	8002d1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7e5b      	ldrb	r3, [r3, #25]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e007      	b.n	8002d44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7e9b      	ldrb	r3, [r3, #26]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d108      	bne.n	8002d5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e007      	b.n	8002d6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0220 	bic.w	r2, r2, #32
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7edb      	ldrb	r3, [r3, #27]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0210 	bic.w	r2, r2, #16
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e007      	b.n	8002d98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0210 	orr.w	r2, r2, #16
 8002d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7f1b      	ldrb	r3, [r3, #28]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d108      	bne.n	8002db2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0208 	orr.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e007      	b.n	8002dc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0208 	bic.w	r2, r2, #8
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7f5b      	ldrb	r3, [r3, #29]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0204 	orr.w	r2, r2, #4
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e007      	b.n	8002dec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <__NVIC_SetPriorityGrouping>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5e:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	60d3      	str	r3, [r2, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_GetPriorityGrouping>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <__NVIC_GetPriorityGrouping+0x18>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	f003 0307 	and.w	r3, r3, #7
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <__NVIC_EnableIRQ>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	db0b      	blt.n	8002eba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	4907      	ldr	r1, [pc, #28]	@ (8002ec8 <__NVIC_EnableIRQ+0x38>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000e100 	.word	0xe000e100

08002ecc <__NVIC_SetPriority>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0a      	blt.n	8002ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	490c      	ldr	r1, [pc, #48]	@ (8002f18 <__NVIC_SetPriority+0x4c>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ef4:	e00a      	b.n	8002f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4908      	ldr	r1, [pc, #32]	@ (8002f1c <__NVIC_SetPriority+0x50>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3b04      	subs	r3, #4
 8002f04:	0112      	lsls	r2, r2, #4
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	761a      	strb	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <NVIC_EncodePriority>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	@ 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf28      	it	cs
 8002f3e:	2304      	movcs	r3, #4
 8002f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d902      	bls.n	8002f50 <NVIC_EncodePriority+0x30>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3b03      	subs	r3, #3
 8002f4e:	e000      	b.n	8002f52 <NVIC_EncodePriority+0x32>
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	4313      	orrs	r3, r2
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	@ 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f98:	d301      	bcc.n	8002f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00f      	b.n	8002fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <SysTick_Config+0x40>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fac:	f7ff ff8e 	bl	8002ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <SysTick_Config+0x40>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb6:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <SysTick_Config+0x40>)
 8002fb8:	2207      	movs	r2, #7
 8002fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	e000e010 	.word	0xe000e010

08002fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff29 	bl	8002e2c <__NVIC_SetPriorityGrouping>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff4:	f7ff ff3e 	bl	8002e74 <__NVIC_GetPriorityGrouping>
 8002ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	6978      	ldr	r0, [r7, #20]
 8003000:	f7ff ff8e 	bl	8002f20 <NVIC_EncodePriority>
 8003004:	4602      	mov	r2, r0
 8003006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff5d 	bl	8002ecc <__NVIC_SetPriority>
}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff31 	bl	8002e90 <__NVIC_EnableIRQ>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ffa2 	bl	8002f88 <SysTick_Config>
 8003044:	4603      	mov	r3, r0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff f9a2 	bl	80023a4 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e099      	b.n	80031a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308c:	e00f      	b.n	80030ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800308e:	f7ff f989 	bl	80023a4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b05      	cmp	r3, #5
 800309a:	d908      	bls.n	80030ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2203      	movs	r2, #3
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e078      	b.n	80031a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e8      	bne.n	800308e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4b38      	ldr	r3, [pc, #224]	@ (80031a8 <HAL_DMA_Init+0x158>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	2b04      	cmp	r3, #4
 8003106:	d107      	bne.n	8003118 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	4313      	orrs	r3, r2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0307 	bic.w	r3, r3, #7
 800312e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	2b04      	cmp	r3, #4
 8003140:	d117      	bne.n	8003172 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00e      	beq.n	8003172 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fa6f 	bl	8003638 <DMA_CheckFifoParam>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2240      	movs	r2, #64	@ 0x40
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800316e:	2301      	movs	r3, #1
 8003170:	e016      	b.n	80031a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa26 	bl	80035cc <DMA_CalcBaseAndBitshift>
 8003180:	4603      	mov	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	223f      	movs	r2, #63	@ 0x3f
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	f010803f 	.word	0xf010803f

080031ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA_Start_IT+0x26>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e040      	b.n	8003254 <HAL_DMA_Start_IT+0xa8>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d12f      	bne.n	8003246 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f9b8 	bl	8003570 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	223f      	movs	r2, #63	@ 0x3f
 8003206:	409a      	lsls	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0216 	orr.w	r2, r2, #22
 800321a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0208 	orr.w	r2, r2, #8
 8003232:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e005      	b.n	8003252 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003252:	7dfb      	ldrb	r3, [r7, #23]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003268:	4b8e      	ldr	r3, [pc, #568]	@ (80034a4 <HAL_DMA_IRQHandler+0x248>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a8e      	ldr	r2, [pc, #568]	@ (80034a8 <HAL_DMA_IRQHandler+0x24c>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0a9b      	lsrs	r3, r3, #10
 8003274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003286:	2208      	movs	r2, #8
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01a      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b4:	2208      	movs	r2, #8
 80032b6:	409a      	lsls	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	2201      	movs	r2, #1
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ea:	2201      	movs	r2, #1
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f043 0202 	orr.w	r2, r3, #2
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	2204      	movs	r2, #4
 8003304:	409a      	lsls	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003320:	2204      	movs	r2, #4
 8003322:	409a      	lsls	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	2210      	movs	r2, #16
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d043      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d03c      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	2210      	movs	r2, #16
 8003358:	409a      	lsls	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d018      	beq.n	800339e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d108      	bne.n	800338c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d024      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
 800338a:	e01f      	b.n	80033cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01b      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
 800339c:	e016      	b.n	80033cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0208 	bic.w	r2, r2, #8
 80033ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d0:	2220      	movs	r2, #32
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 808f 	beq.w	80034fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8087 	beq.w	80034fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	2220      	movs	r2, #32
 80033f4:	409a      	lsls	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b05      	cmp	r3, #5
 8003404:	d136      	bne.n	8003474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0216 	bic.w	r2, r2, #22
 8003414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <HAL_DMA_IRQHandler+0x1da>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0208 	bic.w	r2, r2, #8
 8003444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	223f      	movs	r2, #63	@ 0x3f
 800344c:	409a      	lsls	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003466:	2b00      	cmp	r3, #0
 8003468:	d07e      	beq.n	8003568 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
        }
        return;
 8003472:	e079      	b.n	8003568 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01d      	beq.n	80034be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10d      	bne.n	80034ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003494:	2b00      	cmp	r3, #0
 8003496:	d031      	beq.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	e02c      	b.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000
 80034a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d023      	beq.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
 80034bc:	e01e      	b.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10f      	bne.n	80034ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0210 	bic.w	r2, r2, #16
 80034da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003500:	2b00      	cmp	r3, #0
 8003502:	d032      	beq.n	800356a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d022      	beq.n	8003556 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2205      	movs	r2, #5
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3301      	adds	r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	d307      	bcc.n	8003544 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f2      	bne.n	8003528 <HAL_DMA_IRQHandler+0x2cc>
 8003542:	e000      	b.n	8003546 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003544:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
 8003566:	e000      	b.n	800356a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003568:	bf00      	nop
    }
  }
}
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800358c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b40      	cmp	r3, #64	@ 0x40
 800359c:	d108      	bne.n	80035b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035ae:	e007      	b.n	80035c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3b10      	subs	r3, #16
 80035dc:	4a14      	ldr	r2, [pc, #80]	@ (8003630 <DMA_CalcBaseAndBitshift+0x64>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035e6:	4a13      	ldr	r2, [pc, #76]	@ (8003634 <DMA_CalcBaseAndBitshift+0x68>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d909      	bls.n	800360e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	1d1a      	adds	r2, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	@ 0x58
 800360c:	e007      	b.n	800361e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	aaaaaaab 	.word	0xaaaaaaab
 8003634:	08005cc0 	.word	0x08005cc0

08003638 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d11f      	bne.n	8003692 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d856      	bhi.n	8003706 <DMA_CheckFifoParam+0xce>
 8003658:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <DMA_CheckFifoParam+0x28>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003671 	.word	0x08003671
 8003664:	08003683 	.word	0x08003683
 8003668:	08003671 	.word	0x08003671
 800366c:	08003707 	.word	0x08003707
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d046      	beq.n	800370a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003680:	e043      	b.n	800370a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800368a:	d140      	bne.n	800370e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003690:	e03d      	b.n	800370e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369a:	d121      	bne.n	80036e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d837      	bhi.n	8003712 <DMA_CheckFifoParam+0xda>
 80036a2:	a201      	add	r2, pc, #4	@ (adr r2, 80036a8 <DMA_CheckFifoParam+0x70>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036bf 	.word	0x080036bf
 80036b0:	080036b9 	.word	0x080036b9
 80036b4:	080036d1 	.word	0x080036d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e030      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d025      	beq.n	8003716 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ce:	e022      	b.n	8003716 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036d8:	d11f      	bne.n	800371a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036de:	e01c      	b.n	800371a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d903      	bls.n	80036ee <DMA_CheckFifoParam+0xb6>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d003      	beq.n	80036f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036ec:	e018      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      break;
 80036f2:	e015      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      break;
 8003704:	e00b      	b.n	800371e <DMA_CheckFifoParam+0xe6>
      break;
 8003706:	bf00      	nop
 8003708:	e00a      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
 800370c:	e008      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e006      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e004      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e002      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;   
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800371e:	bf00      	nop
    }
  } 
  
  return status; 
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	@ 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	e165      	b.n	8003a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800374c:	2201      	movs	r2, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	429a      	cmp	r2, r3
 8003766:	f040 8154 	bne.w	8003a12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d005      	beq.n	8003782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377e:	2b02      	cmp	r3, #2
 8003780:	d130      	bne.n	80037e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037b8:	2201      	movs	r2, #1
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 0201 	and.w	r2, r3, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d017      	beq.n	8003820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	2203      	movs	r2, #3
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d123      	bne.n	8003874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	08da      	lsrs	r2, r3, #3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3208      	adds	r2, #8
 8003834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	220f      	movs	r2, #15
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	08da      	lsrs	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3208      	adds	r2, #8
 800386e:	69b9      	ldr	r1, [r7, #24]
 8003870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0203 	and.w	r2, r3, #3
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80ae 	beq.w	8003a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003a30 <HAL_GPIO_Init+0x300>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	4a5c      	ldr	r2, [pc, #368]	@ (8003a30 <HAL_GPIO_Init+0x300>)
 80038c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a30 <HAL_GPIO_Init+0x300>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d2:	4a58      	ldr	r2, [pc, #352]	@ (8003a34 <HAL_GPIO_Init+0x304>)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	3302      	adds	r3, #2
 80038da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	220f      	movs	r2, #15
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003a38 <HAL_GPIO_Init+0x308>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d025      	beq.n	800394a <HAL_GPIO_Init+0x21a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4e      	ldr	r2, [pc, #312]	@ (8003a3c <HAL_GPIO_Init+0x30c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01f      	beq.n	8003946 <HAL_GPIO_Init+0x216>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4d      	ldr	r2, [pc, #308]	@ (8003a40 <HAL_GPIO_Init+0x310>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d019      	beq.n	8003942 <HAL_GPIO_Init+0x212>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4c      	ldr	r2, [pc, #304]	@ (8003a44 <HAL_GPIO_Init+0x314>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_GPIO_Init+0x20e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a4b      	ldr	r2, [pc, #300]	@ (8003a48 <HAL_GPIO_Init+0x318>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00d      	beq.n	800393a <HAL_GPIO_Init+0x20a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4a      	ldr	r2, [pc, #296]	@ (8003a4c <HAL_GPIO_Init+0x31c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <HAL_GPIO_Init+0x206>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a49      	ldr	r2, [pc, #292]	@ (8003a50 <HAL_GPIO_Init+0x320>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d101      	bne.n	8003932 <HAL_GPIO_Init+0x202>
 800392e:	2306      	movs	r3, #6
 8003930:	e00c      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003932:	2307      	movs	r3, #7
 8003934:	e00a      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003936:	2305      	movs	r3, #5
 8003938:	e008      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800393a:	2304      	movs	r3, #4
 800393c:	e006      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800393e:	2303      	movs	r3, #3
 8003940:	e004      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003942:	2302      	movs	r3, #2
 8003944:	e002      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800394a:	2300      	movs	r3, #0
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f002 0203 	and.w	r2, r2, #3
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	4093      	lsls	r3, r2
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800395c:	4935      	ldr	r1, [pc, #212]	@ (8003a34 <HAL_GPIO_Init+0x304>)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800396a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a54 <HAL_GPIO_Init+0x324>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800398e:	4a31      	ldr	r2, [pc, #196]	@ (8003a54 <HAL_GPIO_Init+0x324>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003994:	4b2f      	ldr	r3, [pc, #188]	@ (8003a54 <HAL_GPIO_Init+0x324>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b8:	4a26      	ldr	r2, [pc, #152]	@ (8003a54 <HAL_GPIO_Init+0x324>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039be:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <HAL_GPIO_Init+0x324>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <HAL_GPIO_Init+0x324>)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a54 <HAL_GPIO_Init+0x324>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a0c:	4a11      	ldr	r2, [pc, #68]	@ (8003a54 <HAL_GPIO_Init+0x324>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	f67f ae96 	bls.w	800374c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3724      	adds	r7, #36	@ 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40020400 	.word	0x40020400
 8003a40:	40020800 	.word	0x40020800
 8003a44:	40020c00 	.word	0x40020c00
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40021400 	.word	0x40021400
 8003a50:	40021800 	.word	0x40021800
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a9c:	887a      	ldrh	r2, [r7, #2]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	041a      	lsls	r2, r3, #16
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	400b      	ands	r3, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e12b      	b.n	8003d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe fa1a 	bl	8001f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	@ 0x24
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b24:	f000 fca6 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 8003b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a81      	ldr	r2, [pc, #516]	@ (8003d34 <HAL_I2C_Init+0x274>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d807      	bhi.n	8003b44 <HAL_I2C_Init+0x84>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a80      	ldr	r2, [pc, #512]	@ (8003d38 <HAL_I2C_Init+0x278>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	bf94      	ite	ls
 8003b3c:	2301      	movls	r3, #1
 8003b3e:	2300      	movhi	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e006      	b.n	8003b52 <HAL_I2C_Init+0x92>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a7d      	ldr	r2, [pc, #500]	@ (8003d3c <HAL_I2C_Init+0x27c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	bf94      	ite	ls
 8003b4c:	2301      	movls	r3, #1
 8003b4e:	2300      	movhi	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e0e7      	b.n	8003d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a78      	ldr	r2, [pc, #480]	@ (8003d40 <HAL_I2C_Init+0x280>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0c9b      	lsrs	r3, r3, #18
 8003b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4a6a      	ldr	r2, [pc, #424]	@ (8003d34 <HAL_I2C_Init+0x274>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d802      	bhi.n	8003b94 <HAL_I2C_Init+0xd4>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3301      	adds	r3, #1
 8003b92:	e009      	b.n	8003ba8 <HAL_I2C_Init+0xe8>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	4a69      	ldr	r2, [pc, #420]	@ (8003d44 <HAL_I2C_Init+0x284>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	495c      	ldr	r1, [pc, #368]	@ (8003d34 <HAL_I2C_Init+0x274>)
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	d819      	bhi.n	8003bfc <HAL_I2C_Init+0x13c>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e59      	subs	r1, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd6:	1c59      	adds	r1, r3, #1
 8003bd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bdc:	400b      	ands	r3, r1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_I2C_Init+0x138>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1e59      	subs	r1, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	e051      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	e04f      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d111      	bne.n	8003c28 <HAL_I2C_Init+0x168>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	440b      	add	r3, r1
 8003c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e012      	b.n	8003c4e <HAL_I2C_Init+0x18e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e58      	subs	r0, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	0099      	lsls	r1, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Init+0x196>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e022      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10e      	bne.n	8003c7c <HAL_I2C_Init+0x1bc>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1e58      	subs	r0, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	440b      	add	r3, r1
 8003c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c7a:	e00f      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1e58      	subs	r0, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	0099      	lsls	r1, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	6809      	ldr	r1, [r1, #0]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6911      	ldr	r1, [r2, #16]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68d2      	ldr	r2, [r2, #12]
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	000186a0 	.word	0x000186a0
 8003d38:	001e847f 	.word	0x001e847f
 8003d3c:	003d08ff 	.word	0x003d08ff
 8003d40:	431bde83 	.word	0x431bde83
 8003d44:	10624dd3 	.word	0x10624dd3

08003d48 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	@ 0x28
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7fe fb24 	bl	80023a4 <HAL_GetTick>
 8003d5c:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	f040 80ee 	bne.w	8003f48 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_I2C_Slave_Receive+0x30>
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0e6      	b.n	8003f4a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_I2C_Slave_Receive+0x42>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e0df      	b.n	8003f4a <HAL_I2C_Slave_Receive+0x202>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d007      	beq.n	8003db0 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2222      	movs	r2, #34	@ 0x22
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a59      	ldr	r2, [pc, #356]	@ (8003f54 <HAL_I2C_Slave_Receive+0x20c>)
 8003df0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e00:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4953      	ldr	r1, [pc, #332]	@ (8003f58 <HAL_I2C_Slave_Receive+0x210>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f8a5 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e096      	b.n	8003f4a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8003e32:	e04e      	b.n	8003ed2 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f94d 	bl	80040d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e52:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e078      	b.n	8003f4a <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d11c      	bne.n	8003ed2 <HAL_I2C_Slave_Receive+0x18a>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d018      	beq.n	8003ed2 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ac      	bne.n	8003e34 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	6839      	ldr	r1, [r7, #0]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f8b6 	bl	8004050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef8:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e025      	b.n	8003f4a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	ffff0000 	.word	0xffff0000
 8003f58:	00010002 	.word	0x00010002

08003f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f6c:	e048      	b.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f74:	d044      	beq.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fe fa15 	bl	80023a4 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d139      	bne.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d10d      	bne.n	8003fb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	e00c      	b.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	43da      	mvns	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d116      	bne.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e023      	b.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10d      	bne.n	8004026 <I2C_WaitOnFlagUntilTimeout+0xca>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	43da      	mvns	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	e00c      	b.n	8004040 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	43da      	mvns	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	d093      	beq.n	8003f6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405c:	e030      	b.n	80040c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f897 	bl	8004192 <I2C_IsAcknowledgeFailed>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e030      	b.n	80040d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406e:	f7fe f999 	bl	80023a4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	d302      	bcc.n	8004084 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d11d      	bne.n	80040c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b10      	cmp	r3, #16
 8004090:	d016      	beq.n	80040c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e007      	b.n	80040d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d1c7      	bne.n	800405e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040e4:	e049      	b.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d119      	bne.n	8004128 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0210 	mvn.w	r2, #16
 80040fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e030      	b.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004128:	f7fe f93c 	bl	80023a4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d302      	bcc.n	800413e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11d      	bne.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004148:	2b40      	cmp	r3, #64	@ 0x40
 800414a:	d016      	beq.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e007      	b.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b40      	cmp	r3, #64	@ 0x40
 8004186:	d1ae      	bne.n	80040e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a8:	d11b      	bne.n	80041e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	f043 0204 	orr.w	r2, r3, #4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4b20      	ldr	r3, [pc, #128]	@ (8004280 <HAL_PWREx_EnableOverDrive+0x90>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	4a1f      	ldr	r2, [pc, #124]	@ (8004280 <HAL_PWREx_EnableOverDrive+0x90>)
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004208:	6413      	str	r3, [r2, #64]	@ 0x40
 800420a:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <HAL_PWREx_EnableOverDrive+0x90>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004216:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <HAL_PWREx_EnableOverDrive+0x94>)
 8004218:	2201      	movs	r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800421c:	f7fe f8c2 	bl	80023a4 <HAL_GetTick>
 8004220:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004222:	e009      	b.n	8004238 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004224:	f7fe f8be 	bl	80023a4 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004232:	d901      	bls.n	8004238 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e01f      	b.n	8004278 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004238:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <HAL_PWREx_EnableOverDrive+0x98>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004244:	d1ee      	bne.n	8004224 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004246:	4b11      	ldr	r3, [pc, #68]	@ (800428c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800424c:	f7fe f8aa 	bl	80023a4 <HAL_GetTick>
 8004250:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004252:	e009      	b.n	8004268 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004254:	f7fe f8a6 	bl	80023a4 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004262:	d901      	bls.n	8004268 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e007      	b.n	8004278 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004268:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <HAL_PWREx_EnableOverDrive+0x98>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004274:	d1ee      	bne.n	8004254 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	420e0040 	.word	0x420e0040
 8004288:	40007000 	.word	0x40007000
 800428c:	420e0044 	.word	0x420e0044

08004290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0cc      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b68      	ldr	r3, [pc, #416]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d90c      	bls.n	80042cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b65      	ldr	r3, [pc, #404]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a58      	ldr	r2, [pc, #352]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a52      	ldr	r2, [pc, #328]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d044      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d119      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d003      	beq.n	800434e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434a:	2b03      	cmp	r3, #3
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b3f      	ldr	r3, [pc, #252]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e06f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b3b      	ldr	r3, [pc, #236]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e067      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4b37      	ldr	r3, [pc, #220]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 0203 	bic.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4934      	ldr	r1, [pc, #208]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7fe f810 	bl	80023a4 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	e00a      	b.n	800439e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f7fe f80c 	bl	80023a4 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e04f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 020c 	and.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1eb      	bne.n	8004388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b25      	ldr	r3, [pc, #148]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d20c      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b22      	ldr	r3, [pc, #136]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004402:	4b12      	ldr	r3, [pc, #72]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f841 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd ff70 	bl	800231c <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023c00 	.word	0x40023c00
 800444c:	40023800 	.word	0x40023800
 8004450:	08005ca8 	.word	0x08005ca8
 8004454:	20000000 	.word	0x20000000
 8004458:	20000004 	.word	0x20000004

0800445c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004460:	4b03      	ldr	r3, [pc, #12]	@ (8004470 <HAL_RCC_GetHCLKFreq+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000000 	.word	0x20000000

08004474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004478:	f7ff fff0 	bl	800445c <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0a9b      	lsrs	r3, r3, #10
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4903      	ldr	r1, [pc, #12]	@ (8004498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	08005cb8 	.word	0x08005cb8

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a0:	b0a6      	sub	sp, #152	@ 0x98
 80044a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c2:	4bc8      	ldr	r3, [pc, #800]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	f200 817e 	bhi.w	80047cc <HAL_RCC_GetSysClockFreq+0x330>
 80044d0:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	080047cd 	.word	0x080047cd
 80044e0:	080047cd 	.word	0x080047cd
 80044e4:	080047cd 	.word	0x080047cd
 80044e8:	08004515 	.word	0x08004515
 80044ec:	080047cd 	.word	0x080047cd
 80044f0:	080047cd 	.word	0x080047cd
 80044f4:	080047cd 	.word	0x080047cd
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	080047cd 	.word	0x080047cd
 8004500:	080047cd 	.word	0x080047cd
 8004504:	080047cd 	.word	0x080047cd
 8004508:	08004687 	.word	0x08004687
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4bb6      	ldr	r3, [pc, #728]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800450e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004512:	e15f      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004514:	4bb5      	ldr	r3, [pc, #724]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x350>)
 8004516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800451a:	e15b      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800451c:	4bb1      	ldr	r3, [pc, #708]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004528:	4bae      	ldr	r3, [pc, #696]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d031      	beq.n	8004598 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004534:	4bab      	ldr	r3, [pc, #684]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	2200      	movs	r2, #0
 800453c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800453e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004540:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	663b      	str	r3, [r7, #96]	@ 0x60
 8004548:	2300      	movs	r3, #0
 800454a:	667b      	str	r3, [r7, #100]	@ 0x64
 800454c:	4ba7      	ldr	r3, [pc, #668]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x350>)
 800454e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004552:	462a      	mov	r2, r5
 8004554:	fb03 f202 	mul.w	r2, r3, r2
 8004558:	2300      	movs	r3, #0
 800455a:	4621      	mov	r1, r4
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	4aa2      	ldr	r2, [pc, #648]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x350>)
 8004564:	4621      	mov	r1, r4
 8004566:	fba1 1202 	umull	r1, r2, r1, r2
 800456a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800456c:	460a      	mov	r2, r1
 800456e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004570:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004572:	4413      	add	r3, r2
 8004574:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800457a:	2200      	movs	r2, #0
 800457c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800457e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004580:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004584:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004588:	f7fc fabc 	bl	8000b04 <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004596:	e064      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004598:	4b92      	ldr	r3, [pc, #584]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	2200      	movs	r2, #0
 80045a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80045a2:	657a      	str	r2, [r7, #84]	@ 0x54
 80045a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ac:	2300      	movs	r3, #0
 80045ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80045b4:	4622      	mov	r2, r4
 80045b6:	462b      	mov	r3, r5
 80045b8:	f04f 0000 	mov.w	r0, #0
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	0159      	lsls	r1, r3, #5
 80045c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c6:	0150      	lsls	r0, r2, #5
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4621      	mov	r1, r4
 80045ce:	1a51      	subs	r1, r2, r1
 80045d0:	6139      	str	r1, [r7, #16]
 80045d2:	4629      	mov	r1, r5
 80045d4:	eb63 0301 	sbc.w	r3, r3, r1
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e6:	4659      	mov	r1, fp
 80045e8:	018b      	lsls	r3, r1, #6
 80045ea:	4651      	mov	r1, sl
 80045ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045f0:	4651      	mov	r1, sl
 80045f2:	018a      	lsls	r2, r1, #6
 80045f4:	4651      	mov	r1, sl
 80045f6:	ebb2 0801 	subs.w	r8, r2, r1
 80045fa:	4659      	mov	r1, fp
 80045fc:	eb63 0901 	sbc.w	r9, r3, r1
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800460c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004610:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004614:	4690      	mov	r8, r2
 8004616:	4699      	mov	r9, r3
 8004618:	4623      	mov	r3, r4
 800461a:	eb18 0303 	adds.w	r3, r8, r3
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	462b      	mov	r3, r5
 8004622:	eb49 0303 	adc.w	r3, r9, r3
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004634:	4629      	mov	r1, r5
 8004636:	028b      	lsls	r3, r1, #10
 8004638:	4621      	mov	r1, r4
 800463a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800463e:	4621      	mov	r1, r4
 8004640:	028a      	lsls	r2, r1, #10
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800464a:	2200      	movs	r2, #0
 800464c:	643b      	str	r3, [r7, #64]	@ 0x40
 800464e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004650:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004654:	f7fc fa56 	bl	8000b04 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4613      	mov	r3, r2
 800465e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004662:	4b60      	ldr	r3, [pc, #384]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	0c1b      	lsrs	r3, r3, #16
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	3301      	adds	r3, #1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004674:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004684:	e0a6      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004686:	4b57      	ldr	r3, [pc, #348]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800468e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004692:	4b54      	ldr	r3, [pc, #336]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d02a      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469e:	4b51      	ldr	r3, [pc, #324]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	2200      	movs	r2, #0
 80046a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046b0:	2100      	movs	r1, #0
 80046b2:	4b4e      	ldr	r3, [pc, #312]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x350>)
 80046b4:	fb03 f201 	mul.w	r2, r3, r1
 80046b8:	2300      	movs	r3, #0
 80046ba:	fb00 f303 	mul.w	r3, r0, r3
 80046be:	4413      	add	r3, r2
 80046c0:	4a4a      	ldr	r2, [pc, #296]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x350>)
 80046c2:	fba0 1202 	umull	r1, r2, r0, r2
 80046c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046c8:	460a      	mov	r2, r1
 80046ca:	673a      	str	r2, [r7, #112]	@ 0x70
 80046cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80046ce:	4413      	add	r3, r2
 80046d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80046d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046d6:	2200      	movs	r2, #0
 80046d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80046da:	637a      	str	r2, [r7, #52]	@ 0x34
 80046dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80046e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80046e4:	f7fc fa0e 	bl	8000b04 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4613      	mov	r3, r2
 80046ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046f2:	e05b      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f4:	4b3b      	ldr	r3, [pc, #236]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	099b      	lsrs	r3, r3, #6
 80046fa:	2200      	movs	r2, #0
 80046fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
 800470c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	f04f 0000 	mov.w	r0, #0
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	0159      	lsls	r1, r3, #5
 800471e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004722:	0150      	lsls	r0, r2, #5
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4641      	mov	r1, r8
 800472a:	ebb2 0a01 	subs.w	sl, r2, r1
 800472e:	4649      	mov	r1, r9
 8004730:	eb63 0b01 	sbc.w	fp, r3, r1
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004748:	ebb2 040a 	subs.w	r4, r2, sl
 800474c:	eb63 050b 	sbc.w	r5, r3, fp
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	00eb      	lsls	r3, r5, #3
 800475a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475e:	00e2      	lsls	r2, r4, #3
 8004760:	4614      	mov	r4, r2
 8004762:	461d      	mov	r5, r3
 8004764:	4643      	mov	r3, r8
 8004766:	18e3      	adds	r3, r4, r3
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	464b      	mov	r3, r9
 800476c:	eb45 0303 	adc.w	r3, r5, r3
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800477e:	4629      	mov	r1, r5
 8004780:	028b      	lsls	r3, r1, #10
 8004782:	4621      	mov	r1, r4
 8004784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004788:	4621      	mov	r1, r4
 800478a:	028a      	lsls	r2, r1, #10
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004794:	2200      	movs	r2, #0
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	61fa      	str	r2, [r7, #28]
 800479a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800479e:	f7fc f9b1 	bl	8000b04 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4613      	mov	r3, r2
 80047a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80047ac:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	0f1b      	lsrs	r3, r3, #28
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80047ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80047ca:	e003      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80047ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80047d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3798      	adds	r7, #152	@ 0x98
 80047dc:	46bd      	mov	sp, r7
 80047de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800
 80047e8:	00f42400 	.word	0x00f42400
 80047ec:	017d7840 	.word	0x017d7840

080047f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e28d      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8083 	beq.w	8004916 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004810:	4b94      	ldr	r3, [pc, #592]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b04      	cmp	r3, #4
 800481a:	d019      	beq.n	8004850 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800481c:	4b91      	ldr	r3, [pc, #580]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
        || \
 8004824:	2b08      	cmp	r3, #8
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004828:	4b8e      	ldr	r3, [pc, #568]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004834:	d00c      	beq.n	8004850 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004836:	4b8b      	ldr	r3, [pc, #556]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d112      	bne.n	8004868 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004842:	4b88      	ldr	r3, [pc, #544]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800484a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800484e:	d10b      	bne.n	8004868 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	4b84      	ldr	r3, [pc, #528]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d05b      	beq.n	8004914 <HAL_RCC_OscConfig+0x124>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d157      	bne.n	8004914 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e25a      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004870:	d106      	bne.n	8004880 <HAL_RCC_OscConfig+0x90>
 8004872:	4b7c      	ldr	r3, [pc, #496]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7b      	ldr	r2, [pc, #492]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e01d      	b.n	80048bc <HAL_RCC_OscConfig+0xcc>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0xb4>
 800488a:	4b76      	ldr	r3, [pc, #472]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a75      	ldr	r2, [pc, #468]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b73      	ldr	r3, [pc, #460]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a72      	ldr	r2, [pc, #456]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0xcc>
 80048a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80048aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d013      	beq.n	80048ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fd6e 	bl	80023a4 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fd fd6a 	bl	80023a4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	@ 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e21f      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b61      	ldr	r3, [pc, #388]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0xdc>
 80048ea:	e014      	b.n	8004916 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fd fd5a 	bl	80023a4 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fd fd56 	bl	80023a4 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	@ 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e20b      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	4b57      	ldr	r3, [pc, #348]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x104>
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d06f      	beq.n	8004a02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004922:	4b50      	ldr	r3, [pc, #320]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b00      	cmp	r3, #0
 800492c:	d017      	beq.n	800495e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800492e:	4b4d      	ldr	r3, [pc, #308]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
        || \
 8004936:	2b08      	cmp	r3, #8
 8004938:	d105      	bne.n	8004946 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800493a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004946:	4b47      	ldr	r3, [pc, #284]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800494e:	2b0c      	cmp	r3, #12
 8004950:	d11c      	bne.n	800498c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004952:	4b44      	ldr	r3, [pc, #272]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d116      	bne.n	800498c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495e:	4b41      	ldr	r3, [pc, #260]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_RCC_OscConfig+0x186>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e1d3      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004976:	4b3b      	ldr	r3, [pc, #236]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4937      	ldr	r1, [pc, #220]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	e03a      	b.n	8004a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d020      	beq.n	80049d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004994:	4b34      	ldr	r3, [pc, #208]	@ (8004a68 <HAL_RCC_OscConfig+0x278>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fd fd03 	bl	80023a4 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fd fcff 	bl	80023a4 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e1b4      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c0:	4b28      	ldr	r3, [pc, #160]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4925      	ldr	r1, [pc, #148]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]
 80049d4:	e015      	b.n	8004a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d6:	4b24      	ldr	r3, [pc, #144]	@ (8004a68 <HAL_RCC_OscConfig+0x278>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fd fce2 	bl	80023a4 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e4:	f7fd fcde 	bl	80023a4 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e193      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d036      	beq.n	8004a7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a16:	4b15      	ldr	r3, [pc, #84]	@ (8004a6c <HAL_RCC_OscConfig+0x27c>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fd fcc2 	bl	80023a4 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a24:	f7fd fcbe 	bl	80023a4 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e173      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x234>
 8004a42:	e01b      	b.n	8004a7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a44:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <HAL_RCC_OscConfig+0x27c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4a:	f7fd fcab 	bl	80023a4 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a50:	e00e      	b.n	8004a70 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a52:	f7fd fca7 	bl	80023a4 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d907      	bls.n	8004a70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e15c      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
 8004a64:	40023800 	.word	0x40023800
 8004a68:	42470000 	.word	0x42470000
 8004a6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	4b8a      	ldr	r3, [pc, #552]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ea      	bne.n	8004a52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8097 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8e:	4b83      	ldr	r3, [pc, #524]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b79      	ldr	r3, [pc, #484]	@ (8004ca0 <HAL_RCC_OscConfig+0x4b0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d118      	bne.n	8004af8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac6:	4b76      	ldr	r3, [pc, #472]	@ (8004ca0 <HAL_RCC_OscConfig+0x4b0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a75      	ldr	r2, [pc, #468]	@ (8004ca0 <HAL_RCC_OscConfig+0x4b0>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad2:	f7fd fc67 	bl	80023a4 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ada:	f7fd fc63 	bl	80023a4 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e118      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aec:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca0 <HAL_RCC_OscConfig+0x4b0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <HAL_RCC_OscConfig+0x31e>
 8004b00:	4b66      	ldr	r3, [pc, #408]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b04:	4a65      	ldr	r2, [pc, #404]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b0c:	e01c      	b.n	8004b48 <HAL_RCC_OscConfig+0x358>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x340>
 8004b16:	4b61      	ldr	r3, [pc, #388]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1a:	4a60      	ldr	r2, [pc, #384]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b1c:	f043 0304 	orr.w	r3, r3, #4
 8004b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b22:	4b5e      	ldr	r3, [pc, #376]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b26:	4a5d      	ldr	r2, [pc, #372]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0x358>
 8004b30:	4b5a      	ldr	r3, [pc, #360]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b34:	4a59      	ldr	r2, [pc, #356]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3c:	4b57      	ldr	r3, [pc, #348]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b40:	4a56      	ldr	r2, [pc, #344]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b42:	f023 0304 	bic.w	r3, r3, #4
 8004b46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d015      	beq.n	8004b7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fd fc28 	bl	80023a4 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b58:	f7fd fc24 	bl	80023a4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0d7      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0ee      	beq.n	8004b58 <HAL_RCC_OscConfig+0x368>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7fd fc12 	bl	80023a4 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7fd fc0e 	bl	80023a4 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e0c1      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9a:	4b40      	ldr	r3, [pc, #256]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ee      	bne.n	8004b84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bac:	4b3b      	ldr	r3, [pc, #236]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80ad 	beq.w	8004d1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bc2:	4b36      	ldr	r3, [pc, #216]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d060      	beq.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d145      	bne.n	8004c62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd6:	4b33      	ldr	r3, [pc, #204]	@ (8004ca4 <HAL_RCC_OscConfig+0x4b4>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fbe2 	bl	80023a4 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fd fbde 	bl	80023a4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e093      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	4b29      	ldr	r3, [pc, #164]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	019b      	lsls	r3, r3, #6
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	071b      	lsls	r3, r3, #28
 8004c2e:	491b      	ldr	r1, [pc, #108]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca4 <HAL_RCC_OscConfig+0x4b4>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fbb3 	bl	80023a4 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd fbaf 	bl	80023a4 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e064      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c54:	4b11      	ldr	r3, [pc, #68]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x452>
 8004c60:	e05c      	b.n	8004d1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c62:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <HAL_RCC_OscConfig+0x4b4>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd fb9c 	bl	80023a4 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c70:	f7fd fb98 	bl	80023a4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e04d      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x480>
 8004c8e:	e045      	b.n	8004d1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e040      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40007000 	.word	0x40007000
 8004ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d28 <HAL_RCC_OscConfig+0x538>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d030      	beq.n	8004d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d129      	bne.n	8004d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d122      	bne.n	8004d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cd8:	4013      	ands	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d119      	bne.n	8004d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d10f      	bne.n	8004d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07b      	b.n	8004e36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d108      	bne.n	8004d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d4e:	d009      	beq.n	8004d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	61da      	str	r2, [r3, #28]
 8004d56:	e005      	b.n	8004d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd f916 	bl	8001fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de8:	ea42 0103 	orr.w	r1, r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0104 	and.w	r1, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	f003 0210 	and.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e041      	b.n	8004ed4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fd f90b 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f000 fad9 	bl	8005434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e041      	b.n	8004f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f839 	bl	8004f7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f000 fa8a 	bl	8005434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <HAL_TIM_PWM_Start+0x24>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e022      	b.n	8004ffa <HAL_TIM_PWM_Start+0x6a>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d109      	bne.n	8004fce <HAL_TIM_PWM_Start+0x3e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e015      	b.n	8004ffa <HAL_TIM_PWM_Start+0x6a>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d109      	bne.n	8004fe8 <HAL_TIM_PWM_Start+0x58>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	e008      	b.n	8004ffa <HAL_TIM_PWM_Start+0x6a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e07c      	b.n	80050fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d104      	bne.n	8005012 <HAL_TIM_PWM_Start+0x82>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005010:	e013      	b.n	800503a <HAL_TIM_PWM_Start+0xaa>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d104      	bne.n	8005022 <HAL_TIM_PWM_Start+0x92>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005020:	e00b      	b.n	800503a <HAL_TIM_PWM_Start+0xaa>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d104      	bne.n	8005032 <HAL_TIM_PWM_Start+0xa2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005030:	e003      	b.n	800503a <HAL_TIM_PWM_Start+0xaa>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2201      	movs	r2, #1
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fcec 	bl	8005a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2d      	ldr	r2, [pc, #180]	@ (8005104 <HAL_TIM_PWM_Start+0x174>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <HAL_TIM_PWM_Start+0xcc>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2c      	ldr	r2, [pc, #176]	@ (8005108 <HAL_TIM_PWM_Start+0x178>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d101      	bne.n	8005060 <HAL_TIM_PWM_Start+0xd0>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <HAL_TIM_PWM_Start+0xd2>
 8005060:	2300      	movs	r3, #0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005074:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <HAL_TIM_PWM_Start+0x174>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d022      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x136>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005088:	d01d      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x136>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1f      	ldr	r2, [pc, #124]	@ (800510c <HAL_TIM_PWM_Start+0x17c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d018      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x136>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1d      	ldr	r2, [pc, #116]	@ (8005110 <HAL_TIM_PWM_Start+0x180>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x136>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005114 <HAL_TIM_PWM_Start+0x184>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x136>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a16      	ldr	r2, [pc, #88]	@ (8005108 <HAL_TIM_PWM_Start+0x178>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x136>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a18      	ldr	r2, [pc, #96]	@ (8005118 <HAL_TIM_PWM_Start+0x188>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x136>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a16      	ldr	r2, [pc, #88]	@ (800511c <HAL_TIM_PWM_Start+0x18c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d111      	bne.n	80050ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b06      	cmp	r3, #6
 80050d6:	d010      	beq.n	80050fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e8:	e007      	b.n	80050fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40010000 	.word	0x40010000
 8005108:	40010400 	.word	0x40010400
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40001800 	.word	0x40001800

08005120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513a:	2302      	movs	r3, #2
 800513c:	e0ae      	b.n	800529c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b0c      	cmp	r3, #12
 800514a:	f200 809f 	bhi.w	800528c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800514e:	a201      	add	r2, pc, #4	@ (adr r2, 8005154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005189 	.word	0x08005189
 8005158:	0800528d 	.word	0x0800528d
 800515c:	0800528d 	.word	0x0800528d
 8005160:	0800528d 	.word	0x0800528d
 8005164:	080051c9 	.word	0x080051c9
 8005168:	0800528d 	.word	0x0800528d
 800516c:	0800528d 	.word	0x0800528d
 8005170:	0800528d 	.word	0x0800528d
 8005174:	0800520b 	.word	0x0800520b
 8005178:	0800528d 	.word	0x0800528d
 800517c:	0800528d 	.word	0x0800528d
 8005180:	0800528d 	.word	0x0800528d
 8005184:	0800524b 	.word	0x0800524b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f9fc 	bl	800558c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0208 	orr.w	r2, r2, #8
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0204 	bic.w	r2, r2, #4
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	619a      	str	r2, [r3, #24]
      break;
 80051c6:	e064      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fa4c 	bl	800566c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6999      	ldr	r1, [r3, #24]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	021a      	lsls	r2, r3, #8
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	619a      	str	r2, [r3, #24]
      break;
 8005208:	e043      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 faa1 	bl	8005758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0208 	orr.w	r2, r2, #8
 8005224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0204 	bic.w	r2, r2, #4
 8005234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69d9      	ldr	r1, [r3, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	61da      	str	r2, [r3, #28]
      break;
 8005248:	e023      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 faf5 	bl	8005840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69d9      	ldr	r1, [r3, #28]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	021a      	lsls	r2, r3, #8
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	61da      	str	r2, [r3, #28]
      break;
 800528a:	e002      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
      break;
 8005290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800529a:	7dfb      	ldrb	r3, [r7, #23]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIM_ConfigClockSource+0x1c>
 80052bc:	2302      	movs	r3, #2
 80052be:	e0b4      	b.n	800542a <HAL_TIM_ConfigClockSource+0x186>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f8:	d03e      	beq.n	8005378 <HAL_TIM_ConfigClockSource+0xd4>
 80052fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fe:	f200 8087 	bhi.w	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005306:	f000 8086 	beq.w	8005416 <HAL_TIM_ConfigClockSource+0x172>
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530e:	d87f      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b70      	cmp	r3, #112	@ 0x70
 8005312:	d01a      	beq.n	800534a <HAL_TIM_ConfigClockSource+0xa6>
 8005314:	2b70      	cmp	r3, #112	@ 0x70
 8005316:	d87b      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b60      	cmp	r3, #96	@ 0x60
 800531a:	d050      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x11a>
 800531c:	2b60      	cmp	r3, #96	@ 0x60
 800531e:	d877      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b50      	cmp	r3, #80	@ 0x50
 8005322:	d03c      	beq.n	800539e <HAL_TIM_ConfigClockSource+0xfa>
 8005324:	2b50      	cmp	r3, #80	@ 0x50
 8005326:	d873      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b40      	cmp	r3, #64	@ 0x40
 800532a:	d058      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x13a>
 800532c:	2b40      	cmp	r3, #64	@ 0x40
 800532e:	d86f      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b30      	cmp	r3, #48	@ 0x30
 8005332:	d064      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005334:	2b30      	cmp	r3, #48	@ 0x30
 8005336:	d86b      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d060      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d867      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d05c      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005344:	2b10      	cmp	r3, #16
 8005346:	d05a      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005348:	e062      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800535a:	f000 fb41 	bl	80059e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800536c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	609a      	str	r2, [r3, #8]
      break;
 8005376:	e04f      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	f000 fb2a 	bl	80059e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800539a:	609a      	str	r2, [r3, #8]
      break;
 800539c:	e03c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	461a      	mov	r2, r3
 80053ac:	f000 fa9e 	bl	80058ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2150      	movs	r1, #80	@ 0x50
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 faf7 	bl	80059aa <TIM_ITRx_SetConfig>
      break;
 80053bc:	e02c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ca:	461a      	mov	r2, r3
 80053cc:	f000 fabd 	bl	800594a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2160      	movs	r1, #96	@ 0x60
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fae7 	bl	80059aa <TIM_ITRx_SetConfig>
      break;
 80053dc:	e01c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	461a      	mov	r2, r3
 80053ec:	f000 fa7e 	bl	80058ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2140      	movs	r1, #64	@ 0x40
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fad7 	bl	80059aa <TIM_ITRx_SetConfig>
      break;
 80053fc:	e00c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f000 face 	bl	80059aa <TIM_ITRx_SetConfig>
      break;
 800540e:	e003      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      break;
 8005414:	e000      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005428:	7bfb      	ldrb	r3, [r7, #15]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a46      	ldr	r2, [pc, #280]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005452:	d00f      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a43      	ldr	r2, [pc, #268]	@ (8005564 <TIM_Base_SetConfig+0x130>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00b      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a42      	ldr	r2, [pc, #264]	@ (8005568 <TIM_Base_SetConfig+0x134>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a41      	ldr	r2, [pc, #260]	@ (800556c <TIM_Base_SetConfig+0x138>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a40      	ldr	r2, [pc, #256]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d108      	bne.n	8005486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a35      	ldr	r2, [pc, #212]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d02b      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005494:	d027      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a32      	ldr	r2, [pc, #200]	@ (8005564 <TIM_Base_SetConfig+0x130>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d023      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a31      	ldr	r2, [pc, #196]	@ (8005568 <TIM_Base_SetConfig+0x134>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01f      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a30      	ldr	r2, [pc, #192]	@ (800556c <TIM_Base_SetConfig+0x138>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01b      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d017      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005574 <TIM_Base_SetConfig+0x140>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <TIM_Base_SetConfig+0x144>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2c      	ldr	r2, [pc, #176]	@ (800557c <TIM_Base_SetConfig+0x148>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005580 <TIM_Base_SetConfig+0x14c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005584 <TIM_Base_SetConfig+0x150>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a29      	ldr	r2, [pc, #164]	@ (8005588 <TIM_Base_SetConfig+0x154>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a10      	ldr	r2, [pc, #64]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0xf8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a12      	ldr	r2, [pc, #72]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d103      	bne.n	8005534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f023 0201 	bic.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]
  }
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40010400 	.word	0x40010400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40001800 	.word	0x40001800
 8005584:	40001c00 	.word	0x40001c00
 8005588:	40002000 	.word	0x40002000

0800558c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f023 0201 	bic.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 0302 	bic.w	r3, r3, #2
 80055d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a20      	ldr	r2, [pc, #128]	@ (8005664 <TIM_OC1_SetConfig+0xd8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC1_SetConfig+0x64>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005668 <TIM_OC1_SetConfig+0xdc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10c      	bne.n	800560a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0308 	bic.w	r3, r3, #8
 80055f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a15      	ldr	r2, [pc, #84]	@ (8005664 <TIM_OC1_SetConfig+0xd8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC1_SetConfig+0x8e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a14      	ldr	r2, [pc, #80]	@ (8005668 <TIM_OC1_SetConfig+0xdc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d111      	bne.n	800563e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40010000 	.word	0x40010000
 8005668:	40010400 	.word	0x40010400

0800566c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f023 0210 	bic.w	r2, r3, #16
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0320 	bic.w	r3, r3, #32
 80056b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a22      	ldr	r2, [pc, #136]	@ (8005750 <TIM_OC2_SetConfig+0xe4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_OC2_SetConfig+0x68>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a21      	ldr	r2, [pc, #132]	@ (8005754 <TIM_OC2_SetConfig+0xe8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d10d      	bne.n	80056f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <TIM_OC2_SetConfig+0xe4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_OC2_SetConfig+0x94>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a16      	ldr	r2, [pc, #88]	@ (8005754 <TIM_OC2_SetConfig+0xe8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d113      	bne.n	8005728 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800570e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400

08005758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <TIM_OC3_SetConfig+0xe0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC3_SetConfig+0x66>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a20      	ldr	r2, [pc, #128]	@ (800583c <TIM_OC3_SetConfig+0xe4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d10d      	bne.n	80057da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a16      	ldr	r2, [pc, #88]	@ (8005838 <TIM_OC3_SetConfig+0xe0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_OC3_SetConfig+0x92>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a15      	ldr	r2, [pc, #84]	@ (800583c <TIM_OC3_SetConfig+0xe4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d113      	bne.n	8005812 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40010000 	.word	0x40010000
 800583c:	40010400 	.word	0x40010400

08005840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800586e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800588a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	031b      	lsls	r3, r3, #12
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a12      	ldr	r2, [pc, #72]	@ (80058e4 <TIM_OC4_SetConfig+0xa4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_OC4_SetConfig+0x68>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a11      	ldr	r2, [pc, #68]	@ (80058e8 <TIM_OC4_SetConfig+0xa8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d109      	bne.n	80058bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	019b      	lsls	r3, r3, #6
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010400 	.word	0x40010400

080058ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f023 0201 	bic.w	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f023 030a 	bic.w	r3, r3, #10
 8005928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800594a:	b480      	push	{r7}
 800594c:	b087      	sub	sp, #28
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f023 0210 	bic.w	r2, r3, #16
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	031b      	lsls	r3, r3, #12
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005986:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	621a      	str	r2, [r3, #32]
}
 800599e:	bf00      	nop
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f043 0307 	orr.w	r3, r3, #7
 80059cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	609a      	str	r2, [r3, #8]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	021a      	lsls	r2, r3, #8
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	609a      	str	r2, [r3, #8]
}
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2201      	movs	r2, #1
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1a      	ldr	r2, [r3, #32]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	401a      	ands	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	fa01 f303 	lsl.w	r3, r1, r3
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e05a      	b.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	@ (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d022      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad0:	d01d      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d018      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d013      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1a      	ldr	r2, [pc, #104]	@ (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00e      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a18      	ldr	r2, [pc, #96]	@ (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d009      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d004      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10c      	bne.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40000c00 	.word	0x40000c00
 8005b58:	40010400 	.word	0x40010400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40001800 	.word	0x40001800

08005b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e03d      	b.n	8005bfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <memset>:
 8005c08:	4402      	add	r2, r0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <memset+0xa>
 8005c10:	4770      	bx	lr
 8005c12:	f803 1b01 	strb.w	r1, [r3], #1
 8005c16:	e7f9      	b.n	8005c0c <memset+0x4>

08005c18 <__libc_init_array>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8005c50 <__libc_init_array+0x38>)
 8005c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8005c54 <__libc_init_array+0x3c>)
 8005c1e:	1b64      	subs	r4, r4, r5
 8005c20:	10a4      	asrs	r4, r4, #2
 8005c22:	2600      	movs	r6, #0
 8005c24:	42a6      	cmp	r6, r4
 8005c26:	d109      	bne.n	8005c3c <__libc_init_array+0x24>
 8005c28:	4d0b      	ldr	r5, [pc, #44]	@ (8005c58 <__libc_init_array+0x40>)
 8005c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8005c5c <__libc_init_array+0x44>)
 8005c2c:	f000 f818 	bl	8005c60 <_init>
 8005c30:	1b64      	subs	r4, r4, r5
 8005c32:	10a4      	asrs	r4, r4, #2
 8005c34:	2600      	movs	r6, #0
 8005c36:	42a6      	cmp	r6, r4
 8005c38:	d105      	bne.n	8005c46 <__libc_init_array+0x2e>
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c40:	4798      	blx	r3
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7ee      	b.n	8005c24 <__libc_init_array+0xc>
 8005c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4a:	4798      	blx	r3
 8005c4c:	3601      	adds	r6, #1
 8005c4e:	e7f2      	b.n	8005c36 <__libc_init_array+0x1e>
 8005c50:	08005cd0 	.word	0x08005cd0
 8005c54:	08005cd0 	.word	0x08005cd0
 8005c58:	08005cd0 	.word	0x08005cd0
 8005c5c:	08005cd4 	.word	0x08005cd4

08005c60 <_init>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr

08005c6c <_fini>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr
