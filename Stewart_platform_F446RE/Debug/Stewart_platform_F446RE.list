
Stewart_platform_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800bc40  0800bc40  0000cc40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2f0  0800c2f0  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2f0  0800c2f0  0000d2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2f8  0800c2f8  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2f8  0800c2f8  0000d2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2fc  0800c2fc  0000d2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c300  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  200001e8  0800c4e8  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800c4e8  0000e5c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122b4  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002baa  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00023078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cde  00000000  00000000  000240f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041df  00000000  00000000  00024dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155ad  00000000  00000000  00028fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df075  00000000  00000000  0003e562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0011d5d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc0  00000000  00000000  0011d660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00123220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc28 	.word	0x0800bc28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800bc28 	.word	0x0800bc28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0bc      	sub	sp, #240	@ 0xf0
 8000fbc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	stewart platform;

	platform_init(&platform);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fb99 	bl	80026f8 <platform_init>

	// set position limits
	platform.xyz_limit = 50.0;	// [mm]
 8000fc6:	4b91      	ldr	r3, [pc, #580]	@ (800120c <main+0x254>)
 8000fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	platform.tilt_limit = 10;	// deg
 8000fcc:	4b90      	ldr	r3, [pc, #576]	@ (8001210 <main+0x258>)
 8000fce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	platform.rot_limit = 10;	// deg
 8000fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8001210 <main+0x258>)
 8000fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f002 fc40 	bl	800385c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f93c 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 fb28 	bl	8001634 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe4:	f000 fb06 	bl	80015f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fe8:	f000 f9a8 	bl	800133c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000fec:	f000 faa2 	bl	8001534 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000ff0:	f000 fa72 	bl	80014d8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 fad4 	bl	80015a0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000ff8:	f000 fa38 	bl	800146c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  adc_ready = 0;
 8000ffc:	4b85      	ldr	r3, [pc, #532]	@ (8001214 <main+0x25c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
#ifdef CAN
  	  HAL_CAN_Start(&hcan1);
  	  HAL_CAN_WakeUp(&hcan1);
#endif

  	  move_platform_home(&platform);
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f000 ffb9 	bl	8001f7c <move_platform_home>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, 6);
 800100a:	2206      	movs	r2, #6
 800100c:	4982      	ldr	r1, [pc, #520]	@ (8001218 <main+0x260>)
 800100e:	4883      	ldr	r0, [pc, #524]	@ (800121c <main+0x264>)
 8001010:	f002 fe0e 	bl	8003c30 <HAL_ADC_Start_DMA>

	  if (adc_ready) {
 8001014:	4b7f      	ldr	r3, [pc, #508]	@ (8001214 <main+0x25c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d03e      	beq.n	800109a <main+0xe2>

		  joyx = adc_raw_to_joystick(adc_raw[0]);
 800101c:	4b7e      	ldr	r3, [pc, #504]	@ (8001218 <main+0x260>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fd8d 	bl	8001b40 <adc_raw_to_joystick>
 8001026:	eef0 7a40 	vmov.f32	s15, s0
 800102a:	4b7d      	ldr	r3, [pc, #500]	@ (8001220 <main+0x268>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
		  joyy = adc_raw_to_joystick(adc_raw[1]);
 8001030:	4b79      	ldr	r3, [pc, #484]	@ (8001218 <main+0x260>)
 8001032:	885b      	ldrh	r3, [r3, #2]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fd83 	bl	8001b40 <adc_raw_to_joystick>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	4b79      	ldr	r3, [pc, #484]	@ (8001224 <main+0x26c>)
 8001040:	edc3 7a00 	vstr	s15, [r3]
		  joyz = adc_raw_to_joystick(adc_raw[2]);
 8001044:	4b74      	ldr	r3, [pc, #464]	@ (8001218 <main+0x260>)
 8001046:	889b      	ldrh	r3, [r3, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fd79 	bl	8001b40 <adc_raw_to_joystick>
 800104e:	eef0 7a40 	vmov.f32	s15, s0
 8001052:	4b75      	ldr	r3, [pc, #468]	@ (8001228 <main+0x270>)
 8001054:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_x = adc_raw_to_joystick(adc_raw[3]);
 8001058:	4b6f      	ldr	r3, [pc, #444]	@ (8001218 <main+0x260>)
 800105a:	88db      	ldrh	r3, [r3, #6]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fd6f 	bl	8001b40 <adc_raw_to_joystick>
 8001062:	eef0 7a40 	vmov.f32	s15, s0
 8001066:	4b71      	ldr	r3, [pc, #452]	@ (800122c <main+0x274>)
 8001068:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_y = adc_raw_to_joystick(adc_raw[4]);
 800106c:	4b6a      	ldr	r3, [pc, #424]	@ (8001218 <main+0x260>)
 800106e:	891b      	ldrh	r3, [r3, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fd65 	bl	8001b40 <adc_raw_to_joystick>
 8001076:	eef0 7a40 	vmov.f32	s15, s0
 800107a:	4b6d      	ldr	r3, [pc, #436]	@ (8001230 <main+0x278>)
 800107c:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_z = adc_raw_to_joystick(adc_raw[5]);
 8001080:	4b65      	ldr	r3, [pc, #404]	@ (8001218 <main+0x260>)
 8001082:	895b      	ldrh	r3, [r3, #10]
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fd5b 	bl	8001b40 <adc_raw_to_joystick>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b69      	ldr	r3, [pc, #420]	@ (8001234 <main+0x27c>)
 8001090:	edc3 7a00 	vstr	s15, [r3]

		  adc_ready = 0;
 8001094:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <main+0x25c>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
	  }

	  home_btn = HAL_GPIO_ReadPin(Home_Button_GPIO_Port, Home_Button_Pin);
 800109a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109e:	4866      	ldr	r0, [pc, #408]	@ (8001238 <main+0x280>)
 80010a0:	f004 f8c0 	bl	8005224 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b64      	ldr	r3, [pc, #400]	@ (800123c <main+0x284>)
 80010aa:	701a      	strb	r2, [r3, #0]
	  suction_btn = HAL_GPIO_ReadPin(suction_enable_btn_GPIO_Port, suction_enable_btn_Pin);
 80010ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b0:	4861      	ldr	r0, [pc, #388]	@ (8001238 <main+0x280>)
 80010b2:	f004 f8b7 	bl	8005224 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b61      	ldr	r3, [pc, #388]	@ (8001240 <main+0x288>)
 80010bc:	701a      	strb	r2, [r3, #0]


	  if ( HAL_GPIO_ReadPin(Motor_enable_GPIO_Port, Motor_enable_Pin) == 0) {
 80010be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c2:	4860      	ldr	r0, [pc, #384]	@ (8001244 <main+0x28c>)
 80010c4:	f004 f8ae 	bl	8005224 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <main+0x124>
		  motor_en_state = motor_en_state ^ 1;
 80010ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001248 <main+0x290>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f083 0301 	eor.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001248 <main+0x290>)
 80010da:	701a      	strb	r2, [r3, #0]
	  }


	  if (home_btn == 0) {
 80010dc:	4b57      	ldr	r3, [pc, #348]	@ (800123c <main+0x284>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <main+0x134>
	 		  move_platform_home(&platform);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 ff48 	bl	8001f7c <move_platform_home>
	 	  }

	  move_target_position(&platform);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fb4c 	bl	800178c <move_target_position>


	  rotate_platform(&platform, platform.a1);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 ff4d 	bl	8002f9e <rotate_platform>
	  rotate_platform(&platform, platform.a2);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 ff45 	bl	8002f9e <rotate_platform>
	  rotate_platform(&platform, platform.a3);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f001 ff3d 	bl	8002f9e <rotate_platform>
	  rotate_platform(&platform, platform.a4);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f001 ff35 	bl	8002f9e <rotate_platform>
	  rotate_platform(&platform, platform.a5);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f001 ff2d 	bl	8002f9e <rotate_platform>
	  rotate_platform(&platform, platform.a6);
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f001 ff25 	bl	8002f9e <rotate_platform>

	  run_platform(&platform);
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f001 ff6a 	bl	8003030 <run_platform>


	  target_pot[0] = c_length_to_pot_value(platform.c_target[0]);
 800115c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	f000 fe60 	bl	8001e28 <c_length_to_pot_value>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b37      	ldr	r3, [pc, #220]	@ (800124c <main+0x294>)
 800116e:	801a      	strh	r2, [r3, #0]
	  target_pot[1] = c_length_to_pot_value(platform.c_target[1]);
 8001170:	edd7 7a02 	vldr	s15, [r7, #8]
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	f000 fe56 	bl	8001e28 <c_length_to_pot_value>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b32      	ldr	r3, [pc, #200]	@ (800124c <main+0x294>)
 8001182:	805a      	strh	r2, [r3, #2]
	  target_pot[2] = c_length_to_pot_value(platform.c_target[2]);
 8001184:	edd7 7a03 	vldr	s15, [r7, #12]
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	f000 fe4c 	bl	8001e28 <c_length_to_pot_value>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <main+0x294>)
 8001196:	809a      	strh	r2, [r3, #4]
	  target_pot[3] = c_length_to_pot_value(platform.c_target[3]);
 8001198:	edd7 7a04 	vldr	s15, [r7, #16]
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	f000 fe42 	bl	8001e28 <c_length_to_pot_value>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b28      	ldr	r3, [pc, #160]	@ (800124c <main+0x294>)
 80011aa:	80da      	strh	r2, [r3, #6]
	  target_pot[4] = c_length_to_pot_value(platform.c_target[4]);
 80011ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	f000 fe38 	bl	8001e28 <c_length_to_pot_value>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b23      	ldr	r3, [pc, #140]	@ (800124c <main+0x294>)
 80011be:	811a      	strh	r2, [r3, #8]
	  target_pot[5] = c_length_to_pot_value(platform.c_target[5]);
 80011c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	f000 fe2e 	bl	8001e28 <c_length_to_pot_value>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <main+0x294>)
 80011d2:	815a      	strh	r2, [r3, #10]

	  pack_data();
 80011d4:	f000 fe5c 	bl	8001e90 <pack_data>


#ifdef I2C

	  // sending commands via I2C
	  if (HAL_I2C_Master_Transmit(&hi2c2, 0x00, TxData, sizeof(TxData), 500) == HAL_OK) {
 80011d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	230d      	movs	r3, #13
 80011e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001250 <main+0x298>)
 80011e2:	2100      	movs	r1, #0
 80011e4:	481b      	ldr	r0, [pc, #108]	@ (8001254 <main+0x29c>)
 80011e6:	f004 f9ad 	bl	8005544 <HAL_I2C_Master_Transmit>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <main+0x240>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011f0:	2120      	movs	r1, #32
 80011f2:	4814      	ldr	r0, [pc, #80]	@ (8001244 <main+0x28c>)
 80011f4:	f004 f847 	bl	8005286 <HAL_GPIO_TogglePin>
	  disp_data();
#endif


#ifdef S_DEBUG
	  debug_platform(&platform, target_pos);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fce3 	bl	8001bc8 <debug_platform>
	  }

#endif


	  HAL_Delay(100);
 8001202:	2064      	movs	r0, #100	@ 0x64
 8001204:	f002 fb9c 	bl	8003940 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, 6);
 8001208:	e6ff      	b.n	800100a <main+0x52>
 800120a:	bf00      	nop
 800120c:	42480000 	.word	0x42480000
 8001210:	41200000 	.word	0x41200000
 8001214:	200003ec 	.word	0x200003ec
 8001218:	200003c8 	.word	0x200003c8
 800121c:	20000204 	.word	0x20000204
 8001220:	200003d4 	.word	0x200003d4
 8001224:	200003d8 	.word	0x200003d8
 8001228:	200003dc 	.word	0x200003dc
 800122c:	200003e0 	.word	0x200003e0
 8001230:	200003e4 	.word	0x200003e4
 8001234:	200003e8 	.word	0x200003e8
 8001238:	40020800 	.word	0x40020800
 800123c:	20000409 	.word	0x20000409
 8001240:	2000040a 	.word	0x2000040a
 8001244:	40020000 	.word	0x40020000
 8001248:	2000040b 	.word	0x2000040b
 800124c:	200003f0 	.word	0x200003f0
 8001250:	200003fc 	.word	0x200003fc
 8001254:	200002d4 	.word	0x200002d4

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	@ 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	2234      	movs	r2, #52	@ 0x34
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f006 fc46 	bl	8007af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <SystemClock_Config+0xdc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	4a2b      	ldr	r2, [pc, #172]	@ (8001334 <SystemClock_Config+0xdc>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	@ 0x40
 800128c:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <SystemClock_Config+0xdc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <SystemClock_Config+0xe0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a25      	ldr	r2, [pc, #148]	@ (8001338 <SystemClock_Config+0xe0>)
 80012a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <SystemClock_Config+0xe0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012bc:	2310      	movs	r3, #16
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012cc:	23b4      	movs	r3, #180	@ 0xb4
 80012ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012d8:	2302      	movs	r3, #2
 80012da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 ff9d 	bl	8006220 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012ec:	f000 fe6e 	bl	8001fcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012f0:	f004 fc82 	bl	8005bf8 <HAL_PWREx_EnableOverDrive>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012fa:	f000 fe67 	bl	8001fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	230f      	movs	r3, #15
 8001300:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001302:	2302      	movs	r3, #2
 8001304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800130a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800130e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001314:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2105      	movs	r1, #5
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fcbb 	bl	8005c98 <HAL_RCC_ClockConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001328:	f000 fe50 	bl	8001fcc <Error_Handler>
  }
}
 800132c:	bf00      	nop
 800132e:	3750      	adds	r7, #80	@ 0x50
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134e:	4b44      	ldr	r3, [pc, #272]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001350:	4a44      	ldr	r2, [pc, #272]	@ (8001464 <MX_ADC1_Init+0x128>)
 8001352:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001354:	4b42      	ldr	r3, [pc, #264]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001356:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800135a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135c:	4b40      	ldr	r3, [pc, #256]	@ (8001460 <MX_ADC1_Init+0x124>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001362:	4b3f      	ldr	r3, [pc, #252]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001364:	2201      	movs	r2, #1
 8001366:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001368:	4b3d      	ldr	r3, [pc, #244]	@ (8001460 <MX_ADC1_Init+0x124>)
 800136a:	2200      	movs	r2, #0
 800136c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800136e:	4b3c      	ldr	r3, [pc, #240]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001376:	4b3a      	ldr	r3, [pc, #232]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137c:	4b38      	ldr	r3, [pc, #224]	@ (8001460 <MX_ADC1_Init+0x124>)
 800137e:	4a3a      	ldr	r2, [pc, #232]	@ (8001468 <MX_ADC1_Init+0x12c>)
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001382:	4b37      	ldr	r3, [pc, #220]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <MX_ADC1_Init+0x124>)
 800138a:	2206      	movs	r2, #6
 800138c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800138e:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001396:	4b32      	ldr	r3, [pc, #200]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001398:	2201      	movs	r2, #1
 800139a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800139c:	4830      	ldr	r0, [pc, #192]	@ (8001460 <MX_ADC1_Init+0x124>)
 800139e:	f002 faf3 	bl	8003988 <HAL_ADC_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013a8:	f000 fe10 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80013b4:	2305      	movs	r3, #5
 80013b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4828      	ldr	r0, [pc, #160]	@ (8001460 <MX_ADC1_Init+0x124>)
 80013be:	f002 fd65 	bl	8003e8c <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013c8:	f000 fe00 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4821      	ldr	r0, [pc, #132]	@ (8001460 <MX_ADC1_Init+0x124>)
 80013da:	f002 fd57 	bl	8003e8c <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013e4:	f000 fdf2 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013e8:	2304      	movs	r3, #4
 80013ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013ec:	2303      	movs	r3, #3
 80013ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	481a      	ldr	r0, [pc, #104]	@ (8001460 <MX_ADC1_Init+0x124>)
 80013f6:	f002 fd49 	bl	8003e8c <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001400:	f000 fde4 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001404:	2308      	movs	r3, #8
 8001406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001408:	2304      	movs	r3, #4
 800140a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4813      	ldr	r0, [pc, #76]	@ (8001460 <MX_ADC1_Init+0x124>)
 8001412:	f002 fd3b 	bl	8003e8c <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800141c:	f000 fdd6 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001420:	2309      	movs	r3, #9
 8001422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001424:	2305      	movs	r3, #5
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <MX_ADC1_Init+0x124>)
 800142e:	f002 fd2d 	bl	8003e8c <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001438:	f000 fdc8 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800143c:	230a      	movs	r3, #10
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001440:	2306      	movs	r3, #6
 8001442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_ADC1_Init+0x124>)
 800144a:	f002 fd1f 	bl	8003e8c <HAL_ADC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001454:	f000 fdba 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000204 	.word	0x20000204
 8001464:	40012000 	.word	0x40012000
 8001468:	0f000001 	.word	0x0f000001

0800146c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001470:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <MX_CAN1_Init+0x64>)
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <MX_CAN1_Init+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <MX_CAN1_Init+0x64>)
 8001478:	220f      	movs	r2, #15
 800147a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800147c:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <MX_CAN1_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001482:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <MX_CAN1_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_CAN1_Init+0x64>)
 800148a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800148e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_CAN1_Init+0x64>)
 8001492:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001496:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <MX_CAN1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_CAN1_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <MX_CAN1_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_CAN1_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <MX_CAN1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_CAN1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	@ (80014d0 <MX_CAN1_Init+0x64>)
 80014be:	f002 ff9f 	bl	8004400 <HAL_CAN_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014c8:	f000 fd80 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200002ac 	.word	0x200002ac
 80014d4:	40006400 	.word	0x40006400

080014d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_I2C2_Init+0x50>)
 80014de:	4a13      	ldr	r2, [pc, #76]	@ (800152c <MX_I2C2_Init+0x54>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_I2C2_Init+0x50>)
 80014e4:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <MX_I2C2_Init+0x58>)
 80014e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_I2C2_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_I2C2_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_I2C2_Init+0x50>)
 80014f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <MX_I2C2_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_I2C2_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <MX_I2C2_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_I2C2_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <MX_I2C2_Init+0x50>)
 8001516:	f003 fed1 	bl	80052bc <HAL_I2C_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001520:	f000 fd54 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200002d4 	.word	0x200002d4
 800152c:	40005800 	.word	0x40005800
 8001530:	000186a0 	.word	0x000186a0

08001534 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <MX_SPI1_Init+0x64>)
 800153a:	4a18      	ldr	r2, [pc, #96]	@ (800159c <MX_SPI1_Init+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_SPI1_Init+0x64>)
 8001540:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001544:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_SPI1_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_SPI1_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_SPI1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_SPI1_Init+0x64>)
 8001560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001564:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_SPI1_Init+0x64>)
 8001568:	2228      	movs	r2, #40	@ 0x28
 800156a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <MX_SPI1_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_SPI1_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <MX_SPI1_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_SPI1_Init+0x64>)
 8001580:	220a      	movs	r2, #10
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <MX_SPI1_Init+0x64>)
 8001586:	f005 f8e9 	bl	800675c <HAL_SPI_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001590:	f000 fd1c 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000328 	.word	0x20000328
 800159c:	40013000 	.word	0x40013000

080015a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <MX_USART2_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015d8:	f005 f949 	bl	800686e <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015e2:	f000 fcf3 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000380 	.word	0x20000380
 80015f0:	40004400 	.word	0x40004400

080015f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_DMA_Init+0x3c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <MX_DMA_Init+0x3c>)
 8001604:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_DMA_Init+0x3c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2038      	movs	r0, #56	@ 0x38
 800161c:	f003 f8c7 	bl	80047ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001620:	2038      	movs	r0, #56	@ 0x38
 8001622:	f003 f8e0 	bl	80047e6 <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b43      	ldr	r3, [pc, #268]	@ (800175c <MX_GPIO_Init+0x128>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a42      	ldr	r2, [pc, #264]	@ (800175c <MX_GPIO_Init+0x128>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b40      	ldr	r3, [pc, #256]	@ (800175c <MX_GPIO_Init+0x128>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <MX_GPIO_Init+0x128>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a3b      	ldr	r2, [pc, #236]	@ (800175c <MX_GPIO_Init+0x128>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b39      	ldr	r3, [pc, #228]	@ (800175c <MX_GPIO_Init+0x128>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b35      	ldr	r3, [pc, #212]	@ (800175c <MX_GPIO_Init+0x128>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a34      	ldr	r2, [pc, #208]	@ (800175c <MX_GPIO_Init+0x128>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b32      	ldr	r3, [pc, #200]	@ (800175c <MX_GPIO_Init+0x128>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b2e      	ldr	r3, [pc, #184]	@ (800175c <MX_GPIO_Init+0x128>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a2d      	ldr	r2, [pc, #180]	@ (800175c <MX_GPIO_Init+0x128>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <MX_GPIO_Init+0x128>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2120      	movs	r1, #32
 80016be:	4828      	ldr	r0, [pc, #160]	@ (8001760 <MX_GPIO_Init+0x12c>)
 80016c0:	f003 fdc8 	bl	8005254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2130      	movs	r1, #48	@ 0x30
 80016c8:	4826      	ldr	r0, [pc, #152]	@ (8001764 <MX_GPIO_Init+0x130>)
 80016ca:	f003 fdc3 	bl	8005254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016ce:	2320      	movs	r3, #32
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	481e      	ldr	r0, [pc, #120]	@ (8001760 <MX_GPIO_Init+0x12c>)
 80016e6:	f003 fc09 	bl	8004efc <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Button_Pin */
  GPIO_InitStruct.Pin = Home_Button_Pin;
 80016ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_Button_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	481a      	ldr	r0, [pc, #104]	@ (8001768 <MX_GPIO_Init+0x134>)
 8001700:	f003 fbfc 	bl	8004efc <HAL_GPIO_Init>

  /*Configure GPIO pin : suction_enable_btn_Pin */
  GPIO_InitStruct.Pin = suction_enable_btn_Pin;
 8001704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800170e:	2302      	movs	r3, #2
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(suction_enable_btn_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4813      	ldr	r0, [pc, #76]	@ (8001768 <MX_GPIO_Init+0x134>)
 800171a:	f003 fbef 	bl	8004efc <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_enable_Pin */
  GPIO_InitStruct.Pin = Motor_enable_Pin;
 800171e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001728:	2301      	movs	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_enable_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	480b      	ldr	r0, [pc, #44]	@ (8001760 <MX_GPIO_Init+0x12c>)
 8001734:	f003 fbe2 	bl	8004efc <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001738:	2330      	movs	r3, #48	@ 0x30
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_GPIO_Init+0x130>)
 8001750:	f003 fbd4 	bl	8004efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800

0800176c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

	adc_ready = 1;
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]

}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200003ec 	.word	0x200003ec

0800178c <move_target_position>:


void move_target_position(stewart* stewart) {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]


	if (stewart->tp_target_pos[0] > stewart->xyz_limit) stewart->tp_target_pos[0] = stewart->xyz_limit;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	dd06      	ble.n	80017b8 <move_target_position+0x2c>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 80017b6:	e038      	b.n	800182a <move_target_position+0x9e>
	else if (stewart->tp_target_pos[0] < -stewart->xyz_limit) stewart->tp_target_pos[0] = -stewart->xyz_limit;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017c4:	eef1 7a67 	vneg.f32	s15, s15
 80017c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	d508      	bpl.n	80017e4 <move_target_position+0x58>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017d8:	eef1 7a67 	vneg.f32	s15, s15
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
 80017e2:	e022      	b.n	800182a <move_target_position+0x9e>
	else if (stewart->tp_target_pos[0] >= -stewart->xyz_limit || stewart->tp_target_pos[0] <= stewart->xyz_limit )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017f0:	eef1 7a67 	vneg.f32	s15, s15
 80017f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	da0a      	bge.n	8001814 <move_target_position+0x88>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800180a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d80a      	bhi.n	800182a <move_target_position+0x9e>
	{
		stewart->tp_target_pos[0] += joyx;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 800181a:	4bba      	ldr	r3, [pc, #744]	@ (8001b04 <move_target_position+0x378>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	}

	if (stewart->tp_target_pos[1] > stewart->xyz_limit) stewart->tp_target_pos[1] = stewart->xyz_limit;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	dd06      	ble.n	800184e <move_target_position+0xc2>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800184c:	e038      	b.n	80018c0 <move_target_position+0x134>
	else if (stewart->tp_target_pos[1] < -stewart->xyz_limit) stewart->tp_target_pos[1] = -stewart->xyz_limit;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800185a:	eef1 7a67 	vneg.f32	s15, s15
 800185e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	d508      	bpl.n	800187a <move_target_position+0xee>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800186e:	eef1 7a67 	vneg.f32	s15, s15
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
 8001878:	e022      	b.n	80018c0 <move_target_position+0x134>
	else if (stewart->tp_target_pos[1] >= -stewart->xyz_limit || stewart->tp_target_pos[1] <= stewart->xyz_limit )
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001886:	eef1 7a67 	vneg.f32	s15, s15
 800188a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	da0a      	bge.n	80018aa <move_target_position+0x11e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80018a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d80a      	bhi.n	80018c0 <move_target_position+0x134>
	{
		stewart->tp_target_pos[1] += joyy;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80018b0:	4b95      	ldr	r3, [pc, #596]	@ (8001b08 <move_target_position+0x37c>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
	}

	if (stewart->tp_target_pos[2] > 0) stewart->tp_target_pos[2] = 0;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 80018c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	dd05      	ble.n	80018dc <move_target_position+0x150>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 80018da:	e03b      	b.n	8001954 <move_target_position+0x1c8>
	else if (stewart->tp_target_pos[2] < -2*stewart->xyz_limit) stewart->tp_target_pos[2] = -2*stewart->xyz_limit;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80018e8:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 80018ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	d50a      	bpl.n	8001910 <move_target_position+0x184>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001900:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
 800190e:	e021      	b.n	8001954 <move_target_position+0x1c8>
	else if (stewart->tp_target_pos[2] >= -2*stewart->xyz_limit || stewart->tp_target_pos[2] <= 0 )
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800191c:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8001920:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	da07      	bge.n	800193e <move_target_position+0x1b2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8001934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d80a      	bhi.n	8001954 <move_target_position+0x1c8>
	{
		stewart->tp_target_pos[2] += joyz;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001944:	4b71      	ldr	r3, [pc, #452]	@ (8001b0c <move_target_position+0x380>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
	}


	if (stewart->tp_target_pos[3] > stewart->tilt_limit) stewart->tp_target_pos[3] = stewart->tilt_limit;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001968:	dd06      	ble.n	8001978 <move_target_position+0x1ec>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8001976:	e038      	b.n	80019ea <move_target_position+0x25e>
	else if (stewart->tp_target_pos[3] < -stewart->tilt_limit) stewart->tp_target_pos[3] = -stewart->tilt_limit;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001984:	eef1 7a67 	vneg.f32	s15, s15
 8001988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d508      	bpl.n	80019a4 <move_target_position+0x218>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001998:	eef1 7a67 	vneg.f32	s15, s15
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
 80019a2:	e022      	b.n	80019ea <move_target_position+0x25e>
	else if (stewart->tp_target_pos[3] >= -stewart->tilt_limit || stewart->tp_target_pos[3] <= stewart->tilt_limit )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80019b0:	eef1 7a67 	vneg.f32	s15, s15
 80019b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	da0a      	bge.n	80019d4 <move_target_position+0x248>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80019ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	d80a      	bhi.n	80019ea <move_target_position+0x25e>
	{
		stewart->tp_target_pos[3] += joyrot_x;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80019da:	4b4d      	ldr	r3, [pc, #308]	@ (8001b10 <move_target_position+0x384>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
	}


	if (stewart->tp_target_pos[4] > stewart->tilt_limit) stewart->tp_target_pos[4] = stewart->tilt_limit;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80019f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	dd06      	ble.n	8001a0e <move_target_position+0x282>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8001a0c:	e038      	b.n	8001a80 <move_target_position+0x2f4>
	else if (stewart->tp_target_pos[4] < -stewart->tilt_limit) stewart->tp_target_pos[4] = -stewart->tilt_limit;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001a1a:	eef1 7a67 	vneg.f32	s15, s15
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	d508      	bpl.n	8001a3a <move_target_position+0x2ae>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001a2e:	eef1 7a67 	vneg.f32	s15, s15
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
 8001a38:	e022      	b.n	8001a80 <move_target_position+0x2f4>
	else if (stewart->tp_target_pos[4] >= -stewart->tilt_limit || stewart->tp_target_pos[4] <= stewart->tilt_limit )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001a46:	eef1 7a67 	vneg.f32	s15, s15
 8001a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	da0a      	bge.n	8001a6a <move_target_position+0x2de>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	d80a      	bhi.n	8001a80 <move_target_position+0x2f4>
	{
		stewart->tp_target_pos[4] += joyrot_y;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001a70:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <move_target_position+0x388>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
	}


	if (stewart->tp_target_pos[5] > stewart->rot_limit) stewart->tp_target_pos[5] = stewart->rot_limit;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	dd06      	ble.n	8001aa4 <move_target_position+0x318>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	{
		stewart->tp_target_pos[5] += joyrot_z;
	}


}
 8001aa2:	e044      	b.n	8001b2e <move_target_position+0x3a2>
	else if (stewart->tp_target_pos[5] < -stewart->rot_limit) stewart->tp_target_pos[5] = -stewart->rot_limit;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001ab0:	eef1 7a67 	vneg.f32	s15, s15
 8001ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	d508      	bpl.n	8001ad0 <move_target_position+0x344>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001ac4:	eef1 7a67 	vneg.f32	s15, s15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 8001ace:	e02e      	b.n	8001b2e <move_target_position+0x3a2>
	else if (stewart->tp_target_pos[5] >= -stewart->rot_limit || stewart->tp_target_pos[5] <= stewart->rot_limit )
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001adc:	eef1 7a67 	vneg.f32	s15, s15
 8001ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	da16      	bge.n	8001b18 <move_target_position+0x38c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	d90b      	bls.n	8001b18 <move_target_position+0x38c>
}
 8001b00:	e015      	b.n	8001b2e <move_target_position+0x3a2>
 8001b02:	bf00      	nop
 8001b04:	200003d4 	.word	0x200003d4
 8001b08:	200003d8 	.word	0x200003d8
 8001b0c:	200003dc 	.word	0x200003dc
 8001b10:	200003e0 	.word	0x200003e0
 8001b14:	200003e4 	.word	0x200003e4
		stewart->tp_target_pos[5] += joyrot_z;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <move_target_position+0x3b0>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	200003e8 	.word	0x200003e8

08001b40 <adc_raw_to_joystick>:


float adc_raw_to_joystick(uint16_t adc_raw) {
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]

	float joy_val;

	if (adc_raw >= 1900 && adc_raw <= 2150) {
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d907      	bls.n	8001b64 <adc_raw_to_joystick+0x24>
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	f640 0266 	movw	r2, #2150	@ 0x866
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d802      	bhi.n	8001b64 <adc_raw_to_joystick+0x24>
		return 0;
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e025      	b.n	8001bb0 <adc_raw_to_joystick+0x70>
	}

	else if (adc_raw > 2100) {
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	f640 0234 	movw	r2, #2100	@ 0x834
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d90d      	bls.n	8001b8a <adc_raw_to_joystick+0x4a>
		joy_val = (float) (adc_raw - 2150) / 400;
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	f6a3 0366 	subw	r3, r3, #2150	@ 0x866
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001bc4 <adc_raw_to_joystick+0x84>
 8001b80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b84:	edc7 7a03 	vstr	s15, [r7, #12]
 8001b88:	e011      	b.n	8001bae <adc_raw_to_joystick+0x6e>

	}

	else if (adc_raw <1900) {
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d80c      	bhi.n	8001bae <adc_raw_to_joystick+0x6e>
		joy_val = (float) (adc_raw - 1850)/ 400;
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	f2a3 733a 	subw	r3, r3, #1850	@ 0x73a
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba2:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001bc4 <adc_raw_to_joystick+0x84>
 8001ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001baa:	edc7 7a03 	vstr	s15, [r7, #12]

	}
	return joy_val;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	43c80000 	.word	0x43c80000

08001bc8 <debug_platform>:


#ifdef S_DEBUG

void debug_platform(stewart* stewart, uint8_t output_type) {
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b092      	sub	sp, #72	@ 0x48
 8001bce:	af0a      	add	r7, sp, #40	@ 0x28
 8001bd0:	6178      	str	r0, [r7, #20]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	74fb      	strb	r3, [r7, #19]

	if (output_type == target_pos) {
 8001bd6:	7cfb      	ldrb	r3, [r7, #19]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d14b      	bne.n	8001c74 <debug_platform+0xac>
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
				stewart->tp_target_pos[0], stewart->tp_target_pos[1], stewart->tp_target_pos[2],
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcd0 	bl	8000588 <__aeabi_f2d>
 8001be8:	e9c7 0102 	strd	r0, r1, [r7, #8]
				stewart->tp_target_pos[0], stewart->tp_target_pos[1], stewart->tp_target_pos[2],
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fcc8 	bl	8000588 <__aeabi_f2d>
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	460d      	mov	r5, r1
				stewart->tp_target_pos[0], stewart->tp_target_pos[1], stewart->tp_target_pos[2],
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcc0 	bl	8000588 <__aeabi_f2d>
 8001c08:	4680      	mov	r8, r0
 8001c0a:	4689      	mov	r9, r1
				stewart->tp_target_pos[3], stewart->tp_target_pos[4], stewart->tp_target_pos[5]);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fcb8 	bl	8000588 <__aeabi_f2d>
 8001c18:	4682      	mov	sl, r0
 8001c1a:	468b      	mov	fp, r1
				stewart->tp_target_pos[3], stewart->tp_target_pos[4], stewart->tp_target_pos[5]);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fcb0 	bl	8000588 <__aeabi_f2d>
 8001c28:	e9c7 0100 	strd	r0, r1, [r7]
				stewart->tp_target_pos[3], stewart->tp_target_pos[4], stewart->tp_target_pos[5]);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fca8 	bl	8000588 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001c40:	ed97 7b00 	vldr	d7, [r7]
 8001c44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001c48:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c4c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c50:	e9cd 4500 	strd	r4, r5, [sp]
 8001c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c58:	4965      	ldr	r1, [pc, #404]	@ (8001df0 <debug_platform+0x228>)
 8001c5a:	4866      	ldr	r0, [pc, #408]	@ (8001df4 <debug_platform+0x22c>)
 8001c5c:	f005 fe6a 	bl	8007934 <siprintf>
 8001c60:	4603      	mov	r3, r0
 8001c62:	773b      	strb	r3, [r7, #28]

		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);
 8001c64:	7f3b      	ldrb	r3, [r7, #28]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2364      	movs	r3, #100	@ 0x64
 8001c6a:	4962      	ldr	r1, [pc, #392]	@ (8001df4 <debug_platform+0x22c>)
 8001c6c:	4862      	ldr	r0, [pc, #392]	@ (8001df8 <debug_platform+0x230>)
 8001c6e:	f004 fe4e 	bl	800690e <HAL_UART_Transmit>
							joyx, joyy, joyz, joyrot_x, joyrot_y, joyrot_z);
		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);

	}

}
 8001c72:	e0b8      	b.n	8001de6 <debug_platform+0x21e>
	else if (output_type == target_c_length) {
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d145      	bne.n	8001d06 <debug_platform+0x13e>
				stewart->c_target[0], stewart->c_target[1], stewart->c_target[2],
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	681b      	ldr	r3, [r3, #0]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc82 	bl	8000588 <__aeabi_f2d>
 8001c84:	e9c7 0102 	strd	r0, r1, [r7, #8]
				stewart->c_target[0], stewart->c_target[1], stewart->c_target[2],
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	685b      	ldr	r3, [r3, #4]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc7b 	bl	8000588 <__aeabi_f2d>
 8001c92:	4604      	mov	r4, r0
 8001c94:	460d      	mov	r5, r1
				stewart->c_target[0], stewart->c_target[1], stewart->c_target[2],
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	689b      	ldr	r3, [r3, #8]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc74 	bl	8000588 <__aeabi_f2d>
 8001ca0:	4680      	mov	r8, r0
 8001ca2:	4689      	mov	r9, r1
				stewart->c_target[3], stewart->c_target[4], stewart->c_target[5]);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	68db      	ldr	r3, [r3, #12]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc6d 	bl	8000588 <__aeabi_f2d>
 8001cae:	4682      	mov	sl, r0
 8001cb0:	468b      	mov	fp, r1
				stewart->c_target[3], stewart->c_target[4], stewart->c_target[5]);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	691b      	ldr	r3, [r3, #16]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc66 	bl	8000588 <__aeabi_f2d>
 8001cbc:	e9c7 0100 	strd	r0, r1, [r7]
				stewart->c_target[3], stewart->c_target[4], stewart->c_target[5]);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	695b      	ldr	r3, [r3, #20]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc5f 	bl	8000588 <__aeabi_f2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001cd2:	ed97 7b00 	vldr	d7, [r7]
 8001cd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001cda:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001cde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ce2:	e9cd 4500 	strd	r4, r5, [sp]
 8001ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cea:	4944      	ldr	r1, [pc, #272]	@ (8001dfc <debug_platform+0x234>)
 8001cec:	4841      	ldr	r0, [pc, #260]	@ (8001df4 <debug_platform+0x22c>)
 8001cee:	f005 fe21 	bl	8007934 <siprintf>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	777b      	strb	r3, [r7, #29]
		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);
 8001cf6:	7f7b      	ldrb	r3, [r7, #29]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	2364      	movs	r3, #100	@ 0x64
 8001cfc:	493d      	ldr	r1, [pc, #244]	@ (8001df4 <debug_platform+0x22c>)
 8001cfe:	483e      	ldr	r0, [pc, #248]	@ (8001df8 <debug_platform+0x230>)
 8001d00:	f004 fe05 	bl	800690e <HAL_UART_Transmit>
}
 8001d04:	e06f      	b.n	8001de6 <debug_platform+0x21e>
	else if (output_type == target_pot_val) {
 8001d06:	7cfb      	ldrb	r3, [r7, #19]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d124      	bne.n	8001d56 <debug_platform+0x18e>
					target_pot[0], target_pot[1], target_pot[2],
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e00 <debug_platform+0x238>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001d10:	461c      	mov	r4, r3
					target_pot[0], target_pot[1], target_pot[2],
 8001d12:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <debug_platform+0x238>)
 8001d14:	885b      	ldrh	r3, [r3, #2]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001d16:	461d      	mov	r5, r3
					target_pot[0], target_pot[1], target_pot[2],
 8001d18:	4b39      	ldr	r3, [pc, #228]	@ (8001e00 <debug_platform+0x238>)
 8001d1a:	889b      	ldrh	r3, [r3, #4]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001d1c:	461a      	mov	r2, r3
					target_pot[3], target_pot[4], target_pot[5]);
 8001d1e:	4b38      	ldr	r3, [pc, #224]	@ (8001e00 <debug_platform+0x238>)
 8001d20:	88db      	ldrh	r3, [r3, #6]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001d22:	4619      	mov	r1, r3
					target_pot[3], target_pot[4], target_pot[5]);
 8001d24:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <debug_platform+0x238>)
 8001d26:	891b      	ldrh	r3, [r3, #8]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001d28:	4618      	mov	r0, r3
					target_pot[3], target_pot[4], target_pot[5]);
 8001d2a:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <debug_platform+0x238>)
 8001d2c:	895b      	ldrh	r3, [r3, #10]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001d2e:	9303      	str	r3, [sp, #12]
 8001d30:	9002      	str	r0, [sp, #8]
 8001d32:	9101      	str	r1, [sp, #4]
 8001d34:	9200      	str	r2, [sp, #0]
 8001d36:	462b      	mov	r3, r5
 8001d38:	4622      	mov	r2, r4
 8001d3a:	4932      	ldr	r1, [pc, #200]	@ (8001e04 <debug_platform+0x23c>)
 8001d3c:	482d      	ldr	r0, [pc, #180]	@ (8001df4 <debug_platform+0x22c>)
 8001d3e:	f005 fdf9 	bl	8007934 <siprintf>
 8001d42:	4603      	mov	r3, r0
 8001d44:	77bb      	strb	r3, [r7, #30]
		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);
 8001d46:	7fbb      	ldrb	r3, [r7, #30]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	2364      	movs	r3, #100	@ 0x64
 8001d4c:	4929      	ldr	r1, [pc, #164]	@ (8001df4 <debug_platform+0x22c>)
 8001d4e:	482a      	ldr	r0, [pc, #168]	@ (8001df8 <debug_platform+0x230>)
 8001d50:	f004 fddd 	bl	800690e <HAL_UART_Transmit>
}
 8001d54:	e047      	b.n	8001de6 <debug_platform+0x21e>
	else if (output_type == joystick_input) {
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d144      	bne.n	8001de6 <debug_platform+0x21e>
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <debug_platform+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fc11 	bl	8000588 <__aeabi_f2d>
 8001d66:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d6a:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <debug_platform+0x244>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fc0a 	bl	8000588 <__aeabi_f2d>
 8001d74:	4604      	mov	r4, r0
 8001d76:	460d      	mov	r5, r1
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <debug_platform+0x248>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fc03 	bl	8000588 <__aeabi_f2d>
 8001d82:	4680      	mov	r8, r0
 8001d84:	4689      	mov	r9, r1
 8001d86:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <debug_platform+0x24c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbfc 	bl	8000588 <__aeabi_f2d>
 8001d90:	4682      	mov	sl, r0
 8001d92:	468b      	mov	fp, r1
 8001d94:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <debug_platform+0x250>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbf5 	bl	8000588 <__aeabi_f2d>
 8001d9e:	e9c7 0100 	strd	r0, r1, [r7]
 8001da2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <debug_platform+0x254>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbee 	bl	8000588 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001db4:	ed97 7b00 	vldr	d7, [r7]
 8001db8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001dbc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001dc0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dc4:	e9cd 4500 	strd	r4, r5, [sp]
 8001dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dcc:	4914      	ldr	r1, [pc, #80]	@ (8001e20 <debug_platform+0x258>)
 8001dce:	4809      	ldr	r0, [pc, #36]	@ (8001df4 <debug_platform+0x22c>)
 8001dd0:	f005 fdb0 	bl	8007934 <siprintf>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	77fb      	strb	r3, [r7, #31]
		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);
 8001dd8:	7ffb      	ldrb	r3, [r7, #31]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	2364      	movs	r3, #100	@ 0x64
 8001dde:	4905      	ldr	r1, [pc, #20]	@ (8001df4 <debug_platform+0x22c>)
 8001de0:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <debug_platform+0x230>)
 8001de2:	f004 fd94 	bl	800690e <HAL_UART_Transmit>
}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df0:	0800bc40 	.word	0x0800bc40
 8001df4:	2000040c 	.word	0x2000040c
 8001df8:	20000380 	.word	0x20000380
 8001dfc:	0800bc84 	.word	0x0800bc84
 8001e00:	200003f0 	.word	0x200003f0
 8001e04:	0800bcbc 	.word	0x0800bcbc
 8001e08:	200003d4 	.word	0x200003d4
 8001e0c:	200003d8 	.word	0x200003d8
 8001e10:	200003dc 	.word	0x200003dc
 8001e14:	200003e0 	.word	0x200003e0
 8001e18:	200003e4 	.word	0x200003e4
 8001e1c:	200003e8 	.word	0x200003e8
 8001e20:	0800bcfc 	.word	0x0800bcfc
 8001e24:	00000000 	.word	0x00000000

08001e28 <c_length_to_pot_value>:

#endif


uint16_t c_length_to_pot_value(float cylinder_length) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	ed87 0a01 	vstr	s0, [r7, #4]

	uint16_t pot_val;

	pot_val = (uint16_t) (cylinder_length - 460.00) * 13.6533;
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fba8 	bl	8000588 <__aeabi_f2d>
 8001e38:	a311      	add	r3, pc, #68	@ (adr r3, 8001e80 <c_length_to_pot_value+0x58>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fa43 	bl	80002c8 <__aeabi_dsub>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fecd 	bl	8000be8 <__aeabi_d2uiz>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb86 	bl	8000564 <__aeabi_i2d>
 8001e58:	a30b      	add	r3, pc, #44	@ (adr r3, 8001e88 <c_length_to_pot_value+0x60>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fbeb 	bl	8000638 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe febd 	bl	8000be8 <__aeabi_d2uiz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	81fb      	strh	r3, [r7, #14]

	return pot_val;
 8001e72:	89fb      	ldrh	r3, [r7, #14]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	f3af 8000 	nop.w
 8001e80:	00000000 	.word	0x00000000
 8001e84:	407cc000 	.word	0x407cc000
 8001e88:	566cf41f 	.word	0x566cf41f
 8001e8c:	402b4e7d 	.word	0x402b4e7d

08001e90 <pack_data>:


void pack_data(void) {
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

	TxData[0] = (uint8_t) (target_pot[0] & 0xFF);
 8001e94:	4b35      	ldr	r3, [pc, #212]	@ (8001f6c <pack_data+0xdc>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b35      	ldr	r3, [pc, #212]	@ (8001f70 <pack_data+0xe0>)
 8001e9c:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t) (target_pot[0] >> 8) & 0x0F;
 8001e9e:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <pack_data+0xdc>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b30      	ldr	r3, [pc, #192]	@ (8001f70 <pack_data+0xe0>)
 8001eb0:	705a      	strb	r2, [r3, #1]

	TxData[2] = (uint8_t) (target_pot[1] & 0xFF);
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <pack_data+0xdc>)
 8001eb4:	885b      	ldrh	r3, [r3, #2]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f70 <pack_data+0xe0>)
 8001eba:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) (target_pot[1] >> 8) & 0x0F;
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f6c <pack_data+0xdc>)
 8001ebe:	885b      	ldrh	r3, [r3, #2]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <pack_data+0xe0>)
 8001ece:	70da      	strb	r2, [r3, #3]

	TxData[4] = (uint8_t) (target_pot[2] & 0xFF);
 8001ed0:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <pack_data+0xdc>)
 8001ed2:	889b      	ldrh	r3, [r3, #4]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <pack_data+0xe0>)
 8001ed8:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) (target_pot[2] >> 8) & 0x0F;
 8001eda:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <pack_data+0xdc>)
 8001edc:	889b      	ldrh	r3, [r3, #4]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <pack_data+0xe0>)
 8001eec:	715a      	strb	r2, [r3, #5]

	TxData[6] = (uint8_t) (target_pot[3] & 0xFF);
 8001eee:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <pack_data+0xdc>)
 8001ef0:	88db      	ldrh	r3, [r3, #6]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <pack_data+0xe0>)
 8001ef6:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t) (target_pot[3] >> 8) & 0x0F;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <pack_data+0xdc>)
 8001efa:	88db      	ldrh	r3, [r3, #6]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <pack_data+0xe0>)
 8001f0a:	71da      	strb	r2, [r3, #7]

	TxData[8] = (uint8_t) (target_pot[4] & 0xFF);
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <pack_data+0xdc>)
 8001f0e:	891b      	ldrh	r3, [r3, #8]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <pack_data+0xe0>)
 8001f14:	721a      	strb	r2, [r3, #8]
	TxData[9] = (uint8_t) (target_pot[4] >> 8) & 0x0F;
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <pack_data+0xdc>)
 8001f18:	891b      	ldrh	r3, [r3, #8]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <pack_data+0xe0>)
 8001f28:	725a      	strb	r2, [r3, #9]

	TxData[10] = (uint8_t) (target_pot[5] & 0xFF);
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <pack_data+0xdc>)
 8001f2c:	895b      	ldrh	r3, [r3, #10]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <pack_data+0xe0>)
 8001f32:	729a      	strb	r2, [r3, #10]
	TxData[11] = (uint8_t) (target_pot[5] >> 8) & 0x0F;
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <pack_data+0xdc>)
 8001f36:	895b      	ldrh	r3, [r3, #10]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <pack_data+0xe0>)
 8001f46:	72da      	strb	r2, [r3, #11]

	TxData[12] = (uint8_t) suction_btn | (motor_en_state << 1);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <pack_data+0xe4>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	b25a      	sxtb	r2, r3
 8001f50:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <pack_data+0xe8>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <pack_data+0xe0>)
 8001f5e:	731a      	strb	r2, [r3, #12]

}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200003f0 	.word	0x200003f0
 8001f70:	200003fc 	.word	0x200003fc
 8001f74:	2000040b 	.word	0x2000040b
 8001f78:	2000040a 	.word	0x2000040a

08001f7c <move_platform_home>:


void move_platform_home(stewart* st) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

	st->tp_target_pos[0] = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	st->tp_target_pos[1] = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	st->tp_target_pos[2] = 0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	st->tp_target_pos[3] = 0;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	st->tp_target_pos[4] = 0;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	st->tp_target_pos[5] = 0;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <Error_Handler+0x18>)
 8001fd4:	f003 f957 	bl	8005286 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001fd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fdc:	f001 fcb0 	bl	8003940 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001fe0:	bf00      	nop
 8001fe2:	e7f5      	b.n	8001fd0 <Error_Handler+0x4>
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_MspInit+0x4c>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8002034 <HAL_MspInit+0x4c>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <HAL_MspInit+0x4c>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_MspInit+0x4c>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a08      	ldr	r2, [pc, #32]	@ (8002034 <HAL_MspInit+0x4c>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_MspInit+0x4c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800

08002038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	@ 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a4d      	ldr	r2, [pc, #308]	@ (800218c <HAL_ADC_MspInit+0x154>)
 8002056:	4293      	cmp	r3, r2
 8002058:	f040 8094 	bne.w	8002184 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	4a4a      	ldr	r2, [pc, #296]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206a:	6453      	str	r3, [r2, #68]	@ 0x44
 800206c:	4b48      	ldr	r3, [pc, #288]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	4b44      	ldr	r3, [pc, #272]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	4a43      	ldr	r2, [pc, #268]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6313      	str	r3, [r2, #48]	@ 0x30
 8002088:	4b41      	ldr	r3, [pc, #260]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	4b3d      	ldr	r3, [pc, #244]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	4a3c      	ldr	r2, [pc, #240]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b36      	ldr	r3, [pc, #216]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	4a35      	ldr	r2, [pc, #212]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c0:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <HAL_ADC_MspInit+0x158>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = joy_rot_z_Pin;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d0:	2303      	movs	r3, #3
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(joy_rot_z_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	482d      	ldr	r0, [pc, #180]	@ (8002194 <HAL_ADC_MspInit+0x15c>)
 80020e0:	f002 ff0c 	bl	8004efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joy_x_Pin|joy_y_Pin|joy_z_Pin;
 80020e4:	2313      	movs	r3, #19
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e8:	2303      	movs	r3, #3
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4828      	ldr	r0, [pc, #160]	@ (8002198 <HAL_ADC_MspInit+0x160>)
 80020f8:	f002 ff00 	bl	8004efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joy_rot_x_Pin|joy_rot_y_Pin;
 80020fc:	2303      	movs	r3, #3
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002100:	2303      	movs	r3, #3
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	4823      	ldr	r0, [pc, #140]	@ (800219c <HAL_ADC_MspInit+0x164>)
 8002110:	f002 fef4 	bl	8004efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002114:	4b22      	ldr	r3, [pc, #136]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 8002116:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <HAL_ADC_MspInit+0x16c>)
 8002118:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800211a:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002126:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800212c:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 800212e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002132:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 8002136:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800213a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800213c:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 800213e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002142:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002144:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 8002146:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800214a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 800214e:	2200      	movs	r2, #0
 8002150:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002152:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 8002154:	2200      	movs	r2, #0
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002158:	4811      	ldr	r0, [pc, #68]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 800215a:	f002 fb5f 	bl	800481c <HAL_DMA_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002164:	f7ff ff32 	bl	8001fcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 800216c:	639a      	str	r2, [r3, #56]	@ 0x38
 800216e:	4a0c      	ldr	r2, [pc, #48]	@ (80021a0 <HAL_ADC_MspInit+0x168>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	2012      	movs	r0, #18
 800217a:	f002 fb18 	bl	80047ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800217e:	2012      	movs	r0, #18
 8002180:	f002 fb31 	bl	80047e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002184:	bf00      	nop
 8002186:	3730      	adds	r7, #48	@ 0x30
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40012000 	.word	0x40012000
 8002190:	40023800 	.word	0x40023800
 8002194:	40020800 	.word	0x40020800
 8002198:	40020000 	.word	0x40020000
 800219c:	40020400 	.word	0x40020400
 80021a0:	2000024c 	.word	0x2000024c
 80021a4:	40026410 	.word	0x40026410

080021a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_CAN_MspInit+0x84>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d12c      	bne.n	8002224 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_CAN_MspInit+0x88>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <HAL_CAN_MspInit+0x88>)
 80021d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_CAN_MspInit+0x88>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <HAL_CAN_MspInit+0x88>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <HAL_CAN_MspInit+0x88>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <HAL_CAN_MspInit+0x88>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002202:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002214:	2309      	movs	r3, #9
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	4805      	ldr	r0, [pc, #20]	@ (8002234 <HAL_CAN_MspInit+0x8c>)
 8002220:	f002 fe6c 	bl	8004efc <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	@ 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40006400 	.word	0x40006400
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000

08002238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <HAL_I2C_MspInit+0xc4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d14b      	bne.n	80022f2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a27      	ldr	r2, [pc, #156]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a20      	ldr	r2, [pc, #128]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002298:	2312      	movs	r3, #18
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800229c:	2301      	movs	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022a4:	2304      	movs	r3, #4
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	4815      	ldr	r0, [pc, #84]	@ (8002304 <HAL_I2C_MspInit+0xcc>)
 80022b0:	f002 fe24 	bl	8004efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ba:	2312      	movs	r3, #18
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022be:	2301      	movs	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022c6:	2304      	movs	r3, #4
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <HAL_I2C_MspInit+0xd0>)
 80022d2:	f002 fe13 	bl	8004efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	4a08      	ldr	r2, [pc, #32]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 80022e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_I2C_MspInit+0xc8>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	@ 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40005800 	.word	0x40005800
 8002300:	40023800 	.word	0x40023800
 8002304:	40020400 	.word	0x40020400
 8002308:	40020800 	.word	0x40020800

0800230c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	@ 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a28      	ldr	r2, [pc, #160]	@ (80023cc <HAL_SPI_MspInit+0xc0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d149      	bne.n	80023c2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b27      	ldr	r3, [pc, #156]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	4a26      	ldr	r2, [pc, #152]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 8002338:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800233c:	6453      	str	r3, [r2, #68]	@ 0x44
 800233e:	4b24      	ldr	r3, [pc, #144]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a1f      	ldr	r2, [pc, #124]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a18      	ldr	r2, [pc, #96]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <HAL_SPI_MspInit+0xc4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002382:	23c0      	movs	r3, #192	@ 0xc0
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002392:	2305      	movs	r3, #5
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <HAL_SPI_MspInit+0xc8>)
 800239e:	f002 fdad 	bl	8004efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023a2:	2308      	movs	r3, #8
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023b2:	2305      	movs	r3, #5
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	4806      	ldr	r0, [pc, #24]	@ (80023d8 <HAL_SPI_MspInit+0xcc>)
 80023be:	f002 fd9d 	bl	8004efc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40013000 	.word	0x40013000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020400 	.word	0x40020400

080023dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	@ 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a19      	ldr	r2, [pc, #100]	@ (8002460 <HAL_UART_MspInit+0x84>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d12b      	bne.n	8002456 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	4a17      	ldr	r2, [pc, #92]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240c:	6413      	str	r3, [r2, #64]	@ 0x40
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	4a10      	ldr	r2, [pc, #64]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	@ 0x30
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_UART_MspInit+0x88>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002436:	230c      	movs	r3, #12
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002446:	2307      	movs	r3, #7
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <HAL_UART_MspInit+0x8c>)
 8002452:	f002 fd53 	bl	8004efc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002456:	bf00      	nop
 8002458:	3728      	adds	r7, #40	@ 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40004400 	.word	0x40004400
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000

0800246c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <NMI_Handler+0x4>

08002474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <MemManage_Handler+0x4>

08002484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <UsageFault_Handler+0x4>

08002494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c2:	f001 fa1d 	bl	8003900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <ADC_IRQHandler+0x10>)
 80024d2:	f001 fa9c 	bl	8003a0e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000204 	.word	0x20000204

080024e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <DMA2_Stream0_IRQHandler+0x10>)
 80024e6:	f002 fa9f 	bl	8004a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000024c 	.word	0x2000024c

080024f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return 1;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_kill>:

int _kill(int pid, int sig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800250e:	f005 faff 	bl	8007b10 <__errno>
 8002512:	4603      	mov	r3, r0
 8002514:	2216      	movs	r2, #22
 8002516:	601a      	str	r2, [r3, #0]
  return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_exit>:

void _exit (int status)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800252c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002536:	bf00      	nop
 8002538:	e7fd      	b.n	8002536 <_exit+0x12>

0800253a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e00a      	b.n	8002562 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800254c:	f3af 8000 	nop.w
 8002550:	4601      	mov	r1, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	60ba      	str	r2, [r7, #8]
 8002558:	b2ca      	uxtb	r2, r1
 800255a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	dbf0      	blt.n	800254c <_read+0x12>
  }

  return len;
 800256a:	687b      	ldr	r3, [r7, #4]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e009      	b.n	800259a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	60ba      	str	r2, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	dbf1      	blt.n	8002586 <_write+0x12>
  }
  return len;
 80025a2:	687b      	ldr	r3, [r7, #4]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_close>:

int _close(int file)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d4:	605a      	str	r2, [r3, #4]
  return 0;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_isatty>:

int _isatty(int file)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ec:	2301      	movs	r3, #1
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	@ (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f005 fa64 	bl	8007b10 <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	@ (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20020000 	.word	0x20020000
 8002674:	00000400 	.word	0x00000400
 8002678:	20000470 	.word	0x20000470
 800267c:	200005c8 	.word	0x200005c8

08002680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	@ (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026a8:	f7ff ffea 	bl	8002680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026ac:	480c      	ldr	r0, [pc, #48]	@ (80026e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ae:	490d      	ldr	r1, [pc, #52]	@ (80026e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c4:	4c0a      	ldr	r4, [pc, #40]	@ (80026f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f005 fa23 	bl	8007b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7fe fc6f 	bl	8000fb8 <main>
  bx  lr    
 80026da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80026e8:	0800c300 	.word	0x0800c300
  ldr r2, =_sbss
 80026ec:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80026f0:	200005c4 	.word	0x200005c4

080026f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <CAN1_RX0_IRQHandler>
	...

080026f8 <platform_init>:
#include "stewart.h"




void platform_init(stewart* stewart) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

    // base plate joints positions 
    stewart->b1[0]=R*cos(deg_to_rad(60-beta/2)),  stewart->b1[1]=R*sin(deg_to_rad(60-beta/2)),  stewart->b1[2]=h;
 8002700:	ed9f 0adb 	vldr	s0, [pc, #876]	@ 8002a70 <platform_init+0x378>
 8002704:	f000 f9c8 	bl	8002a98 <deg_to_rad>
 8002708:	ee10 3a10 	vmov	r3, s0
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff3b 	bl	8000588 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ec43 2b10 	vmov	d0, r2, r3
 800271a:	f007 fb99 	bl	8009e50 <cos>
 800271e:	ec51 0b10 	vmov	r0, r1, d0
 8002722:	a3d1      	add	r3, pc, #836	@ (adr r3, 8002a68 <platform_init+0x370>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f7fd ff86 	bl	8000638 <__aeabi_dmul>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	f7fe fa78 	bl	8000c28 <__aeabi_d2f>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	679a      	str	r2, [r3, #120]	@ 0x78
 800273e:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 8002a70 <platform_init+0x378>
 8002742:	f000 f9a9 	bl	8002a98 <deg_to_rad>
 8002746:	ee10 3a10 	vmov	r3, s0
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff1c 	bl	8000588 <__aeabi_f2d>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	ec43 2b10 	vmov	d0, r2, r3
 8002758:	f007 fbda 	bl	8009f10 <sin>
 800275c:	ec51 0b10 	vmov	r0, r1, d0
 8002760:	a3c1      	add	r3, pc, #772	@ (adr r3, 8002a68 <platform_init+0x370>)
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	f7fd ff67 	bl	8000638 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe fa59 	bl	8000c28 <__aeabi_d2f>
 8002776:	4602      	mov	r2, r0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4abd      	ldr	r2, [pc, #756]	@ (8002a74 <platform_init+0x37c>)
 8002780:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    stewart->b2[0]=R*cos(deg_to_rad(60+beta/2)),  stewart->b2[1]=R*sin(deg_to_rad(60+beta/2)),  stewart->b2[2]=h;
 8002784:	ed9f 0abc 	vldr	s0, [pc, #752]	@ 8002a78 <platform_init+0x380>
 8002788:	f000 f986 	bl	8002a98 <deg_to_rad>
 800278c:	ee10 3a10 	vmov	r3, s0
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fef9 	bl	8000588 <__aeabi_f2d>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	ec43 2b10 	vmov	d0, r2, r3
 800279e:	f007 fb57 	bl	8009e50 <cos>
 80027a2:	ec51 0b10 	vmov	r0, r1, d0
 80027a6:	a3b0      	add	r3, pc, #704	@ (adr r3, 8002a68 <platform_init+0x370>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f7fd ff44 	bl	8000638 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe fa36 	bl	8000c28 <__aeabi_d2f>
 80027bc:	4602      	mov	r2, r0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80027c4:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8002a78 <platform_init+0x380>
 80027c8:	f000 f966 	bl	8002a98 <deg_to_rad>
 80027cc:	ee10 3a10 	vmov	r3, s0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fed9 	bl	8000588 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	ec43 2b10 	vmov	d0, r2, r3
 80027de:	f007 fb97 	bl	8009f10 <sin>
 80027e2:	ec51 0b10 	vmov	r0, r1, d0
 80027e6:	a3a0      	add	r3, pc, #640	@ (adr r3, 8002a68 <platform_init+0x370>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd ff24 	bl	8000638 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe fa16 	bl	8000c28 <__aeabi_d2f>
 80027fc:	4602      	mov	r2, r0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a9b      	ldr	r2, [pc, #620]	@ (8002a74 <platform_init+0x37c>)
 8002808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    stewart->b3[0]=R*cos(deg_to_rad(180-beta/2)), stewart->b3[1]=R*sin(deg_to_rad(180-beta/2)), stewart->b3[2]=h;
 800280c:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 8002a7c <platform_init+0x384>
 8002810:	f000 f942 	bl	8002a98 <deg_to_rad>
 8002814:	ee10 3a10 	vmov	r3, s0
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd feb5 	bl	8000588 <__aeabi_f2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	ec43 2b10 	vmov	d0, r2, r3
 8002826:	f007 fb13 	bl	8009e50 <cos>
 800282a:	ec51 0b10 	vmov	r0, r1, d0
 800282e:	a38e      	add	r3, pc, #568	@ (adr r3, 8002a68 <platform_init+0x370>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f7fd ff00 	bl	8000638 <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f9f2 	bl	8000c28 <__aeabi_d2f>
 8002844:	4602      	mov	r2, r0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800284c:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8002a7c <platform_init+0x384>
 8002850:	f000 f922 	bl	8002a98 <deg_to_rad>
 8002854:	ee10 3a10 	vmov	r3, s0
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe95 	bl	8000588 <__aeabi_f2d>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	ec43 2b10 	vmov	d0, r2, r3
 8002866:	f007 fb53 	bl	8009f10 <sin>
 800286a:	ec51 0b10 	vmov	r0, r1, d0
 800286e:	a37e      	add	r3, pc, #504	@ (adr r3, 8002a68 <platform_init+0x370>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fd fee0 	bl	8000638 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f9d2 	bl	8000c28 <__aeabi_d2f>
 8002884:	4602      	mov	r2, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a79      	ldr	r2, [pc, #484]	@ (8002a74 <platform_init+0x37c>)
 8002890:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    stewart->b4[0]=R*cos(deg_to_rad(180+beta/2)), stewart->b4[1]=R*sin(deg_to_rad(180+beta/2)), stewart->b4[2]=h;
 8002894:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8002a80 <platform_init+0x388>
 8002898:	f000 f8fe 	bl	8002a98 <deg_to_rad>
 800289c:	ee10 3a10 	vmov	r3, s0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe71 	bl	8000588 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	ec43 2b10 	vmov	d0, r2, r3
 80028ae:	f007 facf 	bl	8009e50 <cos>
 80028b2:	ec51 0b10 	vmov	r0, r1, d0
 80028b6:	a36c      	add	r3, pc, #432	@ (adr r3, 8002a68 <platform_init+0x370>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd febc 	bl	8000638 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7fe f9ae 	bl	8000c28 <__aeabi_d2f>
 80028cc:	4602      	mov	r2, r0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80028d4:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 8002a80 <platform_init+0x388>
 80028d8:	f000 f8de 	bl	8002a98 <deg_to_rad>
 80028dc:	ee10 3a10 	vmov	r3, s0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fe51 	bl	8000588 <__aeabi_f2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	ec43 2b10 	vmov	d0, r2, r3
 80028ee:	f007 fb0f 	bl	8009f10 <sin>
 80028f2:	ec51 0b10 	vmov	r0, r1, d0
 80028f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8002a68 <platform_init+0x370>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fd fe9c 	bl	8000638 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f98e 	bl	8000c28 <__aeabi_d2f>
 800290c:	4602      	mov	r2, r0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a57      	ldr	r2, [pc, #348]	@ (8002a74 <platform_init+0x37c>)
 8002918:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    stewart->b5[0]=R*cos(deg_to_rad(300-beta/2)), stewart->b5[1]=R*sin(deg_to_rad(300-beta/2)), stewart->b5[2]=h;
 800291c:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8002a84 <platform_init+0x38c>
 8002920:	f000 f8ba 	bl	8002a98 <deg_to_rad>
 8002924:	ee10 3a10 	vmov	r3, s0
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe2d 	bl	8000588 <__aeabi_f2d>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	ec43 2b10 	vmov	d0, r2, r3
 8002936:	f007 fa8b 	bl	8009e50 <cos>
 800293a:	ec51 0b10 	vmov	r0, r1, d0
 800293e:	a34a      	add	r3, pc, #296	@ (adr r3, 8002a68 <platform_init+0x370>)
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	f7fd fe78 	bl	8000638 <__aeabi_dmul>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f96a 	bl	8000c28 <__aeabi_d2f>
 8002954:	4602      	mov	r2, r0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800295c:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8002a84 <platform_init+0x38c>
 8002960:	f000 f89a 	bl	8002a98 <deg_to_rad>
 8002964:	ee10 3a10 	vmov	r3, s0
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fe0d 	bl	8000588 <__aeabi_f2d>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	ec43 2b10 	vmov	d0, r2, r3
 8002976:	f007 facb 	bl	8009f10 <sin>
 800297a:	ec51 0b10 	vmov	r0, r1, d0
 800297e:	a33a      	add	r3, pc, #232	@ (adr r3, 8002a68 <platform_init+0x370>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fe58 	bl	8000638 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	f7fe f94a 	bl	8000c28 <__aeabi_d2f>
 8002994:	4602      	mov	r2, r0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a35      	ldr	r2, [pc, #212]	@ (8002a74 <platform_init+0x37c>)
 80029a0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    stewart->b6[0]=R*cos(deg_to_rad(300+beta/2)), stewart->b6[1]=R*sin(deg_to_rad(300+beta/2)), stewart->b6[2]=h;
 80029a4:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002a88 <platform_init+0x390>
 80029a8:	f000 f876 	bl	8002a98 <deg_to_rad>
 80029ac:	ee10 3a10 	vmov	r3, s0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fde9 	bl	8000588 <__aeabi_f2d>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	ec43 2b10 	vmov	d0, r2, r3
 80029be:	f007 fa47 	bl	8009e50 <cos>
 80029c2:	ec51 0b10 	vmov	r0, r1, d0
 80029c6:	a328      	add	r3, pc, #160	@ (adr r3, 8002a68 <platform_init+0x370>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe34 	bl	8000638 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f926 	bl	8000c28 <__aeabi_d2f>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80029e4:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002a88 <platform_init+0x390>
 80029e8:	f000 f856 	bl	8002a98 <deg_to_rad>
 80029ec:	ee10 3a10 	vmov	r3, s0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fdc9 	bl	8000588 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	ec43 2b10 	vmov	d0, r2, r3
 80029fe:	f007 fa87 	bl	8009f10 <sin>
 8002a02:	ec51 0b10 	vmov	r0, r1, d0
 8002a06:	a318      	add	r3, pc, #96	@ (adr r3, 8002a68 <platform_init+0x370>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fe14 	bl	8000638 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f906 	bl	8000c28 <__aeabi_d2f>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a13      	ldr	r2, [pc, #76]	@ (8002a74 <platform_init+0x37c>)
 8002a28:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

    stewart->tp_target_pos[0] = 0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    stewart->tp_target_pos[1] = 0;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    stewart->tp_target_pos[2] = 0;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    stewart->tp_target_pos[3] = 0;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    stewart->tp_target_pos[4] = 0;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    stewart->tp_target_pos[5] = 0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	e012      	b.n	8002a8c <platform_init+0x394>
 8002a66:	bf00      	nop
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	4072c000 	.word	0x4072c000
 8002a70:	425c0000 	.word	0x425c0000
 8002a74:	43fa0000 	.word	0x43fa0000
 8002a78:	42820000 	.word	0x42820000
 8002a7c:	432f0000 	.word	0x432f0000
 8002a80:	43390000 	.word	0x43390000
 8002a84:	43938000 	.word	0x43938000
 8002a88:	43988000 	.word	0x43988000
 8002a8c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <deg_to_rad>:


/*convert degrees to radians */
float deg_to_rad(float deg) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	ed87 0a01 	vstr	s0, [r7, #4]
    float rad = deg * PI / 180;
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fd fd70 	bl	8000588 <__aeabi_f2d>
 8002aa8:	a310      	add	r3, pc, #64	@ (adr r3, 8002aec <deg_to_rad+0x54>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f7fd fdc3 	bl	8000638 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <deg_to_rad+0x50>)
 8002ac0:	f7fd fee4 	bl	800088c <__aeabi_ddiv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f8ac 	bl	8000c28 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]
    return rad;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	ee07 3a90 	vmov	s15, r3
}
 8002ada:	eeb0 0a67 	vmov.f32	s0, s15
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	40668000 	.word	0x40668000
 8002aec:	54442d18 	.word	0x54442d18
 8002af0:	400921fb 	.word	0x400921fb

08002af4 <rot_x>:


void rot_x(float theta_x, float vector[3]) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b090      	sub	sp, #64	@ 0x40
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	ed87 0a01 	vstr	s0, [r7, #4]
 8002afe:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_x[3][3] = {
 8002b12:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
        {1, 0, 0},
        {0, cos(deg_to_rad(theta_x)), -sin(deg_to_rad(theta_x))},
 8002b2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b2e:	f7ff ffb3 	bl	8002a98 <deg_to_rad>
 8002b32:	ee10 3a10 	vmov	r3, s0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd26 	bl	8000588 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	ec43 2b10 	vmov	d0, r2, r3
 8002b44:	f007 f984 	bl	8009e50 <cos>
 8002b48:	ec53 2b10 	vmov	r2, r3, d0
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f7fe f86a 	bl	8000c28 <__aeabi_d2f>
 8002b54:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002b56:	61bb      	str	r3, [r7, #24]
        {0, cos(deg_to_rad(theta_x)), -sin(deg_to_rad(theta_x))},
 8002b58:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b5c:	f7ff ff9c 	bl	8002a98 <deg_to_rad>
 8002b60:	ee10 3a10 	vmov	r3, s0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fd0f 	bl	8000588 <__aeabi_f2d>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	ec43 2b10 	vmov	d0, r2, r3
 8002b72:	f007 f9cd 	bl	8009f10 <sin>
 8002b76:	ec53 2b10 	vmov	r2, r3, d0
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fe f853 	bl	8000c28 <__aeabi_d2f>
 8002b82:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eef1 7a67 	vneg.f32	s15, s15
 8002b8c:	edc7 7a07 	vstr	s15, [r7, #28]
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
        {0, sin(deg_to_rad(theta_x)), cos(deg_to_rad(theta_x))}
 8002b96:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b9a:	f7ff ff7d 	bl	8002a98 <deg_to_rad>
 8002b9e:	ee10 3a10 	vmov	r3, s0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fcf0 	bl	8000588 <__aeabi_f2d>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	ec43 2b10 	vmov	d0, r2, r3
 8002bb0:	f007 f9ae 	bl	8009f10 <sin>
 8002bb4:	ec53 2b10 	vmov	r2, r3, d0
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7fe f834 	bl	8000c28 <__aeabi_d2f>
 8002bc0:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        {0, sin(deg_to_rad(theta_x)), cos(deg_to_rad(theta_x))}
 8002bc4:	ed97 0a01 	vldr	s0, [r7, #4]
 8002bc8:	f7ff ff66 	bl	8002a98 <deg_to_rad>
 8002bcc:	ee10 3a10 	vmov	r3, s0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcd9 	bl	8000588 <__aeabi_f2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	ec43 2b10 	vmov	d0, r2, r3
 8002bde:	f007 f937 	bl	8009e50 <cos>
 8002be2:	ec53 2b10 	vmov	r2, r3, d0
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7fe f81d 	bl	8000c28 <__aeabi_d2f>
 8002bee:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3308      	adds	r3, #8
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002c0e:	2300      	movs	r3, #0
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c12:	e02e      	b.n	8002c72 <rot_x+0x17e>
        
        for (int column=0;column<3;column++) {
 8002c14:	2300      	movs	r3, #0
 8002c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c18:	e025      	b.n	8002c66 <rot_x+0x172>
            vector[row] += rot_x[row][column] * vector_copy[column];  
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	ed93 7a00 	vldr	s14, [r3]
 8002c26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3340      	adds	r3, #64	@ 0x40
 8002c36:	443b      	add	r3, r7
 8002c38:	3b38      	subs	r3, #56	@ 0x38
 8002c3a:	edd3 6a00 	vldr	s13, [r3]
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	3340      	adds	r3, #64	@ 0x40
 8002c44:	443b      	add	r3, r7
 8002c46:	3b14      	subs	r3, #20
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c62:	3301      	adds	r3, #1
 8002c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	ddd6      	ble.n	8002c1a <rot_x+0x126>
    for (int row=0;row<3;row++) {
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	ddcd      	ble.n	8002c14 <rot_x+0x120>
            
        }
    }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3740      	adds	r7, #64	@ 0x40
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <rot_y>:



void rot_y(float theta_y, float vector[3]) {
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b090      	sub	sp, #64	@ 0x40
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c8c:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_y[3][3] = {
        {cos(deg_to_rad(theta_y)), 0, sin(deg_to_rad(theta_y))},
 8002ca0:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ca4:	f7ff fef8 	bl	8002a98 <deg_to_rad>
 8002ca8:	ee10 3a10 	vmov	r3, s0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc6b 	bl	8000588 <__aeabi_f2d>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	ec43 2b10 	vmov	d0, r2, r3
 8002cba:	f007 f8c9 	bl	8009e50 <cos>
 8002cbe:	ec53 2b10 	vmov	r2, r3, d0
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f7fd ffaf 	bl	8000c28 <__aeabi_d2f>
 8002cca:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
        {cos(deg_to_rad(theta_y)), 0, sin(deg_to_rad(theta_y))},
 8002cd4:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cd8:	f7ff fede 	bl	8002a98 <deg_to_rad>
 8002cdc:	ee10 3a10 	vmov	r3, s0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fc51 	bl	8000588 <__aeabi_f2d>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	ec43 2b10 	vmov	d0, r2, r3
 8002cee:	f007 f90f 	bl	8009f10 <sin>
 8002cf2:	ec53 2b10 	vmov	r2, r3, d0
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd ff95 	bl	8000c28 <__aeabi_d2f>
 8002cfe:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
        {0, 1, 0},
        {-sin(deg_to_rad(theta_y)), 0, cos(deg_to_rad(theta_y))}
 8002d14:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d18:	f7ff febe 	bl	8002a98 <deg_to_rad>
 8002d1c:	ee10 3a10 	vmov	r3, s0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc31 	bl	8000588 <__aeabi_f2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	ec43 2b10 	vmov	d0, r2, r3
 8002d2e:	f007 f8ef 	bl	8009f10 <sin>
 8002d32:	ec53 2b10 	vmov	r2, r3, d0
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f7fd ff75 	bl	8000c28 <__aeabi_d2f>
 8002d3e:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef1 7a67 	vneg.f32	s15, s15
 8002d48:	edc7 7a08 	vstr	s15, [r7, #32]
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
        {-sin(deg_to_rad(theta_y)), 0, cos(deg_to_rad(theta_y))}
 8002d52:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d56:	f7ff fe9f 	bl	8002a98 <deg_to_rad>
 8002d5a:	ee10 3a10 	vmov	r3, s0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fc12 	bl	8000588 <__aeabi_f2d>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	ec43 2b10 	vmov	d0, r2, r3
 8002d6c:	f007 f870 	bl	8009e50 <cos>
 8002d70:	ec53 2b10 	vmov	r2, r3, d0
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd ff56 	bl	8000c28 <__aeabi_d2f>
 8002d7c:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	3308      	adds	r3, #8
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002da0:	e02e      	b.n	8002e00 <rot_y+0x17e>
        
        for (int column=0;column<3;column++) {
 8002da2:	2300      	movs	r3, #0
 8002da4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002da6:	e025      	b.n	8002df4 <rot_y+0x172>
            vector[row] += rot_y[row][column] * vector_copy[column];  
 8002da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	ed93 7a00 	vldr	s14, [r3]
 8002db4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	3340      	adds	r3, #64	@ 0x40
 8002dc4:	443b      	add	r3, r7
 8002dc6:	3b38      	subs	r3, #56	@ 0x38
 8002dc8:	edd3 6a00 	vldr	s13, [r3]
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3340      	adds	r3, #64	@ 0x40
 8002dd2:	443b      	add	r3, r7
 8002dd4:	3b14      	subs	r3, #20
 8002dd6:	edd3 7a00 	vldr	s15, [r3]
 8002dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dea:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df0:	3301      	adds	r3, #1
 8002df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	ddd6      	ble.n	8002da8 <rot_y+0x126>
    for (int row=0;row<3;row++) {
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	ddcd      	ble.n	8002da2 <rot_y+0x120>
            
        }
    }
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	3740      	adds	r7, #64	@ 0x40
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <rot_z>:


void rot_z(float theta_z, float vector[3]) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b090      	sub	sp, #64	@ 0x40
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e1a:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_z[3][3] = {
        {cos(deg_to_rad(theta_z)), -sin(deg_to_rad(theta_z)), 0},
 8002e2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e32:	f7ff fe31 	bl	8002a98 <deg_to_rad>
 8002e36:	ee10 3a10 	vmov	r3, s0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fba4 	bl	8000588 <__aeabi_f2d>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	ec43 2b10 	vmov	d0, r2, r3
 8002e48:	f007 f802 	bl	8009e50 <cos>
 8002e4c:	ec53 2b10 	vmov	r2, r3, d0
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f7fd fee8 	bl	8000c28 <__aeabi_d2f>
 8002e58:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002e5a:	60bb      	str	r3, [r7, #8]
        {cos(deg_to_rad(theta_z)), -sin(deg_to_rad(theta_z)), 0},
 8002e5c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e60:	f7ff fe1a 	bl	8002a98 <deg_to_rad>
 8002e64:	ee10 3a10 	vmov	r3, s0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb8d 	bl	8000588 <__aeabi_f2d>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	ec43 2b10 	vmov	d0, r2, r3
 8002e76:	f007 f84b 	bl	8009f10 <sin>
 8002e7a:	ec53 2b10 	vmov	r2, r3, d0
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd fed1 	bl	8000c28 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef1 7a67 	vneg.f32	s15, s15
 8002e90:	edc7 7a03 	vstr	s15, [r7, #12]
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
        {sin(deg_to_rad(theta_z)), cos(deg_to_rad(theta_z)), 0},
 8002e9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e9e:	f7ff fdfb 	bl	8002a98 <deg_to_rad>
 8002ea2:	ee10 3a10 	vmov	r3, s0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb6e 	bl	8000588 <__aeabi_f2d>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	ec43 2b10 	vmov	d0, r2, r3
 8002eb4:	f007 f82c 	bl	8009f10 <sin>
 8002eb8:	ec53 2b10 	vmov	r2, r3, d0
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7fd feb2 	bl	8000c28 <__aeabi_d2f>
 8002ec4:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002ec6:	617b      	str	r3, [r7, #20]
        {sin(deg_to_rad(theta_z)), cos(deg_to_rad(theta_z)), 0},
 8002ec8:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ecc:	f7ff fde4 	bl	8002a98 <deg_to_rad>
 8002ed0:	ee10 3a10 	vmov	r3, s0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb57 	bl	8000588 <__aeabi_f2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	ec43 2b10 	vmov	d0, r2, r3
 8002ee2:	f006 ffb5 	bl	8009e50 <cos>
 8002ee6:	ec53 2b10 	vmov	r2, r3, d0
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	f7fd fe9b 	bl	8000c28 <__aeabi_d2f>
 8002ef2:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f08:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
        {0, 0, 1},
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	3308      	adds	r3, #8
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f2e:	e02e      	b.n	8002f8e <rot_z+0x17e>
        
        for (int column=0;column<3;column++) {
 8002f30:	2300      	movs	r3, #0
 8002f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f34:	e025      	b.n	8002f82 <rot_z+0x172>
            vector[row] += rot_z[row][column] * vector_copy[column];  
 8002f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	ed93 7a00 	vldr	s14, [r3]
 8002f42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3340      	adds	r3, #64	@ 0x40
 8002f52:	443b      	add	r3, r7
 8002f54:	3b38      	subs	r3, #56	@ 0x38
 8002f56:	edd3 6a00 	vldr	s13, [r3]
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	3340      	adds	r3, #64	@ 0x40
 8002f60:	443b      	add	r3, r7
 8002f62:	3b14      	subs	r3, #20
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f78:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7e:	3301      	adds	r3, #1
 8002f80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	ddd6      	ble.n	8002f36 <rot_z+0x126>
    for (int row=0;row<3;row++) {
 8002f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	ddcd      	ble.n	8002f30 <rot_z+0x120>
            
        }
    }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	3740      	adds	r7, #64	@ 0x40
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <rotate_platform>:


void rotate_platform(stewart* stewart, float vector[3]) {
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]

    rot_z(stewart->tp_target_pos[5], vector);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8002fae:	6838      	ldr	r0, [r7, #0]
 8002fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb4:	f7ff ff2c 	bl	8002e10 <rot_z>
    rot_y(stewart->tp_target_pos[4], vector);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002fbe:	6838      	ldr	r0, [r7, #0]
 8002fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc4:	f7ff fe5d 	bl	8002c82 <rot_y>
    rot_x(stewart->tp_target_pos[3], vector);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd4:	f7ff fd8e 	bl	8002af4 <rot_x>

    vector[0] = vector[0] + stewart->tp_target_pos[0];
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	ed93 7a00 	vldr	s14, [r3]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	edc3 7a00 	vstr	s15, [r3]
    vector[1] = vector[1] + stewart->tp_target_pos[1];
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	ed93 7a00 	vldr	s14, [r3]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	3304      	adds	r3, #4
 8003000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003004:	edc3 7a00 	vstr	s15, [r3]
    vector[2] = vector[2] + stewart->tp_target_pos[2];
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	3308      	adds	r3, #8
 800300c:	ed93 7a00 	vldr	s14, [r3]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301e:	edc3 7a00 	vstr	s15, [r3]

}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	0000      	movs	r0, r0
 800302c:	0000      	movs	r0, r0
	...

08003030 <run_platform>:





void run_platform(stewart* stewart)  {
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

    stewart->a1[0]=r*cos(deg_to_rad(0+beta/2)),   stewart->a1[1]=r*sin(deg_to_rad(0+beta/2)),    stewart->a1[2] = 0;
 8003038:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 800303c:	f7ff fd2c 	bl	8002a98 <deg_to_rad>
 8003040:	ee10 3a10 	vmov	r3, s0
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fa9f 	bl	8000588 <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	ec43 2b10 	vmov	d0, r2, r3
 8003052:	f006 fefd 	bl	8009e50 <cos>
 8003056:	ec51 0b10 	vmov	r0, r1, d0
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	4bd3      	ldr	r3, [pc, #844]	@ (80033ac <run_platform+0x37c>)
 8003060:	f7fd faea 	bl	8000638 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	f7fd fddc 	bl	8000c28 <__aeabi_d2f>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	631a      	str	r2, [r3, #48]	@ 0x30
 8003076:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 800307a:	f7ff fd0d 	bl	8002a98 <deg_to_rad>
 800307e:	ee10 3a10 	vmov	r3, s0
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fa80 	bl	8000588 <__aeabi_f2d>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	ec43 2b10 	vmov	d0, r2, r3
 8003090:	f006 ff3e 	bl	8009f10 <sin>
 8003094:	ec51 0b10 	vmov	r0, r1, d0
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	4bc3      	ldr	r3, [pc, #780]	@ (80033ac <run_platform+0x37c>)
 800309e:	f7fd facb 	bl	8000638 <__aeabi_dmul>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fdbd 	bl	8000c28 <__aeabi_d2f>
 80030ae:	4602      	mov	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	639a      	str	r2, [r3, #56]	@ 0x38
    stewart->a2[0]=r*cos(deg_to_rad(120-beta/2)), stewart->a2[1]=r*sin(deg_to_rad(120-beta/2)),  stewart->a2[2] = 0;
 80030bc:	ed9f 0abc 	vldr	s0, [pc, #752]	@ 80033b0 <run_platform+0x380>
 80030c0:	f7ff fcea 	bl	8002a98 <deg_to_rad>
 80030c4:	ee10 3a10 	vmov	r3, s0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa5d 	bl	8000588 <__aeabi_f2d>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	ec43 2b10 	vmov	d0, r2, r3
 80030d6:	f006 febb 	bl	8009e50 <cos>
 80030da:	ec51 0b10 	vmov	r0, r1, d0
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	4bb2      	ldr	r3, [pc, #712]	@ (80033ac <run_platform+0x37c>)
 80030e4:	f7fd faa8 	bl	8000638 <__aeabi_dmul>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7fd fd9a 	bl	8000c28 <__aeabi_d2f>
 80030f4:	4602      	mov	r2, r0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030fa:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 80033b0 <run_platform+0x380>
 80030fe:	f7ff fccb 	bl	8002a98 <deg_to_rad>
 8003102:	ee10 3a10 	vmov	r3, s0
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fa3e 	bl	8000588 <__aeabi_f2d>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	ec43 2b10 	vmov	d0, r2, r3
 8003114:	f006 fefc 	bl	8009f10 <sin>
 8003118:	ec51 0b10 	vmov	r0, r1, d0
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	4ba2      	ldr	r3, [pc, #648]	@ (80033ac <run_platform+0x37c>)
 8003122:	f7fd fa89 	bl	8000638 <__aeabi_dmul>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	f7fd fd7b 	bl	8000c28 <__aeabi_d2f>
 8003132:	4602      	mov	r2, r0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
    stewart->a3[0]=r*cos(deg_to_rad(120+beta/2)), stewart->a3[1]=r*sin(deg_to_rad(120+beta/2)),  stewart->a3[2] = 0;
 8003140:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 80033b4 <run_platform+0x384>
 8003144:	f7ff fca8 	bl	8002a98 <deg_to_rad>
 8003148:	ee10 3a10 	vmov	r3, s0
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fa1b 	bl	8000588 <__aeabi_f2d>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	ec43 2b10 	vmov	d0, r2, r3
 800315a:	f006 fe79 	bl	8009e50 <cos>
 800315e:	ec51 0b10 	vmov	r0, r1, d0
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	4b91      	ldr	r3, [pc, #580]	@ (80033ac <run_platform+0x37c>)
 8003168:	f7fd fa66 	bl	8000638 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	f7fd fd58 	bl	8000c28 <__aeabi_d2f>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	649a      	str	r2, [r3, #72]	@ 0x48
 800317e:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 80033b4 <run_platform+0x384>
 8003182:	f7ff fc89 	bl	8002a98 <deg_to_rad>
 8003186:	ee10 3a10 	vmov	r3, s0
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd f9fc 	bl	8000588 <__aeabi_f2d>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	ec43 2b10 	vmov	d0, r2, r3
 8003198:	f006 feba 	bl	8009f10 <sin>
 800319c:	ec51 0b10 	vmov	r0, r1, d0
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	4b81      	ldr	r3, [pc, #516]	@ (80033ac <run_platform+0x37c>)
 80031a6:	f7fd fa47 	bl	8000638 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7fd fd39 	bl	8000c28 <__aeabi_d2f>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	651a      	str	r2, [r3, #80]	@ 0x50
    stewart->a4[0]=r*cos(deg_to_rad(240-beta/2)), stewart->a4[1]=r*sin(deg_to_rad(240-beta/2)),  stewart->a4[2] = 0;
 80031c4:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80033b8 <run_platform+0x388>
 80031c8:	f7ff fc66 	bl	8002a98 <deg_to_rad>
 80031cc:	ee10 3a10 	vmov	r3, s0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f9d9 	bl	8000588 <__aeabi_f2d>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	ec43 2b10 	vmov	d0, r2, r3
 80031de:	f006 fe37 	bl	8009e50 <cos>
 80031e2:	ec51 0b10 	vmov	r0, r1, d0
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	4b70      	ldr	r3, [pc, #448]	@ (80033ac <run_platform+0x37c>)
 80031ec:	f7fd fa24 	bl	8000638 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fd16 	bl	8000c28 <__aeabi_d2f>
 80031fc:	4602      	mov	r2, r0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
 8003202:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 80033b8 <run_platform+0x388>
 8003206:	f7ff fc47 	bl	8002a98 <deg_to_rad>
 800320a:	ee10 3a10 	vmov	r3, s0
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f9ba 	bl	8000588 <__aeabi_f2d>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	ec43 2b10 	vmov	d0, r2, r3
 800321c:	f006 fe78 	bl	8009f10 <sin>
 8003220:	ec51 0b10 	vmov	r0, r1, d0
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	4b60      	ldr	r3, [pc, #384]	@ (80033ac <run_platform+0x37c>)
 800322a:	f7fd fa05 	bl	8000638 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	f7fd fcf7 	bl	8000c28 <__aeabi_d2f>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	65da      	str	r2, [r3, #92]	@ 0x5c
    stewart->a5[0]=r*cos(deg_to_rad(240+beta/2)), stewart->a5[1]=r*sin(deg_to_rad(240+beta/2)),  stewart->a5[2] = 0;
 8003248:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 80033bc <run_platform+0x38c>
 800324c:	f7ff fc24 	bl	8002a98 <deg_to_rad>
 8003250:	ee10 3a10 	vmov	r3, s0
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f997 	bl	8000588 <__aeabi_f2d>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	ec43 2b10 	vmov	d0, r2, r3
 8003262:	f006 fdf5 	bl	8009e50 <cos>
 8003266:	ec51 0b10 	vmov	r0, r1, d0
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	4b4f      	ldr	r3, [pc, #316]	@ (80033ac <run_platform+0x37c>)
 8003270:	f7fd f9e2 	bl	8000638 <__aeabi_dmul>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f7fd fcd4 	bl	8000c28 <__aeabi_d2f>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	661a      	str	r2, [r3, #96]	@ 0x60
 8003286:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80033bc <run_platform+0x38c>
 800328a:	f7ff fc05 	bl	8002a98 <deg_to_rad>
 800328e:	ee10 3a10 	vmov	r3, s0
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f978 	bl	8000588 <__aeabi_f2d>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	ec43 2b10 	vmov	d0, r2, r3
 80032a0:	f006 fe36 	bl	8009f10 <sin>
 80032a4:	ec51 0b10 	vmov	r0, r1, d0
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	4b3f      	ldr	r3, [pc, #252]	@ (80033ac <run_platform+0x37c>)
 80032ae:	f7fd f9c3 	bl	8000638 <__aeabi_dmul>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	f7fd fcb5 	bl	8000c28 <__aeabi_d2f>
 80032be:	4602      	mov	r2, r0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	665a      	str	r2, [r3, #100]	@ 0x64
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	669a      	str	r2, [r3, #104]	@ 0x68
    stewart->a6[0]=r*cos(deg_to_rad(360-beta/2)), stewart->a6[1]=r*sin(deg_to_rad(360-beta/2)),  stewart->a6[2] = 0;
 80032cc:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 80033c0 <run_platform+0x390>
 80032d0:	f7ff fbe2 	bl	8002a98 <deg_to_rad>
 80032d4:	ee10 3a10 	vmov	r3, s0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd f955 	bl	8000588 <__aeabi_f2d>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	ec43 2b10 	vmov	d0, r2, r3
 80032e6:	f006 fdb3 	bl	8009e50 <cos>
 80032ea:	ec51 0b10 	vmov	r0, r1, d0
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	4b2e      	ldr	r3, [pc, #184]	@ (80033ac <run_platform+0x37c>)
 80032f4:	f7fd f9a0 	bl	8000638 <__aeabi_dmul>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	f7fd fc92 	bl	8000c28 <__aeabi_d2f>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	66da      	str	r2, [r3, #108]	@ 0x6c
 800330a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80033c0 <run_platform+0x390>
 800330e:	f7ff fbc3 	bl	8002a98 <deg_to_rad>
 8003312:	ee10 3a10 	vmov	r3, s0
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f936 	bl	8000588 <__aeabi_f2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	ec43 2b10 	vmov	d0, r2, r3
 8003324:	f006 fdf4 	bl	8009f10 <sin>
 8003328:	ec51 0b10 	vmov	r0, r1, d0
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	4b1e      	ldr	r3, [pc, #120]	@ (80033ac <run_platform+0x37c>)
 8003332:	f7fd f981 	bl	8000638 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f7fd fc73 	bl	8000c28 <__aeabi_d2f>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	671a      	str	r2, [r3, #112]	@ 0x70
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	675a      	str	r2, [r3, #116]	@ 0x74


    rotate_platform(stewart, stewart->a1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3330      	adds	r3, #48	@ 0x30
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff fe21 	bl	8002f9e <rotate_platform>
    rotate_platform(stewart, stewart->a2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	333c      	adds	r3, #60	@ 0x3c
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff fe1b 	bl	8002f9e <rotate_platform>
    rotate_platform(stewart, stewart->a3);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3348      	adds	r3, #72	@ 0x48
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff fe15 	bl	8002f9e <rotate_platform>
    rotate_platform(stewart, stewart->a4);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3354      	adds	r3, #84	@ 0x54
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fe0f 	bl	8002f9e <rotate_platform>
    rotate_platform(stewart, stewart->a5);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3360      	adds	r3, #96	@ 0x60
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fe09 	bl	8002f9e <rotate_platform>
    rotate_platform(stewart, stewart->a6);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	336c      	adds	r3, #108	@ 0x6c
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fe03 	bl	8002f9e <rotate_platform>


    // calculate the length of each arm 
    stewart->c_target[0]=sqrt(pow(stewart->a1[0]-stewart->b1[0],2)+pow(stewart->a1[1]-stewart->b1[1],2) + pow(stewart->a1[2]-stewart->b1[2],2));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 80033a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a8:	e00c      	b.n	80033c4 <run_platform+0x394>
 80033aa:	bf00      	nop
 80033ac:	40590000 	.word	0x40590000
 80033b0:	42e60000 	.word	0x42e60000
 80033b4:	42fa0000 	.word	0x42fa0000
 80033b8:	436b0000 	.word	0x436b0000
 80033bc:	43750000 	.word	0x43750000
 80033c0:	43b18000 	.word	0x43b18000
 80033c4:	ee17 0a90 	vmov	r0, s15
 80033c8:	f7fd f8de 	bl	8000588 <__aeabi_f2d>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	ed9f 1be9 	vldr	d1, [pc, #932]	@ 8003778 <run_platform+0x748>
 80033d4:	ec43 2b10 	vmov	d0, r2, r3
 80033d8:	f006 fc9c 	bl	8009d14 <pow>
 80033dc:	ec55 4b10 	vmov	r4, r5, d0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 80033ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f0:	ee17 0a90 	vmov	r0, s15
 80033f4:	f7fd f8c8 	bl	8000588 <__aeabi_f2d>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	ed9f 1bde 	vldr	d1, [pc, #888]	@ 8003778 <run_platform+0x748>
 8003400:	ec43 2b10 	vmov	d0, r2, r3
 8003404:	f006 fc86 	bl	8009d14 <pow>
 8003408:	ec53 2b10 	vmov	r2, r3, d0
 800340c:	4620      	mov	r0, r4
 800340e:	4629      	mov	r1, r5
 8003410:	f7fc ff5c 	bl	80002cc <__adddf3>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8003428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342c:	ee17 0a90 	vmov	r0, s15
 8003430:	f7fd f8aa 	bl	8000588 <__aeabi_f2d>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	ed9f 1bcf 	vldr	d1, [pc, #828]	@ 8003778 <run_platform+0x748>
 800343c:	ec43 2b10 	vmov	d0, r2, r3
 8003440:	f006 fc68 	bl	8009d14 <pow>
 8003444:	ec53 2b10 	vmov	r2, r3, d0
 8003448:	4620      	mov	r0, r4
 800344a:	4629      	mov	r1, r5
 800344c:	f7fc ff3e 	bl	80002cc <__adddf3>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	ec43 2b17 	vmov	d7, r2, r3
 8003458:	eeb0 0a47 	vmov.f32	s0, s14
 800345c:	eef0 0a67 	vmov.f32	s1, s15
 8003460:	f006 fcc8 	bl	8009df4 <sqrt>
 8003464:	ec53 2b10 	vmov	r2, r3, d0
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fbdc 	bl	8000c28 <__aeabi_d2f>
 8003470:	4602      	mov	r2, r0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
    stewart->c_target[1]=sqrt(pow(stewart->a2[0]-stewart->b2[0],2)+pow(stewart->a2[1]-stewart->b2[1],2) + pow(stewart->a2[2]-stewart->b2[2],2));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8003482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003486:	ee17 0a90 	vmov	r0, s15
 800348a:	f7fd f87d 	bl	8000588 <__aeabi_f2d>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	ed9f 1bb9 	vldr	d1, [pc, #740]	@ 8003778 <run_platform+0x748>
 8003496:	ec43 2b10 	vmov	d0, r2, r3
 800349a:	f006 fc3b 	bl	8009d14 <pow>
 800349e:	ec55 4b10 	vmov	r4, r5, d0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 80034ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b2:	ee17 0a90 	vmov	r0, s15
 80034b6:	f7fd f867 	bl	8000588 <__aeabi_f2d>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ed9f 1bae 	vldr	d1, [pc, #696]	@ 8003778 <run_platform+0x748>
 80034c2:	ec43 2b10 	vmov	d0, r2, r3
 80034c6:	f006 fc25 	bl	8009d14 <pow>
 80034ca:	ec53 2b10 	vmov	r2, r3, d0
 80034ce:	4620      	mov	r0, r4
 80034d0:	4629      	mov	r1, r5
 80034d2:	f7fc fefb 	bl	80002cc <__adddf3>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4614      	mov	r4, r2
 80034dc:	461d      	mov	r5, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80034ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ee:	ee17 0a90 	vmov	r0, s15
 80034f2:	f7fd f849 	bl	8000588 <__aeabi_f2d>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8003778 <run_platform+0x748>
 80034fe:	ec43 2b10 	vmov	d0, r2, r3
 8003502:	f006 fc07 	bl	8009d14 <pow>
 8003506:	ec53 2b10 	vmov	r2, r3, d0
 800350a:	4620      	mov	r0, r4
 800350c:	4629      	mov	r1, r5
 800350e:	f7fc fedd 	bl	80002cc <__adddf3>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	ec43 2b17 	vmov	d7, r2, r3
 800351a:	eeb0 0a47 	vmov.f32	s0, s14
 800351e:	eef0 0a67 	vmov.f32	s1, s15
 8003522:	f006 fc67 	bl	8009df4 <sqrt>
 8003526:	ec53 2b10 	vmov	r2, r3, d0
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f7fd fb7b 	bl	8000c28 <__aeabi_d2f>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	605a      	str	r2, [r3, #4]
    stewart->c_target[2]=sqrt(pow(stewart->a3[0]-stewart->b3[0],2)+pow(stewart->a3[1]-stewart->b3[1],2) + pow(stewart->a3[2]-stewart->b3[2],2));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003548:	ee17 0a90 	vmov	r0, s15
 800354c:	f7fd f81c 	bl	8000588 <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 8003778 <run_platform+0x748>
 8003558:	ec43 2b10 	vmov	d0, r2, r3
 800355c:	f006 fbda 	bl	8009d14 <pow>
 8003560:	ec55 4b10 	vmov	r4, r5, d0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003574:	ee17 0a90 	vmov	r0, s15
 8003578:	f7fd f806 	bl	8000588 <__aeabi_f2d>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8003778 <run_platform+0x748>
 8003584:	ec43 2b10 	vmov	d0, r2, r3
 8003588:	f006 fbc4 	bl	8009d14 <pow>
 800358c:	ec53 2b10 	vmov	r2, r3, d0
 8003590:	4620      	mov	r0, r4
 8003592:	4629      	mov	r1, r5
 8003594:	f7fc fe9a 	bl	80002cc <__adddf3>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 80035ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b0:	ee17 0a90 	vmov	r0, s15
 80035b4:	f7fc ffe8 	bl	8000588 <__aeabi_f2d>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 8003778 <run_platform+0x748>
 80035c0:	ec43 2b10 	vmov	d0, r2, r3
 80035c4:	f006 fba6 	bl	8009d14 <pow>
 80035c8:	ec53 2b10 	vmov	r2, r3, d0
 80035cc:	4620      	mov	r0, r4
 80035ce:	4629      	mov	r1, r5
 80035d0:	f7fc fe7c 	bl	80002cc <__adddf3>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	ec43 2b17 	vmov	d7, r2, r3
 80035dc:	eeb0 0a47 	vmov.f32	s0, s14
 80035e0:	eef0 0a67 	vmov.f32	s1, s15
 80035e4:	f006 fc06 	bl	8009df4 <sqrt>
 80035e8:	ec53 2b10 	vmov	r2, r3, d0
 80035ec:	4610      	mov	r0, r2
 80035ee:	4619      	mov	r1, r3
 80035f0:	f7fd fb1a 	bl	8000c28 <__aeabi_d2f>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]
    stewart->c_target[3]=sqrt(pow(stewart->a4[0]-stewart->b4[0],2)+pow(stewart->a4[1]-stewart->b4[1],2) + pow(stewart->a4[2]-stewart->b4[2],2));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 8003606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800360a:	ee17 0a90 	vmov	r0, s15
 800360e:	f7fc ffbb 	bl	8000588 <__aeabi_f2d>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8003778 <run_platform+0x748>
 800361a:	ec43 2b10 	vmov	d0, r2, r3
 800361e:	f006 fb79 	bl	8009d14 <pow>
 8003622:	ec55 4b10 	vmov	r4, r5, d0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 8003632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003636:	ee17 0a90 	vmov	r0, s15
 800363a:	f7fc ffa5 	bl	8000588 <__aeabi_f2d>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8003778 <run_platform+0x748>
 8003646:	ec43 2b10 	vmov	d0, r2, r3
 800364a:	f006 fb63 	bl	8009d14 <pow>
 800364e:	ec53 2b10 	vmov	r2, r3, d0
 8003652:	4620      	mov	r0, r4
 8003654:	4629      	mov	r1, r5
 8003656:	f7fc fe39 	bl	80002cc <__adddf3>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4614      	mov	r4, r2
 8003660:	461d      	mov	r5, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 800366e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003672:	ee17 0a90 	vmov	r0, s15
 8003676:	f7fc ff87 	bl	8000588 <__aeabi_f2d>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8003778 <run_platform+0x748>
 8003682:	ec43 2b10 	vmov	d0, r2, r3
 8003686:	f006 fb45 	bl	8009d14 <pow>
 800368a:	ec53 2b10 	vmov	r2, r3, d0
 800368e:	4620      	mov	r0, r4
 8003690:	4629      	mov	r1, r5
 8003692:	f7fc fe1b 	bl	80002cc <__adddf3>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	ec43 2b17 	vmov	d7, r2, r3
 800369e:	eeb0 0a47 	vmov.f32	s0, s14
 80036a2:	eef0 0a67 	vmov.f32	s1, s15
 80036a6:	f006 fba5 	bl	8009df4 <sqrt>
 80036aa:	ec53 2b10 	vmov	r2, r3, d0
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7fd fab9 	bl	8000c28 <__aeabi_d2f>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
    stewart->c_target[4]=sqrt(pow(stewart->a5[0]-stewart->b5[0],2)+pow(stewart->a5[1]-stewart->b5[1],2) + pow(stewart->a5[2]-stewart->b5[2],2));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80036c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036cc:	ee17 0a90 	vmov	r0, s15
 80036d0:	f7fc ff5a 	bl	8000588 <__aeabi_f2d>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003778 <run_platform+0x748>
 80036dc:	ec43 2b10 	vmov	d0, r2, r3
 80036e0:	f006 fb18 	bl	8009d14 <pow>
 80036e4:	ec55 4b10 	vmov	r4, r5, d0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 80036f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f8:	ee17 0a90 	vmov	r0, s15
 80036fc:	f7fc ff44 	bl	8000588 <__aeabi_f2d>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8003778 <run_platform+0x748>
 8003708:	ec43 2b10 	vmov	d0, r2, r3
 800370c:	f006 fb02 	bl	8009d14 <pow>
 8003710:	ec53 2b10 	vmov	r2, r3, d0
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fc fdd8 	bl	80002cc <__adddf3>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8003730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003734:	ee17 0a90 	vmov	r0, s15
 8003738:	f7fc ff26 	bl	8000588 <__aeabi_f2d>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8003778 <run_platform+0x748>
 8003744:	ec43 2b10 	vmov	d0, r2, r3
 8003748:	f006 fae4 	bl	8009d14 <pow>
 800374c:	ec53 2b10 	vmov	r2, r3, d0
 8003750:	4620      	mov	r0, r4
 8003752:	4629      	mov	r1, r5
 8003754:	f7fc fdba 	bl	80002cc <__adddf3>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	ec43 2b17 	vmov	d7, r2, r3
 8003760:	eeb0 0a47 	vmov.f32	s0, s14
 8003764:	eef0 0a67 	vmov.f32	s1, s15
 8003768:	f006 fb44 	bl	8009df4 <sqrt>
 800376c:	ec53 2b10 	vmov	r2, r3, d0
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	e008      	b.n	8003788 <run_platform+0x758>
 8003776:	bf00      	nop
 8003778:	00000000 	.word	0x00000000
 800377c:	40000000 	.word	0x40000000
 8003780:	00000000 	.word	0x00000000
 8003784:	40000000 	.word	0x40000000
 8003788:	f7fd fa4e 	bl	8000c28 <__aeabi_d2f>
 800378c:	4602      	mov	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]
    stewart->c_target[5]=sqrt(pow(stewart->a6[0]-stewart->b6[0],2)+pow(stewart->a6[1]-stewart->b6[1],2) + pow(stewart->a6[2]-stewart->b6[2],2));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800379e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a2:	ee17 0a90 	vmov	r0, s15
 80037a6:	f7fc feef 	bl	8000588 <__aeabi_f2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	ed1f 1b0c 	vldr	d1, [pc, #-48]	@ 8003780 <run_platform+0x750>
 80037b2:	ec43 2b10 	vmov	d0, r2, r3
 80037b6:	f006 faad 	bl	8009d14 <pow>
 80037ba:	ec55 4b10 	vmov	r4, r5, d0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 80037ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ce:	ee17 0a90 	vmov	r0, s15
 80037d2:	f7fc fed9 	bl	8000588 <__aeabi_f2d>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	ed1f 1b17 	vldr	d1, [pc, #-92]	@ 8003780 <run_platform+0x750>
 80037de:	ec43 2b10 	vmov	d0, r2, r3
 80037e2:	f006 fa97 	bl	8009d14 <pow>
 80037e6:	ec53 2b10 	vmov	r2, r3, d0
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	f7fc fd6d 	bl	80002cc <__adddf3>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4614      	mov	r4, r2
 80037f8:	461d      	mov	r5, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8003806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800380a:	ee17 0a90 	vmov	r0, s15
 800380e:	f7fc febb 	bl	8000588 <__aeabi_f2d>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	ed1f 1b26 	vldr	d1, [pc, #-152]	@ 8003780 <run_platform+0x750>
 800381a:	ec43 2b10 	vmov	d0, r2, r3
 800381e:	f006 fa79 	bl	8009d14 <pow>
 8003822:	ec53 2b10 	vmov	r2, r3, d0
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f7fc fd4f 	bl	80002cc <__adddf3>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	ec43 2b17 	vmov	d7, r2, r3
 8003836:	eeb0 0a47 	vmov.f32	s0, s14
 800383a:	eef0 0a67 	vmov.f32	s1, s15
 800383e:	f006 fad9 	bl	8009df4 <sqrt>
 8003842:	ec53 2b10 	vmov	r2, r3, d0
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	f7fd f9ed 	bl	8000c28 <__aeabi_d2f>
 800384e:	4602      	mov	r2, r0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	615a      	str	r2, [r3, #20]

}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bdb0      	pop	{r4, r5, r7, pc}

0800385c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <HAL_Init+0x40>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0d      	ldr	r2, [pc, #52]	@ (800389c <HAL_Init+0x40>)
 8003866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800386a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_Init+0x40>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0a      	ldr	r2, [pc, #40]	@ (800389c <HAL_Init+0x40>)
 8003872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <HAL_Init+0x40>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a07      	ldr	r2, [pc, #28]	@ (800389c <HAL_Init+0x40>)
 800387e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003884:	2003      	movs	r0, #3
 8003886:	f000 ff87 	bl	8004798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800388a:	200f      	movs	r0, #15
 800388c:	f000 f808 	bl	80038a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003890:	f7fe fbaa 	bl	8001fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023c00 	.word	0x40023c00

080038a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038a8:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <HAL_InitTick+0x54>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <HAL_InitTick+0x58>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4619      	mov	r1, r3
 80038b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 ff9f 	bl	8004802 <HAL_SYSTICK_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00e      	b.n	80038ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d80a      	bhi.n	80038ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d4:	2200      	movs	r2, #0
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038dc:	f000 ff67 	bl	80047ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e0:	4a06      	ldr	r2, [pc, #24]	@ (80038fc <HAL_InitTick+0x5c>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000008 	.word	0x20000008
 80038fc:	20000004 	.word	0x20000004

08003900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003904:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <HAL_IncTick+0x20>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <HAL_IncTick+0x24>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4413      	add	r3, r2
 8003910:	4a04      	ldr	r2, [pc, #16]	@ (8003924 <HAL_IncTick+0x24>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000008 	.word	0x20000008
 8003924:	20000474 	.word	0x20000474

08003928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return uwTick;
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_GetTick+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000474 	.word	0x20000474

08003940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003948:	f7ff ffee 	bl	8003928 <HAL_GetTick>
 800394c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003958:	d005      	beq.n	8003966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800395a:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <HAL_Delay+0x44>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003966:	bf00      	nop
 8003968:	f7ff ffde 	bl	8003928 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	429a      	cmp	r2, r3
 8003976:	d8f7      	bhi.n	8003968 <HAL_Delay+0x28>
  {
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000008 	.word	0x20000008

08003988 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e033      	b.n	8003a06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fe fb46 	bl	8002038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d118      	bne.n	80039f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039ce:	f023 0302 	bic.w	r3, r3, #2
 80039d2:	f043 0202 	orr.w	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fb88 	bl	80040f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80039f6:	e001      	b.n	80039fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d049      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0xca>
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d046      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d12b      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d127      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d119      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0220 	bic.w	r2, r2, #32
 8003aa2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fd fe4f 	bl	800176c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0212 	mvn.w	r2, #18
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d057      	beq.n	8003b9e <HAL_ADC_IRQHandler+0x190>
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d054      	beq.n	8003b9e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d139      	bne.n	8003b8e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d12b      	bne.n	8003b8e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d124      	bne.n	8003b8e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d11d      	bne.n	8003b8e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d119      	bne.n	8003b8e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b68:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fc2c 	bl	80043ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 020c 	mvn.w	r2, #12
 8003b9c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d017      	beq.n	8003be4 <HAL_ADC_IRQHandler+0x1d6>
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d014      	beq.n	8003be4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d10d      	bne.n	8003be4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f945 	bl	8003e64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0201 	mvn.w	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bf2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d015      	beq.n	8003c26 <HAL_ADC_IRQHandler+0x218>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d012      	beq.n	8003c26 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	f043 0202 	orr.w	r2, r3, #2
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0220 	mvn.w	r2, #32
 8003c14:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f92e 	bl	8003e78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0220 	mvn.w	r2, #32
 8003c24:	601a      	str	r2, [r3, #0]
  }
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_Start_DMA+0x1e>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e0e9      	b.n	8003e22 <HAL_ADC_Start_DMA+0x1f2>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d018      	beq.n	8003c96 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c74:	4b6d      	ldr	r3, [pc, #436]	@ (8003e2c <HAL_ADC_Start_DMA+0x1fc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a6d      	ldr	r2, [pc, #436]	@ (8003e30 <HAL_ADC_Start_DMA+0x200>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0c9a      	lsrs	r2, r3, #18
 8003c80:	4613      	mov	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003c88:	e002      	b.n	8003c90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f9      	bne.n	8003c8a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca4:	d107      	bne.n	8003cb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cb4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 80a1 	bne.w	8003e08 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cf0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d04:	d106      	bne.n	8003d14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	f023 0206 	bic.w	r2, r3, #6
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d12:	e002      	b.n	8003d1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d22:	4b44      	ldr	r3, [pc, #272]	@ (8003e34 <HAL_ADC_Start_DMA+0x204>)
 8003d24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	4a43      	ldr	r2, [pc, #268]	@ (8003e38 <HAL_ADC_Start_DMA+0x208>)
 8003d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d32:	4a42      	ldr	r2, [pc, #264]	@ (8003e3c <HAL_ADC_Start_DMA+0x20c>)
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3a:	4a41      	ldr	r2, [pc, #260]	@ (8003e40 <HAL_ADC_Start_DMA+0x210>)
 8003d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003d46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003d56:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d66:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	334c      	adds	r3, #76	@ 0x4c
 8003d72:	4619      	mov	r1, r3
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f000 fdfe 	bl	8004978 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d12a      	bne.n	8003dde <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e44 <HAL_ADC_Start_DMA+0x214>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d015      	beq.n	8003dbe <HAL_ADC_Start_DMA+0x18e>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2c      	ldr	r2, [pc, #176]	@ (8003e48 <HAL_ADC_Start_DMA+0x218>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d105      	bne.n	8003da8 <HAL_ADC_Start_DMA+0x178>
 8003d9c:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <HAL_ADC_Start_DMA+0x204>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a27      	ldr	r2, [pc, #156]	@ (8003e4c <HAL_ADC_Start_DMA+0x21c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d136      	bne.n	8003e20 <HAL_ADC_Start_DMA+0x1f0>
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <HAL_ADC_Start_DMA+0x204>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d130      	bne.n	8003e20 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d129      	bne.n	8003e20 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	e020      	b.n	8003e20 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a18      	ldr	r2, [pc, #96]	@ (8003e44 <HAL_ADC_Start_DMA+0x214>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d11b      	bne.n	8003e20 <HAL_ADC_Start_DMA+0x1f0>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d114      	bne.n	8003e20 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	e00b      	b.n	8003e20 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f043 0210 	orr.w	r2, r3, #16
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	431bde83 	.word	0x431bde83
 8003e34:	40012300 	.word	0x40012300
 8003e38:	080042e9 	.word	0x080042e9
 8003e3c:	080043a3 	.word	0x080043a3
 8003e40:	080043bf 	.word	0x080043bf
 8003e44:	40012000 	.word	0x40012000
 8003e48:	40012100 	.word	0x40012100
 8003e4c:	40012200 	.word	0x40012200

08003e50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x1c>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e113      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x244>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	d925      	bls.n	8003f04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68d9      	ldr	r1, [r3, #12]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	3b1e      	subs	r3, #30
 8003ece:	2207      	movs	r2, #7
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43da      	mvns	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	400a      	ands	r2, r1
 8003edc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68d9      	ldr	r1, [r3, #12]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	4618      	mov	r0, r3
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4403      	add	r3, r0
 8003ef6:	3b1e      	subs	r3, #30
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	e022      	b.n	8003f4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6919      	ldr	r1, [r3, #16]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	2207      	movs	r2, #7
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	400a      	ands	r2, r1
 8003f26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4618      	mov	r0, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4403      	add	r3, r0
 8003f40:	409a      	lsls	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d824      	bhi.n	8003f9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	3b05      	subs	r3, #5
 8003f64:	221f      	movs	r2, #31
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	400a      	ands	r2, r1
 8003f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4618      	mov	r0, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3b05      	subs	r3, #5
 8003f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f9a:	e04c      	b.n	8004036 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	d824      	bhi.n	8003fee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3b23      	subs	r3, #35	@ 0x23
 8003fb6:	221f      	movs	r2, #31
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	3b23      	subs	r3, #35	@ 0x23
 8003fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fec:	e023      	b.n	8004036 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3b41      	subs	r3, #65	@ 0x41
 8004000:	221f      	movs	r2, #31
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43da      	mvns	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	400a      	ands	r2, r1
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	4618      	mov	r0, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	3b41      	subs	r3, #65	@ 0x41
 800402a:	fa00 f203 	lsl.w	r2, r0, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004036:	4b29      	ldr	r3, [pc, #164]	@ (80040dc <HAL_ADC_ConfigChannel+0x250>)
 8004038:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a28      	ldr	r2, [pc, #160]	@ (80040e0 <HAL_ADC_ConfigChannel+0x254>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10f      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x1d8>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b12      	cmp	r3, #18
 800404a:	d10b      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <HAL_ADC_ConfigChannel+0x254>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d12b      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x23a>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1c      	ldr	r2, [pc, #112]	@ (80040e4 <HAL_ADC_ConfigChannel+0x258>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <HAL_ADC_ConfigChannel+0x1f4>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b11      	cmp	r3, #17
 800407e:	d122      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a11      	ldr	r2, [pc, #68]	@ (80040e4 <HAL_ADC_ConfigChannel+0x258>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d111      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040a2:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <HAL_ADC_ConfigChannel+0x25c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a11      	ldr	r2, [pc, #68]	@ (80040ec <HAL_ADC_ConfigChannel+0x260>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	0c9a      	lsrs	r2, r3, #18
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040b8:	e002      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3b01      	subs	r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f9      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40012300 	.word	0x40012300
 80040e0:	40012000 	.word	0x40012000
 80040e4:	10000012 	.word	0x10000012
 80040e8:	20000000 	.word	0x20000000
 80040ec:	431bde83 	.word	0x431bde83

080040f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040f8:	4b79      	ldr	r3, [pc, #484]	@ (80042e0 <ADC_Init+0x1f0>)
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	021a      	lsls	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	4a58      	ldr	r2, [pc, #352]	@ (80042e4 <ADC_Init+0x1f4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6899      	ldr	r1, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	e00f      	b.n	80041ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0202 	bic.w	r2, r2, #2
 80041fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7e1b      	ldrb	r3, [r3, #24]
 8004208:	005a      	lsls	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01b      	beq.n	8004254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800422a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800423a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	3b01      	subs	r3, #1
 8004248:	035a      	lsls	r2, r3, #13
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	e007      	b.n	8004264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	3b01      	subs	r3, #1
 8004280:	051a      	lsls	r2, r3, #20
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6899      	ldr	r1, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042a6:	025a      	lsls	r2, r3, #9
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	029a      	lsls	r2, r3, #10
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012300 	.word	0x40012300
 80042e4:	0f000001 	.word	0x0f000001

080042e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d13c      	bne.n	800437c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d12b      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004320:	2b00      	cmp	r3, #0
 8004322:	d127      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800432e:	2b00      	cmp	r3, #0
 8004330:	d006      	beq.n	8004340 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800433c:	2b00      	cmp	r3, #0
 800433e:	d119      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0220 	bic.w	r2, r2, #32
 800434e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7fd f9f9 	bl	800176c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800437a:	e00e      	b.n	800439a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fd75 	bl	8003e78 <HAL_ADC_ErrorCallback>
}
 800438e:	e004      	b.n	800439a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff fd4d 	bl	8003e50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2240      	movs	r2, #64	@ 0x40
 80043d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff fd4a 	bl	8003e78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e0ed      	b.n	80045ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd fec2 	bl	80021a8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004434:	f7ff fa78 	bl	8003928 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800443a:	e012      	b.n	8004462 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800443c:	f7ff fa74 	bl	8003928 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b0a      	cmp	r3, #10
 8004448:	d90b      	bls.n	8004462 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2205      	movs	r2, #5
 800445a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e0c5      	b.n	80045ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0e5      	beq.n	800443c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0202 	bic.w	r2, r2, #2
 800447e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004480:	f7ff fa52 	bl	8003928 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004486:	e012      	b.n	80044ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004488:	f7ff fa4e 	bl	8003928 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b0a      	cmp	r3, #10
 8004494:	d90b      	bls.n	80044ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2205      	movs	r2, #5
 80044a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e09f      	b.n	80045ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7e1b      	ldrb	r3, [r3, #24]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d108      	bne.n	80044d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e007      	b.n	80044e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	7e5b      	ldrb	r3, [r3, #25]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d108      	bne.n	8004500 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e007      	b.n	8004510 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7e9b      	ldrb	r3, [r3, #26]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d108      	bne.n	800452a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0220 	orr.w	r2, r2, #32
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e007      	b.n	800453a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0220 	bic.w	r2, r2, #32
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	7edb      	ldrb	r3, [r3, #27]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d108      	bne.n	8004554 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0210 	bic.w	r2, r2, #16
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e007      	b.n	8004564 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0210 	orr.w	r2, r2, #16
 8004562:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7f1b      	ldrb	r3, [r3, #28]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d108      	bne.n	800457e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e007      	b.n	800458e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0208 	bic.w	r2, r2, #8
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7f5b      	ldrb	r3, [r3, #29]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d108      	bne.n	80045a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0204 	orr.w	r2, r2, #4
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e007      	b.n	80045b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0204 	bic.w	r2, r2, #4
 80045b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	ea42 0103 	orr.w	r1, r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	1e5a      	subs	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004608:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <__NVIC_SetPriorityGrouping+0x44>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004614:	4013      	ands	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800462a:	4a04      	ldr	r2, [pc, #16]	@ (800463c <__NVIC_SetPriorityGrouping+0x44>)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	60d3      	str	r3, [r2, #12]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004644:	4b04      	ldr	r3, [pc, #16]	@ (8004658 <__NVIC_GetPriorityGrouping+0x18>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	f003 0307 	and.w	r3, r3, #7
}
 800464e:	4618      	mov	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	2b00      	cmp	r3, #0
 800466c:	db0b      	blt.n	8004686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	f003 021f 	and.w	r2, r3, #31
 8004674:	4907      	ldr	r1, [pc, #28]	@ (8004694 <__NVIC_EnableIRQ+0x38>)
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	2001      	movs	r0, #1
 800467e:	fa00 f202 	lsl.w	r2, r0, r2
 8004682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000e100 	.word	0xe000e100

08004698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	6039      	str	r1, [r7, #0]
 80046a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db0a      	blt.n	80046c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	490c      	ldr	r1, [pc, #48]	@ (80046e4 <__NVIC_SetPriority+0x4c>)
 80046b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b6:	0112      	lsls	r2, r2, #4
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	440b      	add	r3, r1
 80046bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c0:	e00a      	b.n	80046d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4908      	ldr	r1, [pc, #32]	@ (80046e8 <__NVIC_SetPriority+0x50>)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	3b04      	subs	r3, #4
 80046d0:	0112      	lsls	r2, r2, #4
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	440b      	add	r3, r1
 80046d6:	761a      	strb	r2, [r3, #24]
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	e000e100 	.word	0xe000e100
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	@ 0x24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f1c3 0307 	rsb	r3, r3, #7
 8004706:	2b04      	cmp	r3, #4
 8004708:	bf28      	it	cs
 800470a:	2304      	movcs	r3, #4
 800470c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3304      	adds	r3, #4
 8004712:	2b06      	cmp	r3, #6
 8004714:	d902      	bls.n	800471c <NVIC_EncodePriority+0x30>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3b03      	subs	r3, #3
 800471a:	e000      	b.n	800471e <NVIC_EncodePriority+0x32>
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004720:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43da      	mvns	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	401a      	ands	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004734:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	43d9      	mvns	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004744:	4313      	orrs	r3, r2
         );
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	@ 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004764:	d301      	bcc.n	800476a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004766:	2301      	movs	r3, #1
 8004768:	e00f      	b.n	800478a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800476a:	4a0a      	ldr	r2, [pc, #40]	@ (8004794 <SysTick_Config+0x40>)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004772:	210f      	movs	r1, #15
 8004774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004778:	f7ff ff8e 	bl	8004698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <SysTick_Config+0x40>)
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004782:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <SysTick_Config+0x40>)
 8004784:	2207      	movs	r2, #7
 8004786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	e000e010 	.word	0xe000e010

08004798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff29 	bl	80045f8 <__NVIC_SetPriorityGrouping>
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047c0:	f7ff ff3e 	bl	8004640 <__NVIC_GetPriorityGrouping>
 80047c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	6978      	ldr	r0, [r7, #20]
 80047cc:	f7ff ff8e 	bl	80046ec <NVIC_EncodePriority>
 80047d0:	4602      	mov	r2, r0
 80047d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d6:	4611      	mov	r1, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff ff5d 	bl	8004698 <__NVIC_SetPriority>
}
 80047de:	bf00      	nop
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	4603      	mov	r3, r0
 80047ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff ff31 	bl	800465c <__NVIC_EnableIRQ>
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff ffa2 	bl	8004754 <SysTick_Config>
 8004810:	4603      	mov	r3, r0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004828:	f7ff f87e 	bl	8003928 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e099      	b.n	800496c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004858:	e00f      	b.n	800487a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800485a:	f7ff f865 	bl	8003928 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b05      	cmp	r3, #5
 8004866:	d908      	bls.n	800487a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e078      	b.n	800496c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e8      	bne.n	800485a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4b38      	ldr	r3, [pc, #224]	@ (8004974 <HAL_DMA_Init+0x158>)
 8004894:	4013      	ands	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d107      	bne.n	80048e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	4313      	orrs	r3, r2
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 0307 	bic.w	r3, r3, #7
 80048fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	2b04      	cmp	r3, #4
 800490c:	d117      	bne.n	800493e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00e      	beq.n	800493e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fa6f 	bl	8004e04 <DMA_CheckFifoParam>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2240      	movs	r2, #64	@ 0x40
 8004930:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800493a:	2301      	movs	r3, #1
 800493c:	e016      	b.n	800496c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fa26 	bl	8004d98 <DMA_CalcBaseAndBitshift>
 800494c:	4603      	mov	r3, r0
 800494e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004954:	223f      	movs	r2, #63	@ 0x3f
 8004956:	409a      	lsls	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	f010803f 	.word	0xf010803f

08004978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_DMA_Start_IT+0x26>
 800499a:	2302      	movs	r3, #2
 800499c:	e040      	b.n	8004a20 <HAL_DMA_Start_IT+0xa8>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d12f      	bne.n	8004a12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f9b8 	bl	8004d3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d0:	223f      	movs	r2, #63	@ 0x3f
 80049d2:	409a      	lsls	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0216 	orr.w	r2, r2, #22
 80049e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0208 	orr.w	r2, r2, #8
 80049fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e005      	b.n	8004a1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a34:	4b8e      	ldr	r3, [pc, #568]	@ (8004c70 <HAL_DMA_IRQHandler+0x248>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a8e      	ldr	r2, [pc, #568]	@ (8004c74 <HAL_DMA_IRQHandler+0x24c>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0a9b      	lsrs	r3, r3, #10
 8004a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a52:	2208      	movs	r2, #8
 8004a54:	409a      	lsls	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01a      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0204 	bic.w	r2, r2, #4
 8004a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a80:	2208      	movs	r2, #8
 8004a82:	409a      	lsls	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a98:	2201      	movs	r2, #1
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d012      	beq.n	8004aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac2:	f043 0202 	orr.w	r2, r3, #2
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ace:	2204      	movs	r2, #4
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d012      	beq.n	8004b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aec:	2204      	movs	r2, #4
 8004aee:	409a      	lsls	r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af8:	f043 0204 	orr.w	r2, r3, #4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	2210      	movs	r2, #16
 8004b06:	409a      	lsls	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d043      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d03c      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b22:	2210      	movs	r2, #16
 8004b24:	409a      	lsls	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d018      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d024      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
 8004b56:	e01f      	b.n	8004b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
 8004b68:	e016      	b.n	8004b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d107      	bne.n	8004b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0208 	bic.w	r2, r2, #8
 8004b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 808f 	beq.w	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8087 	beq.w	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d136      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0216 	bic.w	r2, r2, #22
 8004be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <HAL_DMA_IRQHandler+0x1da>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0208 	bic.w	r2, r2, #8
 8004c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c16:	223f      	movs	r2, #63	@ 0x3f
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d07e      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4798      	blx	r3
        }
        return;
 8004c3e:	e079      	b.n	8004d34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01d      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10d      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d031      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	4798      	blx	r3
 8004c6c:	e02c      	b.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
 8004c6e:	bf00      	nop
 8004c70:	20000000 	.word	0x20000000
 8004c74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d023      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
 8004c88:	e01e      	b.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10f      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0210 	bic.w	r2, r2, #16
 8004ca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d032      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d022      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2205      	movs	r2, #5
 8004ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d307      	bcc.n	8004d10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f2      	bne.n	8004cf4 <HAL_DMA_IRQHandler+0x2cc>
 8004d0e:	e000      	b.n	8004d12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
 8004d32:	e000      	b.n	8004d36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d34:	bf00      	nop
    }
  }
}
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b40      	cmp	r3, #64	@ 0x40
 8004d68:	d108      	bne.n	8004d7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d7a:	e007      	b.n	8004d8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	3b10      	subs	r3, #16
 8004da8:	4a14      	ldr	r2, [pc, #80]	@ (8004dfc <DMA_CalcBaseAndBitshift+0x64>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004db2:	4a13      	ldr	r2, [pc, #76]	@ (8004e00 <DMA_CalcBaseAndBitshift+0x68>)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d909      	bls.n	8004dda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004dd8:	e007      	b.n	8004dea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	aaaaaaab 	.word	0xaaaaaaab
 8004e00:	0800bd70 	.word	0x0800bd70

08004e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d11f      	bne.n	8004e5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d856      	bhi.n	8004ed2 <DMA_CheckFifoParam+0xce>
 8004e24:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <DMA_CheckFifoParam+0x28>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e4f 	.word	0x08004e4f
 8004e34:	08004e3d 	.word	0x08004e3d
 8004e38:	08004ed3 	.word	0x08004ed3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d046      	beq.n	8004ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4c:	e043      	b.n	8004ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e56:	d140      	bne.n	8004eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5c:	e03d      	b.n	8004eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e66:	d121      	bne.n	8004eac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d837      	bhi.n	8004ede <DMA_CheckFifoParam+0xda>
 8004e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <DMA_CheckFifoParam+0x70>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e8b 	.word	0x08004e8b
 8004e7c:	08004e85 	.word	0x08004e85
 8004e80:	08004e9d 	.word	0x08004e9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
      break;
 8004e88:	e030      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d025      	beq.n	8004ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9a:	e022      	b.n	8004ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ea4:	d11f      	bne.n	8004ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eaa:	e01c      	b.n	8004ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d903      	bls.n	8004eba <DMA_CheckFifoParam+0xb6>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d003      	beq.n	8004ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004eb8:	e018      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ebe:	e015      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e00b      	b.n	8004eea <DMA_CheckFifoParam+0xe6>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e00a      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e008      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004eda:	bf00      	nop
 8004edc:	e006      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004ede:	bf00      	nop
 8004ee0:	e004      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e002      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;   
 8004ee6:	bf00      	nop
 8004ee8:	e000      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004eea:	bf00      	nop
    }
  } 
  
  return status; 
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop

08004efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b089      	sub	sp, #36	@ 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e165      	b.n	80051e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f18:	2201      	movs	r2, #1
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	f040 8154 	bne.w	80051de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d005      	beq.n	8004f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d130      	bne.n	8004fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	2203      	movs	r2, #3
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4013      	ands	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f84:	2201      	movs	r2, #1
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 0201 	and.w	r2, r3, #1
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d017      	beq.n	8004fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d123      	bne.n	8005040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	08da      	lsrs	r2, r3, #3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3208      	adds	r2, #8
 8005000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	220f      	movs	r2, #15
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	08da      	lsrs	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3208      	adds	r2, #8
 800503a:	69b9      	ldr	r1, [r7, #24]
 800503c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	2203      	movs	r2, #3
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 0203 	and.w	r2, r3, #3
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80ae 	beq.w	80051de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	4b5d      	ldr	r3, [pc, #372]	@ (80051fc <HAL_GPIO_Init+0x300>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	4a5c      	ldr	r2, [pc, #368]	@ (80051fc <HAL_GPIO_Init+0x300>)
 800508c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005090:	6453      	str	r3, [r2, #68]	@ 0x44
 8005092:	4b5a      	ldr	r3, [pc, #360]	@ (80051fc <HAL_GPIO_Init+0x300>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800509e:	4a58      	ldr	r2, [pc, #352]	@ (8005200 <HAL_GPIO_Init+0x304>)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	3302      	adds	r3, #2
 80050a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	220f      	movs	r2, #15
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a4f      	ldr	r2, [pc, #316]	@ (8005204 <HAL_GPIO_Init+0x308>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d025      	beq.n	8005116 <HAL_GPIO_Init+0x21a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a4e      	ldr	r2, [pc, #312]	@ (8005208 <HAL_GPIO_Init+0x30c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01f      	beq.n	8005112 <HAL_GPIO_Init+0x216>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a4d      	ldr	r2, [pc, #308]	@ (800520c <HAL_GPIO_Init+0x310>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d019      	beq.n	800510e <HAL_GPIO_Init+0x212>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a4c      	ldr	r2, [pc, #304]	@ (8005210 <HAL_GPIO_Init+0x314>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_GPIO_Init+0x20e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005214 <HAL_GPIO_Init+0x318>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00d      	beq.n	8005106 <HAL_GPIO_Init+0x20a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005218 <HAL_GPIO_Init+0x31c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d007      	beq.n	8005102 <HAL_GPIO_Init+0x206>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a49      	ldr	r2, [pc, #292]	@ (800521c <HAL_GPIO_Init+0x320>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <HAL_GPIO_Init+0x202>
 80050fa:	2306      	movs	r3, #6
 80050fc:	e00c      	b.n	8005118 <HAL_GPIO_Init+0x21c>
 80050fe:	2307      	movs	r3, #7
 8005100:	e00a      	b.n	8005118 <HAL_GPIO_Init+0x21c>
 8005102:	2305      	movs	r3, #5
 8005104:	e008      	b.n	8005118 <HAL_GPIO_Init+0x21c>
 8005106:	2304      	movs	r3, #4
 8005108:	e006      	b.n	8005118 <HAL_GPIO_Init+0x21c>
 800510a:	2303      	movs	r3, #3
 800510c:	e004      	b.n	8005118 <HAL_GPIO_Init+0x21c>
 800510e:	2302      	movs	r3, #2
 8005110:	e002      	b.n	8005118 <HAL_GPIO_Init+0x21c>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_GPIO_Init+0x21c>
 8005116:	2300      	movs	r3, #0
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	f002 0203 	and.w	r2, r2, #3
 800511e:	0092      	lsls	r2, r2, #2
 8005120:	4093      	lsls	r3, r2
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005128:	4935      	ldr	r1, [pc, #212]	@ (8005200 <HAL_GPIO_Init+0x304>)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	3302      	adds	r3, #2
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005136:	4b3a      	ldr	r3, [pc, #232]	@ (8005220 <HAL_GPIO_Init+0x324>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800515a:	4a31      	ldr	r2, [pc, #196]	@ (8005220 <HAL_GPIO_Init+0x324>)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005160:	4b2f      	ldr	r3, [pc, #188]	@ (8005220 <HAL_GPIO_Init+0x324>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005184:	4a26      	ldr	r2, [pc, #152]	@ (8005220 <HAL_GPIO_Init+0x324>)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800518a:	4b25      	ldr	r3, [pc, #148]	@ (8005220 <HAL_GPIO_Init+0x324>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <HAL_GPIO_Init+0x324>)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005220 <HAL_GPIO_Init+0x324>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051d8:	4a11      	ldr	r2, [pc, #68]	@ (8005220 <HAL_GPIO_Init+0x324>)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b0f      	cmp	r3, #15
 80051e8:	f67f ae96 	bls.w	8004f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	3724      	adds	r7, #36	@ 0x24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	40013800 	.word	0x40013800
 8005204:	40020000 	.word	0x40020000
 8005208:	40020400 	.word	0x40020400
 800520c:	40020800 	.word	0x40020800
 8005210:	40020c00 	.word	0x40020c00
 8005214:	40021000 	.word	0x40021000
 8005218:	40021400 	.word	0x40021400
 800521c:	40021800 	.word	0x40021800
 8005220:	40013c00 	.word	0x40013c00

08005224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	887b      	ldrh	r3, [r7, #2]
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
 8005240:	e001      	b.n	8005246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005242:	2300      	movs	r3, #0
 8005244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	807b      	strh	r3, [r7, #2]
 8005260:	4613      	mov	r3, r2
 8005262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005264:	787b      	ldrb	r3, [r7, #1]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800526a:	887a      	ldrh	r2, [r7, #2]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005270:	e003      	b.n	800527a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005272:	887b      	ldrh	r3, [r7, #2]
 8005274:	041a      	lsls	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	619a      	str	r2, [r3, #24]
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	460b      	mov	r3, r1
 8005290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005298:	887a      	ldrh	r2, [r7, #2]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4013      	ands	r3, r2
 800529e:	041a      	lsls	r2, r3, #16
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	43d9      	mvns	r1, r3
 80052a4:	887b      	ldrh	r3, [r7, #2]
 80052a6:	400b      	ands	r3, r1
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	619a      	str	r2, [r3, #24]
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e12b      	b.n	8005526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fc ffa8 	bl	8002238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2224      	movs	r2, #36	@ 0x24
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800530e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800531e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005320:	f000 fdac 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8005324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4a81      	ldr	r2, [pc, #516]	@ (8005530 <HAL_I2C_Init+0x274>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d807      	bhi.n	8005340 <HAL_I2C_Init+0x84>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a80      	ldr	r2, [pc, #512]	@ (8005534 <HAL_I2C_Init+0x278>)
 8005334:	4293      	cmp	r3, r2
 8005336:	bf94      	ite	ls
 8005338:	2301      	movls	r3, #1
 800533a:	2300      	movhi	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e006      	b.n	800534e <HAL_I2C_Init+0x92>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a7d      	ldr	r2, [pc, #500]	@ (8005538 <HAL_I2C_Init+0x27c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	bf94      	ite	ls
 8005348:	2301      	movls	r3, #1
 800534a:	2300      	movhi	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0e7      	b.n	8005526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a78      	ldr	r2, [pc, #480]	@ (800553c <HAL_I2C_Init+0x280>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	0c9b      	lsrs	r3, r3, #18
 8005360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4a6a      	ldr	r2, [pc, #424]	@ (8005530 <HAL_I2C_Init+0x274>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d802      	bhi.n	8005390 <HAL_I2C_Init+0xd4>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	3301      	adds	r3, #1
 800538e:	e009      	b.n	80053a4 <HAL_I2C_Init+0xe8>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	4a69      	ldr	r2, [pc, #420]	@ (8005540 <HAL_I2C_Init+0x284>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	099b      	lsrs	r3, r3, #6
 80053a2:	3301      	adds	r3, #1
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	495c      	ldr	r1, [pc, #368]	@ (8005530 <HAL_I2C_Init+0x274>)
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d819      	bhi.n	80053f8 <HAL_I2C_Init+0x13c>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1e59      	subs	r1, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053d8:	400b      	ands	r3, r1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_I2C_Init+0x138>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1e59      	subs	r1, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ec:	3301      	adds	r3, #1
 80053ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f2:	e051      	b.n	8005498 <HAL_I2C_Init+0x1dc>
 80053f4:	2304      	movs	r3, #4
 80053f6:	e04f      	b.n	8005498 <HAL_I2C_Init+0x1dc>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d111      	bne.n	8005424 <HAL_I2C_Init+0x168>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1e58      	subs	r0, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	440b      	add	r3, r1
 800540e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005412:	3301      	adds	r3, #1
 8005414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e012      	b.n	800544a <HAL_I2C_Init+0x18e>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1e58      	subs	r0, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	0099      	lsls	r1, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	fbb0 f3f3 	udiv	r3, r0, r3
 800543a:	3301      	adds	r3, #1
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_Init+0x196>
 800544e:	2301      	movs	r3, #1
 8005450:	e022      	b.n	8005498 <HAL_I2C_Init+0x1dc>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10e      	bne.n	8005478 <HAL_I2C_Init+0x1bc>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1e58      	subs	r0, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6859      	ldr	r1, [r3, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	440b      	add	r3, r1
 8005468:	fbb0 f3f3 	udiv	r3, r0, r3
 800546c:	3301      	adds	r3, #1
 800546e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005476:	e00f      	b.n	8005498 <HAL_I2C_Init+0x1dc>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1e58      	subs	r0, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6859      	ldr	r1, [r3, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	0099      	lsls	r1, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	fbb0 f3f3 	udiv	r3, r0, r3
 800548e:	3301      	adds	r3, #1
 8005490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005494:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	6809      	ldr	r1, [r1, #0]
 800549c:	4313      	orrs	r3, r2
 800549e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6911      	ldr	r1, [r2, #16]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68d2      	ldr	r2, [r2, #12]
 80054d2:	4311      	orrs	r1, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	000186a0 	.word	0x000186a0
 8005534:	001e847f 	.word	0x001e847f
 8005538:	003d08ff 	.word	0x003d08ff
 800553c:	431bde83 	.word	0x431bde83
 8005540:	10624dd3 	.word	0x10624dd3

08005544 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	461a      	mov	r2, r3
 8005550:	460b      	mov	r3, r1
 8005552:	817b      	strh	r3, [r7, #10]
 8005554:	4613      	mov	r3, r2
 8005556:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005558:	f7fe f9e6 	bl	8003928 <HAL_GetTick>
 800555c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b20      	cmp	r3, #32
 8005568:	f040 80e0 	bne.w	800572c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2319      	movs	r3, #25
 8005572:	2201      	movs	r2, #1
 8005574:	4970      	ldr	r1, [pc, #448]	@ (8005738 <HAL_I2C_Master_Transmit+0x1f4>)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f964 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005582:	2302      	movs	r3, #2
 8005584:	e0d3      	b.n	800572e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_I2C_Master_Transmit+0x50>
 8005590:	2302      	movs	r3, #2
 8005592:	e0cc      	b.n	800572e <HAL_I2C_Master_Transmit+0x1ea>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d007      	beq.n	80055ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0201 	orr.w	r2, r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2221      	movs	r2, #33	@ 0x21
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2210      	movs	r2, #16
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	893a      	ldrh	r2, [r7, #8]
 80055ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4a50      	ldr	r2, [pc, #320]	@ (800573c <HAL_I2C_Master_Transmit+0x1f8>)
 80055fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055fc:	8979      	ldrh	r1, [r7, #10]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f89c 	bl	8005740 <I2C_MasterRequestWrite>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e08d      	b.n	800572e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005628:	e066      	b.n	80056f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	6a39      	ldr	r1, [r7, #32]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fa22 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00d      	beq.n	8005656 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	2b04      	cmp	r3, #4
 8005640:	d107      	bne.n	8005652 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005650:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e06b      	b.n	800572e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	781a      	ldrb	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d11b      	bne.n	80056cc <HAL_I2C_Master_Transmit+0x188>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005698:	2b00      	cmp	r3, #0
 800569a:	d017      	beq.n	80056cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	6a39      	ldr	r1, [r7, #32]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fa19 	bl	8005b08 <I2C_WaitOnBTFFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d107      	bne.n	80056f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e01a      	b.n	800572e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d194      	bne.n	800562a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800570e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	e000      	b.n	800572e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800572c:	2302      	movs	r3, #2
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	00100002 	.word	0x00100002
 800573c:	ffff0000 	.word	0xffff0000

08005740 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	460b      	mov	r3, r1
 800574e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d006      	beq.n	800576a <I2C_MasterRequestWrite+0x2a>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d003      	beq.n	800576a <I2C_MasterRequestWrite+0x2a>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005768:	d108      	bne.n	800577c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e00b      	b.n	8005794 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005780:	2b12      	cmp	r3, #18
 8005782:	d107      	bne.n	8005794 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005792:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f84f 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00d      	beq.n	80057c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ba:	d103      	bne.n	80057c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e035      	b.n	8005834 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057d0:	d108      	bne.n	80057e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057e0:	611a      	str	r2, [r3, #16]
 80057e2:	e01b      	b.n	800581c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057e4:	897b      	ldrh	r3, [r7, #10]
 80057e6:	11db      	asrs	r3, r3, #7
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	f003 0306 	and.w	r3, r3, #6
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f063 030f 	orn	r3, r3, #15
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	490e      	ldr	r1, [pc, #56]	@ (800583c <I2C_MasterRequestWrite+0xfc>)
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f898 	bl	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e010      	b.n	8005834 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005812:	897b      	ldrh	r3, [r7, #10]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4907      	ldr	r1, [pc, #28]	@ (8005840 <I2C_MasterRequestWrite+0x100>)
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f888 	bl	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	00010008 	.word	0x00010008
 8005840:	00010002 	.word	0x00010002

08005844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005854:	e048      	b.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800585c:	d044      	beq.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585e:	f7fe f863 	bl	8003928 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d302      	bcc.n	8005874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d139      	bne.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	0c1b      	lsrs	r3, r3, #16
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	d10d      	bne.n	800589a <I2C_WaitOnFlagUntilTimeout+0x56>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	43da      	mvns	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	e00c      	b.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	43da      	mvns	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4013      	ands	r3, r2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d116      	bne.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d4:	f043 0220 	orr.w	r2, r3, #32
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e023      	b.n	8005930 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d10d      	bne.n	800590e <I2C_WaitOnFlagUntilTimeout+0xca>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	e00c      	b.n	8005928 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	43da      	mvns	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4013      	ands	r3, r2
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	429a      	cmp	r2, r3
 800592c:	d093      	beq.n	8005856 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005946:	e071      	b.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005956:	d123      	bne.n	80059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005966:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e067      	b.n	8005a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059a6:	d041      	beq.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a8:	f7fd ffbe 	bl	8003928 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d302      	bcc.n	80059be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d136      	bne.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d10c      	bne.n	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	43da      	mvns	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4013      	ands	r3, r2
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bf14      	ite	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	2300      	moveq	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	e00b      	b.n	80059fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	43da      	mvns	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4013      	ands	r3, r2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	f043 0220 	orr.w	r2, r3, #32
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e021      	b.n	8005a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d10c      	bne.n	8005a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	43da      	mvns	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4013      	ands	r3, r2
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	e00b      	b.n	8005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	43da      	mvns	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bf14      	ite	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	2300      	moveq	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f af6d 	bne.w	8005948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a84:	e034      	b.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f886 	bl	8005b98 <I2C_IsAcknowledgeFailed>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e034      	b.n	8005b00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a9c:	d028      	beq.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f7fd ff43 	bl	8003928 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11d      	bne.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abe:	2b80      	cmp	r3, #128	@ 0x80
 8005ac0:	d016      	beq.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afa:	2b80      	cmp	r3, #128	@ 0x80
 8005afc:	d1c3      	bne.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b14:	e034      	b.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f83e 	bl	8005b98 <I2C_IsAcknowledgeFailed>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e034      	b.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b2c:	d028      	beq.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fd fefb 	bl	8003928 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11d      	bne.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d016      	beq.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e007      	b.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d1c3      	bne.n	8005b16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bae:	d11b      	bne.n	8005be8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	f043 0204 	orr.w	r2, r3, #4
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c02:	2300      	movs	r3, #0
 8005c04:	603b      	str	r3, [r7, #0]
 8005c06:	4b20      	ldr	r3, [pc, #128]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c12:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <HAL_PWREx_EnableOverDrive+0x94>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c24:	f7fd fe80 	bl	8003928 <HAL_GetTick>
 8005c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c2a:	e009      	b.n	8005c40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c2c:	f7fd fe7c 	bl	8003928 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c3a:	d901      	bls.n	8005c40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e01f      	b.n	8005c80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c40:	4b13      	ldr	r3, [pc, #76]	@ (8005c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c4c:	d1ee      	bne.n	8005c2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c4e:	4b11      	ldr	r3, [pc, #68]	@ (8005c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c54:	f7fd fe68 	bl	8003928 <HAL_GetTick>
 8005c58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c5a:	e009      	b.n	8005c70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c5c:	f7fd fe64 	bl	8003928 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c6a:	d901      	bls.n	8005c70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e007      	b.n	8005c80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c70:	4b07      	ldr	r3, [pc, #28]	@ (8005c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c7c:	d1ee      	bne.n	8005c5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	420e0040 	.word	0x420e0040
 8005c90:	40007000 	.word	0x40007000
 8005c94:	420e0044 	.word	0x420e0044

08005c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0cc      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cac:	4b68      	ldr	r3, [pc, #416]	@ (8005e50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d90c      	bls.n	8005cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cba:	4b65      	ldr	r3, [pc, #404]	@ (8005e50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b63      	ldr	r3, [pc, #396]	@ (8005e50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0b8      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d020      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cec:	4b59      	ldr	r3, [pc, #356]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a58      	ldr	r2, [pc, #352]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d04:	4b53      	ldr	r3, [pc, #332]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	4a52      	ldr	r2, [pc, #328]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d10:	4b50      	ldr	r3, [pc, #320]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	494d      	ldr	r1, [pc, #308]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d044      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	4b47      	ldr	r3, [pc, #284]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d119      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e07f      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d003      	beq.n	8005d56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d107      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d56:	4b3f      	ldr	r3, [pc, #252]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e06f      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d66:	4b3b      	ldr	r3, [pc, #236]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e067      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d76:	4b37      	ldr	r3, [pc, #220]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f023 0203 	bic.w	r2, r3, #3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	4934      	ldr	r1, [pc, #208]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d88:	f7fd fdce 	bl	8003928 <HAL_GetTick>
 8005d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d8e:	e00a      	b.n	8005da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d90:	f7fd fdca 	bl	8003928 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e04f      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da6:	4b2b      	ldr	r3, [pc, #172]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 020c 	and.w	r2, r3, #12
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d1eb      	bne.n	8005d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005db8:	4b25      	ldr	r3, [pc, #148]	@ (8005e50 <HAL_RCC_ClockConfig+0x1b8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d20c      	bcs.n	8005de0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc6:	4b22      	ldr	r3, [pc, #136]	@ (8005e50 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dce:	4b20      	ldr	r3, [pc, #128]	@ (8005e50 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d001      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e032      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dec:	4b19      	ldr	r3, [pc, #100]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4916      	ldr	r1, [pc, #88]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e0a:	4b12      	ldr	r3, [pc, #72]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	490e      	ldr	r1, [pc, #56]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e1e:	f000 f855 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8005e22:	4602      	mov	r2, r0
 8005e24:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	490a      	ldr	r1, [pc, #40]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	5ccb      	ldrb	r3, [r1, r3]
 8005e32:	fa22 f303 	lsr.w	r3, r2, r3
 8005e36:	4a09      	ldr	r2, [pc, #36]	@ (8005e5c <HAL_RCC_ClockConfig+0x1c4>)
 8005e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e3a:	4b09      	ldr	r3, [pc, #36]	@ (8005e60 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fd fd2e 	bl	80038a0 <HAL_InitTick>

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40023c00 	.word	0x40023c00
 8005e54:	40023800 	.word	0x40023800
 8005e58:	0800bd58 	.word	0x0800bd58
 8005e5c:	20000000 	.word	0x20000000
 8005e60:	20000004 	.word	0x20000004

08005e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e68:	4b03      	ldr	r3, [pc, #12]	@ (8005e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	20000000 	.word	0x20000000

08005e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e80:	f7ff fff0 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0a9b      	lsrs	r3, r3, #10
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4903      	ldr	r1, [pc, #12]	@ (8005ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	0800bd68 	.word	0x0800bd68

08005ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ea8:	f7ff ffdc 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4b05      	ldr	r3, [pc, #20]	@ (8005ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	0b5b      	lsrs	r3, r3, #13
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	4903      	ldr	r1, [pc, #12]	@ (8005ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eba:	5ccb      	ldrb	r3, [r1, r3]
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	0800bd68 	.word	0x0800bd68

08005ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed0:	b0a6      	sub	sp, #152	@ 0x98
 8005ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ef2:	4bc8      	ldr	r3, [pc, #800]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	f200 817e 	bhi.w	80061fc <HAL_RCC_GetSysClockFreq+0x330>
 8005f00:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f3d 	.word	0x08005f3d
 8005f0c:	080061fd 	.word	0x080061fd
 8005f10:	080061fd 	.word	0x080061fd
 8005f14:	080061fd 	.word	0x080061fd
 8005f18:	08005f45 	.word	0x08005f45
 8005f1c:	080061fd 	.word	0x080061fd
 8005f20:	080061fd 	.word	0x080061fd
 8005f24:	080061fd 	.word	0x080061fd
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	080061fd 	.word	0x080061fd
 8005f30:	080061fd 	.word	0x080061fd
 8005f34:	080061fd 	.word	0x080061fd
 8005f38:	080060b7 	.word	0x080060b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f3c:	4bb6      	ldr	r3, [pc, #728]	@ (8006218 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005f42:	e15f      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f44:	4bb5      	ldr	r3, [pc, #724]	@ (800621c <HAL_RCC_GetSysClockFreq+0x350>)
 8005f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005f4a:	e15b      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f4c:	4bb1      	ldr	r3, [pc, #708]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f58:	4bae      	ldr	r3, [pc, #696]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d031      	beq.n	8005fc8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f64:	4bab      	ldr	r3, [pc, #684]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	099b      	lsrs	r3, r3, #6
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f78:	2300      	movs	r3, #0
 8005f7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f7c:	4ba7      	ldr	r3, [pc, #668]	@ (800621c <HAL_RCC_GetSysClockFreq+0x350>)
 8005f7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005f82:	462a      	mov	r2, r5
 8005f84:	fb03 f202 	mul.w	r2, r3, r2
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	4aa2      	ldr	r2, [pc, #648]	@ (800621c <HAL_RCC_GetSysClockFreq+0x350>)
 8005f94:	4621      	mov	r1, r4
 8005f96:	fba1 1202 	umull	r1, r2, r1, r2
 8005f9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005fa0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005fa2:	4413      	add	r3, r2
 8005fa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005faa:	2200      	movs	r2, #0
 8005fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005fb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005fb4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005fb8:	f7fa fe86 	bl	8000cc8 <__aeabi_uldivmod>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fc6:	e064      	b.n	8006092 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc8:	4b92      	ldr	r3, [pc, #584]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	099b      	lsrs	r3, r3, #6
 8005fce:	2200      	movs	r2, #0
 8005fd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fd2:	657a      	str	r2, [r7, #84]	@ 0x54
 8005fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fdc:	2300      	movs	r3, #0
 8005fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	462b      	mov	r3, r5
 8005fe8:	f04f 0000 	mov.w	r0, #0
 8005fec:	f04f 0100 	mov.w	r1, #0
 8005ff0:	0159      	lsls	r1, r3, #5
 8005ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ff6:	0150      	lsls	r0, r2, #5
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	1a51      	subs	r1, r2, r1
 8006000:	6139      	str	r1, [r7, #16]
 8006002:	4629      	mov	r1, r5
 8006004:	eb63 0301 	sbc.w	r3, r3, r1
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006016:	4659      	mov	r1, fp
 8006018:	018b      	lsls	r3, r1, #6
 800601a:	4651      	mov	r1, sl
 800601c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006020:	4651      	mov	r1, sl
 8006022:	018a      	lsls	r2, r1, #6
 8006024:	4651      	mov	r1, sl
 8006026:	ebb2 0801 	subs.w	r8, r2, r1
 800602a:	4659      	mov	r1, fp
 800602c:	eb63 0901 	sbc.w	r9, r3, r1
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800603c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006040:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006044:	4690      	mov	r8, r2
 8006046:	4699      	mov	r9, r3
 8006048:	4623      	mov	r3, r4
 800604a:	eb18 0303 	adds.w	r3, r8, r3
 800604e:	60bb      	str	r3, [r7, #8]
 8006050:	462b      	mov	r3, r5
 8006052:	eb49 0303 	adc.w	r3, r9, r3
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006064:	4629      	mov	r1, r5
 8006066:	028b      	lsls	r3, r1, #10
 8006068:	4621      	mov	r1, r4
 800606a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800606e:	4621      	mov	r1, r4
 8006070:	028a      	lsls	r2, r1, #10
 8006072:	4610      	mov	r0, r2
 8006074:	4619      	mov	r1, r3
 8006076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800607a:	2200      	movs	r2, #0
 800607c:	643b      	str	r3, [r7, #64]	@ 0x40
 800607e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006084:	f7fa fe20 	bl	8000cc8 <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4613      	mov	r3, r2
 800608e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006092:	4b60      	ldr	r3, [pc, #384]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	3301      	adds	r3, #1
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80060a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80060b4:	e0a6      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060b6:	4b57      	ldr	r3, [pc, #348]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060c2:	4b54      	ldr	r3, [pc, #336]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d02a      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ce:	4b51      	ldr	r3, [pc, #324]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	099b      	lsrs	r3, r3, #6
 80060d4:	2200      	movs	r2, #0
 80060d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060e0:	2100      	movs	r1, #0
 80060e2:	4b4e      	ldr	r3, [pc, #312]	@ (800621c <HAL_RCC_GetSysClockFreq+0x350>)
 80060e4:	fb03 f201 	mul.w	r2, r3, r1
 80060e8:	2300      	movs	r3, #0
 80060ea:	fb00 f303 	mul.w	r3, r0, r3
 80060ee:	4413      	add	r3, r2
 80060f0:	4a4a      	ldr	r2, [pc, #296]	@ (800621c <HAL_RCC_GetSysClockFreq+0x350>)
 80060f2:	fba0 1202 	umull	r1, r2, r0, r2
 80060f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80060f8:	460a      	mov	r2, r1
 80060fa:	673a      	str	r2, [r7, #112]	@ 0x70
 80060fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80060fe:	4413      	add	r3, r2
 8006100:	677b      	str	r3, [r7, #116]	@ 0x74
 8006102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006106:	2200      	movs	r2, #0
 8006108:	633b      	str	r3, [r7, #48]	@ 0x30
 800610a:	637a      	str	r2, [r7, #52]	@ 0x34
 800610c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006110:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006114:	f7fa fdd8 	bl	8000cc8 <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4613      	mov	r3, r2
 800611e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006122:	e05b      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006124:	4b3b      	ldr	r3, [pc, #236]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	099b      	lsrs	r3, r3, #6
 800612a:	2200      	movs	r2, #0
 800612c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800612e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	623b      	str	r3, [r7, #32]
 8006138:	2300      	movs	r3, #0
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
 800613c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	f04f 0000 	mov.w	r0, #0
 8006148:	f04f 0100 	mov.w	r1, #0
 800614c:	0159      	lsls	r1, r3, #5
 800614e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006152:	0150      	lsls	r0, r2, #5
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4641      	mov	r1, r8
 800615a:	ebb2 0a01 	subs.w	sl, r2, r1
 800615e:	4649      	mov	r1, r9
 8006160:	eb63 0b01 	sbc.w	fp, r3, r1
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006170:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006174:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006178:	ebb2 040a 	subs.w	r4, r2, sl
 800617c:	eb63 050b 	sbc.w	r5, r3, fp
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	00eb      	lsls	r3, r5, #3
 800618a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800618e:	00e2      	lsls	r2, r4, #3
 8006190:	4614      	mov	r4, r2
 8006192:	461d      	mov	r5, r3
 8006194:	4643      	mov	r3, r8
 8006196:	18e3      	adds	r3, r4, r3
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	464b      	mov	r3, r9
 800619c:	eb45 0303 	adc.w	r3, r5, r3
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ae:	4629      	mov	r1, r5
 80061b0:	028b      	lsls	r3, r1, #10
 80061b2:	4621      	mov	r1, r4
 80061b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061b8:	4621      	mov	r1, r4
 80061ba:	028a      	lsls	r2, r1, #10
 80061bc:	4610      	mov	r0, r2
 80061be:	4619      	mov	r1, r3
 80061c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c4:	2200      	movs	r2, #0
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	61fa      	str	r2, [r7, #28]
 80061ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ce:	f7fa fd7b 	bl	8000cc8 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4613      	mov	r3, r2
 80061d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80061dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x348>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	0f1b      	lsrs	r3, r3, #28
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80061ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80061fa:	e003      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061fc:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <HAL_RCC_GetSysClockFreq+0x34c>)
 80061fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006204:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006208:	4618      	mov	r0, r3
 800620a:	3798      	adds	r7, #152	@ 0x98
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800
 8006218:	00f42400 	.word	0x00f42400
 800621c:	017d7840 	.word	0x017d7840

08006220 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e28d      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8083 	beq.w	8006346 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006240:	4b94      	ldr	r3, [pc, #592]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b04      	cmp	r3, #4
 800624a:	d019      	beq.n	8006280 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800624c:	4b91      	ldr	r3, [pc, #580]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
        || \
 8006254:	2b08      	cmp	r3, #8
 8006256:	d106      	bne.n	8006266 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006258:	4b8e      	ldr	r3, [pc, #568]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006264:	d00c      	beq.n	8006280 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006266:	4b8b      	ldr	r3, [pc, #556]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800626e:	2b0c      	cmp	r3, #12
 8006270:	d112      	bne.n	8006298 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006272:	4b88      	ldr	r3, [pc, #544]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800627a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800627e:	d10b      	bne.n	8006298 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006280:	4b84      	ldr	r3, [pc, #528]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d05b      	beq.n	8006344 <HAL_RCC_OscConfig+0x124>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d157      	bne.n	8006344 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e25a      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062a0:	d106      	bne.n	80062b0 <HAL_RCC_OscConfig+0x90>
 80062a2:	4b7c      	ldr	r3, [pc, #496]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a7b      	ldr	r2, [pc, #492]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e01d      	b.n	80062ec <HAL_RCC_OscConfig+0xcc>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062b8:	d10c      	bne.n	80062d4 <HAL_RCC_OscConfig+0xb4>
 80062ba:	4b76      	ldr	r3, [pc, #472]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a75      	ldr	r2, [pc, #468]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	4b73      	ldr	r3, [pc, #460]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a72      	ldr	r2, [pc, #456]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	e00b      	b.n	80062ec <HAL_RCC_OscConfig+0xcc>
 80062d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d013      	beq.n	800631c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fd fb18 	bl	8003928 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062fc:	f7fd fb14 	bl	8003928 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	@ 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e21f      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630e:	4b61      	ldr	r3, [pc, #388]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCC_OscConfig+0xdc>
 800631a:	e014      	b.n	8006346 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fd fb04 	bl	8003928 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006324:	f7fd fb00 	bl	8003928 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	@ 0x64
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e20b      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006336:	4b57      	ldr	r3, [pc, #348]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x104>
 8006342:	e000      	b.n	8006346 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d06f      	beq.n	8006432 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006352:	4b50      	ldr	r3, [pc, #320]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	2b00      	cmp	r3, #0
 800635c:	d017      	beq.n	800638e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800635e:	4b4d      	ldr	r3, [pc, #308]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
        || \
 8006366:	2b08      	cmp	r3, #8
 8006368:	d105      	bne.n	8006376 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800636a:	4b4a      	ldr	r3, [pc, #296]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006376:	4b47      	ldr	r3, [pc, #284]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800637e:	2b0c      	cmp	r3, #12
 8006380:	d11c      	bne.n	80063bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006382:	4b44      	ldr	r3, [pc, #272]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d116      	bne.n	80063bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638e:	4b41      	ldr	r3, [pc, #260]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_RCC_OscConfig+0x186>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d001      	beq.n	80063a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e1d3      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4937      	ldr	r1, [pc, #220]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ba:	e03a      	b.n	8006432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d020      	beq.n	8006406 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c4:	4b34      	ldr	r3, [pc, #208]	@ (8006498 <HAL_RCC_OscConfig+0x278>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fd faad 	bl	8003928 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d2:	f7fd faa9 	bl	8003928 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e1b4      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f0:	4b28      	ldr	r3, [pc, #160]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4925      	ldr	r1, [pc, #148]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006400:	4313      	orrs	r3, r2
 8006402:	600b      	str	r3, [r1, #0]
 8006404:	e015      	b.n	8006432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006406:	4b24      	ldr	r3, [pc, #144]	@ (8006498 <HAL_RCC_OscConfig+0x278>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640c:	f7fd fa8c 	bl	8003928 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006414:	f7fd fa88 	bl	8003928 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e193      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d036      	beq.n	80064ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006446:	4b15      	ldr	r3, [pc, #84]	@ (800649c <HAL_RCC_OscConfig+0x27c>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644c:	f7fd fa6c 	bl	8003928 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006454:	f7fd fa68 	bl	8003928 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e173      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x234>
 8006472:	e01b      	b.n	80064ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006474:	4b09      	ldr	r3, [pc, #36]	@ (800649c <HAL_RCC_OscConfig+0x27c>)
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647a:	f7fd fa55 	bl	8003928 <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006480:	e00e      	b.n	80064a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006482:	f7fd fa51 	bl	8003928 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d907      	bls.n	80064a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e15c      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
 8006494:	40023800 	.word	0x40023800
 8006498:	42470000 	.word	0x42470000
 800649c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a0:	4b8a      	ldr	r3, [pc, #552]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1ea      	bne.n	8006482 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8097 	beq.w	80065e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064be:	4b83      	ldr	r3, [pc, #524]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	4b7f      	ldr	r3, [pc, #508]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	4a7e      	ldr	r2, [pc, #504]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80064da:	4b7c      	ldr	r3, [pc, #496]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ea:	4b79      	ldr	r3, [pc, #484]	@ (80066d0 <HAL_RCC_OscConfig+0x4b0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d118      	bne.n	8006528 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f6:	4b76      	ldr	r3, [pc, #472]	@ (80066d0 <HAL_RCC_OscConfig+0x4b0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a75      	ldr	r2, [pc, #468]	@ (80066d0 <HAL_RCC_OscConfig+0x4b0>)
 80064fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006502:	f7fd fa11 	bl	8003928 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650a:	f7fd fa0d 	bl	8003928 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e118      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	4b6c      	ldr	r3, [pc, #432]	@ (80066d0 <HAL_RCC_OscConfig+0x4b0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d106      	bne.n	800653e <HAL_RCC_OscConfig+0x31e>
 8006530:	4b66      	ldr	r3, [pc, #408]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006534:	4a65      	ldr	r2, [pc, #404]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	6713      	str	r3, [r2, #112]	@ 0x70
 800653c:	e01c      	b.n	8006578 <HAL_RCC_OscConfig+0x358>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b05      	cmp	r3, #5
 8006544:	d10c      	bne.n	8006560 <HAL_RCC_OscConfig+0x340>
 8006546:	4b61      	ldr	r3, [pc, #388]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	4a60      	ldr	r2, [pc, #384]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 800654c:	f043 0304 	orr.w	r3, r3, #4
 8006550:	6713      	str	r3, [r2, #112]	@ 0x70
 8006552:	4b5e      	ldr	r3, [pc, #376]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006556:	4a5d      	ldr	r2, [pc, #372]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	6713      	str	r3, [r2, #112]	@ 0x70
 800655e:	e00b      	b.n	8006578 <HAL_RCC_OscConfig+0x358>
 8006560:	4b5a      	ldr	r3, [pc, #360]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006564:	4a59      	ldr	r2, [pc, #356]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	6713      	str	r3, [r2, #112]	@ 0x70
 800656c:	4b57      	ldr	r3, [pc, #348]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006570:	4a56      	ldr	r2, [pc, #344]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006572:	f023 0304 	bic.w	r3, r3, #4
 8006576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fd f9d2 	bl	8003928 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006586:	e00a      	b.n	800659e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006588:	f7fd f9ce 	bl	8003928 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e0d7      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659e:	4b4b      	ldr	r3, [pc, #300]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0ee      	beq.n	8006588 <HAL_RCC_OscConfig+0x368>
 80065aa:	e014      	b.n	80065d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fd f9bc 	bl	8003928 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b4:	f7fd f9b8 	bl	8003928 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e0c1      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ca:	4b40      	ldr	r3, [pc, #256]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1ee      	bne.n	80065b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065dc:	4b3b      	ldr	r3, [pc, #236]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	4a3a      	ldr	r2, [pc, #232]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80ad 	beq.w	800674c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065f2:	4b36      	ldr	r3, [pc, #216]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 030c 	and.w	r3, r3, #12
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d060      	beq.n	80066c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d145      	bne.n	8006692 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006606:	4b33      	ldr	r3, [pc, #204]	@ (80066d4 <HAL_RCC_OscConfig+0x4b4>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fd f98c 	bl	8003928 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fd f988 	bl	8003928 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e093      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	4b29      	ldr	r3, [pc, #164]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69da      	ldr	r2, [r3, #28]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	019b      	lsls	r3, r3, #6
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	3b01      	subs	r3, #1
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665c:	071b      	lsls	r3, r3, #28
 800665e:	491b      	ldr	r1, [pc, #108]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006660:	4313      	orrs	r3, r2
 8006662:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006664:	4b1b      	ldr	r3, [pc, #108]	@ (80066d4 <HAL_RCC_OscConfig+0x4b4>)
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666a:	f7fd f95d 	bl	8003928 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006672:	f7fd f959 	bl	8003928 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e064      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006684:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x452>
 8006690:	e05c      	b.n	800674c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006692:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <HAL_RCC_OscConfig+0x4b4>)
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fd f946 	bl	8003928 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a0:	f7fd f942 	bl	8003928 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e04d      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b2:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1f0      	bne.n	80066a0 <HAL_RCC_OscConfig+0x480>
 80066be:	e045      	b.n	800674c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d107      	bne.n	80066d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e040      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40007000 	.word	0x40007000
 80066d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006758 <HAL_RCC_OscConfig+0x538>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d030      	beq.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d129      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066fe:	429a      	cmp	r2, r3
 8006700:	d122      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006708:	4013      	ands	r3, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800670e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006710:	4293      	cmp	r3, r2
 8006712:	d119      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	3b01      	subs	r3, #1
 8006722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006724:	429a      	cmp	r2, r3
 8006726:	d10f      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006734:	429a      	cmp	r2, r3
 8006736:	d107      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006742:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006744:	429a      	cmp	r2, r3
 8006746:	d001      	beq.n	800674c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40023800 	.word	0x40023800

0800675c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e07b      	b.n	8006866 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d108      	bne.n	8006788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800677e:	d009      	beq.n	8006794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	61da      	str	r2, [r3, #28]
 8006786:	e005      	b.n	8006794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fb fdac 	bl	800230c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006818:	ea42 0103 	orr.w	r1, r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	0c1b      	lsrs	r3, r3, #16
 8006832:	f003 0104 	and.w	r1, r3, #4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	f003 0210 	and.w	r2, r3, #16
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006854:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e042      	b.n	8006906 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fb fda1 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2224      	movs	r2, #36	@ 0x24
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f972 	bl	8006b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695a      	ldr	r2, [r3, #20]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b08a      	sub	sp, #40	@ 0x28
 8006912:	af02      	add	r7, sp, #8
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b20      	cmp	r3, #32
 800692c:	d175      	bne.n	8006a1a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_UART_Transmit+0x2c>
 8006934:	88fb      	ldrh	r3, [r7, #6]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e06e      	b.n	8006a1c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2221      	movs	r2, #33	@ 0x21
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800694c:	f7fc ffec 	bl	8003928 <HAL_GetTick>
 8006950:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	88fa      	ldrh	r2, [r7, #6]
 8006956:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006966:	d108      	bne.n	800697a <HAL_UART_Transmit+0x6c>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	e003      	b.n	8006982 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006982:	e02e      	b.n	80069e2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2200      	movs	r2, #0
 800698c:	2180      	movs	r1, #128	@ 0x80
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f848 	bl	8006a24 <UART_WaitOnFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e03a      	b.n	8006a1c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	3302      	adds	r3, #2
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	e007      	b.n	80069d4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	3301      	adds	r3, #1
 80069d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1cb      	bne.n	8006984 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2200      	movs	r2, #0
 80069f4:	2140      	movs	r1, #64	@ 0x40
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 f814 	bl	8006a24 <UART_WaitOnFlagUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e006      	b.n	8006a1c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e000      	b.n	8006a1c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a1a:	2302      	movs	r3, #2
  }
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a34:	e03b      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a3c:	d037      	beq.n	8006aae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3e:	f7fc ff73 	bl	8003928 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d302      	bcc.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e03a      	b.n	8006ace <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d023      	beq.n	8006aae <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b80      	cmp	r3, #128	@ 0x80
 8006a6a:	d020      	beq.n	8006aae <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b40      	cmp	r3, #64	@ 0x40
 8006a70:	d01d      	beq.n	8006aae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d116      	bne.n	8006aae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f81d 	bl	8006ad6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2208      	movs	r2, #8
 8006aa0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e00f      	b.n	8006ace <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d0b4      	beq.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b095      	sub	sp, #84	@ 0x54
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006afe:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d119      	bne.n	8006b82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f023 0310 	bic.w	r3, r3, #16
 8006b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b6e:	61ba      	str	r2, [r7, #24]
 8006b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6979      	ldr	r1, [r7, #20]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e5      	bne.n	8006b4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b90:	bf00      	nop
 8006b92:	3754      	adds	r7, #84	@ 0x54
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba0:	b0c0      	sub	sp, #256	@ 0x100
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	68d9      	ldr	r1, [r3, #12]
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	ea40 0301 	orr.w	r3, r0, r1
 8006bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006bf4:	f021 010c 	bic.w	r1, r1, #12
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c02:	430b      	orrs	r3, r1
 8006c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c16:	6999      	ldr	r1, [r3, #24]
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	ea40 0301 	orr.w	r3, r0, r1
 8006c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006e68 <UART_SetConfig+0x2cc>)
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d005      	beq.n	8006c3c <UART_SetConfig+0xa0>
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b8d      	ldr	r3, [pc, #564]	@ (8006e6c <UART_SetConfig+0x2d0>)
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d104      	bne.n	8006c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7ff f932 	bl	8005ea4 <HAL_RCC_GetPCLK2Freq>
 8006c40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c44:	e003      	b.n	8006c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c46:	f7ff f919 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8006c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c58:	f040 810c 	bne.w	8006e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c6e:	4622      	mov	r2, r4
 8006c70:	462b      	mov	r3, r5
 8006c72:	1891      	adds	r1, r2, r2
 8006c74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c76:	415b      	adcs	r3, r3
 8006c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c7e:	4621      	mov	r1, r4
 8006c80:	eb12 0801 	adds.w	r8, r2, r1
 8006c84:	4629      	mov	r1, r5
 8006c86:	eb43 0901 	adc.w	r9, r3, r1
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c9e:	4690      	mov	r8, r2
 8006ca0:	4699      	mov	r9, r3
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	eb18 0303 	adds.w	r3, r8, r3
 8006ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cac:	462b      	mov	r3, r5
 8006cae:	eb49 0303 	adc.w	r3, r9, r3
 8006cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cca:	460b      	mov	r3, r1
 8006ccc:	18db      	adds	r3, r3, r3
 8006cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	eb42 0303 	adc.w	r3, r2, r3
 8006cd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ce0:	f7f9 fff2 	bl	8000cc8 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4b61      	ldr	r3, [pc, #388]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006cea:	fba3 2302 	umull	r2, r3, r3, r2
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	011c      	lsls	r4, r3, #4
 8006cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d04:	4642      	mov	r2, r8
 8006d06:	464b      	mov	r3, r9
 8006d08:	1891      	adds	r1, r2, r2
 8006d0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d0c:	415b      	adcs	r3, r3
 8006d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d14:	4641      	mov	r1, r8
 8006d16:	eb12 0a01 	adds.w	sl, r2, r1
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d34:	4692      	mov	sl, r2
 8006d36:	469b      	mov	fp, r3
 8006d38:	4643      	mov	r3, r8
 8006d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d42:	464b      	mov	r3, r9
 8006d44:	eb4b 0303 	adc.w	r3, fp, r3
 8006d48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d60:	460b      	mov	r3, r1
 8006d62:	18db      	adds	r3, r3, r3
 8006d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d66:	4613      	mov	r3, r2
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d76:	f7f9 ffa7 	bl	8000cc8 <__aeabi_uldivmod>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4b3b      	ldr	r3, [pc, #236]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006d82:	fba3 2301 	umull	r2, r3, r3, r1
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	2264      	movs	r2, #100	@ 0x64
 8006d8a:	fb02 f303 	mul.w	r3, r2, r3
 8006d8e:	1acb      	subs	r3, r1, r3
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d96:	4b36      	ldr	r3, [pc, #216]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006d98:	fba3 2302 	umull	r2, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006da4:	441c      	add	r4, r3
 8006da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006db0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	1891      	adds	r1, r2, r2
 8006dbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006dc0:	415b      	adcs	r3, r3
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006dc8:	4641      	mov	r1, r8
 8006dca:	1851      	adds	r1, r2, r1
 8006dcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dce:	4649      	mov	r1, r9
 8006dd0:	414b      	adcs	r3, r1
 8006dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006de0:	4659      	mov	r1, fp
 8006de2:	00cb      	lsls	r3, r1, #3
 8006de4:	4651      	mov	r1, sl
 8006de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dea:	4651      	mov	r1, sl
 8006dec:	00ca      	lsls	r2, r1, #3
 8006dee:	4610      	mov	r0, r2
 8006df0:	4619      	mov	r1, r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	4642      	mov	r2, r8
 8006df6:	189b      	adds	r3, r3, r2
 8006df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	460a      	mov	r2, r1
 8006e00:	eb42 0303 	adc.w	r3, r2, r3
 8006e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	18db      	adds	r3, r3, r3
 8006e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e22:	4613      	mov	r3, r2
 8006e24:	eb42 0303 	adc.w	r3, r2, r3
 8006e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e32:	f7f9 ff49 	bl	8000cc8 <__aeabi_uldivmod>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	2164      	movs	r1, #100	@ 0x64
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	3332      	adds	r3, #50	@ 0x32
 8006e4e:	4a08      	ldr	r2, [pc, #32]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	f003 0207 	and.w	r2, r3, #7
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4422      	add	r2, r4
 8006e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e64:	e106      	b.n	8007074 <UART_SetConfig+0x4d8>
 8006e66:	bf00      	nop
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	40011400 	.word	0x40011400
 8006e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e86:	4642      	mov	r2, r8
 8006e88:	464b      	mov	r3, r9
 8006e8a:	1891      	adds	r1, r2, r2
 8006e8c:	6239      	str	r1, [r7, #32]
 8006e8e:	415b      	adcs	r3, r3
 8006e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e96:	4641      	mov	r1, r8
 8006e98:	1854      	adds	r4, r2, r1
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	eb43 0501 	adc.w	r5, r3, r1
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	00eb      	lsls	r3, r5, #3
 8006eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eae:	00e2      	lsls	r2, r4, #3
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	461d      	mov	r5, r3
 8006eb4:	4643      	mov	r3, r8
 8006eb6:	18e3      	adds	r3, r4, r3
 8006eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	eb45 0303 	adc.w	r3, r5, r3
 8006ec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ed2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	008b      	lsls	r3, r1, #2
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eec:	4621      	mov	r1, r4
 8006eee:	008a      	lsls	r2, r1, #2
 8006ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ef4:	f7f9 fee8 	bl	8000cc8 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4b60      	ldr	r3, [pc, #384]	@ (8007080 <UART_SetConfig+0x4e4>)
 8006efe:	fba3 2302 	umull	r2, r3, r3, r2
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	011c      	lsls	r4, r3, #4
 8006f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	61b9      	str	r1, [r7, #24]
 8006f20:	415b      	adcs	r3, r3
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f28:	4641      	mov	r1, r8
 8006f2a:	1851      	adds	r1, r2, r1
 8006f2c:	6139      	str	r1, [r7, #16]
 8006f2e:	4649      	mov	r1, r9
 8006f30:	414b      	adcs	r3, r1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f40:	4659      	mov	r1, fp
 8006f42:	00cb      	lsls	r3, r1, #3
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	00ca      	lsls	r2, r1, #3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	4642      	mov	r2, r8
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	460a      	mov	r2, r1
 8006f60:	eb42 0303 	adc.w	r3, r2, r3
 8006f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f80:	4649      	mov	r1, r9
 8006f82:	008b      	lsls	r3, r1, #2
 8006f84:	4641      	mov	r1, r8
 8006f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	008a      	lsls	r2, r1, #2
 8006f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f92:	f7f9 fe99 	bl	8000cc8 <__aeabi_uldivmod>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4b38      	ldr	r3, [pc, #224]	@ (8007080 <UART_SetConfig+0x4e4>)
 8006f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	2264      	movs	r2, #100	@ 0x64
 8006fa6:	fb02 f303 	mul.w	r3, r2, r3
 8006faa:	1acb      	subs	r3, r1, r3
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	3332      	adds	r3, #50	@ 0x32
 8006fb0:	4a33      	ldr	r2, [pc, #204]	@ (8007080 <UART_SetConfig+0x4e4>)
 8006fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fbc:	441c      	add	r4, r3
 8006fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	1891      	adds	r1, r2, r2
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	415b      	adcs	r3, r3
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fdc:	4641      	mov	r1, r8
 8006fde:	1851      	adds	r1, r2, r1
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	414b      	adcs	r3, r1
 8006fe6:	607b      	str	r3, [r7, #4]
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	00cb      	lsls	r3, r1, #3
 8006ff8:	4651      	mov	r1, sl
 8006ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ffe:	4651      	mov	r1, sl
 8007000:	00ca      	lsls	r2, r1, #3
 8007002:	4610      	mov	r0, r2
 8007004:	4619      	mov	r1, r3
 8007006:	4603      	mov	r3, r0
 8007008:	4642      	mov	r2, r8
 800700a:	189b      	adds	r3, r3, r2
 800700c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800700e:	464b      	mov	r3, r9
 8007010:	460a      	mov	r2, r1
 8007012:	eb42 0303 	adc.w	r3, r2, r3
 8007016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	663b      	str	r3, [r7, #96]	@ 0x60
 8007022:	667a      	str	r2, [r7, #100]	@ 0x64
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007030:	4649      	mov	r1, r9
 8007032:	008b      	lsls	r3, r1, #2
 8007034:	4641      	mov	r1, r8
 8007036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800703a:	4641      	mov	r1, r8
 800703c:	008a      	lsls	r2, r1, #2
 800703e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007042:	f7f9 fe41 	bl	8000cc8 <__aeabi_uldivmod>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <UART_SetConfig+0x4e4>)
 800704c:	fba3 1302 	umull	r1, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	2164      	movs	r1, #100	@ 0x64
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	3332      	adds	r3, #50	@ 0x32
 800705e:	4a08      	ldr	r2, [pc, #32]	@ (8007080 <UART_SetConfig+0x4e4>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	f003 020f 	and.w	r2, r3, #15
 800706a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4422      	add	r2, r4
 8007072:	609a      	str	r2, [r3, #8]
}
 8007074:	bf00      	nop
 8007076:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800707a:	46bd      	mov	sp, r7
 800707c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007080:	51eb851f 	.word	0x51eb851f

08007084 <__cvt>:
 8007084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	ec57 6b10 	vmov	r6, r7, d0
 800708c:	2f00      	cmp	r7, #0
 800708e:	460c      	mov	r4, r1
 8007090:	4619      	mov	r1, r3
 8007092:	463b      	mov	r3, r7
 8007094:	bfbb      	ittet	lt
 8007096:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800709a:	461f      	movlt	r7, r3
 800709c:	2300      	movge	r3, #0
 800709e:	232d      	movlt	r3, #45	@ 0x2d
 80070a0:	700b      	strb	r3, [r1, #0]
 80070a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80070a8:	4691      	mov	r9, r2
 80070aa:	f023 0820 	bic.w	r8, r3, #32
 80070ae:	bfbc      	itt	lt
 80070b0:	4632      	movlt	r2, r6
 80070b2:	4616      	movlt	r6, r2
 80070b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070b8:	d005      	beq.n	80070c6 <__cvt+0x42>
 80070ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80070be:	d100      	bne.n	80070c2 <__cvt+0x3e>
 80070c0:	3401      	adds	r4, #1
 80070c2:	2102      	movs	r1, #2
 80070c4:	e000      	b.n	80070c8 <__cvt+0x44>
 80070c6:	2103      	movs	r1, #3
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	ab02      	add	r3, sp, #8
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	ec47 6b10 	vmov	d0, r6, r7
 80070d4:	4653      	mov	r3, sl
 80070d6:	4622      	mov	r2, r4
 80070d8:	f000 fdd2 	bl	8007c80 <_dtoa_r>
 80070dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070e0:	4605      	mov	r5, r0
 80070e2:	d119      	bne.n	8007118 <__cvt+0x94>
 80070e4:	f019 0f01 	tst.w	r9, #1
 80070e8:	d00e      	beq.n	8007108 <__cvt+0x84>
 80070ea:	eb00 0904 	add.w	r9, r0, r4
 80070ee:	2200      	movs	r2, #0
 80070f0:	2300      	movs	r3, #0
 80070f2:	4630      	mov	r0, r6
 80070f4:	4639      	mov	r1, r7
 80070f6:	f7f9 fd07 	bl	8000b08 <__aeabi_dcmpeq>
 80070fa:	b108      	cbz	r0, 8007100 <__cvt+0x7c>
 80070fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007100:	2230      	movs	r2, #48	@ 0x30
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	454b      	cmp	r3, r9
 8007106:	d31e      	bcc.n	8007146 <__cvt+0xc2>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800710c:	1b5b      	subs	r3, r3, r5
 800710e:	4628      	mov	r0, r5
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	b004      	add	sp, #16
 8007114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007118:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800711c:	eb00 0904 	add.w	r9, r0, r4
 8007120:	d1e5      	bne.n	80070ee <__cvt+0x6a>
 8007122:	7803      	ldrb	r3, [r0, #0]
 8007124:	2b30      	cmp	r3, #48	@ 0x30
 8007126:	d10a      	bne.n	800713e <__cvt+0xba>
 8007128:	2200      	movs	r2, #0
 800712a:	2300      	movs	r3, #0
 800712c:	4630      	mov	r0, r6
 800712e:	4639      	mov	r1, r7
 8007130:	f7f9 fcea 	bl	8000b08 <__aeabi_dcmpeq>
 8007134:	b918      	cbnz	r0, 800713e <__cvt+0xba>
 8007136:	f1c4 0401 	rsb	r4, r4, #1
 800713a:	f8ca 4000 	str.w	r4, [sl]
 800713e:	f8da 3000 	ldr.w	r3, [sl]
 8007142:	4499      	add	r9, r3
 8007144:	e7d3      	b.n	80070ee <__cvt+0x6a>
 8007146:	1c59      	adds	r1, r3, #1
 8007148:	9103      	str	r1, [sp, #12]
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	e7d9      	b.n	8007102 <__cvt+0x7e>

0800714e <__exponent>:
 800714e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007150:	2900      	cmp	r1, #0
 8007152:	bfba      	itte	lt
 8007154:	4249      	neglt	r1, r1
 8007156:	232d      	movlt	r3, #45	@ 0x2d
 8007158:	232b      	movge	r3, #43	@ 0x2b
 800715a:	2909      	cmp	r1, #9
 800715c:	7002      	strb	r2, [r0, #0]
 800715e:	7043      	strb	r3, [r0, #1]
 8007160:	dd29      	ble.n	80071b6 <__exponent+0x68>
 8007162:	f10d 0307 	add.w	r3, sp, #7
 8007166:	461d      	mov	r5, r3
 8007168:	270a      	movs	r7, #10
 800716a:	461a      	mov	r2, r3
 800716c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007170:	fb07 1416 	mls	r4, r7, r6, r1
 8007174:	3430      	adds	r4, #48	@ 0x30
 8007176:	f802 4c01 	strb.w	r4, [r2, #-1]
 800717a:	460c      	mov	r4, r1
 800717c:	2c63      	cmp	r4, #99	@ 0x63
 800717e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007182:	4631      	mov	r1, r6
 8007184:	dcf1      	bgt.n	800716a <__exponent+0x1c>
 8007186:	3130      	adds	r1, #48	@ 0x30
 8007188:	1e94      	subs	r4, r2, #2
 800718a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800718e:	1c41      	adds	r1, r0, #1
 8007190:	4623      	mov	r3, r4
 8007192:	42ab      	cmp	r3, r5
 8007194:	d30a      	bcc.n	80071ac <__exponent+0x5e>
 8007196:	f10d 0309 	add.w	r3, sp, #9
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	42ac      	cmp	r4, r5
 800719e:	bf88      	it	hi
 80071a0:	2300      	movhi	r3, #0
 80071a2:	3302      	adds	r3, #2
 80071a4:	4403      	add	r3, r0
 80071a6:	1a18      	subs	r0, r3, r0
 80071a8:	b003      	add	sp, #12
 80071aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80071b4:	e7ed      	b.n	8007192 <__exponent+0x44>
 80071b6:	2330      	movs	r3, #48	@ 0x30
 80071b8:	3130      	adds	r1, #48	@ 0x30
 80071ba:	7083      	strb	r3, [r0, #2]
 80071bc:	70c1      	strb	r1, [r0, #3]
 80071be:	1d03      	adds	r3, r0, #4
 80071c0:	e7f1      	b.n	80071a6 <__exponent+0x58>
	...

080071c4 <_printf_float>:
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	b08d      	sub	sp, #52	@ 0x34
 80071ca:	460c      	mov	r4, r1
 80071cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80071d0:	4616      	mov	r6, r2
 80071d2:	461f      	mov	r7, r3
 80071d4:	4605      	mov	r5, r0
 80071d6:	f000 fc97 	bl	8007b08 <_localeconv_r>
 80071da:	6803      	ldr	r3, [r0, #0]
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7f9 f866 	bl	80002b0 <strlen>
 80071e4:	2300      	movs	r3, #0
 80071e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e8:	f8d8 3000 	ldr.w	r3, [r8]
 80071ec:	9005      	str	r0, [sp, #20]
 80071ee:	3307      	adds	r3, #7
 80071f0:	f023 0307 	bic.w	r3, r3, #7
 80071f4:	f103 0208 	add.w	r2, r3, #8
 80071f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071fc:	f8d4 b000 	ldr.w	fp, [r4]
 8007200:	f8c8 2000 	str.w	r2, [r8]
 8007204:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007208:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800720c:	9307      	str	r3, [sp, #28]
 800720e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007212:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800721a:	4b9c      	ldr	r3, [pc, #624]	@ (800748c <_printf_float+0x2c8>)
 800721c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007220:	f7f9 fca4 	bl	8000b6c <__aeabi_dcmpun>
 8007224:	bb70      	cbnz	r0, 8007284 <_printf_float+0xc0>
 8007226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800722a:	4b98      	ldr	r3, [pc, #608]	@ (800748c <_printf_float+0x2c8>)
 800722c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007230:	f7f9 fc7e 	bl	8000b30 <__aeabi_dcmple>
 8007234:	bb30      	cbnz	r0, 8007284 <_printf_float+0xc0>
 8007236:	2200      	movs	r2, #0
 8007238:	2300      	movs	r3, #0
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 fc6d 	bl	8000b1c <__aeabi_dcmplt>
 8007242:	b110      	cbz	r0, 800724a <_printf_float+0x86>
 8007244:	232d      	movs	r3, #45	@ 0x2d
 8007246:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800724a:	4a91      	ldr	r2, [pc, #580]	@ (8007490 <_printf_float+0x2cc>)
 800724c:	4b91      	ldr	r3, [pc, #580]	@ (8007494 <_printf_float+0x2d0>)
 800724e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007252:	bf94      	ite	ls
 8007254:	4690      	movls	r8, r2
 8007256:	4698      	movhi	r8, r3
 8007258:	2303      	movs	r3, #3
 800725a:	6123      	str	r3, [r4, #16]
 800725c:	f02b 0304 	bic.w	r3, fp, #4
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	f04f 0900 	mov.w	r9, #0
 8007266:	9700      	str	r7, [sp, #0]
 8007268:	4633      	mov	r3, r6
 800726a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800726c:	4621      	mov	r1, r4
 800726e:	4628      	mov	r0, r5
 8007270:	f000 f9d2 	bl	8007618 <_printf_common>
 8007274:	3001      	adds	r0, #1
 8007276:	f040 808d 	bne.w	8007394 <_printf_float+0x1d0>
 800727a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800727e:	b00d      	add	sp, #52	@ 0x34
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	4642      	mov	r2, r8
 8007286:	464b      	mov	r3, r9
 8007288:	4640      	mov	r0, r8
 800728a:	4649      	mov	r1, r9
 800728c:	f7f9 fc6e 	bl	8000b6c <__aeabi_dcmpun>
 8007290:	b140      	cbz	r0, 80072a4 <_printf_float+0xe0>
 8007292:	464b      	mov	r3, r9
 8007294:	2b00      	cmp	r3, #0
 8007296:	bfbc      	itt	lt
 8007298:	232d      	movlt	r3, #45	@ 0x2d
 800729a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800729e:	4a7e      	ldr	r2, [pc, #504]	@ (8007498 <_printf_float+0x2d4>)
 80072a0:	4b7e      	ldr	r3, [pc, #504]	@ (800749c <_printf_float+0x2d8>)
 80072a2:	e7d4      	b.n	800724e <_printf_float+0x8a>
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80072aa:	9206      	str	r2, [sp, #24]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	d13b      	bne.n	8007328 <_printf_float+0x164>
 80072b0:	2306      	movs	r3, #6
 80072b2:	6063      	str	r3, [r4, #4]
 80072b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80072b8:	2300      	movs	r3, #0
 80072ba:	6022      	str	r2, [r4, #0]
 80072bc:	9303      	str	r3, [sp, #12]
 80072be:	ab0a      	add	r3, sp, #40	@ 0x28
 80072c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80072c4:	ab09      	add	r3, sp, #36	@ 0x24
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	6861      	ldr	r1, [r4, #4]
 80072ca:	ec49 8b10 	vmov	d0, r8, r9
 80072ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80072d2:	4628      	mov	r0, r5
 80072d4:	f7ff fed6 	bl	8007084 <__cvt>
 80072d8:	9b06      	ldr	r3, [sp, #24]
 80072da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072dc:	2b47      	cmp	r3, #71	@ 0x47
 80072de:	4680      	mov	r8, r0
 80072e0:	d129      	bne.n	8007336 <_printf_float+0x172>
 80072e2:	1cc8      	adds	r0, r1, #3
 80072e4:	db02      	blt.n	80072ec <_printf_float+0x128>
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	4299      	cmp	r1, r3
 80072ea:	dd41      	ble.n	8007370 <_printf_float+0x1ac>
 80072ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80072f0:	fa5f fa8a 	uxtb.w	sl, sl
 80072f4:	3901      	subs	r1, #1
 80072f6:	4652      	mov	r2, sl
 80072f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80072fe:	f7ff ff26 	bl	800714e <__exponent>
 8007302:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007304:	1813      	adds	r3, r2, r0
 8007306:	2a01      	cmp	r2, #1
 8007308:	4681      	mov	r9, r0
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	dc02      	bgt.n	8007314 <_printf_float+0x150>
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	07d2      	lsls	r2, r2, #31
 8007312:	d501      	bpl.n	8007318 <_printf_float+0x154>
 8007314:	3301      	adds	r3, #1
 8007316:	6123      	str	r3, [r4, #16]
 8007318:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0a2      	beq.n	8007266 <_printf_float+0xa2>
 8007320:	232d      	movs	r3, #45	@ 0x2d
 8007322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007326:	e79e      	b.n	8007266 <_printf_float+0xa2>
 8007328:	9a06      	ldr	r2, [sp, #24]
 800732a:	2a47      	cmp	r2, #71	@ 0x47
 800732c:	d1c2      	bne.n	80072b4 <_printf_float+0xf0>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1c0      	bne.n	80072b4 <_printf_float+0xf0>
 8007332:	2301      	movs	r3, #1
 8007334:	e7bd      	b.n	80072b2 <_printf_float+0xee>
 8007336:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800733a:	d9db      	bls.n	80072f4 <_printf_float+0x130>
 800733c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007340:	d118      	bne.n	8007374 <_printf_float+0x1b0>
 8007342:	2900      	cmp	r1, #0
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	dd0b      	ble.n	8007360 <_printf_float+0x19c>
 8007348:	6121      	str	r1, [r4, #16]
 800734a:	b913      	cbnz	r3, 8007352 <_printf_float+0x18e>
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	07d0      	lsls	r0, r2, #31
 8007350:	d502      	bpl.n	8007358 <_printf_float+0x194>
 8007352:	3301      	adds	r3, #1
 8007354:	440b      	add	r3, r1
 8007356:	6123      	str	r3, [r4, #16]
 8007358:	65a1      	str	r1, [r4, #88]	@ 0x58
 800735a:	f04f 0900 	mov.w	r9, #0
 800735e:	e7db      	b.n	8007318 <_printf_float+0x154>
 8007360:	b913      	cbnz	r3, 8007368 <_printf_float+0x1a4>
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	07d2      	lsls	r2, r2, #31
 8007366:	d501      	bpl.n	800736c <_printf_float+0x1a8>
 8007368:	3302      	adds	r3, #2
 800736a:	e7f4      	b.n	8007356 <_printf_float+0x192>
 800736c:	2301      	movs	r3, #1
 800736e:	e7f2      	b.n	8007356 <_printf_float+0x192>
 8007370:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007376:	4299      	cmp	r1, r3
 8007378:	db05      	blt.n	8007386 <_printf_float+0x1c2>
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	6121      	str	r1, [r4, #16]
 800737e:	07d8      	lsls	r0, r3, #31
 8007380:	d5ea      	bpl.n	8007358 <_printf_float+0x194>
 8007382:	1c4b      	adds	r3, r1, #1
 8007384:	e7e7      	b.n	8007356 <_printf_float+0x192>
 8007386:	2900      	cmp	r1, #0
 8007388:	bfd4      	ite	le
 800738a:	f1c1 0202 	rsble	r2, r1, #2
 800738e:	2201      	movgt	r2, #1
 8007390:	4413      	add	r3, r2
 8007392:	e7e0      	b.n	8007356 <_printf_float+0x192>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	055a      	lsls	r2, r3, #21
 8007398:	d407      	bmi.n	80073aa <_printf_float+0x1e6>
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	4642      	mov	r2, r8
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	d12b      	bne.n	8007400 <_printf_float+0x23c>
 80073a8:	e767      	b.n	800727a <_printf_float+0xb6>
 80073aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073ae:	f240 80dd 	bls.w	800756c <_printf_float+0x3a8>
 80073b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073b6:	2200      	movs	r2, #0
 80073b8:	2300      	movs	r3, #0
 80073ba:	f7f9 fba5 	bl	8000b08 <__aeabi_dcmpeq>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d033      	beq.n	800742a <_printf_float+0x266>
 80073c2:	4a37      	ldr	r2, [pc, #220]	@ (80074a0 <_printf_float+0x2dc>)
 80073c4:	2301      	movs	r3, #1
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	f43f af54 	beq.w	800727a <_printf_float+0xb6>
 80073d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80073d6:	4543      	cmp	r3, r8
 80073d8:	db02      	blt.n	80073e0 <_printf_float+0x21c>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	07d8      	lsls	r0, r3, #31
 80073de:	d50f      	bpl.n	8007400 <_printf_float+0x23c>
 80073e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	f43f af45 	beq.w	800727a <_printf_float+0xb6>
 80073f0:	f04f 0900 	mov.w	r9, #0
 80073f4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80073f8:	f104 0a1a 	add.w	sl, r4, #26
 80073fc:	45c8      	cmp	r8, r9
 80073fe:	dc09      	bgt.n	8007414 <_printf_float+0x250>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	079b      	lsls	r3, r3, #30
 8007404:	f100 8103 	bmi.w	800760e <_printf_float+0x44a>
 8007408:	68e0      	ldr	r0, [r4, #12]
 800740a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800740c:	4298      	cmp	r0, r3
 800740e:	bfb8      	it	lt
 8007410:	4618      	movlt	r0, r3
 8007412:	e734      	b.n	800727e <_printf_float+0xba>
 8007414:	2301      	movs	r3, #1
 8007416:	4652      	mov	r2, sl
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	47b8      	blx	r7
 800741e:	3001      	adds	r0, #1
 8007420:	f43f af2b 	beq.w	800727a <_printf_float+0xb6>
 8007424:	f109 0901 	add.w	r9, r9, #1
 8007428:	e7e8      	b.n	80073fc <_printf_float+0x238>
 800742a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	dc39      	bgt.n	80074a4 <_printf_float+0x2e0>
 8007430:	4a1b      	ldr	r2, [pc, #108]	@ (80074a0 <_printf_float+0x2dc>)
 8007432:	2301      	movs	r3, #1
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	47b8      	blx	r7
 800743a:	3001      	adds	r0, #1
 800743c:	f43f af1d 	beq.w	800727a <_printf_float+0xb6>
 8007440:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007444:	ea59 0303 	orrs.w	r3, r9, r3
 8007448:	d102      	bne.n	8007450 <_printf_float+0x28c>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	07d9      	lsls	r1, r3, #31
 800744e:	d5d7      	bpl.n	8007400 <_printf_float+0x23c>
 8007450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007454:	4631      	mov	r1, r6
 8007456:	4628      	mov	r0, r5
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	f43f af0d 	beq.w	800727a <_printf_float+0xb6>
 8007460:	f04f 0a00 	mov.w	sl, #0
 8007464:	f104 0b1a 	add.w	fp, r4, #26
 8007468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800746a:	425b      	negs	r3, r3
 800746c:	4553      	cmp	r3, sl
 800746e:	dc01      	bgt.n	8007474 <_printf_float+0x2b0>
 8007470:	464b      	mov	r3, r9
 8007472:	e793      	b.n	800739c <_printf_float+0x1d8>
 8007474:	2301      	movs	r3, #1
 8007476:	465a      	mov	r2, fp
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	f43f aefb 	beq.w	800727a <_printf_float+0xb6>
 8007484:	f10a 0a01 	add.w	sl, sl, #1
 8007488:	e7ee      	b.n	8007468 <_printf_float+0x2a4>
 800748a:	bf00      	nop
 800748c:	7fefffff 	.word	0x7fefffff
 8007490:	0800bd78 	.word	0x0800bd78
 8007494:	0800bd7c 	.word	0x0800bd7c
 8007498:	0800bd80 	.word	0x0800bd80
 800749c:	0800bd84 	.word	0x0800bd84
 80074a0:	0800bd88 	.word	0x0800bd88
 80074a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074aa:	4553      	cmp	r3, sl
 80074ac:	bfa8      	it	ge
 80074ae:	4653      	movge	r3, sl
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	4699      	mov	r9, r3
 80074b4:	dc36      	bgt.n	8007524 <_printf_float+0x360>
 80074b6:	f04f 0b00 	mov.w	fp, #0
 80074ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074be:	f104 021a 	add.w	r2, r4, #26
 80074c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074c4:	9306      	str	r3, [sp, #24]
 80074c6:	eba3 0309 	sub.w	r3, r3, r9
 80074ca:	455b      	cmp	r3, fp
 80074cc:	dc31      	bgt.n	8007532 <_printf_float+0x36e>
 80074ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d0:	459a      	cmp	sl, r3
 80074d2:	dc3a      	bgt.n	800754a <_printf_float+0x386>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	07da      	lsls	r2, r3, #31
 80074d8:	d437      	bmi.n	800754a <_printf_float+0x386>
 80074da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074dc:	ebaa 0903 	sub.w	r9, sl, r3
 80074e0:	9b06      	ldr	r3, [sp, #24]
 80074e2:	ebaa 0303 	sub.w	r3, sl, r3
 80074e6:	4599      	cmp	r9, r3
 80074e8:	bfa8      	it	ge
 80074ea:	4699      	movge	r9, r3
 80074ec:	f1b9 0f00 	cmp.w	r9, #0
 80074f0:	dc33      	bgt.n	800755a <_printf_float+0x396>
 80074f2:	f04f 0800 	mov.w	r8, #0
 80074f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074fa:	f104 0b1a 	add.w	fp, r4, #26
 80074fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007500:	ebaa 0303 	sub.w	r3, sl, r3
 8007504:	eba3 0309 	sub.w	r3, r3, r9
 8007508:	4543      	cmp	r3, r8
 800750a:	f77f af79 	ble.w	8007400 <_printf_float+0x23c>
 800750e:	2301      	movs	r3, #1
 8007510:	465a      	mov	r2, fp
 8007512:	4631      	mov	r1, r6
 8007514:	4628      	mov	r0, r5
 8007516:	47b8      	blx	r7
 8007518:	3001      	adds	r0, #1
 800751a:	f43f aeae 	beq.w	800727a <_printf_float+0xb6>
 800751e:	f108 0801 	add.w	r8, r8, #1
 8007522:	e7ec      	b.n	80074fe <_printf_float+0x33a>
 8007524:	4642      	mov	r2, r8
 8007526:	4631      	mov	r1, r6
 8007528:	4628      	mov	r0, r5
 800752a:	47b8      	blx	r7
 800752c:	3001      	adds	r0, #1
 800752e:	d1c2      	bne.n	80074b6 <_printf_float+0x2f2>
 8007530:	e6a3      	b.n	800727a <_printf_float+0xb6>
 8007532:	2301      	movs	r3, #1
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	9206      	str	r2, [sp, #24]
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	f43f ae9c 	beq.w	800727a <_printf_float+0xb6>
 8007542:	9a06      	ldr	r2, [sp, #24]
 8007544:	f10b 0b01 	add.w	fp, fp, #1
 8007548:	e7bb      	b.n	80074c2 <_printf_float+0x2fe>
 800754a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800754e:	4631      	mov	r1, r6
 8007550:	4628      	mov	r0, r5
 8007552:	47b8      	blx	r7
 8007554:	3001      	adds	r0, #1
 8007556:	d1c0      	bne.n	80074da <_printf_float+0x316>
 8007558:	e68f      	b.n	800727a <_printf_float+0xb6>
 800755a:	9a06      	ldr	r2, [sp, #24]
 800755c:	464b      	mov	r3, r9
 800755e:	4442      	add	r2, r8
 8007560:	4631      	mov	r1, r6
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	d1c3      	bne.n	80074f2 <_printf_float+0x32e>
 800756a:	e686      	b.n	800727a <_printf_float+0xb6>
 800756c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007570:	f1ba 0f01 	cmp.w	sl, #1
 8007574:	dc01      	bgt.n	800757a <_printf_float+0x3b6>
 8007576:	07db      	lsls	r3, r3, #31
 8007578:	d536      	bpl.n	80075e8 <_printf_float+0x424>
 800757a:	2301      	movs	r3, #1
 800757c:	4642      	mov	r2, r8
 800757e:	4631      	mov	r1, r6
 8007580:	4628      	mov	r0, r5
 8007582:	47b8      	blx	r7
 8007584:	3001      	adds	r0, #1
 8007586:	f43f ae78 	beq.w	800727a <_printf_float+0xb6>
 800758a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800758e:	4631      	mov	r1, r6
 8007590:	4628      	mov	r0, r5
 8007592:	47b8      	blx	r7
 8007594:	3001      	adds	r0, #1
 8007596:	f43f ae70 	beq.w	800727a <_printf_float+0xb6>
 800759a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800759e:	2200      	movs	r2, #0
 80075a0:	2300      	movs	r3, #0
 80075a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80075a6:	f7f9 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 80075aa:	b9c0      	cbnz	r0, 80075de <_printf_float+0x41a>
 80075ac:	4653      	mov	r3, sl
 80075ae:	f108 0201 	add.w	r2, r8, #1
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	d10c      	bne.n	80075d6 <_printf_float+0x412>
 80075bc:	e65d      	b.n	800727a <_printf_float+0xb6>
 80075be:	2301      	movs	r3, #1
 80075c0:	465a      	mov	r2, fp
 80075c2:	4631      	mov	r1, r6
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b8      	blx	r7
 80075c8:	3001      	adds	r0, #1
 80075ca:	f43f ae56 	beq.w	800727a <_printf_float+0xb6>
 80075ce:	f108 0801 	add.w	r8, r8, #1
 80075d2:	45d0      	cmp	r8, sl
 80075d4:	dbf3      	blt.n	80075be <_printf_float+0x3fa>
 80075d6:	464b      	mov	r3, r9
 80075d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075dc:	e6df      	b.n	800739e <_printf_float+0x1da>
 80075de:	f04f 0800 	mov.w	r8, #0
 80075e2:	f104 0b1a 	add.w	fp, r4, #26
 80075e6:	e7f4      	b.n	80075d2 <_printf_float+0x40e>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4642      	mov	r2, r8
 80075ec:	e7e1      	b.n	80075b2 <_printf_float+0x3ee>
 80075ee:	2301      	movs	r3, #1
 80075f0:	464a      	mov	r2, r9
 80075f2:	4631      	mov	r1, r6
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b8      	blx	r7
 80075f8:	3001      	adds	r0, #1
 80075fa:	f43f ae3e 	beq.w	800727a <_printf_float+0xb6>
 80075fe:	f108 0801 	add.w	r8, r8, #1
 8007602:	68e3      	ldr	r3, [r4, #12]
 8007604:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007606:	1a5b      	subs	r3, r3, r1
 8007608:	4543      	cmp	r3, r8
 800760a:	dcf0      	bgt.n	80075ee <_printf_float+0x42a>
 800760c:	e6fc      	b.n	8007408 <_printf_float+0x244>
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	f104 0919 	add.w	r9, r4, #25
 8007616:	e7f4      	b.n	8007602 <_printf_float+0x43e>

08007618 <_printf_common>:
 8007618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	4616      	mov	r6, r2
 800761e:	4698      	mov	r8, r3
 8007620:	688a      	ldr	r2, [r1, #8]
 8007622:	690b      	ldr	r3, [r1, #16]
 8007624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007628:	4293      	cmp	r3, r2
 800762a:	bfb8      	it	lt
 800762c:	4613      	movlt	r3, r2
 800762e:	6033      	str	r3, [r6, #0]
 8007630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007634:	4607      	mov	r7, r0
 8007636:	460c      	mov	r4, r1
 8007638:	b10a      	cbz	r2, 800763e <_printf_common+0x26>
 800763a:	3301      	adds	r3, #1
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	0699      	lsls	r1, r3, #26
 8007642:	bf42      	ittt	mi
 8007644:	6833      	ldrmi	r3, [r6, #0]
 8007646:	3302      	addmi	r3, #2
 8007648:	6033      	strmi	r3, [r6, #0]
 800764a:	6825      	ldr	r5, [r4, #0]
 800764c:	f015 0506 	ands.w	r5, r5, #6
 8007650:	d106      	bne.n	8007660 <_printf_common+0x48>
 8007652:	f104 0a19 	add.w	sl, r4, #25
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	6832      	ldr	r2, [r6, #0]
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	42ab      	cmp	r3, r5
 800765e:	dc26      	bgt.n	80076ae <_printf_common+0x96>
 8007660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	3b00      	subs	r3, #0
 8007668:	bf18      	it	ne
 800766a:	2301      	movne	r3, #1
 800766c:	0692      	lsls	r2, r2, #26
 800766e:	d42b      	bmi.n	80076c8 <_printf_common+0xb0>
 8007670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007674:	4641      	mov	r1, r8
 8007676:	4638      	mov	r0, r7
 8007678:	47c8      	blx	r9
 800767a:	3001      	adds	r0, #1
 800767c:	d01e      	beq.n	80076bc <_printf_common+0xa4>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	f003 0306 	and.w	r3, r3, #6
 8007686:	2b04      	cmp	r3, #4
 8007688:	bf02      	ittt	eq
 800768a:	68e5      	ldreq	r5, [r4, #12]
 800768c:	6833      	ldreq	r3, [r6, #0]
 800768e:	1aed      	subeq	r5, r5, r3
 8007690:	68a3      	ldr	r3, [r4, #8]
 8007692:	bf0c      	ite	eq
 8007694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007698:	2500      	movne	r5, #0
 800769a:	4293      	cmp	r3, r2
 800769c:	bfc4      	itt	gt
 800769e:	1a9b      	subgt	r3, r3, r2
 80076a0:	18ed      	addgt	r5, r5, r3
 80076a2:	2600      	movs	r6, #0
 80076a4:	341a      	adds	r4, #26
 80076a6:	42b5      	cmp	r5, r6
 80076a8:	d11a      	bne.n	80076e0 <_printf_common+0xc8>
 80076aa:	2000      	movs	r0, #0
 80076ac:	e008      	b.n	80076c0 <_printf_common+0xa8>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4652      	mov	r2, sl
 80076b2:	4641      	mov	r1, r8
 80076b4:	4638      	mov	r0, r7
 80076b6:	47c8      	blx	r9
 80076b8:	3001      	adds	r0, #1
 80076ba:	d103      	bne.n	80076c4 <_printf_common+0xac>
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c4:	3501      	adds	r5, #1
 80076c6:	e7c6      	b.n	8007656 <_printf_common+0x3e>
 80076c8:	18e1      	adds	r1, r4, r3
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	2030      	movs	r0, #48	@ 0x30
 80076ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076d2:	4422      	add	r2, r4
 80076d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076dc:	3302      	adds	r3, #2
 80076de:	e7c7      	b.n	8007670 <_printf_common+0x58>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4622      	mov	r2, r4
 80076e4:	4641      	mov	r1, r8
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c8      	blx	r9
 80076ea:	3001      	adds	r0, #1
 80076ec:	d0e6      	beq.n	80076bc <_printf_common+0xa4>
 80076ee:	3601      	adds	r6, #1
 80076f0:	e7d9      	b.n	80076a6 <_printf_common+0x8e>
	...

080076f4 <_printf_i>:
 80076f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	7e0f      	ldrb	r7, [r1, #24]
 80076fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076fc:	2f78      	cmp	r7, #120	@ 0x78
 80076fe:	4691      	mov	r9, r2
 8007700:	4680      	mov	r8, r0
 8007702:	460c      	mov	r4, r1
 8007704:	469a      	mov	sl, r3
 8007706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800770a:	d807      	bhi.n	800771c <_printf_i+0x28>
 800770c:	2f62      	cmp	r7, #98	@ 0x62
 800770e:	d80a      	bhi.n	8007726 <_printf_i+0x32>
 8007710:	2f00      	cmp	r7, #0
 8007712:	f000 80d2 	beq.w	80078ba <_printf_i+0x1c6>
 8007716:	2f58      	cmp	r7, #88	@ 0x58
 8007718:	f000 80b9 	beq.w	800788e <_printf_i+0x19a>
 800771c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007724:	e03a      	b.n	800779c <_printf_i+0xa8>
 8007726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800772a:	2b15      	cmp	r3, #21
 800772c:	d8f6      	bhi.n	800771c <_printf_i+0x28>
 800772e:	a101      	add	r1, pc, #4	@ (adr r1, 8007734 <_printf_i+0x40>)
 8007730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007734:	0800778d 	.word	0x0800778d
 8007738:	080077a1 	.word	0x080077a1
 800773c:	0800771d 	.word	0x0800771d
 8007740:	0800771d 	.word	0x0800771d
 8007744:	0800771d 	.word	0x0800771d
 8007748:	0800771d 	.word	0x0800771d
 800774c:	080077a1 	.word	0x080077a1
 8007750:	0800771d 	.word	0x0800771d
 8007754:	0800771d 	.word	0x0800771d
 8007758:	0800771d 	.word	0x0800771d
 800775c:	0800771d 	.word	0x0800771d
 8007760:	080078a1 	.word	0x080078a1
 8007764:	080077cb 	.word	0x080077cb
 8007768:	0800785b 	.word	0x0800785b
 800776c:	0800771d 	.word	0x0800771d
 8007770:	0800771d 	.word	0x0800771d
 8007774:	080078c3 	.word	0x080078c3
 8007778:	0800771d 	.word	0x0800771d
 800777c:	080077cb 	.word	0x080077cb
 8007780:	0800771d 	.word	0x0800771d
 8007784:	0800771d 	.word	0x0800771d
 8007788:	08007863 	.word	0x08007863
 800778c:	6833      	ldr	r3, [r6, #0]
 800778e:	1d1a      	adds	r2, r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6032      	str	r2, [r6, #0]
 8007794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800779c:	2301      	movs	r3, #1
 800779e:	e09d      	b.n	80078dc <_printf_i+0x1e8>
 80077a0:	6833      	ldr	r3, [r6, #0]
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	6031      	str	r1, [r6, #0]
 80077a8:	0606      	lsls	r6, r0, #24
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0xbc>
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	e003      	b.n	80077b8 <_printf_i+0xc4>
 80077b0:	0645      	lsls	r5, r0, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0xb8>
 80077b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	da03      	bge.n	80077c4 <_printf_i+0xd0>
 80077bc:	232d      	movs	r3, #45	@ 0x2d
 80077be:	426d      	negs	r5, r5
 80077c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077c4:	4859      	ldr	r0, [pc, #356]	@ (800792c <_printf_i+0x238>)
 80077c6:	230a      	movs	r3, #10
 80077c8:	e011      	b.n	80077ee <_printf_i+0xfa>
 80077ca:	6821      	ldr	r1, [r4, #0]
 80077cc:	6833      	ldr	r3, [r6, #0]
 80077ce:	0608      	lsls	r0, r1, #24
 80077d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80077d4:	d402      	bmi.n	80077dc <_printf_i+0xe8>
 80077d6:	0649      	lsls	r1, r1, #25
 80077d8:	bf48      	it	mi
 80077da:	b2ad      	uxthmi	r5, r5
 80077dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80077de:	4853      	ldr	r0, [pc, #332]	@ (800792c <_printf_i+0x238>)
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	bf14      	ite	ne
 80077e4:	230a      	movne	r3, #10
 80077e6:	2308      	moveq	r3, #8
 80077e8:	2100      	movs	r1, #0
 80077ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ee:	6866      	ldr	r6, [r4, #4]
 80077f0:	60a6      	str	r6, [r4, #8]
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	bfa2      	ittt	ge
 80077f6:	6821      	ldrge	r1, [r4, #0]
 80077f8:	f021 0104 	bicge.w	r1, r1, #4
 80077fc:	6021      	strge	r1, [r4, #0]
 80077fe:	b90d      	cbnz	r5, 8007804 <_printf_i+0x110>
 8007800:	2e00      	cmp	r6, #0
 8007802:	d04b      	beq.n	800789c <_printf_i+0x1a8>
 8007804:	4616      	mov	r6, r2
 8007806:	fbb5 f1f3 	udiv	r1, r5, r3
 800780a:	fb03 5711 	mls	r7, r3, r1, r5
 800780e:	5dc7      	ldrb	r7, [r0, r7]
 8007810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007814:	462f      	mov	r7, r5
 8007816:	42bb      	cmp	r3, r7
 8007818:	460d      	mov	r5, r1
 800781a:	d9f4      	bls.n	8007806 <_printf_i+0x112>
 800781c:	2b08      	cmp	r3, #8
 800781e:	d10b      	bne.n	8007838 <_printf_i+0x144>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	07df      	lsls	r7, r3, #31
 8007824:	d508      	bpl.n	8007838 <_printf_i+0x144>
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	6861      	ldr	r1, [r4, #4]
 800782a:	4299      	cmp	r1, r3
 800782c:	bfde      	ittt	le
 800782e:	2330      	movle	r3, #48	@ 0x30
 8007830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007834:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007838:	1b92      	subs	r2, r2, r6
 800783a:	6122      	str	r2, [r4, #16]
 800783c:	f8cd a000 	str.w	sl, [sp]
 8007840:	464b      	mov	r3, r9
 8007842:	aa03      	add	r2, sp, #12
 8007844:	4621      	mov	r1, r4
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fee6 	bl	8007618 <_printf_common>
 800784c:	3001      	adds	r0, #1
 800784e:	d14a      	bne.n	80078e6 <_printf_i+0x1f2>
 8007850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007854:	b004      	add	sp, #16
 8007856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	f043 0320 	orr.w	r3, r3, #32
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	4833      	ldr	r0, [pc, #204]	@ (8007930 <_printf_i+0x23c>)
 8007864:	2778      	movs	r7, #120	@ 0x78
 8007866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	6831      	ldr	r1, [r6, #0]
 800786e:	061f      	lsls	r7, r3, #24
 8007870:	f851 5b04 	ldr.w	r5, [r1], #4
 8007874:	d402      	bmi.n	800787c <_printf_i+0x188>
 8007876:	065f      	lsls	r7, r3, #25
 8007878:	bf48      	it	mi
 800787a:	b2ad      	uxthmi	r5, r5
 800787c:	6031      	str	r1, [r6, #0]
 800787e:	07d9      	lsls	r1, r3, #31
 8007880:	bf44      	itt	mi
 8007882:	f043 0320 	orrmi.w	r3, r3, #32
 8007886:	6023      	strmi	r3, [r4, #0]
 8007888:	b11d      	cbz	r5, 8007892 <_printf_i+0x19e>
 800788a:	2310      	movs	r3, #16
 800788c:	e7ac      	b.n	80077e8 <_printf_i+0xf4>
 800788e:	4827      	ldr	r0, [pc, #156]	@ (800792c <_printf_i+0x238>)
 8007890:	e7e9      	b.n	8007866 <_printf_i+0x172>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	f023 0320 	bic.w	r3, r3, #32
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	e7f6      	b.n	800788a <_printf_i+0x196>
 800789c:	4616      	mov	r6, r2
 800789e:	e7bd      	b.n	800781c <_printf_i+0x128>
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	6961      	ldr	r1, [r4, #20]
 80078a6:	1d18      	adds	r0, r3, #4
 80078a8:	6030      	str	r0, [r6, #0]
 80078aa:	062e      	lsls	r6, r5, #24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	d501      	bpl.n	80078b4 <_printf_i+0x1c0>
 80078b0:	6019      	str	r1, [r3, #0]
 80078b2:	e002      	b.n	80078ba <_printf_i+0x1c6>
 80078b4:	0668      	lsls	r0, r5, #25
 80078b6:	d5fb      	bpl.n	80078b0 <_printf_i+0x1bc>
 80078b8:	8019      	strh	r1, [r3, #0]
 80078ba:	2300      	movs	r3, #0
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	4616      	mov	r6, r2
 80078c0:	e7bc      	b.n	800783c <_printf_i+0x148>
 80078c2:	6833      	ldr	r3, [r6, #0]
 80078c4:	1d1a      	adds	r2, r3, #4
 80078c6:	6032      	str	r2, [r6, #0]
 80078c8:	681e      	ldr	r6, [r3, #0]
 80078ca:	6862      	ldr	r2, [r4, #4]
 80078cc:	2100      	movs	r1, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7f8 fc9e 	bl	8000210 <memchr>
 80078d4:	b108      	cbz	r0, 80078da <_printf_i+0x1e6>
 80078d6:	1b80      	subs	r0, r0, r6
 80078d8:	6060      	str	r0, [r4, #4]
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	2300      	movs	r3, #0
 80078e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e4:	e7aa      	b.n	800783c <_printf_i+0x148>
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	4632      	mov	r2, r6
 80078ea:	4649      	mov	r1, r9
 80078ec:	4640      	mov	r0, r8
 80078ee:	47d0      	blx	sl
 80078f0:	3001      	adds	r0, #1
 80078f2:	d0ad      	beq.n	8007850 <_printf_i+0x15c>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	079b      	lsls	r3, r3, #30
 80078f8:	d413      	bmi.n	8007922 <_printf_i+0x22e>
 80078fa:	68e0      	ldr	r0, [r4, #12]
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	4298      	cmp	r0, r3
 8007900:	bfb8      	it	lt
 8007902:	4618      	movlt	r0, r3
 8007904:	e7a6      	b.n	8007854 <_printf_i+0x160>
 8007906:	2301      	movs	r3, #1
 8007908:	4632      	mov	r2, r6
 800790a:	4649      	mov	r1, r9
 800790c:	4640      	mov	r0, r8
 800790e:	47d0      	blx	sl
 8007910:	3001      	adds	r0, #1
 8007912:	d09d      	beq.n	8007850 <_printf_i+0x15c>
 8007914:	3501      	adds	r5, #1
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	9903      	ldr	r1, [sp, #12]
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	42ab      	cmp	r3, r5
 800791e:	dcf2      	bgt.n	8007906 <_printf_i+0x212>
 8007920:	e7eb      	b.n	80078fa <_printf_i+0x206>
 8007922:	2500      	movs	r5, #0
 8007924:	f104 0619 	add.w	r6, r4, #25
 8007928:	e7f5      	b.n	8007916 <_printf_i+0x222>
 800792a:	bf00      	nop
 800792c:	0800bd8a 	.word	0x0800bd8a
 8007930:	0800bd9b 	.word	0x0800bd9b

08007934 <siprintf>:
 8007934:	b40e      	push	{r1, r2, r3}
 8007936:	b500      	push	{lr}
 8007938:	b09c      	sub	sp, #112	@ 0x70
 800793a:	ab1d      	add	r3, sp, #116	@ 0x74
 800793c:	9002      	str	r0, [sp, #8]
 800793e:	9006      	str	r0, [sp, #24]
 8007940:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007944:	4809      	ldr	r0, [pc, #36]	@ (800796c <siprintf+0x38>)
 8007946:	9107      	str	r1, [sp, #28]
 8007948:	9104      	str	r1, [sp, #16]
 800794a:	4909      	ldr	r1, [pc, #36]	@ (8007970 <siprintf+0x3c>)
 800794c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007950:	9105      	str	r1, [sp, #20]
 8007952:	6800      	ldr	r0, [r0, #0]
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	a902      	add	r1, sp, #8
 8007958:	f000 ffb2 	bl	80088c0 <_svfiprintf_r>
 800795c:	9b02      	ldr	r3, [sp, #8]
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	b01c      	add	sp, #112	@ 0x70
 8007964:	f85d eb04 	ldr.w	lr, [sp], #4
 8007968:	b003      	add	sp, #12
 800796a:	4770      	bx	lr
 800796c:	20000018 	.word	0x20000018
 8007970:	ffff0208 	.word	0xffff0208

08007974 <std>:
 8007974:	2300      	movs	r3, #0
 8007976:	b510      	push	{r4, lr}
 8007978:	4604      	mov	r4, r0
 800797a:	e9c0 3300 	strd	r3, r3, [r0]
 800797e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007982:	6083      	str	r3, [r0, #8]
 8007984:	8181      	strh	r1, [r0, #12]
 8007986:	6643      	str	r3, [r0, #100]	@ 0x64
 8007988:	81c2      	strh	r2, [r0, #14]
 800798a:	6183      	str	r3, [r0, #24]
 800798c:	4619      	mov	r1, r3
 800798e:	2208      	movs	r2, #8
 8007990:	305c      	adds	r0, #92	@ 0x5c
 8007992:	f000 f8b1 	bl	8007af8 <memset>
 8007996:	4b0d      	ldr	r3, [pc, #52]	@ (80079cc <std+0x58>)
 8007998:	6263      	str	r3, [r4, #36]	@ 0x24
 800799a:	4b0d      	ldr	r3, [pc, #52]	@ (80079d0 <std+0x5c>)
 800799c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800799e:	4b0d      	ldr	r3, [pc, #52]	@ (80079d4 <std+0x60>)
 80079a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079a2:	4b0d      	ldr	r3, [pc, #52]	@ (80079d8 <std+0x64>)
 80079a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80079a6:	4b0d      	ldr	r3, [pc, #52]	@ (80079dc <std+0x68>)
 80079a8:	6224      	str	r4, [r4, #32]
 80079aa:	429c      	cmp	r4, r3
 80079ac:	d006      	beq.n	80079bc <std+0x48>
 80079ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079b2:	4294      	cmp	r4, r2
 80079b4:	d002      	beq.n	80079bc <std+0x48>
 80079b6:	33d0      	adds	r3, #208	@ 0xd0
 80079b8:	429c      	cmp	r4, r3
 80079ba:	d105      	bne.n	80079c8 <std+0x54>
 80079bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c4:	f000 b8ce 	b.w	8007b64 <__retarget_lock_init_recursive>
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	bf00      	nop
 80079cc:	08009481 	.word	0x08009481
 80079d0:	080094a3 	.word	0x080094a3
 80079d4:	080094db 	.word	0x080094db
 80079d8:	080094ff 	.word	0x080094ff
 80079dc:	20000478 	.word	0x20000478

080079e0 <stdio_exit_handler>:
 80079e0:	4a02      	ldr	r2, [pc, #8]	@ (80079ec <stdio_exit_handler+0xc>)
 80079e2:	4903      	ldr	r1, [pc, #12]	@ (80079f0 <stdio_exit_handler+0x10>)
 80079e4:	4803      	ldr	r0, [pc, #12]	@ (80079f4 <stdio_exit_handler+0x14>)
 80079e6:	f000 b869 	b.w	8007abc <_fwalk_sglue>
 80079ea:	bf00      	nop
 80079ec:	2000000c 	.word	0x2000000c
 80079f0:	08008d15 	.word	0x08008d15
 80079f4:	2000001c 	.word	0x2000001c

080079f8 <cleanup_stdio>:
 80079f8:	6841      	ldr	r1, [r0, #4]
 80079fa:	4b0c      	ldr	r3, [pc, #48]	@ (8007a2c <cleanup_stdio+0x34>)
 80079fc:	4299      	cmp	r1, r3
 80079fe:	b510      	push	{r4, lr}
 8007a00:	4604      	mov	r4, r0
 8007a02:	d001      	beq.n	8007a08 <cleanup_stdio+0x10>
 8007a04:	f001 f986 	bl	8008d14 <_fflush_r>
 8007a08:	68a1      	ldr	r1, [r4, #8]
 8007a0a:	4b09      	ldr	r3, [pc, #36]	@ (8007a30 <cleanup_stdio+0x38>)
 8007a0c:	4299      	cmp	r1, r3
 8007a0e:	d002      	beq.n	8007a16 <cleanup_stdio+0x1e>
 8007a10:	4620      	mov	r0, r4
 8007a12:	f001 f97f 	bl	8008d14 <_fflush_r>
 8007a16:	68e1      	ldr	r1, [r4, #12]
 8007a18:	4b06      	ldr	r3, [pc, #24]	@ (8007a34 <cleanup_stdio+0x3c>)
 8007a1a:	4299      	cmp	r1, r3
 8007a1c:	d004      	beq.n	8007a28 <cleanup_stdio+0x30>
 8007a1e:	4620      	mov	r0, r4
 8007a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a24:	f001 b976 	b.w	8008d14 <_fflush_r>
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000478 	.word	0x20000478
 8007a30:	200004e0 	.word	0x200004e0
 8007a34:	20000548 	.word	0x20000548

08007a38 <global_stdio_init.part.0>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a68 <global_stdio_init.part.0+0x30>)
 8007a3c:	4c0b      	ldr	r4, [pc, #44]	@ (8007a6c <global_stdio_init.part.0+0x34>)
 8007a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8007a70 <global_stdio_init.part.0+0x38>)
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	4620      	mov	r0, r4
 8007a44:	2200      	movs	r2, #0
 8007a46:	2104      	movs	r1, #4
 8007a48:	f7ff ff94 	bl	8007974 <std>
 8007a4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a50:	2201      	movs	r2, #1
 8007a52:	2109      	movs	r1, #9
 8007a54:	f7ff ff8e 	bl	8007974 <std>
 8007a58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a62:	2112      	movs	r1, #18
 8007a64:	f7ff bf86 	b.w	8007974 <std>
 8007a68:	200005b0 	.word	0x200005b0
 8007a6c:	20000478 	.word	0x20000478
 8007a70:	080079e1 	.word	0x080079e1

08007a74 <__sfp_lock_acquire>:
 8007a74:	4801      	ldr	r0, [pc, #4]	@ (8007a7c <__sfp_lock_acquire+0x8>)
 8007a76:	f000 b876 	b.w	8007b66 <__retarget_lock_acquire_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	200005b5 	.word	0x200005b5

08007a80 <__sfp_lock_release>:
 8007a80:	4801      	ldr	r0, [pc, #4]	@ (8007a88 <__sfp_lock_release+0x8>)
 8007a82:	f000 b871 	b.w	8007b68 <__retarget_lock_release_recursive>
 8007a86:	bf00      	nop
 8007a88:	200005b5 	.word	0x200005b5

08007a8c <__sinit>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	4604      	mov	r4, r0
 8007a90:	f7ff fff0 	bl	8007a74 <__sfp_lock_acquire>
 8007a94:	6a23      	ldr	r3, [r4, #32]
 8007a96:	b11b      	cbz	r3, 8007aa0 <__sinit+0x14>
 8007a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a9c:	f7ff bff0 	b.w	8007a80 <__sfp_lock_release>
 8007aa0:	4b04      	ldr	r3, [pc, #16]	@ (8007ab4 <__sinit+0x28>)
 8007aa2:	6223      	str	r3, [r4, #32]
 8007aa4:	4b04      	ldr	r3, [pc, #16]	@ (8007ab8 <__sinit+0x2c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f5      	bne.n	8007a98 <__sinit+0xc>
 8007aac:	f7ff ffc4 	bl	8007a38 <global_stdio_init.part.0>
 8007ab0:	e7f2      	b.n	8007a98 <__sinit+0xc>
 8007ab2:	bf00      	nop
 8007ab4:	080079f9 	.word	0x080079f9
 8007ab8:	200005b0 	.word	0x200005b0

08007abc <_fwalk_sglue>:
 8007abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	4688      	mov	r8, r1
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	2600      	movs	r6, #0
 8007ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007acc:	f1b9 0901 	subs.w	r9, r9, #1
 8007ad0:	d505      	bpl.n	8007ade <_fwalk_sglue+0x22>
 8007ad2:	6824      	ldr	r4, [r4, #0]
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	d1f7      	bne.n	8007ac8 <_fwalk_sglue+0xc>
 8007ad8:	4630      	mov	r0, r6
 8007ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d907      	bls.n	8007af4 <_fwalk_sglue+0x38>
 8007ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	d003      	beq.n	8007af4 <_fwalk_sglue+0x38>
 8007aec:	4629      	mov	r1, r5
 8007aee:	4638      	mov	r0, r7
 8007af0:	47c0      	blx	r8
 8007af2:	4306      	orrs	r6, r0
 8007af4:	3568      	adds	r5, #104	@ 0x68
 8007af6:	e7e9      	b.n	8007acc <_fwalk_sglue+0x10>

08007af8 <memset>:
 8007af8:	4402      	add	r2, r0
 8007afa:	4603      	mov	r3, r0
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d100      	bne.n	8007b02 <memset+0xa>
 8007b00:	4770      	bx	lr
 8007b02:	f803 1b01 	strb.w	r1, [r3], #1
 8007b06:	e7f9      	b.n	8007afc <memset+0x4>

08007b08 <_localeconv_r>:
 8007b08:	4800      	ldr	r0, [pc, #0]	@ (8007b0c <_localeconv_r+0x4>)
 8007b0a:	4770      	bx	lr
 8007b0c:	20000158 	.word	0x20000158

08007b10 <__errno>:
 8007b10:	4b01      	ldr	r3, [pc, #4]	@ (8007b18 <__errno+0x8>)
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	20000018 	.word	0x20000018

08007b1c <__libc_init_array>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b54 <__libc_init_array+0x38>)
 8007b20:	4c0d      	ldr	r4, [pc, #52]	@ (8007b58 <__libc_init_array+0x3c>)
 8007b22:	1b64      	subs	r4, r4, r5
 8007b24:	10a4      	asrs	r4, r4, #2
 8007b26:	2600      	movs	r6, #0
 8007b28:	42a6      	cmp	r6, r4
 8007b2a:	d109      	bne.n	8007b40 <__libc_init_array+0x24>
 8007b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b5c <__libc_init_array+0x40>)
 8007b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007b60 <__libc_init_array+0x44>)
 8007b30:	f004 f87a 	bl	800bc28 <_init>
 8007b34:	1b64      	subs	r4, r4, r5
 8007b36:	10a4      	asrs	r4, r4, #2
 8007b38:	2600      	movs	r6, #0
 8007b3a:	42a6      	cmp	r6, r4
 8007b3c:	d105      	bne.n	8007b4a <__libc_init_array+0x2e>
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b44:	4798      	blx	r3
 8007b46:	3601      	adds	r6, #1
 8007b48:	e7ee      	b.n	8007b28 <__libc_init_array+0xc>
 8007b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4e:	4798      	blx	r3
 8007b50:	3601      	adds	r6, #1
 8007b52:	e7f2      	b.n	8007b3a <__libc_init_array+0x1e>
 8007b54:	0800c2f8 	.word	0x0800c2f8
 8007b58:	0800c2f8 	.word	0x0800c2f8
 8007b5c:	0800c2f8 	.word	0x0800c2f8
 8007b60:	0800c2fc 	.word	0x0800c2fc

08007b64 <__retarget_lock_init_recursive>:
 8007b64:	4770      	bx	lr

08007b66 <__retarget_lock_acquire_recursive>:
 8007b66:	4770      	bx	lr

08007b68 <__retarget_lock_release_recursive>:
 8007b68:	4770      	bx	lr

08007b6a <quorem>:
 8007b6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6e:	6903      	ldr	r3, [r0, #16]
 8007b70:	690c      	ldr	r4, [r1, #16]
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	4607      	mov	r7, r0
 8007b76:	db7e      	blt.n	8007c76 <quorem+0x10c>
 8007b78:	3c01      	subs	r4, #1
 8007b7a:	f101 0814 	add.w	r8, r1, #20
 8007b7e:	00a3      	lsls	r3, r4, #2
 8007b80:	f100 0514 	add.w	r5, r0, #20
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b94:	3301      	adds	r3, #1
 8007b96:	429a      	cmp	r2, r3
 8007b98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ba0:	d32e      	bcc.n	8007c00 <quorem+0x96>
 8007ba2:	f04f 0a00 	mov.w	sl, #0
 8007ba6:	46c4      	mov	ip, r8
 8007ba8:	46ae      	mov	lr, r5
 8007baa:	46d3      	mov	fp, sl
 8007bac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bb0:	b298      	uxth	r0, r3
 8007bb2:	fb06 a000 	mla	r0, r6, r0, sl
 8007bb6:	0c02      	lsrs	r2, r0, #16
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	fb06 2303 	mla	r3, r6, r3, r2
 8007bbe:	f8de 2000 	ldr.w	r2, [lr]
 8007bc2:	b280      	uxth	r0, r0
 8007bc4:	b292      	uxth	r2, r2
 8007bc6:	1a12      	subs	r2, r2, r0
 8007bc8:	445a      	add	r2, fp
 8007bca:	f8de 0000 	ldr.w	r0, [lr]
 8007bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007be2:	45e1      	cmp	r9, ip
 8007be4:	f84e 2b04 	str.w	r2, [lr], #4
 8007be8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bec:	d2de      	bcs.n	8007bac <quorem+0x42>
 8007bee:	9b00      	ldr	r3, [sp, #0]
 8007bf0:	58eb      	ldr	r3, [r5, r3]
 8007bf2:	b92b      	cbnz	r3, 8007c00 <quorem+0x96>
 8007bf4:	9b01      	ldr	r3, [sp, #4]
 8007bf6:	3b04      	subs	r3, #4
 8007bf8:	429d      	cmp	r5, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	d32f      	bcc.n	8007c5e <quorem+0xf4>
 8007bfe:	613c      	str	r4, [r7, #16]
 8007c00:	4638      	mov	r0, r7
 8007c02:	f001 fb35 	bl	8009270 <__mcmp>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	db25      	blt.n	8007c56 <quorem+0xec>
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c12:	f8d1 c000 	ldr.w	ip, [r1]
 8007c16:	fa1f fe82 	uxth.w	lr, r2
 8007c1a:	fa1f f38c 	uxth.w	r3, ip
 8007c1e:	eba3 030e 	sub.w	r3, r3, lr
 8007c22:	4403      	add	r3, r0
 8007c24:	0c12      	lsrs	r2, r2, #16
 8007c26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c34:	45c1      	cmp	r9, r8
 8007c36:	f841 3b04 	str.w	r3, [r1], #4
 8007c3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c3e:	d2e6      	bcs.n	8007c0e <quorem+0xa4>
 8007c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c48:	b922      	cbnz	r2, 8007c54 <quorem+0xea>
 8007c4a:	3b04      	subs	r3, #4
 8007c4c:	429d      	cmp	r5, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	d30b      	bcc.n	8007c6a <quorem+0x100>
 8007c52:	613c      	str	r4, [r7, #16]
 8007c54:	3601      	adds	r6, #1
 8007c56:	4630      	mov	r0, r6
 8007c58:	b003      	add	sp, #12
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	3b04      	subs	r3, #4
 8007c62:	2a00      	cmp	r2, #0
 8007c64:	d1cb      	bne.n	8007bfe <quorem+0x94>
 8007c66:	3c01      	subs	r4, #1
 8007c68:	e7c6      	b.n	8007bf8 <quorem+0x8e>
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	d1ef      	bne.n	8007c52 <quorem+0xe8>
 8007c72:	3c01      	subs	r4, #1
 8007c74:	e7ea      	b.n	8007c4c <quorem+0xe2>
 8007c76:	2000      	movs	r0, #0
 8007c78:	e7ee      	b.n	8007c58 <quorem+0xee>
 8007c7a:	0000      	movs	r0, r0
 8007c7c:	0000      	movs	r0, r0
	...

08007c80 <_dtoa_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	69c7      	ldr	r7, [r0, #28]
 8007c86:	b099      	sub	sp, #100	@ 0x64
 8007c88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c8c:	ec55 4b10 	vmov	r4, r5, d0
 8007c90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007c92:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c94:	4683      	mov	fp, r0
 8007c96:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c9a:	b97f      	cbnz	r7, 8007cbc <_dtoa_r+0x3c>
 8007c9c:	2010      	movs	r0, #16
 8007c9e:	f000 ff0b 	bl	8008ab8 <malloc>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ca8:	b920      	cbnz	r0, 8007cb4 <_dtoa_r+0x34>
 8007caa:	4ba7      	ldr	r3, [pc, #668]	@ (8007f48 <_dtoa_r+0x2c8>)
 8007cac:	21ef      	movs	r1, #239	@ 0xef
 8007cae:	48a7      	ldr	r0, [pc, #668]	@ (8007f4c <_dtoa_r+0x2cc>)
 8007cb0:	f001 fcd6 	bl	8009660 <__assert_func>
 8007cb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cb8:	6007      	str	r7, [r0, #0]
 8007cba:	60c7      	str	r7, [r0, #12]
 8007cbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	b159      	cbz	r1, 8007cdc <_dtoa_r+0x5c>
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	604a      	str	r2, [r1, #4]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	4093      	lsls	r3, r2
 8007ccc:	608b      	str	r3, [r1, #8]
 8007cce:	4658      	mov	r0, fp
 8007cd0:	f001 f894 	bl	8008dfc <_Bfree>
 8007cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	1e2b      	subs	r3, r5, #0
 8007cde:	bfb9      	ittee	lt
 8007ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ce4:	9303      	strlt	r3, [sp, #12]
 8007ce6:	2300      	movge	r3, #0
 8007ce8:	6033      	strge	r3, [r6, #0]
 8007cea:	9f03      	ldr	r7, [sp, #12]
 8007cec:	4b98      	ldr	r3, [pc, #608]	@ (8007f50 <_dtoa_r+0x2d0>)
 8007cee:	bfbc      	itt	lt
 8007cf0:	2201      	movlt	r2, #1
 8007cf2:	6032      	strlt	r2, [r6, #0]
 8007cf4:	43bb      	bics	r3, r7
 8007cf6:	d112      	bne.n	8007d1e <_dtoa_r+0x9e>
 8007cf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d04:	4323      	orrs	r3, r4
 8007d06:	f000 854d 	beq.w	80087a4 <_dtoa_r+0xb24>
 8007d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f64 <_dtoa_r+0x2e4>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 854f 	beq.w	80087b4 <_dtoa_r+0xb34>
 8007d16:	f10a 0303 	add.w	r3, sl, #3
 8007d1a:	f000 bd49 	b.w	80087b0 <_dtoa_r+0xb30>
 8007d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	ec51 0b17 	vmov	r0, r1, d7
 8007d28:	2300      	movs	r3, #0
 8007d2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d2e:	f7f8 feeb 	bl	8000b08 <__aeabi_dcmpeq>
 8007d32:	4680      	mov	r8, r0
 8007d34:	b158      	cbz	r0, 8007d4e <_dtoa_r+0xce>
 8007d36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d38:	2301      	movs	r3, #1
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d3e:	b113      	cbz	r3, 8007d46 <_dtoa_r+0xc6>
 8007d40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d42:	4b84      	ldr	r3, [pc, #528]	@ (8007f54 <_dtoa_r+0x2d4>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f68 <_dtoa_r+0x2e8>
 8007d4a:	f000 bd33 	b.w	80087b4 <_dtoa_r+0xb34>
 8007d4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d52:	aa16      	add	r2, sp, #88	@ 0x58
 8007d54:	a917      	add	r1, sp, #92	@ 0x5c
 8007d56:	4658      	mov	r0, fp
 8007d58:	f001 fb3a 	bl	80093d0 <__d2b>
 8007d5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d60:	4681      	mov	r9, r0
 8007d62:	2e00      	cmp	r6, #0
 8007d64:	d077      	beq.n	8007e56 <_dtoa_r+0x1d6>
 8007d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d80:	4619      	mov	r1, r3
 8007d82:	2200      	movs	r2, #0
 8007d84:	4b74      	ldr	r3, [pc, #464]	@ (8007f58 <_dtoa_r+0x2d8>)
 8007d86:	f7f8 fa9f 	bl	80002c8 <__aeabi_dsub>
 8007d8a:	a369      	add	r3, pc, #420	@ (adr r3, 8007f30 <_dtoa_r+0x2b0>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fc52 	bl	8000638 <__aeabi_dmul>
 8007d94:	a368      	add	r3, pc, #416	@ (adr r3, 8007f38 <_dtoa_r+0x2b8>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f7f8 fa97 	bl	80002cc <__adddf3>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	4630      	mov	r0, r6
 8007da2:	460d      	mov	r5, r1
 8007da4:	f7f8 fbde 	bl	8000564 <__aeabi_i2d>
 8007da8:	a365      	add	r3, pc, #404	@ (adr r3, 8007f40 <_dtoa_r+0x2c0>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f7f8 fc43 	bl	8000638 <__aeabi_dmul>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fa87 	bl	80002cc <__adddf3>
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	f7f8 fee9 	bl	8000b98 <__aeabi_d2iz>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	4607      	mov	r7, r0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7f8 fea4 	bl	8000b1c <__aeabi_dcmplt>
 8007dd4:	b140      	cbz	r0, 8007de8 <_dtoa_r+0x168>
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f7f8 fbc4 	bl	8000564 <__aeabi_i2d>
 8007ddc:	4622      	mov	r2, r4
 8007dde:	462b      	mov	r3, r5
 8007de0:	f7f8 fe92 	bl	8000b08 <__aeabi_dcmpeq>
 8007de4:	b900      	cbnz	r0, 8007de8 <_dtoa_r+0x168>
 8007de6:	3f01      	subs	r7, #1
 8007de8:	2f16      	cmp	r7, #22
 8007dea:	d851      	bhi.n	8007e90 <_dtoa_r+0x210>
 8007dec:	4b5b      	ldr	r3, [pc, #364]	@ (8007f5c <_dtoa_r+0x2dc>)
 8007dee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dfa:	f7f8 fe8f 	bl	8000b1c <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d048      	beq.n	8007e94 <_dtoa_r+0x214>
 8007e02:	3f01      	subs	r7, #1
 8007e04:	2300      	movs	r3, #0
 8007e06:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e0a:	1b9b      	subs	r3, r3, r6
 8007e0c:	1e5a      	subs	r2, r3, #1
 8007e0e:	bf44      	itt	mi
 8007e10:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e14:	2300      	movmi	r3, #0
 8007e16:	9208      	str	r2, [sp, #32]
 8007e18:	bf54      	ite	pl
 8007e1a:	f04f 0800 	movpl.w	r8, #0
 8007e1e:	9308      	strmi	r3, [sp, #32]
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	db39      	blt.n	8007e98 <_dtoa_r+0x218>
 8007e24:	9b08      	ldr	r3, [sp, #32]
 8007e26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e28:	443b      	add	r3, r7
 8007e2a:	9308      	str	r3, [sp, #32]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e32:	2b09      	cmp	r3, #9
 8007e34:	d864      	bhi.n	8007f00 <_dtoa_r+0x280>
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	bfc4      	itt	gt
 8007e3a:	3b04      	subgt	r3, #4
 8007e3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e40:	f1a3 0302 	sub.w	r3, r3, #2
 8007e44:	bfcc      	ite	gt
 8007e46:	2400      	movgt	r4, #0
 8007e48:	2401      	movle	r4, #1
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d863      	bhi.n	8007f16 <_dtoa_r+0x296>
 8007e4e:	e8df f003 	tbb	[pc, r3]
 8007e52:	372a      	.short	0x372a
 8007e54:	5535      	.short	0x5535
 8007e56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e5a:	441e      	add	r6, r3
 8007e5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	bfc1      	itttt	gt
 8007e64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e68:	409f      	lslgt	r7, r3
 8007e6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e72:	bfd6      	itet	le
 8007e74:	f1c3 0320 	rsble	r3, r3, #32
 8007e78:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e7c:	fa04 f003 	lslle.w	r0, r4, r3
 8007e80:	f7f8 fb60 	bl	8000544 <__aeabi_ui2d>
 8007e84:	2201      	movs	r2, #1
 8007e86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e8a:	3e01      	subs	r6, #1
 8007e8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e8e:	e777      	b.n	8007d80 <_dtoa_r+0x100>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e7b8      	b.n	8007e06 <_dtoa_r+0x186>
 8007e94:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e96:	e7b7      	b.n	8007e08 <_dtoa_r+0x188>
 8007e98:	427b      	negs	r3, r7
 8007e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	eba8 0807 	sub.w	r8, r8, r7
 8007ea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ea4:	e7c4      	b.n	8007e30 <_dtoa_r+0x1b0>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dc35      	bgt.n	8007f1c <_dtoa_r+0x29c>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eba:	e00b      	b.n	8007ed4 <_dtoa_r+0x254>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e7f3      	b.n	8007ea8 <_dtoa_r+0x228>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec6:	18fb      	adds	r3, r7, r3
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	9307      	str	r3, [sp, #28]
 8007ed0:	bfb8      	it	lt
 8007ed2:	2301      	movlt	r3, #1
 8007ed4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	2204      	movs	r2, #4
 8007edc:	f102 0514 	add.w	r5, r2, #20
 8007ee0:	429d      	cmp	r5, r3
 8007ee2:	d91f      	bls.n	8007f24 <_dtoa_r+0x2a4>
 8007ee4:	6041      	str	r1, [r0, #4]
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f000 ff48 	bl	8008d7c <_Balloc>
 8007eec:	4682      	mov	sl, r0
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d13c      	bne.n	8007f6c <_dtoa_r+0x2ec>
 8007ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f60 <_dtoa_r+0x2e0>)
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007efa:	e6d8      	b.n	8007cae <_dtoa_r+0x2e>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e7e0      	b.n	8007ec2 <_dtoa_r+0x242>
 8007f00:	2401      	movs	r4, #1
 8007f02:	2300      	movs	r3, #0
 8007f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	9307      	str	r3, [sp, #28]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2312      	movs	r3, #18
 8007f14:	e7d0      	b.n	8007eb8 <_dtoa_r+0x238>
 8007f16:	2301      	movs	r3, #1
 8007f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f1a:	e7f5      	b.n	8007f08 <_dtoa_r+0x288>
 8007f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	9307      	str	r3, [sp, #28]
 8007f22:	e7d7      	b.n	8007ed4 <_dtoa_r+0x254>
 8007f24:	3101      	adds	r1, #1
 8007f26:	0052      	lsls	r2, r2, #1
 8007f28:	e7d8      	b.n	8007edc <_dtoa_r+0x25c>
 8007f2a:	bf00      	nop
 8007f2c:	f3af 8000 	nop.w
 8007f30:	636f4361 	.word	0x636f4361
 8007f34:	3fd287a7 	.word	0x3fd287a7
 8007f38:	8b60c8b3 	.word	0x8b60c8b3
 8007f3c:	3fc68a28 	.word	0x3fc68a28
 8007f40:	509f79fb 	.word	0x509f79fb
 8007f44:	3fd34413 	.word	0x3fd34413
 8007f48:	0800bdb9 	.word	0x0800bdb9
 8007f4c:	0800bdd0 	.word	0x0800bdd0
 8007f50:	7ff00000 	.word	0x7ff00000
 8007f54:	0800bd89 	.word	0x0800bd89
 8007f58:	3ff80000 	.word	0x3ff80000
 8007f5c:	0800bed8 	.word	0x0800bed8
 8007f60:	0800be28 	.word	0x0800be28
 8007f64:	0800bdb5 	.word	0x0800bdb5
 8007f68:	0800bd88 	.word	0x0800bd88
 8007f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f70:	6018      	str	r0, [r3, #0]
 8007f72:	9b07      	ldr	r3, [sp, #28]
 8007f74:	2b0e      	cmp	r3, #14
 8007f76:	f200 80a4 	bhi.w	80080c2 <_dtoa_r+0x442>
 8007f7a:	2c00      	cmp	r4, #0
 8007f7c:	f000 80a1 	beq.w	80080c2 <_dtoa_r+0x442>
 8007f80:	2f00      	cmp	r7, #0
 8007f82:	dd33      	ble.n	8007fec <_dtoa_r+0x36c>
 8007f84:	4bad      	ldr	r3, [pc, #692]	@ (800823c <_dtoa_r+0x5bc>)
 8007f86:	f007 020f 	and.w	r2, r7, #15
 8007f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f8e:	ed93 7b00 	vldr	d7, [r3]
 8007f92:	05f8      	lsls	r0, r7, #23
 8007f94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f9c:	d516      	bpl.n	8007fcc <_dtoa_r+0x34c>
 8007f9e:	4ba8      	ldr	r3, [pc, #672]	@ (8008240 <_dtoa_r+0x5c0>)
 8007fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fa8:	f7f8 fc70 	bl	800088c <__aeabi_ddiv>
 8007fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb0:	f004 040f 	and.w	r4, r4, #15
 8007fb4:	2603      	movs	r6, #3
 8007fb6:	4da2      	ldr	r5, [pc, #648]	@ (8008240 <_dtoa_r+0x5c0>)
 8007fb8:	b954      	cbnz	r4, 8007fd0 <_dtoa_r+0x350>
 8007fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc2:	f7f8 fc63 	bl	800088c <__aeabi_ddiv>
 8007fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fca:	e028      	b.n	800801e <_dtoa_r+0x39e>
 8007fcc:	2602      	movs	r6, #2
 8007fce:	e7f2      	b.n	8007fb6 <_dtoa_r+0x336>
 8007fd0:	07e1      	lsls	r1, r4, #31
 8007fd2:	d508      	bpl.n	8007fe6 <_dtoa_r+0x366>
 8007fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fdc:	f7f8 fb2c 	bl	8000638 <__aeabi_dmul>
 8007fe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	1064      	asrs	r4, r4, #1
 8007fe8:	3508      	adds	r5, #8
 8007fea:	e7e5      	b.n	8007fb8 <_dtoa_r+0x338>
 8007fec:	f000 80d2 	beq.w	8008194 <_dtoa_r+0x514>
 8007ff0:	427c      	negs	r4, r7
 8007ff2:	4b92      	ldr	r3, [pc, #584]	@ (800823c <_dtoa_r+0x5bc>)
 8007ff4:	4d92      	ldr	r5, [pc, #584]	@ (8008240 <_dtoa_r+0x5c0>)
 8007ff6:	f004 020f 	and.w	r2, r4, #15
 8007ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800800e:	1124      	asrs	r4, r4, #4
 8008010:	2300      	movs	r3, #0
 8008012:	2602      	movs	r6, #2
 8008014:	2c00      	cmp	r4, #0
 8008016:	f040 80b2 	bne.w	800817e <_dtoa_r+0x4fe>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1d3      	bne.n	8007fc6 <_dtoa_r+0x346>
 800801e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008020:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80b7 	beq.w	8008198 <_dtoa_r+0x518>
 800802a:	4b86      	ldr	r3, [pc, #536]	@ (8008244 <_dtoa_r+0x5c4>)
 800802c:	2200      	movs	r2, #0
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fd73 	bl	8000b1c <__aeabi_dcmplt>
 8008036:	2800      	cmp	r0, #0
 8008038:	f000 80ae 	beq.w	8008198 <_dtoa_r+0x518>
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80aa 	beq.w	8008198 <_dtoa_r+0x518>
 8008044:	9b00      	ldr	r3, [sp, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd37      	ble.n	80080ba <_dtoa_r+0x43a>
 800804a:	1e7b      	subs	r3, r7, #1
 800804c:	9304      	str	r3, [sp, #16]
 800804e:	4620      	mov	r0, r4
 8008050:	4b7d      	ldr	r3, [pc, #500]	@ (8008248 <_dtoa_r+0x5c8>)
 8008052:	2200      	movs	r2, #0
 8008054:	4629      	mov	r1, r5
 8008056:	f7f8 faef 	bl	8000638 <__aeabi_dmul>
 800805a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800805e:	9c00      	ldr	r4, [sp, #0]
 8008060:	3601      	adds	r6, #1
 8008062:	4630      	mov	r0, r6
 8008064:	f7f8 fa7e 	bl	8000564 <__aeabi_i2d>
 8008068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800806c:	f7f8 fae4 	bl	8000638 <__aeabi_dmul>
 8008070:	4b76      	ldr	r3, [pc, #472]	@ (800824c <_dtoa_r+0x5cc>)
 8008072:	2200      	movs	r2, #0
 8008074:	f7f8 f92a 	bl	80002cc <__adddf3>
 8008078:	4605      	mov	r5, r0
 800807a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800807e:	2c00      	cmp	r4, #0
 8008080:	f040 808d 	bne.w	800819e <_dtoa_r+0x51e>
 8008084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008088:	4b71      	ldr	r3, [pc, #452]	@ (8008250 <_dtoa_r+0x5d0>)
 800808a:	2200      	movs	r2, #0
 800808c:	f7f8 f91c 	bl	80002c8 <__aeabi_dsub>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008098:	462a      	mov	r2, r5
 800809a:	4633      	mov	r3, r6
 800809c:	f7f8 fd5c 	bl	8000b58 <__aeabi_dcmpgt>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f040 828b 	bne.w	80085bc <_dtoa_r+0x93c>
 80080a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080aa:	462a      	mov	r2, r5
 80080ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080b0:	f7f8 fd34 	bl	8000b1c <__aeabi_dcmplt>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	f040 8128 	bne.w	800830a <_dtoa_r+0x68a>
 80080ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f2c0 815a 	blt.w	800837e <_dtoa_r+0x6fe>
 80080ca:	2f0e      	cmp	r7, #14
 80080cc:	f300 8157 	bgt.w	800837e <_dtoa_r+0x6fe>
 80080d0:	4b5a      	ldr	r3, [pc, #360]	@ (800823c <_dtoa_r+0x5bc>)
 80080d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080d6:	ed93 7b00 	vldr	d7, [r3]
 80080da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	ed8d 7b00 	vstr	d7, [sp]
 80080e2:	da03      	bge.n	80080ec <_dtoa_r+0x46c>
 80080e4:	9b07      	ldr	r3, [sp, #28]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f340 8101 	ble.w	80082ee <_dtoa_r+0x66e>
 80080ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080f0:	4656      	mov	r6, sl
 80080f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 fbc7 	bl	800088c <__aeabi_ddiv>
 80080fe:	f7f8 fd4b 	bl	8000b98 <__aeabi_d2iz>
 8008102:	4680      	mov	r8, r0
 8008104:	f7f8 fa2e 	bl	8000564 <__aeabi_i2d>
 8008108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800810c:	f7f8 fa94 	bl	8000638 <__aeabi_dmul>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800811c:	f7f8 f8d4 	bl	80002c8 <__aeabi_dsub>
 8008120:	f806 4b01 	strb.w	r4, [r6], #1
 8008124:	9d07      	ldr	r5, [sp, #28]
 8008126:	eba6 040a 	sub.w	r4, r6, sl
 800812a:	42a5      	cmp	r5, r4
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	f040 8117 	bne.w	8008362 <_dtoa_r+0x6e2>
 8008134:	f7f8 f8ca 	bl	80002cc <__adddf3>
 8008138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800813c:	4604      	mov	r4, r0
 800813e:	460d      	mov	r5, r1
 8008140:	f7f8 fd0a 	bl	8000b58 <__aeabi_dcmpgt>
 8008144:	2800      	cmp	r0, #0
 8008146:	f040 80f9 	bne.w	800833c <_dtoa_r+0x6bc>
 800814a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800814e:	4620      	mov	r0, r4
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 fcd9 	bl	8000b08 <__aeabi_dcmpeq>
 8008156:	b118      	cbz	r0, 8008160 <_dtoa_r+0x4e0>
 8008158:	f018 0f01 	tst.w	r8, #1
 800815c:	f040 80ee 	bne.w	800833c <_dtoa_r+0x6bc>
 8008160:	4649      	mov	r1, r9
 8008162:	4658      	mov	r0, fp
 8008164:	f000 fe4a 	bl	8008dfc <_Bfree>
 8008168:	2300      	movs	r3, #0
 800816a:	7033      	strb	r3, [r6, #0]
 800816c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800816e:	3701      	adds	r7, #1
 8008170:	601f      	str	r7, [r3, #0]
 8008172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 831d 	beq.w	80087b4 <_dtoa_r+0xb34>
 800817a:	601e      	str	r6, [r3, #0]
 800817c:	e31a      	b.n	80087b4 <_dtoa_r+0xb34>
 800817e:	07e2      	lsls	r2, r4, #31
 8008180:	d505      	bpl.n	800818e <_dtoa_r+0x50e>
 8008182:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008186:	f7f8 fa57 	bl	8000638 <__aeabi_dmul>
 800818a:	3601      	adds	r6, #1
 800818c:	2301      	movs	r3, #1
 800818e:	1064      	asrs	r4, r4, #1
 8008190:	3508      	adds	r5, #8
 8008192:	e73f      	b.n	8008014 <_dtoa_r+0x394>
 8008194:	2602      	movs	r6, #2
 8008196:	e742      	b.n	800801e <_dtoa_r+0x39e>
 8008198:	9c07      	ldr	r4, [sp, #28]
 800819a:	9704      	str	r7, [sp, #16]
 800819c:	e761      	b.n	8008062 <_dtoa_r+0x3e2>
 800819e:	4b27      	ldr	r3, [pc, #156]	@ (800823c <_dtoa_r+0x5bc>)
 80081a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081aa:	4454      	add	r4, sl
 80081ac:	2900      	cmp	r1, #0
 80081ae:	d053      	beq.n	8008258 <_dtoa_r+0x5d8>
 80081b0:	4928      	ldr	r1, [pc, #160]	@ (8008254 <_dtoa_r+0x5d4>)
 80081b2:	2000      	movs	r0, #0
 80081b4:	f7f8 fb6a 	bl	800088c <__aeabi_ddiv>
 80081b8:	4633      	mov	r3, r6
 80081ba:	462a      	mov	r2, r5
 80081bc:	f7f8 f884 	bl	80002c8 <__aeabi_dsub>
 80081c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081c4:	4656      	mov	r6, sl
 80081c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ca:	f7f8 fce5 	bl	8000b98 <__aeabi_d2iz>
 80081ce:	4605      	mov	r5, r0
 80081d0:	f7f8 f9c8 	bl	8000564 <__aeabi_i2d>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081dc:	f7f8 f874 	bl	80002c8 <__aeabi_dsub>
 80081e0:	3530      	adds	r5, #48	@ 0x30
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081ea:	f806 5b01 	strb.w	r5, [r6], #1
 80081ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081f2:	f7f8 fc93 	bl	8000b1c <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d171      	bne.n	80082de <_dtoa_r+0x65e>
 80081fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081fe:	4911      	ldr	r1, [pc, #68]	@ (8008244 <_dtoa_r+0x5c4>)
 8008200:	2000      	movs	r0, #0
 8008202:	f7f8 f861 	bl	80002c8 <__aeabi_dsub>
 8008206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800820a:	f7f8 fc87 	bl	8000b1c <__aeabi_dcmplt>
 800820e:	2800      	cmp	r0, #0
 8008210:	f040 8095 	bne.w	800833e <_dtoa_r+0x6be>
 8008214:	42a6      	cmp	r6, r4
 8008216:	f43f af50 	beq.w	80080ba <_dtoa_r+0x43a>
 800821a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800821e:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <_dtoa_r+0x5c8>)
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 fa09 	bl	8000638 <__aeabi_dmul>
 8008226:	4b08      	ldr	r3, [pc, #32]	@ (8008248 <_dtoa_r+0x5c8>)
 8008228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800822c:	2200      	movs	r2, #0
 800822e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008232:	f7f8 fa01 	bl	8000638 <__aeabi_dmul>
 8008236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800823a:	e7c4      	b.n	80081c6 <_dtoa_r+0x546>
 800823c:	0800bed8 	.word	0x0800bed8
 8008240:	0800beb0 	.word	0x0800beb0
 8008244:	3ff00000 	.word	0x3ff00000
 8008248:	40240000 	.word	0x40240000
 800824c:	401c0000 	.word	0x401c0000
 8008250:	40140000 	.word	0x40140000
 8008254:	3fe00000 	.word	0x3fe00000
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	f7f8 f9ec 	bl	8000638 <__aeabi_dmul>
 8008260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008264:	9415      	str	r4, [sp, #84]	@ 0x54
 8008266:	4656      	mov	r6, sl
 8008268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800826c:	f7f8 fc94 	bl	8000b98 <__aeabi_d2iz>
 8008270:	4605      	mov	r5, r0
 8008272:	f7f8 f977 	bl	8000564 <__aeabi_i2d>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800827e:	f7f8 f823 	bl	80002c8 <__aeabi_dsub>
 8008282:	3530      	adds	r5, #48	@ 0x30
 8008284:	f806 5b01 	strb.w	r5, [r6], #1
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	42a6      	cmp	r6, r4
 800828e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	d124      	bne.n	80082e2 <_dtoa_r+0x662>
 8008298:	4bac      	ldr	r3, [pc, #688]	@ (800854c <_dtoa_r+0x8cc>)
 800829a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800829e:	f7f8 f815 	bl	80002cc <__adddf3>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082aa:	f7f8 fc55 	bl	8000b58 <__aeabi_dcmpgt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d145      	bne.n	800833e <_dtoa_r+0x6be>
 80082b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082b6:	49a5      	ldr	r1, [pc, #660]	@ (800854c <_dtoa_r+0x8cc>)
 80082b8:	2000      	movs	r0, #0
 80082ba:	f7f8 f805 	bl	80002c8 <__aeabi_dsub>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c6:	f7f8 fc29 	bl	8000b1c <__aeabi_dcmplt>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f43f aef5 	beq.w	80080ba <_dtoa_r+0x43a>
 80082d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80082d2:	1e73      	subs	r3, r6, #1
 80082d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80082d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082da:	2b30      	cmp	r3, #48	@ 0x30
 80082dc:	d0f8      	beq.n	80082d0 <_dtoa_r+0x650>
 80082de:	9f04      	ldr	r7, [sp, #16]
 80082e0:	e73e      	b.n	8008160 <_dtoa_r+0x4e0>
 80082e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008550 <_dtoa_r+0x8d0>)
 80082e4:	f7f8 f9a8 	bl	8000638 <__aeabi_dmul>
 80082e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ec:	e7bc      	b.n	8008268 <_dtoa_r+0x5e8>
 80082ee:	d10c      	bne.n	800830a <_dtoa_r+0x68a>
 80082f0:	4b98      	ldr	r3, [pc, #608]	@ (8008554 <_dtoa_r+0x8d4>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082f8:	f7f8 f99e 	bl	8000638 <__aeabi_dmul>
 80082fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008300:	f7f8 fc20 	bl	8000b44 <__aeabi_dcmpge>
 8008304:	2800      	cmp	r0, #0
 8008306:	f000 8157 	beq.w	80085b8 <_dtoa_r+0x938>
 800830a:	2400      	movs	r4, #0
 800830c:	4625      	mov	r5, r4
 800830e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008310:	43db      	mvns	r3, r3
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	4656      	mov	r6, sl
 8008316:	2700      	movs	r7, #0
 8008318:	4621      	mov	r1, r4
 800831a:	4658      	mov	r0, fp
 800831c:	f000 fd6e 	bl	8008dfc <_Bfree>
 8008320:	2d00      	cmp	r5, #0
 8008322:	d0dc      	beq.n	80082de <_dtoa_r+0x65e>
 8008324:	b12f      	cbz	r7, 8008332 <_dtoa_r+0x6b2>
 8008326:	42af      	cmp	r7, r5
 8008328:	d003      	beq.n	8008332 <_dtoa_r+0x6b2>
 800832a:	4639      	mov	r1, r7
 800832c:	4658      	mov	r0, fp
 800832e:	f000 fd65 	bl	8008dfc <_Bfree>
 8008332:	4629      	mov	r1, r5
 8008334:	4658      	mov	r0, fp
 8008336:	f000 fd61 	bl	8008dfc <_Bfree>
 800833a:	e7d0      	b.n	80082de <_dtoa_r+0x65e>
 800833c:	9704      	str	r7, [sp, #16]
 800833e:	4633      	mov	r3, r6
 8008340:	461e      	mov	r6, r3
 8008342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008346:	2a39      	cmp	r2, #57	@ 0x39
 8008348:	d107      	bne.n	800835a <_dtoa_r+0x6da>
 800834a:	459a      	cmp	sl, r3
 800834c:	d1f8      	bne.n	8008340 <_dtoa_r+0x6c0>
 800834e:	9a04      	ldr	r2, [sp, #16]
 8008350:	3201      	adds	r2, #1
 8008352:	9204      	str	r2, [sp, #16]
 8008354:	2230      	movs	r2, #48	@ 0x30
 8008356:	f88a 2000 	strb.w	r2, [sl]
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	3201      	adds	r2, #1
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e7bd      	b.n	80082de <_dtoa_r+0x65e>
 8008362:	4b7b      	ldr	r3, [pc, #492]	@ (8008550 <_dtoa_r+0x8d0>)
 8008364:	2200      	movs	r2, #0
 8008366:	f7f8 f967 	bl	8000638 <__aeabi_dmul>
 800836a:	2200      	movs	r2, #0
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	460d      	mov	r5, r1
 8008372:	f7f8 fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f aebb 	beq.w	80080f2 <_dtoa_r+0x472>
 800837c:	e6f0      	b.n	8008160 <_dtoa_r+0x4e0>
 800837e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008380:	2a00      	cmp	r2, #0
 8008382:	f000 80db 	beq.w	800853c <_dtoa_r+0x8bc>
 8008386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008388:	2a01      	cmp	r2, #1
 800838a:	f300 80bf 	bgt.w	800850c <_dtoa_r+0x88c>
 800838e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008390:	2a00      	cmp	r2, #0
 8008392:	f000 80b7 	beq.w	8008504 <_dtoa_r+0x884>
 8008396:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800839a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800839c:	4646      	mov	r6, r8
 800839e:	9a08      	ldr	r2, [sp, #32]
 80083a0:	2101      	movs	r1, #1
 80083a2:	441a      	add	r2, r3
 80083a4:	4658      	mov	r0, fp
 80083a6:	4498      	add	r8, r3
 80083a8:	9208      	str	r2, [sp, #32]
 80083aa:	f000 fddb 	bl	8008f64 <__i2b>
 80083ae:	4605      	mov	r5, r0
 80083b0:	b15e      	cbz	r6, 80083ca <_dtoa_r+0x74a>
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd08      	ble.n	80083ca <_dtoa_r+0x74a>
 80083b8:	42b3      	cmp	r3, r6
 80083ba:	9a08      	ldr	r2, [sp, #32]
 80083bc:	bfa8      	it	ge
 80083be:	4633      	movge	r3, r6
 80083c0:	eba8 0803 	sub.w	r8, r8, r3
 80083c4:	1af6      	subs	r6, r6, r3
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	9308      	str	r3, [sp, #32]
 80083ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083cc:	b1f3      	cbz	r3, 800840c <_dtoa_r+0x78c>
 80083ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 80b7 	beq.w	8008544 <_dtoa_r+0x8c4>
 80083d6:	b18c      	cbz	r4, 80083fc <_dtoa_r+0x77c>
 80083d8:	4629      	mov	r1, r5
 80083da:	4622      	mov	r2, r4
 80083dc:	4658      	mov	r0, fp
 80083de:	f000 fe81 	bl	80090e4 <__pow5mult>
 80083e2:	464a      	mov	r2, r9
 80083e4:	4601      	mov	r1, r0
 80083e6:	4605      	mov	r5, r0
 80083e8:	4658      	mov	r0, fp
 80083ea:	f000 fdd1 	bl	8008f90 <__multiply>
 80083ee:	4649      	mov	r1, r9
 80083f0:	9004      	str	r0, [sp, #16]
 80083f2:	4658      	mov	r0, fp
 80083f4:	f000 fd02 	bl	8008dfc <_Bfree>
 80083f8:	9b04      	ldr	r3, [sp, #16]
 80083fa:	4699      	mov	r9, r3
 80083fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083fe:	1b1a      	subs	r2, r3, r4
 8008400:	d004      	beq.n	800840c <_dtoa_r+0x78c>
 8008402:	4649      	mov	r1, r9
 8008404:	4658      	mov	r0, fp
 8008406:	f000 fe6d 	bl	80090e4 <__pow5mult>
 800840a:	4681      	mov	r9, r0
 800840c:	2101      	movs	r1, #1
 800840e:	4658      	mov	r0, fp
 8008410:	f000 fda8 	bl	8008f64 <__i2b>
 8008414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008416:	4604      	mov	r4, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 81cf 	beq.w	80087bc <_dtoa_r+0xb3c>
 800841e:	461a      	mov	r2, r3
 8008420:	4601      	mov	r1, r0
 8008422:	4658      	mov	r0, fp
 8008424:	f000 fe5e 	bl	80090e4 <__pow5mult>
 8008428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842a:	2b01      	cmp	r3, #1
 800842c:	4604      	mov	r4, r0
 800842e:	f300 8095 	bgt.w	800855c <_dtoa_r+0x8dc>
 8008432:	9b02      	ldr	r3, [sp, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 8087 	bne.w	8008548 <_dtoa_r+0x8c8>
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008440:	2b00      	cmp	r3, #0
 8008442:	f040 8089 	bne.w	8008558 <_dtoa_r+0x8d8>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800844c:	0d1b      	lsrs	r3, r3, #20
 800844e:	051b      	lsls	r3, r3, #20
 8008450:	b12b      	cbz	r3, 800845e <_dtoa_r+0x7de>
 8008452:	9b08      	ldr	r3, [sp, #32]
 8008454:	3301      	adds	r3, #1
 8008456:	9308      	str	r3, [sp, #32]
 8008458:	f108 0801 	add.w	r8, r8, #1
 800845c:	2301      	movs	r3, #1
 800845e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 81b0 	beq.w	80087c8 <_dtoa_r+0xb48>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800846e:	6918      	ldr	r0, [r3, #16]
 8008470:	f000 fd2c 	bl	8008ecc <__hi0bits>
 8008474:	f1c0 0020 	rsb	r0, r0, #32
 8008478:	9b08      	ldr	r3, [sp, #32]
 800847a:	4418      	add	r0, r3
 800847c:	f010 001f 	ands.w	r0, r0, #31
 8008480:	d077      	beq.n	8008572 <_dtoa_r+0x8f2>
 8008482:	f1c0 0320 	rsb	r3, r0, #32
 8008486:	2b04      	cmp	r3, #4
 8008488:	dd6b      	ble.n	8008562 <_dtoa_r+0x8e2>
 800848a:	9b08      	ldr	r3, [sp, #32]
 800848c:	f1c0 001c 	rsb	r0, r0, #28
 8008490:	4403      	add	r3, r0
 8008492:	4480      	add	r8, r0
 8008494:	4406      	add	r6, r0
 8008496:	9308      	str	r3, [sp, #32]
 8008498:	f1b8 0f00 	cmp.w	r8, #0
 800849c:	dd05      	ble.n	80084aa <_dtoa_r+0x82a>
 800849e:	4649      	mov	r1, r9
 80084a0:	4642      	mov	r2, r8
 80084a2:	4658      	mov	r0, fp
 80084a4:	f000 fe78 	bl	8009198 <__lshift>
 80084a8:	4681      	mov	r9, r0
 80084aa:	9b08      	ldr	r3, [sp, #32]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dd05      	ble.n	80084bc <_dtoa_r+0x83c>
 80084b0:	4621      	mov	r1, r4
 80084b2:	461a      	mov	r2, r3
 80084b4:	4658      	mov	r0, fp
 80084b6:	f000 fe6f 	bl	8009198 <__lshift>
 80084ba:	4604      	mov	r4, r0
 80084bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d059      	beq.n	8008576 <_dtoa_r+0x8f6>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4648      	mov	r0, r9
 80084c6:	f000 fed3 	bl	8009270 <__mcmp>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	da53      	bge.n	8008576 <_dtoa_r+0x8f6>
 80084ce:	1e7b      	subs	r3, r7, #1
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	4649      	mov	r1, r9
 80084d4:	2300      	movs	r3, #0
 80084d6:	220a      	movs	r2, #10
 80084d8:	4658      	mov	r0, fp
 80084da:	f000 fcb1 	bl	8008e40 <__multadd>
 80084de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084e0:	4681      	mov	r9, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8172 	beq.w	80087cc <_dtoa_r+0xb4c>
 80084e8:	2300      	movs	r3, #0
 80084ea:	4629      	mov	r1, r5
 80084ec:	220a      	movs	r2, #10
 80084ee:	4658      	mov	r0, fp
 80084f0:	f000 fca6 	bl	8008e40 <__multadd>
 80084f4:	9b00      	ldr	r3, [sp, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	4605      	mov	r5, r0
 80084fa:	dc67      	bgt.n	80085cc <_dtoa_r+0x94c>
 80084fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fe:	2b02      	cmp	r3, #2
 8008500:	dc41      	bgt.n	8008586 <_dtoa_r+0x906>
 8008502:	e063      	b.n	80085cc <_dtoa_r+0x94c>
 8008504:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008506:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800850a:	e746      	b.n	800839a <_dtoa_r+0x71a>
 800850c:	9b07      	ldr	r3, [sp, #28]
 800850e:	1e5c      	subs	r4, r3, #1
 8008510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008512:	42a3      	cmp	r3, r4
 8008514:	bfbf      	itttt	lt
 8008516:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008518:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800851a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800851c:	1ae3      	sublt	r3, r4, r3
 800851e:	bfb4      	ite	lt
 8008520:	18d2      	addlt	r2, r2, r3
 8008522:	1b1c      	subge	r4, r3, r4
 8008524:	9b07      	ldr	r3, [sp, #28]
 8008526:	bfbc      	itt	lt
 8008528:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800852a:	2400      	movlt	r4, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	bfb5      	itete	lt
 8008530:	eba8 0603 	sublt.w	r6, r8, r3
 8008534:	9b07      	ldrge	r3, [sp, #28]
 8008536:	2300      	movlt	r3, #0
 8008538:	4646      	movge	r6, r8
 800853a:	e730      	b.n	800839e <_dtoa_r+0x71e>
 800853c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800853e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008540:	4646      	mov	r6, r8
 8008542:	e735      	b.n	80083b0 <_dtoa_r+0x730>
 8008544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008546:	e75c      	b.n	8008402 <_dtoa_r+0x782>
 8008548:	2300      	movs	r3, #0
 800854a:	e788      	b.n	800845e <_dtoa_r+0x7de>
 800854c:	3fe00000 	.word	0x3fe00000
 8008550:	40240000 	.word	0x40240000
 8008554:	40140000 	.word	0x40140000
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	e780      	b.n	800845e <_dtoa_r+0x7de>
 800855c:	2300      	movs	r3, #0
 800855e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008560:	e782      	b.n	8008468 <_dtoa_r+0x7e8>
 8008562:	d099      	beq.n	8008498 <_dtoa_r+0x818>
 8008564:	9a08      	ldr	r2, [sp, #32]
 8008566:	331c      	adds	r3, #28
 8008568:	441a      	add	r2, r3
 800856a:	4498      	add	r8, r3
 800856c:	441e      	add	r6, r3
 800856e:	9208      	str	r2, [sp, #32]
 8008570:	e792      	b.n	8008498 <_dtoa_r+0x818>
 8008572:	4603      	mov	r3, r0
 8008574:	e7f6      	b.n	8008564 <_dtoa_r+0x8e4>
 8008576:	9b07      	ldr	r3, [sp, #28]
 8008578:	9704      	str	r7, [sp, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	dc20      	bgt.n	80085c0 <_dtoa_r+0x940>
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008582:	2b02      	cmp	r3, #2
 8008584:	dd1e      	ble.n	80085c4 <_dtoa_r+0x944>
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f47f aec0 	bne.w	800830e <_dtoa_r+0x68e>
 800858e:	4621      	mov	r1, r4
 8008590:	2205      	movs	r2, #5
 8008592:	4658      	mov	r0, fp
 8008594:	f000 fc54 	bl	8008e40 <__multadd>
 8008598:	4601      	mov	r1, r0
 800859a:	4604      	mov	r4, r0
 800859c:	4648      	mov	r0, r9
 800859e:	f000 fe67 	bl	8009270 <__mcmp>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f77f aeb3 	ble.w	800830e <_dtoa_r+0x68e>
 80085a8:	4656      	mov	r6, sl
 80085aa:	2331      	movs	r3, #49	@ 0x31
 80085ac:	f806 3b01 	strb.w	r3, [r6], #1
 80085b0:	9b04      	ldr	r3, [sp, #16]
 80085b2:	3301      	adds	r3, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	e6ae      	b.n	8008316 <_dtoa_r+0x696>
 80085b8:	9c07      	ldr	r4, [sp, #28]
 80085ba:	9704      	str	r7, [sp, #16]
 80085bc:	4625      	mov	r5, r4
 80085be:	e7f3      	b.n	80085a8 <_dtoa_r+0x928>
 80085c0:	9b07      	ldr	r3, [sp, #28]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8104 	beq.w	80087d4 <_dtoa_r+0xb54>
 80085cc:	2e00      	cmp	r6, #0
 80085ce:	dd05      	ble.n	80085dc <_dtoa_r+0x95c>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4632      	mov	r2, r6
 80085d4:	4658      	mov	r0, fp
 80085d6:	f000 fddf 	bl	8009198 <__lshift>
 80085da:	4605      	mov	r5, r0
 80085dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d05a      	beq.n	8008698 <_dtoa_r+0xa18>
 80085e2:	6869      	ldr	r1, [r5, #4]
 80085e4:	4658      	mov	r0, fp
 80085e6:	f000 fbc9 	bl	8008d7c <_Balloc>
 80085ea:	4606      	mov	r6, r0
 80085ec:	b928      	cbnz	r0, 80085fa <_dtoa_r+0x97a>
 80085ee:	4b84      	ldr	r3, [pc, #528]	@ (8008800 <_dtoa_r+0xb80>)
 80085f0:	4602      	mov	r2, r0
 80085f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085f6:	f7ff bb5a 	b.w	8007cae <_dtoa_r+0x2e>
 80085fa:	692a      	ldr	r2, [r5, #16]
 80085fc:	3202      	adds	r2, #2
 80085fe:	0092      	lsls	r2, r2, #2
 8008600:	f105 010c 	add.w	r1, r5, #12
 8008604:	300c      	adds	r0, #12
 8008606:	f001 f81d 	bl	8009644 <memcpy>
 800860a:	2201      	movs	r2, #1
 800860c:	4631      	mov	r1, r6
 800860e:	4658      	mov	r0, fp
 8008610:	f000 fdc2 	bl	8009198 <__lshift>
 8008614:	f10a 0301 	add.w	r3, sl, #1
 8008618:	9307      	str	r3, [sp, #28]
 800861a:	9b00      	ldr	r3, [sp, #0]
 800861c:	4453      	add	r3, sl
 800861e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008620:	9b02      	ldr	r3, [sp, #8]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	462f      	mov	r7, r5
 8008628:	930a      	str	r3, [sp, #40]	@ 0x28
 800862a:	4605      	mov	r5, r0
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	4621      	mov	r1, r4
 8008630:	3b01      	subs	r3, #1
 8008632:	4648      	mov	r0, r9
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	f7ff fa98 	bl	8007b6a <quorem>
 800863a:	4639      	mov	r1, r7
 800863c:	9002      	str	r0, [sp, #8]
 800863e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008642:	4648      	mov	r0, r9
 8008644:	f000 fe14 	bl	8009270 <__mcmp>
 8008648:	462a      	mov	r2, r5
 800864a:	9008      	str	r0, [sp, #32]
 800864c:	4621      	mov	r1, r4
 800864e:	4658      	mov	r0, fp
 8008650:	f000 fe2a 	bl	80092a8 <__mdiff>
 8008654:	68c2      	ldr	r2, [r0, #12]
 8008656:	4606      	mov	r6, r0
 8008658:	bb02      	cbnz	r2, 800869c <_dtoa_r+0xa1c>
 800865a:	4601      	mov	r1, r0
 800865c:	4648      	mov	r0, r9
 800865e:	f000 fe07 	bl	8009270 <__mcmp>
 8008662:	4602      	mov	r2, r0
 8008664:	4631      	mov	r1, r6
 8008666:	4658      	mov	r0, fp
 8008668:	920e      	str	r2, [sp, #56]	@ 0x38
 800866a:	f000 fbc7 	bl	8008dfc <_Bfree>
 800866e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008672:	9e07      	ldr	r6, [sp, #28]
 8008674:	ea43 0102 	orr.w	r1, r3, r2
 8008678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800867a:	4319      	orrs	r1, r3
 800867c:	d110      	bne.n	80086a0 <_dtoa_r+0xa20>
 800867e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008682:	d029      	beq.n	80086d8 <_dtoa_r+0xa58>
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd02      	ble.n	8008690 <_dtoa_r+0xa10>
 800868a:	9b02      	ldr	r3, [sp, #8]
 800868c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	f883 8000 	strb.w	r8, [r3]
 8008696:	e63f      	b.n	8008318 <_dtoa_r+0x698>
 8008698:	4628      	mov	r0, r5
 800869a:	e7bb      	b.n	8008614 <_dtoa_r+0x994>
 800869c:	2201      	movs	r2, #1
 800869e:	e7e1      	b.n	8008664 <_dtoa_r+0x9e4>
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	db04      	blt.n	80086b0 <_dtoa_r+0xa30>
 80086a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086a8:	430b      	orrs	r3, r1
 80086aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086ac:	430b      	orrs	r3, r1
 80086ae:	d120      	bne.n	80086f2 <_dtoa_r+0xa72>
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	dded      	ble.n	8008690 <_dtoa_r+0xa10>
 80086b4:	4649      	mov	r1, r9
 80086b6:	2201      	movs	r2, #1
 80086b8:	4658      	mov	r0, fp
 80086ba:	f000 fd6d 	bl	8009198 <__lshift>
 80086be:	4621      	mov	r1, r4
 80086c0:	4681      	mov	r9, r0
 80086c2:	f000 fdd5 	bl	8009270 <__mcmp>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	dc03      	bgt.n	80086d2 <_dtoa_r+0xa52>
 80086ca:	d1e1      	bne.n	8008690 <_dtoa_r+0xa10>
 80086cc:	f018 0f01 	tst.w	r8, #1
 80086d0:	d0de      	beq.n	8008690 <_dtoa_r+0xa10>
 80086d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086d6:	d1d8      	bne.n	800868a <_dtoa_r+0xa0a>
 80086d8:	9a00      	ldr	r2, [sp, #0]
 80086da:	2339      	movs	r3, #57	@ 0x39
 80086dc:	7013      	strb	r3, [r2, #0]
 80086de:	4633      	mov	r3, r6
 80086e0:	461e      	mov	r6, r3
 80086e2:	3b01      	subs	r3, #1
 80086e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086e8:	2a39      	cmp	r2, #57	@ 0x39
 80086ea:	d052      	beq.n	8008792 <_dtoa_r+0xb12>
 80086ec:	3201      	adds	r2, #1
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e612      	b.n	8008318 <_dtoa_r+0x698>
 80086f2:	2a00      	cmp	r2, #0
 80086f4:	dd07      	ble.n	8008706 <_dtoa_r+0xa86>
 80086f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086fa:	d0ed      	beq.n	80086d8 <_dtoa_r+0xa58>
 80086fc:	9a00      	ldr	r2, [sp, #0]
 80086fe:	f108 0301 	add.w	r3, r8, #1
 8008702:	7013      	strb	r3, [r2, #0]
 8008704:	e608      	b.n	8008318 <_dtoa_r+0x698>
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	9a07      	ldr	r2, [sp, #28]
 800870a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800870e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008710:	4293      	cmp	r3, r2
 8008712:	d028      	beq.n	8008766 <_dtoa_r+0xae6>
 8008714:	4649      	mov	r1, r9
 8008716:	2300      	movs	r3, #0
 8008718:	220a      	movs	r2, #10
 800871a:	4658      	mov	r0, fp
 800871c:	f000 fb90 	bl	8008e40 <__multadd>
 8008720:	42af      	cmp	r7, r5
 8008722:	4681      	mov	r9, r0
 8008724:	f04f 0300 	mov.w	r3, #0
 8008728:	f04f 020a 	mov.w	r2, #10
 800872c:	4639      	mov	r1, r7
 800872e:	4658      	mov	r0, fp
 8008730:	d107      	bne.n	8008742 <_dtoa_r+0xac2>
 8008732:	f000 fb85 	bl	8008e40 <__multadd>
 8008736:	4607      	mov	r7, r0
 8008738:	4605      	mov	r5, r0
 800873a:	9b07      	ldr	r3, [sp, #28]
 800873c:	3301      	adds	r3, #1
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	e774      	b.n	800862c <_dtoa_r+0x9ac>
 8008742:	f000 fb7d 	bl	8008e40 <__multadd>
 8008746:	4629      	mov	r1, r5
 8008748:	4607      	mov	r7, r0
 800874a:	2300      	movs	r3, #0
 800874c:	220a      	movs	r2, #10
 800874e:	4658      	mov	r0, fp
 8008750:	f000 fb76 	bl	8008e40 <__multadd>
 8008754:	4605      	mov	r5, r0
 8008756:	e7f0      	b.n	800873a <_dtoa_r+0xaba>
 8008758:	9b00      	ldr	r3, [sp, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	bfcc      	ite	gt
 800875e:	461e      	movgt	r6, r3
 8008760:	2601      	movle	r6, #1
 8008762:	4456      	add	r6, sl
 8008764:	2700      	movs	r7, #0
 8008766:	4649      	mov	r1, r9
 8008768:	2201      	movs	r2, #1
 800876a:	4658      	mov	r0, fp
 800876c:	f000 fd14 	bl	8009198 <__lshift>
 8008770:	4621      	mov	r1, r4
 8008772:	4681      	mov	r9, r0
 8008774:	f000 fd7c 	bl	8009270 <__mcmp>
 8008778:	2800      	cmp	r0, #0
 800877a:	dcb0      	bgt.n	80086de <_dtoa_r+0xa5e>
 800877c:	d102      	bne.n	8008784 <_dtoa_r+0xb04>
 800877e:	f018 0f01 	tst.w	r8, #1
 8008782:	d1ac      	bne.n	80086de <_dtoa_r+0xa5e>
 8008784:	4633      	mov	r3, r6
 8008786:	461e      	mov	r6, r3
 8008788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800878c:	2a30      	cmp	r2, #48	@ 0x30
 800878e:	d0fa      	beq.n	8008786 <_dtoa_r+0xb06>
 8008790:	e5c2      	b.n	8008318 <_dtoa_r+0x698>
 8008792:	459a      	cmp	sl, r3
 8008794:	d1a4      	bne.n	80086e0 <_dtoa_r+0xa60>
 8008796:	9b04      	ldr	r3, [sp, #16]
 8008798:	3301      	adds	r3, #1
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	2331      	movs	r3, #49	@ 0x31
 800879e:	f88a 3000 	strb.w	r3, [sl]
 80087a2:	e5b9      	b.n	8008318 <_dtoa_r+0x698>
 80087a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008804 <_dtoa_r+0xb84>
 80087aa:	b11b      	cbz	r3, 80087b4 <_dtoa_r+0xb34>
 80087ac:	f10a 0308 	add.w	r3, sl, #8
 80087b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	4650      	mov	r0, sl
 80087b6:	b019      	add	sp, #100	@ 0x64
 80087b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087be:	2b01      	cmp	r3, #1
 80087c0:	f77f ae37 	ble.w	8008432 <_dtoa_r+0x7b2>
 80087c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087c8:	2001      	movs	r0, #1
 80087ca:	e655      	b.n	8008478 <_dtoa_r+0x7f8>
 80087cc:	9b00      	ldr	r3, [sp, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f77f aed6 	ble.w	8008580 <_dtoa_r+0x900>
 80087d4:	4656      	mov	r6, sl
 80087d6:	4621      	mov	r1, r4
 80087d8:	4648      	mov	r0, r9
 80087da:	f7ff f9c6 	bl	8007b6a <quorem>
 80087de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087e2:	f806 8b01 	strb.w	r8, [r6], #1
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	eba6 020a 	sub.w	r2, r6, sl
 80087ec:	4293      	cmp	r3, r2
 80087ee:	ddb3      	ble.n	8008758 <_dtoa_r+0xad8>
 80087f0:	4649      	mov	r1, r9
 80087f2:	2300      	movs	r3, #0
 80087f4:	220a      	movs	r2, #10
 80087f6:	4658      	mov	r0, fp
 80087f8:	f000 fb22 	bl	8008e40 <__multadd>
 80087fc:	4681      	mov	r9, r0
 80087fe:	e7ea      	b.n	80087d6 <_dtoa_r+0xb56>
 8008800:	0800be28 	.word	0x0800be28
 8008804:	0800bdac 	.word	0x0800bdac

08008808 <__ssputs_r>:
 8008808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800880c:	688e      	ldr	r6, [r1, #8]
 800880e:	461f      	mov	r7, r3
 8008810:	42be      	cmp	r6, r7
 8008812:	680b      	ldr	r3, [r1, #0]
 8008814:	4682      	mov	sl, r0
 8008816:	460c      	mov	r4, r1
 8008818:	4690      	mov	r8, r2
 800881a:	d82d      	bhi.n	8008878 <__ssputs_r+0x70>
 800881c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008820:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008824:	d026      	beq.n	8008874 <__ssputs_r+0x6c>
 8008826:	6965      	ldr	r5, [r4, #20]
 8008828:	6909      	ldr	r1, [r1, #16]
 800882a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800882e:	eba3 0901 	sub.w	r9, r3, r1
 8008832:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008836:	1c7b      	adds	r3, r7, #1
 8008838:	444b      	add	r3, r9
 800883a:	106d      	asrs	r5, r5, #1
 800883c:	429d      	cmp	r5, r3
 800883e:	bf38      	it	cc
 8008840:	461d      	movcc	r5, r3
 8008842:	0553      	lsls	r3, r2, #21
 8008844:	d527      	bpl.n	8008896 <__ssputs_r+0x8e>
 8008846:	4629      	mov	r1, r5
 8008848:	f000 f960 	bl	8008b0c <_malloc_r>
 800884c:	4606      	mov	r6, r0
 800884e:	b360      	cbz	r0, 80088aa <__ssputs_r+0xa2>
 8008850:	6921      	ldr	r1, [r4, #16]
 8008852:	464a      	mov	r2, r9
 8008854:	f000 fef6 	bl	8009644 <memcpy>
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800885e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008862:	81a3      	strh	r3, [r4, #12]
 8008864:	6126      	str	r6, [r4, #16]
 8008866:	6165      	str	r5, [r4, #20]
 8008868:	444e      	add	r6, r9
 800886a:	eba5 0509 	sub.w	r5, r5, r9
 800886e:	6026      	str	r6, [r4, #0]
 8008870:	60a5      	str	r5, [r4, #8]
 8008872:	463e      	mov	r6, r7
 8008874:	42be      	cmp	r6, r7
 8008876:	d900      	bls.n	800887a <__ssputs_r+0x72>
 8008878:	463e      	mov	r6, r7
 800887a:	6820      	ldr	r0, [r4, #0]
 800887c:	4632      	mov	r2, r6
 800887e:	4641      	mov	r1, r8
 8008880:	f000 fe6f 	bl	8009562 <memmove>
 8008884:	68a3      	ldr	r3, [r4, #8]
 8008886:	1b9b      	subs	r3, r3, r6
 8008888:	60a3      	str	r3, [r4, #8]
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	4433      	add	r3, r6
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	2000      	movs	r0, #0
 8008892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008896:	462a      	mov	r2, r5
 8008898:	f000 fe35 	bl	8009506 <_realloc_r>
 800889c:	4606      	mov	r6, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	d1e0      	bne.n	8008864 <__ssputs_r+0x5c>
 80088a2:	6921      	ldr	r1, [r4, #16]
 80088a4:	4650      	mov	r0, sl
 80088a6:	f000 ff0d 	bl	80096c4 <_free_r>
 80088aa:	230c      	movs	r3, #12
 80088ac:	f8ca 3000 	str.w	r3, [sl]
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b6:	81a3      	strh	r3, [r4, #12]
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088bc:	e7e9      	b.n	8008892 <__ssputs_r+0x8a>
	...

080088c0 <_svfiprintf_r>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	4698      	mov	r8, r3
 80088c6:	898b      	ldrh	r3, [r1, #12]
 80088c8:	061b      	lsls	r3, r3, #24
 80088ca:	b09d      	sub	sp, #116	@ 0x74
 80088cc:	4607      	mov	r7, r0
 80088ce:	460d      	mov	r5, r1
 80088d0:	4614      	mov	r4, r2
 80088d2:	d510      	bpl.n	80088f6 <_svfiprintf_r+0x36>
 80088d4:	690b      	ldr	r3, [r1, #16]
 80088d6:	b973      	cbnz	r3, 80088f6 <_svfiprintf_r+0x36>
 80088d8:	2140      	movs	r1, #64	@ 0x40
 80088da:	f000 f917 	bl	8008b0c <_malloc_r>
 80088de:	6028      	str	r0, [r5, #0]
 80088e0:	6128      	str	r0, [r5, #16]
 80088e2:	b930      	cbnz	r0, 80088f2 <_svfiprintf_r+0x32>
 80088e4:	230c      	movs	r3, #12
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088ec:	b01d      	add	sp, #116	@ 0x74
 80088ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f2:	2340      	movs	r3, #64	@ 0x40
 80088f4:	616b      	str	r3, [r5, #20]
 80088f6:	2300      	movs	r3, #0
 80088f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fa:	2320      	movs	r3, #32
 80088fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008900:	f8cd 800c 	str.w	r8, [sp, #12]
 8008904:	2330      	movs	r3, #48	@ 0x30
 8008906:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008aa4 <_svfiprintf_r+0x1e4>
 800890a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800890e:	f04f 0901 	mov.w	r9, #1
 8008912:	4623      	mov	r3, r4
 8008914:	469a      	mov	sl, r3
 8008916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800891a:	b10a      	cbz	r2, 8008920 <_svfiprintf_r+0x60>
 800891c:	2a25      	cmp	r2, #37	@ 0x25
 800891e:	d1f9      	bne.n	8008914 <_svfiprintf_r+0x54>
 8008920:	ebba 0b04 	subs.w	fp, sl, r4
 8008924:	d00b      	beq.n	800893e <_svfiprintf_r+0x7e>
 8008926:	465b      	mov	r3, fp
 8008928:	4622      	mov	r2, r4
 800892a:	4629      	mov	r1, r5
 800892c:	4638      	mov	r0, r7
 800892e:	f7ff ff6b 	bl	8008808 <__ssputs_r>
 8008932:	3001      	adds	r0, #1
 8008934:	f000 80a7 	beq.w	8008a86 <_svfiprintf_r+0x1c6>
 8008938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800893a:	445a      	add	r2, fp
 800893c:	9209      	str	r2, [sp, #36]	@ 0x24
 800893e:	f89a 3000 	ldrb.w	r3, [sl]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 809f 	beq.w	8008a86 <_svfiprintf_r+0x1c6>
 8008948:	2300      	movs	r3, #0
 800894a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800894e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008952:	f10a 0a01 	add.w	sl, sl, #1
 8008956:	9304      	str	r3, [sp, #16]
 8008958:	9307      	str	r3, [sp, #28]
 800895a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800895e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008960:	4654      	mov	r4, sl
 8008962:	2205      	movs	r2, #5
 8008964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008968:	484e      	ldr	r0, [pc, #312]	@ (8008aa4 <_svfiprintf_r+0x1e4>)
 800896a:	f7f7 fc51 	bl	8000210 <memchr>
 800896e:	9a04      	ldr	r2, [sp, #16]
 8008970:	b9d8      	cbnz	r0, 80089aa <_svfiprintf_r+0xea>
 8008972:	06d0      	lsls	r0, r2, #27
 8008974:	bf44      	itt	mi
 8008976:	2320      	movmi	r3, #32
 8008978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800897c:	0711      	lsls	r1, r2, #28
 800897e:	bf44      	itt	mi
 8008980:	232b      	movmi	r3, #43	@ 0x2b
 8008982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008986:	f89a 3000 	ldrb.w	r3, [sl]
 800898a:	2b2a      	cmp	r3, #42	@ 0x2a
 800898c:	d015      	beq.n	80089ba <_svfiprintf_r+0xfa>
 800898e:	9a07      	ldr	r2, [sp, #28]
 8008990:	4654      	mov	r4, sl
 8008992:	2000      	movs	r0, #0
 8008994:	f04f 0c0a 	mov.w	ip, #10
 8008998:	4621      	mov	r1, r4
 800899a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800899e:	3b30      	subs	r3, #48	@ 0x30
 80089a0:	2b09      	cmp	r3, #9
 80089a2:	d94b      	bls.n	8008a3c <_svfiprintf_r+0x17c>
 80089a4:	b1b0      	cbz	r0, 80089d4 <_svfiprintf_r+0x114>
 80089a6:	9207      	str	r2, [sp, #28]
 80089a8:	e014      	b.n	80089d4 <_svfiprintf_r+0x114>
 80089aa:	eba0 0308 	sub.w	r3, r0, r8
 80089ae:	fa09 f303 	lsl.w	r3, r9, r3
 80089b2:	4313      	orrs	r3, r2
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	46a2      	mov	sl, r4
 80089b8:	e7d2      	b.n	8008960 <_svfiprintf_r+0xa0>
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	1d19      	adds	r1, r3, #4
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	9103      	str	r1, [sp, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bfbb      	ittet	lt
 80089c6:	425b      	neglt	r3, r3
 80089c8:	f042 0202 	orrlt.w	r2, r2, #2
 80089cc:	9307      	strge	r3, [sp, #28]
 80089ce:	9307      	strlt	r3, [sp, #28]
 80089d0:	bfb8      	it	lt
 80089d2:	9204      	strlt	r2, [sp, #16]
 80089d4:	7823      	ldrb	r3, [r4, #0]
 80089d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80089d8:	d10a      	bne.n	80089f0 <_svfiprintf_r+0x130>
 80089da:	7863      	ldrb	r3, [r4, #1]
 80089dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80089de:	d132      	bne.n	8008a46 <_svfiprintf_r+0x186>
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	1d1a      	adds	r2, r3, #4
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	9203      	str	r2, [sp, #12]
 80089e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089ec:	3402      	adds	r4, #2
 80089ee:	9305      	str	r3, [sp, #20]
 80089f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ab4 <_svfiprintf_r+0x1f4>
 80089f4:	7821      	ldrb	r1, [r4, #0]
 80089f6:	2203      	movs	r2, #3
 80089f8:	4650      	mov	r0, sl
 80089fa:	f7f7 fc09 	bl	8000210 <memchr>
 80089fe:	b138      	cbz	r0, 8008a10 <_svfiprintf_r+0x150>
 8008a00:	9b04      	ldr	r3, [sp, #16]
 8008a02:	eba0 000a 	sub.w	r0, r0, sl
 8008a06:	2240      	movs	r2, #64	@ 0x40
 8008a08:	4082      	lsls	r2, r0
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	3401      	adds	r4, #1
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a14:	4824      	ldr	r0, [pc, #144]	@ (8008aa8 <_svfiprintf_r+0x1e8>)
 8008a16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a1a:	2206      	movs	r2, #6
 8008a1c:	f7f7 fbf8 	bl	8000210 <memchr>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d036      	beq.n	8008a92 <_svfiprintf_r+0x1d2>
 8008a24:	4b21      	ldr	r3, [pc, #132]	@ (8008aac <_svfiprintf_r+0x1ec>)
 8008a26:	bb1b      	cbnz	r3, 8008a70 <_svfiprintf_r+0x1b0>
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	3307      	adds	r3, #7
 8008a2c:	f023 0307 	bic.w	r3, r3, #7
 8008a30:	3308      	adds	r3, #8
 8008a32:	9303      	str	r3, [sp, #12]
 8008a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a36:	4433      	add	r3, r6
 8008a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a3a:	e76a      	b.n	8008912 <_svfiprintf_r+0x52>
 8008a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a40:	460c      	mov	r4, r1
 8008a42:	2001      	movs	r0, #1
 8008a44:	e7a8      	b.n	8008998 <_svfiprintf_r+0xd8>
 8008a46:	2300      	movs	r3, #0
 8008a48:	3401      	adds	r4, #1
 8008a4a:	9305      	str	r3, [sp, #20]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f04f 0c0a 	mov.w	ip, #10
 8008a52:	4620      	mov	r0, r4
 8008a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a58:	3a30      	subs	r2, #48	@ 0x30
 8008a5a:	2a09      	cmp	r2, #9
 8008a5c:	d903      	bls.n	8008a66 <_svfiprintf_r+0x1a6>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0c6      	beq.n	80089f0 <_svfiprintf_r+0x130>
 8008a62:	9105      	str	r1, [sp, #20]
 8008a64:	e7c4      	b.n	80089f0 <_svfiprintf_r+0x130>
 8008a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e7f0      	b.n	8008a52 <_svfiprintf_r+0x192>
 8008a70:	ab03      	add	r3, sp, #12
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	462a      	mov	r2, r5
 8008a76:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab0 <_svfiprintf_r+0x1f0>)
 8008a78:	a904      	add	r1, sp, #16
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f7fe fba2 	bl	80071c4 <_printf_float>
 8008a80:	1c42      	adds	r2, r0, #1
 8008a82:	4606      	mov	r6, r0
 8008a84:	d1d6      	bne.n	8008a34 <_svfiprintf_r+0x174>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	065b      	lsls	r3, r3, #25
 8008a8a:	f53f af2d 	bmi.w	80088e8 <_svfiprintf_r+0x28>
 8008a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a90:	e72c      	b.n	80088ec <_svfiprintf_r+0x2c>
 8008a92:	ab03      	add	r3, sp, #12
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	462a      	mov	r2, r5
 8008a98:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <_svfiprintf_r+0x1f0>)
 8008a9a:	a904      	add	r1, sp, #16
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f7fe fe29 	bl	80076f4 <_printf_i>
 8008aa2:	e7ed      	b.n	8008a80 <_svfiprintf_r+0x1c0>
 8008aa4:	0800be39 	.word	0x0800be39
 8008aa8:	0800be43 	.word	0x0800be43
 8008aac:	080071c5 	.word	0x080071c5
 8008ab0:	08008809 	.word	0x08008809
 8008ab4:	0800be3f 	.word	0x0800be3f

08008ab8 <malloc>:
 8008ab8:	4b02      	ldr	r3, [pc, #8]	@ (8008ac4 <malloc+0xc>)
 8008aba:	4601      	mov	r1, r0
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	f000 b825 	b.w	8008b0c <_malloc_r>
 8008ac2:	bf00      	nop
 8008ac4:	20000018 	.word	0x20000018

08008ac8 <sbrk_aligned>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4e0f      	ldr	r6, [pc, #60]	@ (8008b08 <sbrk_aligned+0x40>)
 8008acc:	460c      	mov	r4, r1
 8008ace:	6831      	ldr	r1, [r6, #0]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	b911      	cbnz	r1, 8008ada <sbrk_aligned+0x12>
 8008ad4:	f000 fd94 	bl	8009600 <_sbrk_r>
 8008ad8:	6030      	str	r0, [r6, #0]
 8008ada:	4621      	mov	r1, r4
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 fd8f 	bl	8009600 <_sbrk_r>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	d103      	bne.n	8008aee <sbrk_aligned+0x26>
 8008ae6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008aea:	4620      	mov	r0, r4
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
 8008aee:	1cc4      	adds	r4, r0, #3
 8008af0:	f024 0403 	bic.w	r4, r4, #3
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	d0f8      	beq.n	8008aea <sbrk_aligned+0x22>
 8008af8:	1a21      	subs	r1, r4, r0
 8008afa:	4628      	mov	r0, r5
 8008afc:	f000 fd80 	bl	8009600 <_sbrk_r>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d1f2      	bne.n	8008aea <sbrk_aligned+0x22>
 8008b04:	e7ef      	b.n	8008ae6 <sbrk_aligned+0x1e>
 8008b06:	bf00      	nop
 8008b08:	200005b8 	.word	0x200005b8

08008b0c <_malloc_r>:
 8008b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b10:	1ccd      	adds	r5, r1, #3
 8008b12:	f025 0503 	bic.w	r5, r5, #3
 8008b16:	3508      	adds	r5, #8
 8008b18:	2d0c      	cmp	r5, #12
 8008b1a:	bf38      	it	cc
 8008b1c:	250c      	movcc	r5, #12
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	4606      	mov	r6, r0
 8008b22:	db01      	blt.n	8008b28 <_malloc_r+0x1c>
 8008b24:	42a9      	cmp	r1, r5
 8008b26:	d904      	bls.n	8008b32 <_malloc_r+0x26>
 8008b28:	230c      	movs	r3, #12
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c08 <_malloc_r+0xfc>
 8008b36:	f000 f915 	bl	8008d64 <__malloc_lock>
 8008b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b3e:	461c      	mov	r4, r3
 8008b40:	bb44      	cbnz	r4, 8008b94 <_malloc_r+0x88>
 8008b42:	4629      	mov	r1, r5
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7ff ffbf 	bl	8008ac8 <sbrk_aligned>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	d158      	bne.n	8008c02 <_malloc_r+0xf6>
 8008b50:	f8d8 4000 	ldr.w	r4, [r8]
 8008b54:	4627      	mov	r7, r4
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d143      	bne.n	8008be2 <_malloc_r+0xd6>
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d04b      	beq.n	8008bf6 <_malloc_r+0xea>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	4639      	mov	r1, r7
 8008b62:	4630      	mov	r0, r6
 8008b64:	eb04 0903 	add.w	r9, r4, r3
 8008b68:	f000 fd4a 	bl	8009600 <_sbrk_r>
 8008b6c:	4581      	cmp	r9, r0
 8008b6e:	d142      	bne.n	8008bf6 <_malloc_r+0xea>
 8008b70:	6821      	ldr	r1, [r4, #0]
 8008b72:	1a6d      	subs	r5, r5, r1
 8008b74:	4629      	mov	r1, r5
 8008b76:	4630      	mov	r0, r6
 8008b78:	f7ff ffa6 	bl	8008ac8 <sbrk_aligned>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d03a      	beq.n	8008bf6 <_malloc_r+0xea>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	442b      	add	r3, r5
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	bb62      	cbnz	r2, 8008be8 <_malloc_r+0xdc>
 8008b8e:	f8c8 7000 	str.w	r7, [r8]
 8008b92:	e00f      	b.n	8008bb4 <_malloc_r+0xa8>
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	1b52      	subs	r2, r2, r5
 8008b98:	d420      	bmi.n	8008bdc <_malloc_r+0xd0>
 8008b9a:	2a0b      	cmp	r2, #11
 8008b9c:	d917      	bls.n	8008bce <_malloc_r+0xc2>
 8008b9e:	1961      	adds	r1, r4, r5
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	6025      	str	r5, [r4, #0]
 8008ba4:	bf18      	it	ne
 8008ba6:	6059      	strne	r1, [r3, #4]
 8008ba8:	6863      	ldr	r3, [r4, #4]
 8008baa:	bf08      	it	eq
 8008bac:	f8c8 1000 	streq.w	r1, [r8]
 8008bb0:	5162      	str	r2, [r4, r5]
 8008bb2:	604b      	str	r3, [r1, #4]
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f000 f8db 	bl	8008d70 <__malloc_unlock>
 8008bba:	f104 000b 	add.w	r0, r4, #11
 8008bbe:	1d23      	adds	r3, r4, #4
 8008bc0:	f020 0007 	bic.w	r0, r0, #7
 8008bc4:	1ac2      	subs	r2, r0, r3
 8008bc6:	bf1c      	itt	ne
 8008bc8:	1a1b      	subne	r3, r3, r0
 8008bca:	50a3      	strne	r3, [r4, r2]
 8008bcc:	e7af      	b.n	8008b2e <_malloc_r+0x22>
 8008bce:	6862      	ldr	r2, [r4, #4]
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	bf0c      	ite	eq
 8008bd4:	f8c8 2000 	streq.w	r2, [r8]
 8008bd8:	605a      	strne	r2, [r3, #4]
 8008bda:	e7eb      	b.n	8008bb4 <_malloc_r+0xa8>
 8008bdc:	4623      	mov	r3, r4
 8008bde:	6864      	ldr	r4, [r4, #4]
 8008be0:	e7ae      	b.n	8008b40 <_malloc_r+0x34>
 8008be2:	463c      	mov	r4, r7
 8008be4:	687f      	ldr	r7, [r7, #4]
 8008be6:	e7b6      	b.n	8008b56 <_malloc_r+0x4a>
 8008be8:	461a      	mov	r2, r3
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	d1fb      	bne.n	8008be8 <_malloc_r+0xdc>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	6053      	str	r3, [r2, #4]
 8008bf4:	e7de      	b.n	8008bb4 <_malloc_r+0xa8>
 8008bf6:	230c      	movs	r3, #12
 8008bf8:	6033      	str	r3, [r6, #0]
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f000 f8b8 	bl	8008d70 <__malloc_unlock>
 8008c00:	e794      	b.n	8008b2c <_malloc_r+0x20>
 8008c02:	6005      	str	r5, [r0, #0]
 8008c04:	e7d6      	b.n	8008bb4 <_malloc_r+0xa8>
 8008c06:	bf00      	nop
 8008c08:	200005bc 	.word	0x200005bc

08008c0c <__sflush_r>:
 8008c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c14:	0716      	lsls	r6, r2, #28
 8008c16:	4605      	mov	r5, r0
 8008c18:	460c      	mov	r4, r1
 8008c1a:	d454      	bmi.n	8008cc6 <__sflush_r+0xba>
 8008c1c:	684b      	ldr	r3, [r1, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dc02      	bgt.n	8008c28 <__sflush_r+0x1c>
 8008c22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	dd48      	ble.n	8008cba <__sflush_r+0xae>
 8008c28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	d045      	beq.n	8008cba <__sflush_r+0xae>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c34:	682f      	ldr	r7, [r5, #0]
 8008c36:	6a21      	ldr	r1, [r4, #32]
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	d030      	beq.n	8008c9e <__sflush_r+0x92>
 8008c3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	0759      	lsls	r1, r3, #29
 8008c42:	d505      	bpl.n	8008c50 <__sflush_r+0x44>
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	1ad2      	subs	r2, r2, r3
 8008c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c4a:	b10b      	cbz	r3, 8008c50 <__sflush_r+0x44>
 8008c4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c4e:	1ad2      	subs	r2, r2, r3
 8008c50:	2300      	movs	r3, #0
 8008c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c54:	6a21      	ldr	r1, [r4, #32]
 8008c56:	4628      	mov	r0, r5
 8008c58:	47b0      	blx	r6
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	d106      	bne.n	8008c6e <__sflush_r+0x62>
 8008c60:	6829      	ldr	r1, [r5, #0]
 8008c62:	291d      	cmp	r1, #29
 8008c64:	d82b      	bhi.n	8008cbe <__sflush_r+0xb2>
 8008c66:	4a2a      	ldr	r2, [pc, #168]	@ (8008d10 <__sflush_r+0x104>)
 8008c68:	410a      	asrs	r2, r1
 8008c6a:	07d6      	lsls	r6, r2, #31
 8008c6c:	d427      	bmi.n	8008cbe <__sflush_r+0xb2>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	6062      	str	r2, [r4, #4]
 8008c72:	04d9      	lsls	r1, r3, #19
 8008c74:	6922      	ldr	r2, [r4, #16]
 8008c76:	6022      	str	r2, [r4, #0]
 8008c78:	d504      	bpl.n	8008c84 <__sflush_r+0x78>
 8008c7a:	1c42      	adds	r2, r0, #1
 8008c7c:	d101      	bne.n	8008c82 <__sflush_r+0x76>
 8008c7e:	682b      	ldr	r3, [r5, #0]
 8008c80:	b903      	cbnz	r3, 8008c84 <__sflush_r+0x78>
 8008c82:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c86:	602f      	str	r7, [r5, #0]
 8008c88:	b1b9      	cbz	r1, 8008cba <__sflush_r+0xae>
 8008c8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c8e:	4299      	cmp	r1, r3
 8008c90:	d002      	beq.n	8008c98 <__sflush_r+0x8c>
 8008c92:	4628      	mov	r0, r5
 8008c94:	f000 fd16 	bl	80096c4 <_free_r>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c9c:	e00d      	b.n	8008cba <__sflush_r+0xae>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	47b0      	blx	r6
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	1c50      	adds	r0, r2, #1
 8008ca8:	d1c9      	bne.n	8008c3e <__sflush_r+0x32>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0c6      	beq.n	8008c3e <__sflush_r+0x32>
 8008cb0:	2b1d      	cmp	r3, #29
 8008cb2:	d001      	beq.n	8008cb8 <__sflush_r+0xac>
 8008cb4:	2b16      	cmp	r3, #22
 8008cb6:	d11e      	bne.n	8008cf6 <__sflush_r+0xea>
 8008cb8:	602f      	str	r7, [r5, #0]
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e022      	b.n	8008d04 <__sflush_r+0xf8>
 8008cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cc2:	b21b      	sxth	r3, r3
 8008cc4:	e01b      	b.n	8008cfe <__sflush_r+0xf2>
 8008cc6:	690f      	ldr	r7, [r1, #16]
 8008cc8:	2f00      	cmp	r7, #0
 8008cca:	d0f6      	beq.n	8008cba <__sflush_r+0xae>
 8008ccc:	0793      	lsls	r3, r2, #30
 8008cce:	680e      	ldr	r6, [r1, #0]
 8008cd0:	bf08      	it	eq
 8008cd2:	694b      	ldreq	r3, [r1, #20]
 8008cd4:	600f      	str	r7, [r1, #0]
 8008cd6:	bf18      	it	ne
 8008cd8:	2300      	movne	r3, #0
 8008cda:	eba6 0807 	sub.w	r8, r6, r7
 8008cde:	608b      	str	r3, [r1, #8]
 8008ce0:	f1b8 0f00 	cmp.w	r8, #0
 8008ce4:	dde9      	ble.n	8008cba <__sflush_r+0xae>
 8008ce6:	6a21      	ldr	r1, [r4, #32]
 8008ce8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cea:	4643      	mov	r3, r8
 8008cec:	463a      	mov	r2, r7
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b0      	blx	r6
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	dc08      	bgt.n	8008d08 <__sflush_r+0xfc>
 8008cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d08:	4407      	add	r7, r0
 8008d0a:	eba8 0800 	sub.w	r8, r8, r0
 8008d0e:	e7e7      	b.n	8008ce0 <__sflush_r+0xd4>
 8008d10:	dfbffffe 	.word	0xdfbffffe

08008d14 <_fflush_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	690b      	ldr	r3, [r1, #16]
 8008d18:	4605      	mov	r5, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	b913      	cbnz	r3, 8008d24 <_fflush_r+0x10>
 8008d1e:	2500      	movs	r5, #0
 8008d20:	4628      	mov	r0, r5
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	b118      	cbz	r0, 8008d2e <_fflush_r+0x1a>
 8008d26:	6a03      	ldr	r3, [r0, #32]
 8008d28:	b90b      	cbnz	r3, 8008d2e <_fflush_r+0x1a>
 8008d2a:	f7fe feaf 	bl	8007a8c <__sinit>
 8008d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0f3      	beq.n	8008d1e <_fflush_r+0xa>
 8008d36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d38:	07d0      	lsls	r0, r2, #31
 8008d3a:	d404      	bmi.n	8008d46 <_fflush_r+0x32>
 8008d3c:	0599      	lsls	r1, r3, #22
 8008d3e:	d402      	bmi.n	8008d46 <_fflush_r+0x32>
 8008d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d42:	f7fe ff10 	bl	8007b66 <__retarget_lock_acquire_recursive>
 8008d46:	4628      	mov	r0, r5
 8008d48:	4621      	mov	r1, r4
 8008d4a:	f7ff ff5f 	bl	8008c0c <__sflush_r>
 8008d4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d50:	07da      	lsls	r2, r3, #31
 8008d52:	4605      	mov	r5, r0
 8008d54:	d4e4      	bmi.n	8008d20 <_fflush_r+0xc>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	059b      	lsls	r3, r3, #22
 8008d5a:	d4e1      	bmi.n	8008d20 <_fflush_r+0xc>
 8008d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d5e:	f7fe ff03 	bl	8007b68 <__retarget_lock_release_recursive>
 8008d62:	e7dd      	b.n	8008d20 <_fflush_r+0xc>

08008d64 <__malloc_lock>:
 8008d64:	4801      	ldr	r0, [pc, #4]	@ (8008d6c <__malloc_lock+0x8>)
 8008d66:	f7fe befe 	b.w	8007b66 <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	200005b4 	.word	0x200005b4

08008d70 <__malloc_unlock>:
 8008d70:	4801      	ldr	r0, [pc, #4]	@ (8008d78 <__malloc_unlock+0x8>)
 8008d72:	f7fe bef9 	b.w	8007b68 <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	200005b4 	.word	0x200005b4

08008d7c <_Balloc>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	69c6      	ldr	r6, [r0, #28]
 8008d80:	4604      	mov	r4, r0
 8008d82:	460d      	mov	r5, r1
 8008d84:	b976      	cbnz	r6, 8008da4 <_Balloc+0x28>
 8008d86:	2010      	movs	r0, #16
 8008d88:	f7ff fe96 	bl	8008ab8 <malloc>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	61e0      	str	r0, [r4, #28]
 8008d90:	b920      	cbnz	r0, 8008d9c <_Balloc+0x20>
 8008d92:	4b18      	ldr	r3, [pc, #96]	@ (8008df4 <_Balloc+0x78>)
 8008d94:	4818      	ldr	r0, [pc, #96]	@ (8008df8 <_Balloc+0x7c>)
 8008d96:	216b      	movs	r1, #107	@ 0x6b
 8008d98:	f000 fc62 	bl	8009660 <__assert_func>
 8008d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da0:	6006      	str	r6, [r0, #0]
 8008da2:	60c6      	str	r6, [r0, #12]
 8008da4:	69e6      	ldr	r6, [r4, #28]
 8008da6:	68f3      	ldr	r3, [r6, #12]
 8008da8:	b183      	cbz	r3, 8008dcc <_Balloc+0x50>
 8008daa:	69e3      	ldr	r3, [r4, #28]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008db2:	b9b8      	cbnz	r0, 8008de4 <_Balloc+0x68>
 8008db4:	2101      	movs	r1, #1
 8008db6:	fa01 f605 	lsl.w	r6, r1, r5
 8008dba:	1d72      	adds	r2, r6, #5
 8008dbc:	0092      	lsls	r2, r2, #2
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 fc6c 	bl	800969c <_calloc_r>
 8008dc4:	b160      	cbz	r0, 8008de0 <_Balloc+0x64>
 8008dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dca:	e00e      	b.n	8008dea <_Balloc+0x6e>
 8008dcc:	2221      	movs	r2, #33	@ 0x21
 8008dce:	2104      	movs	r1, #4
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 fc63 	bl	800969c <_calloc_r>
 8008dd6:	69e3      	ldr	r3, [r4, #28]
 8008dd8:	60f0      	str	r0, [r6, #12]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e4      	bne.n	8008daa <_Balloc+0x2e>
 8008de0:	2000      	movs	r0, #0
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	6802      	ldr	r2, [r0, #0]
 8008de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dea:	2300      	movs	r3, #0
 8008dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008df0:	e7f7      	b.n	8008de2 <_Balloc+0x66>
 8008df2:	bf00      	nop
 8008df4:	0800bdb9 	.word	0x0800bdb9
 8008df8:	0800be4a 	.word	0x0800be4a

08008dfc <_Bfree>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	69c6      	ldr	r6, [r0, #28]
 8008e00:	4605      	mov	r5, r0
 8008e02:	460c      	mov	r4, r1
 8008e04:	b976      	cbnz	r6, 8008e24 <_Bfree+0x28>
 8008e06:	2010      	movs	r0, #16
 8008e08:	f7ff fe56 	bl	8008ab8 <malloc>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	61e8      	str	r0, [r5, #28]
 8008e10:	b920      	cbnz	r0, 8008e1c <_Bfree+0x20>
 8008e12:	4b09      	ldr	r3, [pc, #36]	@ (8008e38 <_Bfree+0x3c>)
 8008e14:	4809      	ldr	r0, [pc, #36]	@ (8008e3c <_Bfree+0x40>)
 8008e16:	218f      	movs	r1, #143	@ 0x8f
 8008e18:	f000 fc22 	bl	8009660 <__assert_func>
 8008e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e20:	6006      	str	r6, [r0, #0]
 8008e22:	60c6      	str	r6, [r0, #12]
 8008e24:	b13c      	cbz	r4, 8008e36 <_Bfree+0x3a>
 8008e26:	69eb      	ldr	r3, [r5, #28]
 8008e28:	6862      	ldr	r2, [r4, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e30:	6021      	str	r1, [r4, #0]
 8008e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	0800bdb9 	.word	0x0800bdb9
 8008e3c:	0800be4a 	.word	0x0800be4a

08008e40 <__multadd>:
 8008e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e44:	690d      	ldr	r5, [r1, #16]
 8008e46:	4607      	mov	r7, r0
 8008e48:	460c      	mov	r4, r1
 8008e4a:	461e      	mov	r6, r3
 8008e4c:	f101 0c14 	add.w	ip, r1, #20
 8008e50:	2000      	movs	r0, #0
 8008e52:	f8dc 3000 	ldr.w	r3, [ip]
 8008e56:	b299      	uxth	r1, r3
 8008e58:	fb02 6101 	mla	r1, r2, r1, r6
 8008e5c:	0c1e      	lsrs	r6, r3, #16
 8008e5e:	0c0b      	lsrs	r3, r1, #16
 8008e60:	fb02 3306 	mla	r3, r2, r6, r3
 8008e64:	b289      	uxth	r1, r1
 8008e66:	3001      	adds	r0, #1
 8008e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e6c:	4285      	cmp	r5, r0
 8008e6e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e76:	dcec      	bgt.n	8008e52 <__multadd+0x12>
 8008e78:	b30e      	cbz	r6, 8008ebe <__multadd+0x7e>
 8008e7a:	68a3      	ldr	r3, [r4, #8]
 8008e7c:	42ab      	cmp	r3, r5
 8008e7e:	dc19      	bgt.n	8008eb4 <__multadd+0x74>
 8008e80:	6861      	ldr	r1, [r4, #4]
 8008e82:	4638      	mov	r0, r7
 8008e84:	3101      	adds	r1, #1
 8008e86:	f7ff ff79 	bl	8008d7c <_Balloc>
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <__multadd+0x5a>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec4 <__multadd+0x84>)
 8008e92:	480d      	ldr	r0, [pc, #52]	@ (8008ec8 <__multadd+0x88>)
 8008e94:	21ba      	movs	r1, #186	@ 0xba
 8008e96:	f000 fbe3 	bl	8009660 <__assert_func>
 8008e9a:	6922      	ldr	r2, [r4, #16]
 8008e9c:	3202      	adds	r2, #2
 8008e9e:	f104 010c 	add.w	r1, r4, #12
 8008ea2:	0092      	lsls	r2, r2, #2
 8008ea4:	300c      	adds	r0, #12
 8008ea6:	f000 fbcd 	bl	8009644 <memcpy>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7ff ffa5 	bl	8008dfc <_Bfree>
 8008eb2:	4644      	mov	r4, r8
 8008eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008eb8:	3501      	adds	r5, #1
 8008eba:	615e      	str	r6, [r3, #20]
 8008ebc:	6125      	str	r5, [r4, #16]
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec4:	0800be28 	.word	0x0800be28
 8008ec8:	0800be4a 	.word	0x0800be4a

08008ecc <__hi0bits>:
 8008ecc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	bf36      	itet	cc
 8008ed4:	0403      	lslcc	r3, r0, #16
 8008ed6:	2000      	movcs	r0, #0
 8008ed8:	2010      	movcc	r0, #16
 8008eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ede:	bf3c      	itt	cc
 8008ee0:	021b      	lslcc	r3, r3, #8
 8008ee2:	3008      	addcc	r0, #8
 8008ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ee8:	bf3c      	itt	cc
 8008eea:	011b      	lslcc	r3, r3, #4
 8008eec:	3004      	addcc	r0, #4
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ef2:	bf3c      	itt	cc
 8008ef4:	009b      	lslcc	r3, r3, #2
 8008ef6:	3002      	addcc	r0, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	db05      	blt.n	8008f08 <__hi0bits+0x3c>
 8008efc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f00:	f100 0001 	add.w	r0, r0, #1
 8008f04:	bf08      	it	eq
 8008f06:	2020      	moveq	r0, #32
 8008f08:	4770      	bx	lr

08008f0a <__lo0bits>:
 8008f0a:	6803      	ldr	r3, [r0, #0]
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	f013 0007 	ands.w	r0, r3, #7
 8008f12:	d00b      	beq.n	8008f2c <__lo0bits+0x22>
 8008f14:	07d9      	lsls	r1, r3, #31
 8008f16:	d421      	bmi.n	8008f5c <__lo0bits+0x52>
 8008f18:	0798      	lsls	r0, r3, #30
 8008f1a:	bf49      	itett	mi
 8008f1c:	085b      	lsrmi	r3, r3, #1
 8008f1e:	089b      	lsrpl	r3, r3, #2
 8008f20:	2001      	movmi	r0, #1
 8008f22:	6013      	strmi	r3, [r2, #0]
 8008f24:	bf5c      	itt	pl
 8008f26:	6013      	strpl	r3, [r2, #0]
 8008f28:	2002      	movpl	r0, #2
 8008f2a:	4770      	bx	lr
 8008f2c:	b299      	uxth	r1, r3
 8008f2e:	b909      	cbnz	r1, 8008f34 <__lo0bits+0x2a>
 8008f30:	0c1b      	lsrs	r3, r3, #16
 8008f32:	2010      	movs	r0, #16
 8008f34:	b2d9      	uxtb	r1, r3
 8008f36:	b909      	cbnz	r1, 8008f3c <__lo0bits+0x32>
 8008f38:	3008      	adds	r0, #8
 8008f3a:	0a1b      	lsrs	r3, r3, #8
 8008f3c:	0719      	lsls	r1, r3, #28
 8008f3e:	bf04      	itt	eq
 8008f40:	091b      	lsreq	r3, r3, #4
 8008f42:	3004      	addeq	r0, #4
 8008f44:	0799      	lsls	r1, r3, #30
 8008f46:	bf04      	itt	eq
 8008f48:	089b      	lsreq	r3, r3, #2
 8008f4a:	3002      	addeq	r0, #2
 8008f4c:	07d9      	lsls	r1, r3, #31
 8008f4e:	d403      	bmi.n	8008f58 <__lo0bits+0x4e>
 8008f50:	085b      	lsrs	r3, r3, #1
 8008f52:	f100 0001 	add.w	r0, r0, #1
 8008f56:	d003      	beq.n	8008f60 <__lo0bits+0x56>
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	4770      	bx	lr
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	4770      	bx	lr
 8008f60:	2020      	movs	r0, #32
 8008f62:	4770      	bx	lr

08008f64 <__i2b>:
 8008f64:	b510      	push	{r4, lr}
 8008f66:	460c      	mov	r4, r1
 8008f68:	2101      	movs	r1, #1
 8008f6a:	f7ff ff07 	bl	8008d7c <_Balloc>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	b928      	cbnz	r0, 8008f7e <__i2b+0x1a>
 8008f72:	4b05      	ldr	r3, [pc, #20]	@ (8008f88 <__i2b+0x24>)
 8008f74:	4805      	ldr	r0, [pc, #20]	@ (8008f8c <__i2b+0x28>)
 8008f76:	f240 1145 	movw	r1, #325	@ 0x145
 8008f7a:	f000 fb71 	bl	8009660 <__assert_func>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	6144      	str	r4, [r0, #20]
 8008f82:	6103      	str	r3, [r0, #16]
 8008f84:	bd10      	pop	{r4, pc}
 8008f86:	bf00      	nop
 8008f88:	0800be28 	.word	0x0800be28
 8008f8c:	0800be4a 	.word	0x0800be4a

08008f90 <__multiply>:
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	4614      	mov	r4, r2
 8008f96:	690a      	ldr	r2, [r1, #16]
 8008f98:	6923      	ldr	r3, [r4, #16]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	bfa8      	it	ge
 8008f9e:	4623      	movge	r3, r4
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	bfa4      	itt	ge
 8008fa4:	460c      	movge	r4, r1
 8008fa6:	461f      	movge	r7, r3
 8008fa8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008fac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	6861      	ldr	r1, [r4, #4]
 8008fb4:	eb0a 0609 	add.w	r6, sl, r9
 8008fb8:	42b3      	cmp	r3, r6
 8008fba:	b085      	sub	sp, #20
 8008fbc:	bfb8      	it	lt
 8008fbe:	3101      	addlt	r1, #1
 8008fc0:	f7ff fedc 	bl	8008d7c <_Balloc>
 8008fc4:	b930      	cbnz	r0, 8008fd4 <__multiply+0x44>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	4b44      	ldr	r3, [pc, #272]	@ (80090dc <__multiply+0x14c>)
 8008fca:	4845      	ldr	r0, [pc, #276]	@ (80090e0 <__multiply+0x150>)
 8008fcc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008fd0:	f000 fb46 	bl	8009660 <__assert_func>
 8008fd4:	f100 0514 	add.w	r5, r0, #20
 8008fd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fdc:	462b      	mov	r3, r5
 8008fde:	2200      	movs	r2, #0
 8008fe0:	4543      	cmp	r3, r8
 8008fe2:	d321      	bcc.n	8009028 <__multiply+0x98>
 8008fe4:	f107 0114 	add.w	r1, r7, #20
 8008fe8:	f104 0214 	add.w	r2, r4, #20
 8008fec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ff0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ff4:	9302      	str	r3, [sp, #8]
 8008ff6:	1b13      	subs	r3, r2, r4
 8008ff8:	3b15      	subs	r3, #21
 8008ffa:	f023 0303 	bic.w	r3, r3, #3
 8008ffe:	3304      	adds	r3, #4
 8009000:	f104 0715 	add.w	r7, r4, #21
 8009004:	42ba      	cmp	r2, r7
 8009006:	bf38      	it	cc
 8009008:	2304      	movcc	r3, #4
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	9b02      	ldr	r3, [sp, #8]
 800900e:	9103      	str	r1, [sp, #12]
 8009010:	428b      	cmp	r3, r1
 8009012:	d80c      	bhi.n	800902e <__multiply+0x9e>
 8009014:	2e00      	cmp	r6, #0
 8009016:	dd03      	ble.n	8009020 <__multiply+0x90>
 8009018:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800901c:	2b00      	cmp	r3, #0
 800901e:	d05b      	beq.n	80090d8 <__multiply+0x148>
 8009020:	6106      	str	r6, [r0, #16]
 8009022:	b005      	add	sp, #20
 8009024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009028:	f843 2b04 	str.w	r2, [r3], #4
 800902c:	e7d8      	b.n	8008fe0 <__multiply+0x50>
 800902e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009032:	f1ba 0f00 	cmp.w	sl, #0
 8009036:	d024      	beq.n	8009082 <__multiply+0xf2>
 8009038:	f104 0e14 	add.w	lr, r4, #20
 800903c:	46a9      	mov	r9, r5
 800903e:	f04f 0c00 	mov.w	ip, #0
 8009042:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009046:	f8d9 3000 	ldr.w	r3, [r9]
 800904a:	fa1f fb87 	uxth.w	fp, r7
 800904e:	b29b      	uxth	r3, r3
 8009050:	fb0a 330b 	mla	r3, sl, fp, r3
 8009054:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009058:	f8d9 7000 	ldr.w	r7, [r9]
 800905c:	4463      	add	r3, ip
 800905e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009062:	fb0a c70b 	mla	r7, sl, fp, ip
 8009066:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800906a:	b29b      	uxth	r3, r3
 800906c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009070:	4572      	cmp	r2, lr
 8009072:	f849 3b04 	str.w	r3, [r9], #4
 8009076:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800907a:	d8e2      	bhi.n	8009042 <__multiply+0xb2>
 800907c:	9b01      	ldr	r3, [sp, #4]
 800907e:	f845 c003 	str.w	ip, [r5, r3]
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009088:	3104      	adds	r1, #4
 800908a:	f1b9 0f00 	cmp.w	r9, #0
 800908e:	d021      	beq.n	80090d4 <__multiply+0x144>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	f104 0c14 	add.w	ip, r4, #20
 8009096:	46ae      	mov	lr, r5
 8009098:	f04f 0a00 	mov.w	sl, #0
 800909c:	f8bc b000 	ldrh.w	fp, [ip]
 80090a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80090a4:	fb09 770b 	mla	r7, r9, fp, r7
 80090a8:	4457      	add	r7, sl
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80090b0:	f84e 3b04 	str.w	r3, [lr], #4
 80090b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090bc:	f8be 3000 	ldrh.w	r3, [lr]
 80090c0:	fb09 330a 	mla	r3, r9, sl, r3
 80090c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80090c8:	4562      	cmp	r2, ip
 80090ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090ce:	d8e5      	bhi.n	800909c <__multiply+0x10c>
 80090d0:	9f01      	ldr	r7, [sp, #4]
 80090d2:	51eb      	str	r3, [r5, r7]
 80090d4:	3504      	adds	r5, #4
 80090d6:	e799      	b.n	800900c <__multiply+0x7c>
 80090d8:	3e01      	subs	r6, #1
 80090da:	e79b      	b.n	8009014 <__multiply+0x84>
 80090dc:	0800be28 	.word	0x0800be28
 80090e0:	0800be4a 	.word	0x0800be4a

080090e4 <__pow5mult>:
 80090e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e8:	4615      	mov	r5, r2
 80090ea:	f012 0203 	ands.w	r2, r2, #3
 80090ee:	4607      	mov	r7, r0
 80090f0:	460e      	mov	r6, r1
 80090f2:	d007      	beq.n	8009104 <__pow5mult+0x20>
 80090f4:	4c25      	ldr	r4, [pc, #148]	@ (800918c <__pow5mult+0xa8>)
 80090f6:	3a01      	subs	r2, #1
 80090f8:	2300      	movs	r3, #0
 80090fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090fe:	f7ff fe9f 	bl	8008e40 <__multadd>
 8009102:	4606      	mov	r6, r0
 8009104:	10ad      	asrs	r5, r5, #2
 8009106:	d03d      	beq.n	8009184 <__pow5mult+0xa0>
 8009108:	69fc      	ldr	r4, [r7, #28]
 800910a:	b97c      	cbnz	r4, 800912c <__pow5mult+0x48>
 800910c:	2010      	movs	r0, #16
 800910e:	f7ff fcd3 	bl	8008ab8 <malloc>
 8009112:	4602      	mov	r2, r0
 8009114:	61f8      	str	r0, [r7, #28]
 8009116:	b928      	cbnz	r0, 8009124 <__pow5mult+0x40>
 8009118:	4b1d      	ldr	r3, [pc, #116]	@ (8009190 <__pow5mult+0xac>)
 800911a:	481e      	ldr	r0, [pc, #120]	@ (8009194 <__pow5mult+0xb0>)
 800911c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009120:	f000 fa9e 	bl	8009660 <__assert_func>
 8009124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009128:	6004      	str	r4, [r0, #0]
 800912a:	60c4      	str	r4, [r0, #12]
 800912c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009134:	b94c      	cbnz	r4, 800914a <__pow5mult+0x66>
 8009136:	f240 2171 	movw	r1, #625	@ 0x271
 800913a:	4638      	mov	r0, r7
 800913c:	f7ff ff12 	bl	8008f64 <__i2b>
 8009140:	2300      	movs	r3, #0
 8009142:	f8c8 0008 	str.w	r0, [r8, #8]
 8009146:	4604      	mov	r4, r0
 8009148:	6003      	str	r3, [r0, #0]
 800914a:	f04f 0900 	mov.w	r9, #0
 800914e:	07eb      	lsls	r3, r5, #31
 8009150:	d50a      	bpl.n	8009168 <__pow5mult+0x84>
 8009152:	4631      	mov	r1, r6
 8009154:	4622      	mov	r2, r4
 8009156:	4638      	mov	r0, r7
 8009158:	f7ff ff1a 	bl	8008f90 <__multiply>
 800915c:	4631      	mov	r1, r6
 800915e:	4680      	mov	r8, r0
 8009160:	4638      	mov	r0, r7
 8009162:	f7ff fe4b 	bl	8008dfc <_Bfree>
 8009166:	4646      	mov	r6, r8
 8009168:	106d      	asrs	r5, r5, #1
 800916a:	d00b      	beq.n	8009184 <__pow5mult+0xa0>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	b938      	cbnz	r0, 8009180 <__pow5mult+0x9c>
 8009170:	4622      	mov	r2, r4
 8009172:	4621      	mov	r1, r4
 8009174:	4638      	mov	r0, r7
 8009176:	f7ff ff0b 	bl	8008f90 <__multiply>
 800917a:	6020      	str	r0, [r4, #0]
 800917c:	f8c0 9000 	str.w	r9, [r0]
 8009180:	4604      	mov	r4, r0
 8009182:	e7e4      	b.n	800914e <__pow5mult+0x6a>
 8009184:	4630      	mov	r0, r6
 8009186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800918a:	bf00      	nop
 800918c:	0800bea4 	.word	0x0800bea4
 8009190:	0800bdb9 	.word	0x0800bdb9
 8009194:	0800be4a 	.word	0x0800be4a

08009198 <__lshift>:
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	460c      	mov	r4, r1
 800919e:	6849      	ldr	r1, [r1, #4]
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091a6:	68a3      	ldr	r3, [r4, #8]
 80091a8:	4607      	mov	r7, r0
 80091aa:	4691      	mov	r9, r2
 80091ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091b0:	f108 0601 	add.w	r6, r8, #1
 80091b4:	42b3      	cmp	r3, r6
 80091b6:	db0b      	blt.n	80091d0 <__lshift+0x38>
 80091b8:	4638      	mov	r0, r7
 80091ba:	f7ff fddf 	bl	8008d7c <_Balloc>
 80091be:	4605      	mov	r5, r0
 80091c0:	b948      	cbnz	r0, 80091d6 <__lshift+0x3e>
 80091c2:	4602      	mov	r2, r0
 80091c4:	4b28      	ldr	r3, [pc, #160]	@ (8009268 <__lshift+0xd0>)
 80091c6:	4829      	ldr	r0, [pc, #164]	@ (800926c <__lshift+0xd4>)
 80091c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80091cc:	f000 fa48 	bl	8009660 <__assert_func>
 80091d0:	3101      	adds	r1, #1
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	e7ee      	b.n	80091b4 <__lshift+0x1c>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f100 0114 	add.w	r1, r0, #20
 80091dc:	f100 0210 	add.w	r2, r0, #16
 80091e0:	4618      	mov	r0, r3
 80091e2:	4553      	cmp	r3, sl
 80091e4:	db33      	blt.n	800924e <__lshift+0xb6>
 80091e6:	6920      	ldr	r0, [r4, #16]
 80091e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091ec:	f104 0314 	add.w	r3, r4, #20
 80091f0:	f019 091f 	ands.w	r9, r9, #31
 80091f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091fc:	d02b      	beq.n	8009256 <__lshift+0xbe>
 80091fe:	f1c9 0e20 	rsb	lr, r9, #32
 8009202:	468a      	mov	sl, r1
 8009204:	2200      	movs	r2, #0
 8009206:	6818      	ldr	r0, [r3, #0]
 8009208:	fa00 f009 	lsl.w	r0, r0, r9
 800920c:	4310      	orrs	r0, r2
 800920e:	f84a 0b04 	str.w	r0, [sl], #4
 8009212:	f853 2b04 	ldr.w	r2, [r3], #4
 8009216:	459c      	cmp	ip, r3
 8009218:	fa22 f20e 	lsr.w	r2, r2, lr
 800921c:	d8f3      	bhi.n	8009206 <__lshift+0x6e>
 800921e:	ebac 0304 	sub.w	r3, ip, r4
 8009222:	3b15      	subs	r3, #21
 8009224:	f023 0303 	bic.w	r3, r3, #3
 8009228:	3304      	adds	r3, #4
 800922a:	f104 0015 	add.w	r0, r4, #21
 800922e:	4584      	cmp	ip, r0
 8009230:	bf38      	it	cc
 8009232:	2304      	movcc	r3, #4
 8009234:	50ca      	str	r2, [r1, r3]
 8009236:	b10a      	cbz	r2, 800923c <__lshift+0xa4>
 8009238:	f108 0602 	add.w	r6, r8, #2
 800923c:	3e01      	subs	r6, #1
 800923e:	4638      	mov	r0, r7
 8009240:	612e      	str	r6, [r5, #16]
 8009242:	4621      	mov	r1, r4
 8009244:	f7ff fdda 	bl	8008dfc <_Bfree>
 8009248:	4628      	mov	r0, r5
 800924a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009252:	3301      	adds	r3, #1
 8009254:	e7c5      	b.n	80091e2 <__lshift+0x4a>
 8009256:	3904      	subs	r1, #4
 8009258:	f853 2b04 	ldr.w	r2, [r3], #4
 800925c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009260:	459c      	cmp	ip, r3
 8009262:	d8f9      	bhi.n	8009258 <__lshift+0xc0>
 8009264:	e7ea      	b.n	800923c <__lshift+0xa4>
 8009266:	bf00      	nop
 8009268:	0800be28 	.word	0x0800be28
 800926c:	0800be4a 	.word	0x0800be4a

08009270 <__mcmp>:
 8009270:	690a      	ldr	r2, [r1, #16]
 8009272:	4603      	mov	r3, r0
 8009274:	6900      	ldr	r0, [r0, #16]
 8009276:	1a80      	subs	r0, r0, r2
 8009278:	b530      	push	{r4, r5, lr}
 800927a:	d10e      	bne.n	800929a <__mcmp+0x2a>
 800927c:	3314      	adds	r3, #20
 800927e:	3114      	adds	r1, #20
 8009280:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009284:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009288:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800928c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009290:	4295      	cmp	r5, r2
 8009292:	d003      	beq.n	800929c <__mcmp+0x2c>
 8009294:	d205      	bcs.n	80092a2 <__mcmp+0x32>
 8009296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800929a:	bd30      	pop	{r4, r5, pc}
 800929c:	42a3      	cmp	r3, r4
 800929e:	d3f3      	bcc.n	8009288 <__mcmp+0x18>
 80092a0:	e7fb      	b.n	800929a <__mcmp+0x2a>
 80092a2:	2001      	movs	r0, #1
 80092a4:	e7f9      	b.n	800929a <__mcmp+0x2a>
	...

080092a8 <__mdiff>:
 80092a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	4689      	mov	r9, r1
 80092ae:	4606      	mov	r6, r0
 80092b0:	4611      	mov	r1, r2
 80092b2:	4648      	mov	r0, r9
 80092b4:	4614      	mov	r4, r2
 80092b6:	f7ff ffdb 	bl	8009270 <__mcmp>
 80092ba:	1e05      	subs	r5, r0, #0
 80092bc:	d112      	bne.n	80092e4 <__mdiff+0x3c>
 80092be:	4629      	mov	r1, r5
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7ff fd5b 	bl	8008d7c <_Balloc>
 80092c6:	4602      	mov	r2, r0
 80092c8:	b928      	cbnz	r0, 80092d6 <__mdiff+0x2e>
 80092ca:	4b3f      	ldr	r3, [pc, #252]	@ (80093c8 <__mdiff+0x120>)
 80092cc:	f240 2137 	movw	r1, #567	@ 0x237
 80092d0:	483e      	ldr	r0, [pc, #248]	@ (80093cc <__mdiff+0x124>)
 80092d2:	f000 f9c5 	bl	8009660 <__assert_func>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092dc:	4610      	mov	r0, r2
 80092de:	b003      	add	sp, #12
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	bfbc      	itt	lt
 80092e6:	464b      	movlt	r3, r9
 80092e8:	46a1      	movlt	r9, r4
 80092ea:	4630      	mov	r0, r6
 80092ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80092f0:	bfba      	itte	lt
 80092f2:	461c      	movlt	r4, r3
 80092f4:	2501      	movlt	r5, #1
 80092f6:	2500      	movge	r5, #0
 80092f8:	f7ff fd40 	bl	8008d7c <_Balloc>
 80092fc:	4602      	mov	r2, r0
 80092fe:	b918      	cbnz	r0, 8009308 <__mdiff+0x60>
 8009300:	4b31      	ldr	r3, [pc, #196]	@ (80093c8 <__mdiff+0x120>)
 8009302:	f240 2145 	movw	r1, #581	@ 0x245
 8009306:	e7e3      	b.n	80092d0 <__mdiff+0x28>
 8009308:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800930c:	6926      	ldr	r6, [r4, #16]
 800930e:	60c5      	str	r5, [r0, #12]
 8009310:	f109 0310 	add.w	r3, r9, #16
 8009314:	f109 0514 	add.w	r5, r9, #20
 8009318:	f104 0e14 	add.w	lr, r4, #20
 800931c:	f100 0b14 	add.w	fp, r0, #20
 8009320:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009324:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	46d9      	mov	r9, fp
 800932c:	f04f 0c00 	mov.w	ip, #0
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009336:	f853 af04 	ldr.w	sl, [r3, #4]!
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	fa1f f38a 	uxth.w	r3, sl
 8009340:	4619      	mov	r1, r3
 8009342:	b283      	uxth	r3, r0
 8009344:	1acb      	subs	r3, r1, r3
 8009346:	0c00      	lsrs	r0, r0, #16
 8009348:	4463      	add	r3, ip
 800934a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800934e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009352:	b29b      	uxth	r3, r3
 8009354:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009358:	4576      	cmp	r6, lr
 800935a:	f849 3b04 	str.w	r3, [r9], #4
 800935e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009362:	d8e5      	bhi.n	8009330 <__mdiff+0x88>
 8009364:	1b33      	subs	r3, r6, r4
 8009366:	3b15      	subs	r3, #21
 8009368:	f023 0303 	bic.w	r3, r3, #3
 800936c:	3415      	adds	r4, #21
 800936e:	3304      	adds	r3, #4
 8009370:	42a6      	cmp	r6, r4
 8009372:	bf38      	it	cc
 8009374:	2304      	movcc	r3, #4
 8009376:	441d      	add	r5, r3
 8009378:	445b      	add	r3, fp
 800937a:	461e      	mov	r6, r3
 800937c:	462c      	mov	r4, r5
 800937e:	4544      	cmp	r4, r8
 8009380:	d30e      	bcc.n	80093a0 <__mdiff+0xf8>
 8009382:	f108 0103 	add.w	r1, r8, #3
 8009386:	1b49      	subs	r1, r1, r5
 8009388:	f021 0103 	bic.w	r1, r1, #3
 800938c:	3d03      	subs	r5, #3
 800938e:	45a8      	cmp	r8, r5
 8009390:	bf38      	it	cc
 8009392:	2100      	movcc	r1, #0
 8009394:	440b      	add	r3, r1
 8009396:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800939a:	b191      	cbz	r1, 80093c2 <__mdiff+0x11a>
 800939c:	6117      	str	r7, [r2, #16]
 800939e:	e79d      	b.n	80092dc <__mdiff+0x34>
 80093a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80093a4:	46e6      	mov	lr, ip
 80093a6:	0c08      	lsrs	r0, r1, #16
 80093a8:	fa1c fc81 	uxtah	ip, ip, r1
 80093ac:	4471      	add	r1, lr
 80093ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093b2:	b289      	uxth	r1, r1
 80093b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093b8:	f846 1b04 	str.w	r1, [r6], #4
 80093bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093c0:	e7dd      	b.n	800937e <__mdiff+0xd6>
 80093c2:	3f01      	subs	r7, #1
 80093c4:	e7e7      	b.n	8009396 <__mdiff+0xee>
 80093c6:	bf00      	nop
 80093c8:	0800be28 	.word	0x0800be28
 80093cc:	0800be4a 	.word	0x0800be4a

080093d0 <__d2b>:
 80093d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093d4:	460f      	mov	r7, r1
 80093d6:	2101      	movs	r1, #1
 80093d8:	ec59 8b10 	vmov	r8, r9, d0
 80093dc:	4616      	mov	r6, r2
 80093de:	f7ff fccd 	bl	8008d7c <_Balloc>
 80093e2:	4604      	mov	r4, r0
 80093e4:	b930      	cbnz	r0, 80093f4 <__d2b+0x24>
 80093e6:	4602      	mov	r2, r0
 80093e8:	4b23      	ldr	r3, [pc, #140]	@ (8009478 <__d2b+0xa8>)
 80093ea:	4824      	ldr	r0, [pc, #144]	@ (800947c <__d2b+0xac>)
 80093ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80093f0:	f000 f936 	bl	8009660 <__assert_func>
 80093f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093fc:	b10d      	cbz	r5, 8009402 <__d2b+0x32>
 80093fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	f1b8 0300 	subs.w	r3, r8, #0
 8009408:	d023      	beq.n	8009452 <__d2b+0x82>
 800940a:	4668      	mov	r0, sp
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	f7ff fd7c 	bl	8008f0a <__lo0bits>
 8009412:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009416:	b1d0      	cbz	r0, 800944e <__d2b+0x7e>
 8009418:	f1c0 0320 	rsb	r3, r0, #32
 800941c:	fa02 f303 	lsl.w	r3, r2, r3
 8009420:	430b      	orrs	r3, r1
 8009422:	40c2      	lsrs	r2, r0
 8009424:	6163      	str	r3, [r4, #20]
 8009426:	9201      	str	r2, [sp, #4]
 8009428:	9b01      	ldr	r3, [sp, #4]
 800942a:	61a3      	str	r3, [r4, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	bf0c      	ite	eq
 8009430:	2201      	moveq	r2, #1
 8009432:	2202      	movne	r2, #2
 8009434:	6122      	str	r2, [r4, #16]
 8009436:	b1a5      	cbz	r5, 8009462 <__d2b+0x92>
 8009438:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800943c:	4405      	add	r5, r0
 800943e:	603d      	str	r5, [r7, #0]
 8009440:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009444:	6030      	str	r0, [r6, #0]
 8009446:	4620      	mov	r0, r4
 8009448:	b003      	add	sp, #12
 800944a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800944e:	6161      	str	r1, [r4, #20]
 8009450:	e7ea      	b.n	8009428 <__d2b+0x58>
 8009452:	a801      	add	r0, sp, #4
 8009454:	f7ff fd59 	bl	8008f0a <__lo0bits>
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	6163      	str	r3, [r4, #20]
 800945c:	3020      	adds	r0, #32
 800945e:	2201      	movs	r2, #1
 8009460:	e7e8      	b.n	8009434 <__d2b+0x64>
 8009462:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009466:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800946a:	6038      	str	r0, [r7, #0]
 800946c:	6918      	ldr	r0, [r3, #16]
 800946e:	f7ff fd2d 	bl	8008ecc <__hi0bits>
 8009472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009476:	e7e5      	b.n	8009444 <__d2b+0x74>
 8009478:	0800be28 	.word	0x0800be28
 800947c:	0800be4a 	.word	0x0800be4a

08009480 <__sread>:
 8009480:	b510      	push	{r4, lr}
 8009482:	460c      	mov	r4, r1
 8009484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009488:	f000 f8a8 	bl	80095dc <_read_r>
 800948c:	2800      	cmp	r0, #0
 800948e:	bfab      	itete	ge
 8009490:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009492:	89a3      	ldrhlt	r3, [r4, #12]
 8009494:	181b      	addge	r3, r3, r0
 8009496:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800949a:	bfac      	ite	ge
 800949c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800949e:	81a3      	strhlt	r3, [r4, #12]
 80094a0:	bd10      	pop	{r4, pc}

080094a2 <__swrite>:
 80094a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a6:	461f      	mov	r7, r3
 80094a8:	898b      	ldrh	r3, [r1, #12]
 80094aa:	05db      	lsls	r3, r3, #23
 80094ac:	4605      	mov	r5, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	4616      	mov	r6, r2
 80094b2:	d505      	bpl.n	80094c0 <__swrite+0x1e>
 80094b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b8:	2302      	movs	r3, #2
 80094ba:	2200      	movs	r2, #0
 80094bc:	f000 f87c 	bl	80095b8 <_lseek_r>
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094ca:	81a3      	strh	r3, [r4, #12]
 80094cc:	4632      	mov	r2, r6
 80094ce:	463b      	mov	r3, r7
 80094d0:	4628      	mov	r0, r5
 80094d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094d6:	f000 b8a3 	b.w	8009620 <_write_r>

080094da <__sseek>:
 80094da:	b510      	push	{r4, lr}
 80094dc:	460c      	mov	r4, r1
 80094de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e2:	f000 f869 	bl	80095b8 <_lseek_r>
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	bf15      	itete	ne
 80094ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094f6:	81a3      	strheq	r3, [r4, #12]
 80094f8:	bf18      	it	ne
 80094fa:	81a3      	strhne	r3, [r4, #12]
 80094fc:	bd10      	pop	{r4, pc}

080094fe <__sclose>:
 80094fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009502:	f000 b849 	b.w	8009598 <_close_r>

08009506 <_realloc_r>:
 8009506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950a:	4680      	mov	r8, r0
 800950c:	4615      	mov	r5, r2
 800950e:	460c      	mov	r4, r1
 8009510:	b921      	cbnz	r1, 800951c <_realloc_r+0x16>
 8009512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	4611      	mov	r1, r2
 8009518:	f7ff baf8 	b.w	8008b0c <_malloc_r>
 800951c:	b92a      	cbnz	r2, 800952a <_realloc_r+0x24>
 800951e:	f000 f8d1 	bl	80096c4 <_free_r>
 8009522:	2400      	movs	r4, #0
 8009524:	4620      	mov	r0, r4
 8009526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952a:	f000 f927 	bl	800977c <_malloc_usable_size_r>
 800952e:	4285      	cmp	r5, r0
 8009530:	4606      	mov	r6, r0
 8009532:	d802      	bhi.n	800953a <_realloc_r+0x34>
 8009534:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009538:	d8f4      	bhi.n	8009524 <_realloc_r+0x1e>
 800953a:	4629      	mov	r1, r5
 800953c:	4640      	mov	r0, r8
 800953e:	f7ff fae5 	bl	8008b0c <_malloc_r>
 8009542:	4607      	mov	r7, r0
 8009544:	2800      	cmp	r0, #0
 8009546:	d0ec      	beq.n	8009522 <_realloc_r+0x1c>
 8009548:	42b5      	cmp	r5, r6
 800954a:	462a      	mov	r2, r5
 800954c:	4621      	mov	r1, r4
 800954e:	bf28      	it	cs
 8009550:	4632      	movcs	r2, r6
 8009552:	f000 f877 	bl	8009644 <memcpy>
 8009556:	4621      	mov	r1, r4
 8009558:	4640      	mov	r0, r8
 800955a:	f000 f8b3 	bl	80096c4 <_free_r>
 800955e:	463c      	mov	r4, r7
 8009560:	e7e0      	b.n	8009524 <_realloc_r+0x1e>

08009562 <memmove>:
 8009562:	4288      	cmp	r0, r1
 8009564:	b510      	push	{r4, lr}
 8009566:	eb01 0402 	add.w	r4, r1, r2
 800956a:	d902      	bls.n	8009572 <memmove+0x10>
 800956c:	4284      	cmp	r4, r0
 800956e:	4623      	mov	r3, r4
 8009570:	d807      	bhi.n	8009582 <memmove+0x20>
 8009572:	1e43      	subs	r3, r0, #1
 8009574:	42a1      	cmp	r1, r4
 8009576:	d008      	beq.n	800958a <memmove+0x28>
 8009578:	f811 2b01 	ldrb.w	r2, [r1], #1
 800957c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009580:	e7f8      	b.n	8009574 <memmove+0x12>
 8009582:	4402      	add	r2, r0
 8009584:	4601      	mov	r1, r0
 8009586:	428a      	cmp	r2, r1
 8009588:	d100      	bne.n	800958c <memmove+0x2a>
 800958a:	bd10      	pop	{r4, pc}
 800958c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009590:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009594:	e7f7      	b.n	8009586 <memmove+0x24>
	...

08009598 <_close_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d06      	ldr	r5, [pc, #24]	@ (80095b4 <_close_r+0x1c>)
 800959c:	2300      	movs	r3, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	602b      	str	r3, [r5, #0]
 80095a4:	f7f9 f802 	bl	80025ac <_close>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_close_r+0x1a>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_close_r+0x1a>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	200005c0 	.word	0x200005c0

080095b8 <_lseek_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d07      	ldr	r5, [pc, #28]	@ (80095d8 <_lseek_r+0x20>)
 80095bc:	4604      	mov	r4, r0
 80095be:	4608      	mov	r0, r1
 80095c0:	4611      	mov	r1, r2
 80095c2:	2200      	movs	r2, #0
 80095c4:	602a      	str	r2, [r5, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	f7f9 f817 	bl	80025fa <_lseek>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_lseek_r+0x1e>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_lseek_r+0x1e>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	200005c0 	.word	0x200005c0

080095dc <_read_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d07      	ldr	r5, [pc, #28]	@ (80095fc <_read_r+0x20>)
 80095e0:	4604      	mov	r4, r0
 80095e2:	4608      	mov	r0, r1
 80095e4:	4611      	mov	r1, r2
 80095e6:	2200      	movs	r2, #0
 80095e8:	602a      	str	r2, [r5, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	f7f8 ffa5 	bl	800253a <_read>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d102      	bne.n	80095fa <_read_r+0x1e>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	b103      	cbz	r3, 80095fa <_read_r+0x1e>
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	200005c0 	.word	0x200005c0

08009600 <_sbrk_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d06      	ldr	r5, [pc, #24]	@ (800961c <_sbrk_r+0x1c>)
 8009604:	2300      	movs	r3, #0
 8009606:	4604      	mov	r4, r0
 8009608:	4608      	mov	r0, r1
 800960a:	602b      	str	r3, [r5, #0]
 800960c:	f7f9 f802 	bl	8002614 <_sbrk>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_sbrk_r+0x1a>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	b103      	cbz	r3, 800961a <_sbrk_r+0x1a>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	200005c0 	.word	0x200005c0

08009620 <_write_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d07      	ldr	r5, [pc, #28]	@ (8009640 <_write_r+0x20>)
 8009624:	4604      	mov	r4, r0
 8009626:	4608      	mov	r0, r1
 8009628:	4611      	mov	r1, r2
 800962a:	2200      	movs	r2, #0
 800962c:	602a      	str	r2, [r5, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	f7f8 ffa0 	bl	8002574 <_write>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_write_r+0x1e>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_write_r+0x1e>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	200005c0 	.word	0x200005c0

08009644 <memcpy>:
 8009644:	440a      	add	r2, r1
 8009646:	4291      	cmp	r1, r2
 8009648:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800964c:	d100      	bne.n	8009650 <memcpy+0xc>
 800964e:	4770      	bx	lr
 8009650:	b510      	push	{r4, lr}
 8009652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800965a:	4291      	cmp	r1, r2
 800965c:	d1f9      	bne.n	8009652 <memcpy+0xe>
 800965e:	bd10      	pop	{r4, pc}

08009660 <__assert_func>:
 8009660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009662:	4614      	mov	r4, r2
 8009664:	461a      	mov	r2, r3
 8009666:	4b09      	ldr	r3, [pc, #36]	@ (800968c <__assert_func+0x2c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4605      	mov	r5, r0
 800966c:	68d8      	ldr	r0, [r3, #12]
 800966e:	b954      	cbnz	r4, 8009686 <__assert_func+0x26>
 8009670:	4b07      	ldr	r3, [pc, #28]	@ (8009690 <__assert_func+0x30>)
 8009672:	461c      	mov	r4, r3
 8009674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009678:	9100      	str	r1, [sp, #0]
 800967a:	462b      	mov	r3, r5
 800967c:	4905      	ldr	r1, [pc, #20]	@ (8009694 <__assert_func+0x34>)
 800967e:	f000 f885 	bl	800978c <fiprintf>
 8009682:	f000 f8a2 	bl	80097ca <abort>
 8009686:	4b04      	ldr	r3, [pc, #16]	@ (8009698 <__assert_func+0x38>)
 8009688:	e7f4      	b.n	8009674 <__assert_func+0x14>
 800968a:	bf00      	nop
 800968c:	20000018 	.word	0x20000018
 8009690:	0800c0e6 	.word	0x0800c0e6
 8009694:	0800c0b8 	.word	0x0800c0b8
 8009698:	0800c0ab 	.word	0x0800c0ab

0800969c <_calloc_r>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	fba1 5402 	umull	r5, r4, r1, r2
 80096a2:	b93c      	cbnz	r4, 80096b4 <_calloc_r+0x18>
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7ff fa31 	bl	8008b0c <_malloc_r>
 80096aa:	4606      	mov	r6, r0
 80096ac:	b928      	cbnz	r0, 80096ba <_calloc_r+0x1e>
 80096ae:	2600      	movs	r6, #0
 80096b0:	4630      	mov	r0, r6
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	220c      	movs	r2, #12
 80096b6:	6002      	str	r2, [r0, #0]
 80096b8:	e7f9      	b.n	80096ae <_calloc_r+0x12>
 80096ba:	462a      	mov	r2, r5
 80096bc:	4621      	mov	r1, r4
 80096be:	f7fe fa1b 	bl	8007af8 <memset>
 80096c2:	e7f5      	b.n	80096b0 <_calloc_r+0x14>

080096c4 <_free_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4605      	mov	r5, r0
 80096c8:	2900      	cmp	r1, #0
 80096ca:	d041      	beq.n	8009750 <_free_r+0x8c>
 80096cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096d0:	1f0c      	subs	r4, r1, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	bfb8      	it	lt
 80096d6:	18e4      	addlt	r4, r4, r3
 80096d8:	f7ff fb44 	bl	8008d64 <__malloc_lock>
 80096dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009754 <_free_r+0x90>)
 80096de:	6813      	ldr	r3, [r2, #0]
 80096e0:	b933      	cbnz	r3, 80096f0 <_free_r+0x2c>
 80096e2:	6063      	str	r3, [r4, #4]
 80096e4:	6014      	str	r4, [r2, #0]
 80096e6:	4628      	mov	r0, r5
 80096e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ec:	f7ff bb40 	b.w	8008d70 <__malloc_unlock>
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	d908      	bls.n	8009706 <_free_r+0x42>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	1821      	adds	r1, r4, r0
 80096f8:	428b      	cmp	r3, r1
 80096fa:	bf01      	itttt	eq
 80096fc:	6819      	ldreq	r1, [r3, #0]
 80096fe:	685b      	ldreq	r3, [r3, #4]
 8009700:	1809      	addeq	r1, r1, r0
 8009702:	6021      	streq	r1, [r4, #0]
 8009704:	e7ed      	b.n	80096e2 <_free_r+0x1e>
 8009706:	461a      	mov	r2, r3
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	b10b      	cbz	r3, 8009710 <_free_r+0x4c>
 800970c:	42a3      	cmp	r3, r4
 800970e:	d9fa      	bls.n	8009706 <_free_r+0x42>
 8009710:	6811      	ldr	r1, [r2, #0]
 8009712:	1850      	adds	r0, r2, r1
 8009714:	42a0      	cmp	r0, r4
 8009716:	d10b      	bne.n	8009730 <_free_r+0x6c>
 8009718:	6820      	ldr	r0, [r4, #0]
 800971a:	4401      	add	r1, r0
 800971c:	1850      	adds	r0, r2, r1
 800971e:	4283      	cmp	r3, r0
 8009720:	6011      	str	r1, [r2, #0]
 8009722:	d1e0      	bne.n	80096e6 <_free_r+0x22>
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	6053      	str	r3, [r2, #4]
 800972a:	4408      	add	r0, r1
 800972c:	6010      	str	r0, [r2, #0]
 800972e:	e7da      	b.n	80096e6 <_free_r+0x22>
 8009730:	d902      	bls.n	8009738 <_free_r+0x74>
 8009732:	230c      	movs	r3, #12
 8009734:	602b      	str	r3, [r5, #0]
 8009736:	e7d6      	b.n	80096e6 <_free_r+0x22>
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	1821      	adds	r1, r4, r0
 800973c:	428b      	cmp	r3, r1
 800973e:	bf04      	itt	eq
 8009740:	6819      	ldreq	r1, [r3, #0]
 8009742:	685b      	ldreq	r3, [r3, #4]
 8009744:	6063      	str	r3, [r4, #4]
 8009746:	bf04      	itt	eq
 8009748:	1809      	addeq	r1, r1, r0
 800974a:	6021      	streq	r1, [r4, #0]
 800974c:	6054      	str	r4, [r2, #4]
 800974e:	e7ca      	b.n	80096e6 <_free_r+0x22>
 8009750:	bd38      	pop	{r3, r4, r5, pc}
 8009752:	bf00      	nop
 8009754:	200005bc 	.word	0x200005bc

08009758 <__ascii_mbtowc>:
 8009758:	b082      	sub	sp, #8
 800975a:	b901      	cbnz	r1, 800975e <__ascii_mbtowc+0x6>
 800975c:	a901      	add	r1, sp, #4
 800975e:	b142      	cbz	r2, 8009772 <__ascii_mbtowc+0x1a>
 8009760:	b14b      	cbz	r3, 8009776 <__ascii_mbtowc+0x1e>
 8009762:	7813      	ldrb	r3, [r2, #0]
 8009764:	600b      	str	r3, [r1, #0]
 8009766:	7812      	ldrb	r2, [r2, #0]
 8009768:	1e10      	subs	r0, r2, #0
 800976a:	bf18      	it	ne
 800976c:	2001      	movne	r0, #1
 800976e:	b002      	add	sp, #8
 8009770:	4770      	bx	lr
 8009772:	4610      	mov	r0, r2
 8009774:	e7fb      	b.n	800976e <__ascii_mbtowc+0x16>
 8009776:	f06f 0001 	mvn.w	r0, #1
 800977a:	e7f8      	b.n	800976e <__ascii_mbtowc+0x16>

0800977c <_malloc_usable_size_r>:
 800977c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009780:	1f18      	subs	r0, r3, #4
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfbc      	itt	lt
 8009786:	580b      	ldrlt	r3, [r1, r0]
 8009788:	18c0      	addlt	r0, r0, r3
 800978a:	4770      	bx	lr

0800978c <fiprintf>:
 800978c:	b40e      	push	{r1, r2, r3}
 800978e:	b503      	push	{r0, r1, lr}
 8009790:	4601      	mov	r1, r0
 8009792:	ab03      	add	r3, sp, #12
 8009794:	4805      	ldr	r0, [pc, #20]	@ (80097ac <fiprintf+0x20>)
 8009796:	f853 2b04 	ldr.w	r2, [r3], #4
 800979a:	6800      	ldr	r0, [r0, #0]
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	f000 f845 	bl	800982c <_vfiprintf_r>
 80097a2:	b002      	add	sp, #8
 80097a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097a8:	b003      	add	sp, #12
 80097aa:	4770      	bx	lr
 80097ac:	20000018 	.word	0x20000018

080097b0 <__ascii_wctomb>:
 80097b0:	4603      	mov	r3, r0
 80097b2:	4608      	mov	r0, r1
 80097b4:	b141      	cbz	r1, 80097c8 <__ascii_wctomb+0x18>
 80097b6:	2aff      	cmp	r2, #255	@ 0xff
 80097b8:	d904      	bls.n	80097c4 <__ascii_wctomb+0x14>
 80097ba:	228a      	movs	r2, #138	@ 0x8a
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097c2:	4770      	bx	lr
 80097c4:	700a      	strb	r2, [r1, #0]
 80097c6:	2001      	movs	r0, #1
 80097c8:	4770      	bx	lr

080097ca <abort>:
 80097ca:	b508      	push	{r3, lr}
 80097cc:	2006      	movs	r0, #6
 80097ce:	f000 fa85 	bl	8009cdc <raise>
 80097d2:	2001      	movs	r0, #1
 80097d4:	f7f8 fea6 	bl	8002524 <_exit>

080097d8 <__sfputc_r>:
 80097d8:	6893      	ldr	r3, [r2, #8]
 80097da:	3b01      	subs	r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	b410      	push	{r4}
 80097e0:	6093      	str	r3, [r2, #8]
 80097e2:	da08      	bge.n	80097f6 <__sfputc_r+0x1e>
 80097e4:	6994      	ldr	r4, [r2, #24]
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	db01      	blt.n	80097ee <__sfputc_r+0x16>
 80097ea:	290a      	cmp	r1, #10
 80097ec:	d103      	bne.n	80097f6 <__sfputc_r+0x1e>
 80097ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f2:	f000 b933 	b.w	8009a5c <__swbuf_r>
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	1c58      	adds	r0, r3, #1
 80097fa:	6010      	str	r0, [r2, #0]
 80097fc:	7019      	strb	r1, [r3, #0]
 80097fe:	4608      	mov	r0, r1
 8009800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009804:	4770      	bx	lr

08009806 <__sfputs_r>:
 8009806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009808:	4606      	mov	r6, r0
 800980a:	460f      	mov	r7, r1
 800980c:	4614      	mov	r4, r2
 800980e:	18d5      	adds	r5, r2, r3
 8009810:	42ac      	cmp	r4, r5
 8009812:	d101      	bne.n	8009818 <__sfputs_r+0x12>
 8009814:	2000      	movs	r0, #0
 8009816:	e007      	b.n	8009828 <__sfputs_r+0x22>
 8009818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981c:	463a      	mov	r2, r7
 800981e:	4630      	mov	r0, r6
 8009820:	f7ff ffda 	bl	80097d8 <__sfputc_r>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d1f3      	bne.n	8009810 <__sfputs_r+0xa>
 8009828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800982c <_vfiprintf_r>:
 800982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	460d      	mov	r5, r1
 8009832:	b09d      	sub	sp, #116	@ 0x74
 8009834:	4614      	mov	r4, r2
 8009836:	4698      	mov	r8, r3
 8009838:	4606      	mov	r6, r0
 800983a:	b118      	cbz	r0, 8009844 <_vfiprintf_r+0x18>
 800983c:	6a03      	ldr	r3, [r0, #32]
 800983e:	b90b      	cbnz	r3, 8009844 <_vfiprintf_r+0x18>
 8009840:	f7fe f924 	bl	8007a8c <__sinit>
 8009844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009846:	07d9      	lsls	r1, r3, #31
 8009848:	d405      	bmi.n	8009856 <_vfiprintf_r+0x2a>
 800984a:	89ab      	ldrh	r3, [r5, #12]
 800984c:	059a      	lsls	r2, r3, #22
 800984e:	d402      	bmi.n	8009856 <_vfiprintf_r+0x2a>
 8009850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009852:	f7fe f988 	bl	8007b66 <__retarget_lock_acquire_recursive>
 8009856:	89ab      	ldrh	r3, [r5, #12]
 8009858:	071b      	lsls	r3, r3, #28
 800985a:	d501      	bpl.n	8009860 <_vfiprintf_r+0x34>
 800985c:	692b      	ldr	r3, [r5, #16]
 800985e:	b99b      	cbnz	r3, 8009888 <_vfiprintf_r+0x5c>
 8009860:	4629      	mov	r1, r5
 8009862:	4630      	mov	r0, r6
 8009864:	f000 f938 	bl	8009ad8 <__swsetup_r>
 8009868:	b170      	cbz	r0, 8009888 <_vfiprintf_r+0x5c>
 800986a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800986c:	07dc      	lsls	r4, r3, #31
 800986e:	d504      	bpl.n	800987a <_vfiprintf_r+0x4e>
 8009870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009874:	b01d      	add	sp, #116	@ 0x74
 8009876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987a:	89ab      	ldrh	r3, [r5, #12]
 800987c:	0598      	lsls	r0, r3, #22
 800987e:	d4f7      	bmi.n	8009870 <_vfiprintf_r+0x44>
 8009880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009882:	f7fe f971 	bl	8007b68 <__retarget_lock_release_recursive>
 8009886:	e7f3      	b.n	8009870 <_vfiprintf_r+0x44>
 8009888:	2300      	movs	r3, #0
 800988a:	9309      	str	r3, [sp, #36]	@ 0x24
 800988c:	2320      	movs	r3, #32
 800988e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009892:	f8cd 800c 	str.w	r8, [sp, #12]
 8009896:	2330      	movs	r3, #48	@ 0x30
 8009898:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a48 <_vfiprintf_r+0x21c>
 800989c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098a0:	f04f 0901 	mov.w	r9, #1
 80098a4:	4623      	mov	r3, r4
 80098a6:	469a      	mov	sl, r3
 80098a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ac:	b10a      	cbz	r2, 80098b2 <_vfiprintf_r+0x86>
 80098ae:	2a25      	cmp	r2, #37	@ 0x25
 80098b0:	d1f9      	bne.n	80098a6 <_vfiprintf_r+0x7a>
 80098b2:	ebba 0b04 	subs.w	fp, sl, r4
 80098b6:	d00b      	beq.n	80098d0 <_vfiprintf_r+0xa4>
 80098b8:	465b      	mov	r3, fp
 80098ba:	4622      	mov	r2, r4
 80098bc:	4629      	mov	r1, r5
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff ffa1 	bl	8009806 <__sfputs_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	f000 80a7 	beq.w	8009a18 <_vfiprintf_r+0x1ec>
 80098ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098cc:	445a      	add	r2, fp
 80098ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80098d0:	f89a 3000 	ldrb.w	r3, [sl]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 809f 	beq.w	8009a18 <_vfiprintf_r+0x1ec>
 80098da:	2300      	movs	r3, #0
 80098dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e4:	f10a 0a01 	add.w	sl, sl, #1
 80098e8:	9304      	str	r3, [sp, #16]
 80098ea:	9307      	str	r3, [sp, #28]
 80098ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80098f2:	4654      	mov	r4, sl
 80098f4:	2205      	movs	r2, #5
 80098f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fa:	4853      	ldr	r0, [pc, #332]	@ (8009a48 <_vfiprintf_r+0x21c>)
 80098fc:	f7f6 fc88 	bl	8000210 <memchr>
 8009900:	9a04      	ldr	r2, [sp, #16]
 8009902:	b9d8      	cbnz	r0, 800993c <_vfiprintf_r+0x110>
 8009904:	06d1      	lsls	r1, r2, #27
 8009906:	bf44      	itt	mi
 8009908:	2320      	movmi	r3, #32
 800990a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800990e:	0713      	lsls	r3, r2, #28
 8009910:	bf44      	itt	mi
 8009912:	232b      	movmi	r3, #43	@ 0x2b
 8009914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009918:	f89a 3000 	ldrb.w	r3, [sl]
 800991c:	2b2a      	cmp	r3, #42	@ 0x2a
 800991e:	d015      	beq.n	800994c <_vfiprintf_r+0x120>
 8009920:	9a07      	ldr	r2, [sp, #28]
 8009922:	4654      	mov	r4, sl
 8009924:	2000      	movs	r0, #0
 8009926:	f04f 0c0a 	mov.w	ip, #10
 800992a:	4621      	mov	r1, r4
 800992c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009930:	3b30      	subs	r3, #48	@ 0x30
 8009932:	2b09      	cmp	r3, #9
 8009934:	d94b      	bls.n	80099ce <_vfiprintf_r+0x1a2>
 8009936:	b1b0      	cbz	r0, 8009966 <_vfiprintf_r+0x13a>
 8009938:	9207      	str	r2, [sp, #28]
 800993a:	e014      	b.n	8009966 <_vfiprintf_r+0x13a>
 800993c:	eba0 0308 	sub.w	r3, r0, r8
 8009940:	fa09 f303 	lsl.w	r3, r9, r3
 8009944:	4313      	orrs	r3, r2
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	46a2      	mov	sl, r4
 800994a:	e7d2      	b.n	80098f2 <_vfiprintf_r+0xc6>
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	1d19      	adds	r1, r3, #4
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	9103      	str	r1, [sp, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfbb      	ittet	lt
 8009958:	425b      	neglt	r3, r3
 800995a:	f042 0202 	orrlt.w	r2, r2, #2
 800995e:	9307      	strge	r3, [sp, #28]
 8009960:	9307      	strlt	r3, [sp, #28]
 8009962:	bfb8      	it	lt
 8009964:	9204      	strlt	r2, [sp, #16]
 8009966:	7823      	ldrb	r3, [r4, #0]
 8009968:	2b2e      	cmp	r3, #46	@ 0x2e
 800996a:	d10a      	bne.n	8009982 <_vfiprintf_r+0x156>
 800996c:	7863      	ldrb	r3, [r4, #1]
 800996e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009970:	d132      	bne.n	80099d8 <_vfiprintf_r+0x1ac>
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	1d1a      	adds	r2, r3, #4
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	9203      	str	r2, [sp, #12]
 800997a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800997e:	3402      	adds	r4, #2
 8009980:	9305      	str	r3, [sp, #20]
 8009982:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a58 <_vfiprintf_r+0x22c>
 8009986:	7821      	ldrb	r1, [r4, #0]
 8009988:	2203      	movs	r2, #3
 800998a:	4650      	mov	r0, sl
 800998c:	f7f6 fc40 	bl	8000210 <memchr>
 8009990:	b138      	cbz	r0, 80099a2 <_vfiprintf_r+0x176>
 8009992:	9b04      	ldr	r3, [sp, #16]
 8009994:	eba0 000a 	sub.w	r0, r0, sl
 8009998:	2240      	movs	r2, #64	@ 0x40
 800999a:	4082      	lsls	r2, r0
 800999c:	4313      	orrs	r3, r2
 800999e:	3401      	adds	r4, #1
 80099a0:	9304      	str	r3, [sp, #16]
 80099a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a6:	4829      	ldr	r0, [pc, #164]	@ (8009a4c <_vfiprintf_r+0x220>)
 80099a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099ac:	2206      	movs	r2, #6
 80099ae:	f7f6 fc2f 	bl	8000210 <memchr>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d03f      	beq.n	8009a36 <_vfiprintf_r+0x20a>
 80099b6:	4b26      	ldr	r3, [pc, #152]	@ (8009a50 <_vfiprintf_r+0x224>)
 80099b8:	bb1b      	cbnz	r3, 8009a02 <_vfiprintf_r+0x1d6>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	3307      	adds	r3, #7
 80099be:	f023 0307 	bic.w	r3, r3, #7
 80099c2:	3308      	adds	r3, #8
 80099c4:	9303      	str	r3, [sp, #12]
 80099c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c8:	443b      	add	r3, r7
 80099ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80099cc:	e76a      	b.n	80098a4 <_vfiprintf_r+0x78>
 80099ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80099d2:	460c      	mov	r4, r1
 80099d4:	2001      	movs	r0, #1
 80099d6:	e7a8      	b.n	800992a <_vfiprintf_r+0xfe>
 80099d8:	2300      	movs	r3, #0
 80099da:	3401      	adds	r4, #1
 80099dc:	9305      	str	r3, [sp, #20]
 80099de:	4619      	mov	r1, r3
 80099e0:	f04f 0c0a 	mov.w	ip, #10
 80099e4:	4620      	mov	r0, r4
 80099e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ea:	3a30      	subs	r2, #48	@ 0x30
 80099ec:	2a09      	cmp	r2, #9
 80099ee:	d903      	bls.n	80099f8 <_vfiprintf_r+0x1cc>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0c6      	beq.n	8009982 <_vfiprintf_r+0x156>
 80099f4:	9105      	str	r1, [sp, #20]
 80099f6:	e7c4      	b.n	8009982 <_vfiprintf_r+0x156>
 80099f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099fc:	4604      	mov	r4, r0
 80099fe:	2301      	movs	r3, #1
 8009a00:	e7f0      	b.n	80099e4 <_vfiprintf_r+0x1b8>
 8009a02:	ab03      	add	r3, sp, #12
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	462a      	mov	r2, r5
 8009a08:	4b12      	ldr	r3, [pc, #72]	@ (8009a54 <_vfiprintf_r+0x228>)
 8009a0a:	a904      	add	r1, sp, #16
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f7fd fbd9 	bl	80071c4 <_printf_float>
 8009a12:	4607      	mov	r7, r0
 8009a14:	1c78      	adds	r0, r7, #1
 8009a16:	d1d6      	bne.n	80099c6 <_vfiprintf_r+0x19a>
 8009a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a1a:	07d9      	lsls	r1, r3, #31
 8009a1c:	d405      	bmi.n	8009a2a <_vfiprintf_r+0x1fe>
 8009a1e:	89ab      	ldrh	r3, [r5, #12]
 8009a20:	059a      	lsls	r2, r3, #22
 8009a22:	d402      	bmi.n	8009a2a <_vfiprintf_r+0x1fe>
 8009a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a26:	f7fe f89f 	bl	8007b68 <__retarget_lock_release_recursive>
 8009a2a:	89ab      	ldrh	r3, [r5, #12]
 8009a2c:	065b      	lsls	r3, r3, #25
 8009a2e:	f53f af1f 	bmi.w	8009870 <_vfiprintf_r+0x44>
 8009a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a34:	e71e      	b.n	8009874 <_vfiprintf_r+0x48>
 8009a36:	ab03      	add	r3, sp, #12
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	462a      	mov	r2, r5
 8009a3c:	4b05      	ldr	r3, [pc, #20]	@ (8009a54 <_vfiprintf_r+0x228>)
 8009a3e:	a904      	add	r1, sp, #16
 8009a40:	4630      	mov	r0, r6
 8009a42:	f7fd fe57 	bl	80076f4 <_printf_i>
 8009a46:	e7e4      	b.n	8009a12 <_vfiprintf_r+0x1e6>
 8009a48:	0800be39 	.word	0x0800be39
 8009a4c:	0800be43 	.word	0x0800be43
 8009a50:	080071c5 	.word	0x080071c5
 8009a54:	08009807 	.word	0x08009807
 8009a58:	0800be3f 	.word	0x0800be3f

08009a5c <__swbuf_r>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	460e      	mov	r6, r1
 8009a60:	4614      	mov	r4, r2
 8009a62:	4605      	mov	r5, r0
 8009a64:	b118      	cbz	r0, 8009a6e <__swbuf_r+0x12>
 8009a66:	6a03      	ldr	r3, [r0, #32]
 8009a68:	b90b      	cbnz	r3, 8009a6e <__swbuf_r+0x12>
 8009a6a:	f7fe f80f 	bl	8007a8c <__sinit>
 8009a6e:	69a3      	ldr	r3, [r4, #24]
 8009a70:	60a3      	str	r3, [r4, #8]
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	071a      	lsls	r2, r3, #28
 8009a76:	d501      	bpl.n	8009a7c <__swbuf_r+0x20>
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	b943      	cbnz	r3, 8009a8e <__swbuf_r+0x32>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 f82a 	bl	8009ad8 <__swsetup_r>
 8009a84:	b118      	cbz	r0, 8009a8e <__swbuf_r+0x32>
 8009a86:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	6922      	ldr	r2, [r4, #16]
 8009a92:	1a98      	subs	r0, r3, r2
 8009a94:	6963      	ldr	r3, [r4, #20]
 8009a96:	b2f6      	uxtb	r6, r6
 8009a98:	4283      	cmp	r3, r0
 8009a9a:	4637      	mov	r7, r6
 8009a9c:	dc05      	bgt.n	8009aaa <__swbuf_r+0x4e>
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f7ff f937 	bl	8008d14 <_fflush_r>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d1ed      	bne.n	8009a86 <__swbuf_r+0x2a>
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	60a3      	str	r3, [r4, #8]
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	1c5a      	adds	r2, r3, #1
 8009ab4:	6022      	str	r2, [r4, #0]
 8009ab6:	701e      	strb	r6, [r3, #0]
 8009ab8:	6962      	ldr	r2, [r4, #20]
 8009aba:	1c43      	adds	r3, r0, #1
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d004      	beq.n	8009aca <__swbuf_r+0x6e>
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	07db      	lsls	r3, r3, #31
 8009ac4:	d5e1      	bpl.n	8009a8a <__swbuf_r+0x2e>
 8009ac6:	2e0a      	cmp	r6, #10
 8009ac8:	d1df      	bne.n	8009a8a <__swbuf_r+0x2e>
 8009aca:	4621      	mov	r1, r4
 8009acc:	4628      	mov	r0, r5
 8009ace:	f7ff f921 	bl	8008d14 <_fflush_r>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d0d9      	beq.n	8009a8a <__swbuf_r+0x2e>
 8009ad6:	e7d6      	b.n	8009a86 <__swbuf_r+0x2a>

08009ad8 <__swsetup_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4b29      	ldr	r3, [pc, #164]	@ (8009b80 <__swsetup_r+0xa8>)
 8009adc:	4605      	mov	r5, r0
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	b118      	cbz	r0, 8009aec <__swsetup_r+0x14>
 8009ae4:	6a03      	ldr	r3, [r0, #32]
 8009ae6:	b90b      	cbnz	r3, 8009aec <__swsetup_r+0x14>
 8009ae8:	f7fd ffd0 	bl	8007a8c <__sinit>
 8009aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af0:	0719      	lsls	r1, r3, #28
 8009af2:	d422      	bmi.n	8009b3a <__swsetup_r+0x62>
 8009af4:	06da      	lsls	r2, r3, #27
 8009af6:	d407      	bmi.n	8009b08 <__swsetup_r+0x30>
 8009af8:	2209      	movs	r2, #9
 8009afa:	602a      	str	r2, [r5, #0]
 8009afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b06:	e033      	b.n	8009b70 <__swsetup_r+0x98>
 8009b08:	0758      	lsls	r0, r3, #29
 8009b0a:	d512      	bpl.n	8009b32 <__swsetup_r+0x5a>
 8009b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b0e:	b141      	cbz	r1, 8009b22 <__swsetup_r+0x4a>
 8009b10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b14:	4299      	cmp	r1, r3
 8009b16:	d002      	beq.n	8009b1e <__swsetup_r+0x46>
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f7ff fdd3 	bl	80096c4 <_free_r>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	6063      	str	r3, [r4, #4]
 8009b2e:	6923      	ldr	r3, [r4, #16]
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f043 0308 	orr.w	r3, r3, #8
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	b94b      	cbnz	r3, 8009b52 <__swsetup_r+0x7a>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b48:	d003      	beq.n	8009b52 <__swsetup_r+0x7a>
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f000 f83f 	bl	8009bd0 <__smakebuf_r>
 8009b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b56:	f013 0201 	ands.w	r2, r3, #1
 8009b5a:	d00a      	beq.n	8009b72 <__swsetup_r+0x9a>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	60a2      	str	r2, [r4, #8]
 8009b60:	6962      	ldr	r2, [r4, #20]
 8009b62:	4252      	negs	r2, r2
 8009b64:	61a2      	str	r2, [r4, #24]
 8009b66:	6922      	ldr	r2, [r4, #16]
 8009b68:	b942      	cbnz	r2, 8009b7c <__swsetup_r+0xa4>
 8009b6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b6e:	d1c5      	bne.n	8009afc <__swsetup_r+0x24>
 8009b70:	bd38      	pop	{r3, r4, r5, pc}
 8009b72:	0799      	lsls	r1, r3, #30
 8009b74:	bf58      	it	pl
 8009b76:	6962      	ldrpl	r2, [r4, #20]
 8009b78:	60a2      	str	r2, [r4, #8]
 8009b7a:	e7f4      	b.n	8009b66 <__swsetup_r+0x8e>
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	e7f7      	b.n	8009b70 <__swsetup_r+0x98>
 8009b80:	20000018 	.word	0x20000018

08009b84 <__swhatbuf_r>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	460c      	mov	r4, r1
 8009b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	b096      	sub	sp, #88	@ 0x58
 8009b90:	4615      	mov	r5, r2
 8009b92:	461e      	mov	r6, r3
 8009b94:	da0d      	bge.n	8009bb2 <__swhatbuf_r+0x2e>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b9c:	f04f 0100 	mov.w	r1, #0
 8009ba0:	bf14      	ite	ne
 8009ba2:	2340      	movne	r3, #64	@ 0x40
 8009ba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ba8:	2000      	movs	r0, #0
 8009baa:	6031      	str	r1, [r6, #0]
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	b016      	add	sp, #88	@ 0x58
 8009bb0:	bd70      	pop	{r4, r5, r6, pc}
 8009bb2:	466a      	mov	r2, sp
 8009bb4:	f000 f848 	bl	8009c48 <_fstat_r>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	dbec      	blt.n	8009b96 <__swhatbuf_r+0x12>
 8009bbc:	9901      	ldr	r1, [sp, #4]
 8009bbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009bc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009bc6:	4259      	negs	r1, r3
 8009bc8:	4159      	adcs	r1, r3
 8009bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bce:	e7eb      	b.n	8009ba8 <__swhatbuf_r+0x24>

08009bd0 <__smakebuf_r>:
 8009bd0:	898b      	ldrh	r3, [r1, #12]
 8009bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd4:	079d      	lsls	r5, r3, #30
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	d507      	bpl.n	8009bec <__smakebuf_r+0x1c>
 8009bdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	2301      	movs	r3, #1
 8009be6:	6163      	str	r3, [r4, #20]
 8009be8:	b003      	add	sp, #12
 8009bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bec:	ab01      	add	r3, sp, #4
 8009bee:	466a      	mov	r2, sp
 8009bf0:	f7ff ffc8 	bl	8009b84 <__swhatbuf_r>
 8009bf4:	9f00      	ldr	r7, [sp, #0]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f7fe ff86 	bl	8008b0c <_malloc_r>
 8009c00:	b948      	cbnz	r0, 8009c16 <__smakebuf_r+0x46>
 8009c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c06:	059a      	lsls	r2, r3, #22
 8009c08:	d4ee      	bmi.n	8009be8 <__smakebuf_r+0x18>
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	f043 0302 	orr.w	r3, r3, #2
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	e7e2      	b.n	8009bdc <__smakebuf_r+0xc>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	6020      	str	r0, [r4, #0]
 8009c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	9b01      	ldr	r3, [sp, #4]
 8009c22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c26:	b15b      	cbz	r3, 8009c40 <__smakebuf_r+0x70>
 8009c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f000 f81d 	bl	8009c6c <_isatty_r>
 8009c32:	b128      	cbz	r0, 8009c40 <__smakebuf_r+0x70>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f023 0303 	bic.w	r3, r3, #3
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	431d      	orrs	r5, r3
 8009c44:	81a5      	strh	r5, [r4, #12]
 8009c46:	e7cf      	b.n	8009be8 <__smakebuf_r+0x18>

08009c48 <_fstat_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	@ (8009c68 <_fstat_r+0x20>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	4611      	mov	r1, r2
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	f7f8 fcb5 	bl	80025c4 <_fstat>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	d102      	bne.n	8009c64 <_fstat_r+0x1c>
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	b103      	cbz	r3, 8009c64 <_fstat_r+0x1c>
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
 8009c66:	bf00      	nop
 8009c68:	200005c0 	.word	0x200005c0

08009c6c <_isatty_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4d06      	ldr	r5, [pc, #24]	@ (8009c88 <_isatty_r+0x1c>)
 8009c70:	2300      	movs	r3, #0
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f8 fcb4 	bl	80025e4 <_isatty>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_isatty_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_isatty_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	200005c0 	.word	0x200005c0

08009c8c <_raise_r>:
 8009c8c:	291f      	cmp	r1, #31
 8009c8e:	b538      	push	{r3, r4, r5, lr}
 8009c90:	4605      	mov	r5, r0
 8009c92:	460c      	mov	r4, r1
 8009c94:	d904      	bls.n	8009ca0 <_raise_r+0x14>
 8009c96:	2316      	movs	r3, #22
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ca2:	b112      	cbz	r2, 8009caa <_raise_r+0x1e>
 8009ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ca8:	b94b      	cbnz	r3, 8009cbe <_raise_r+0x32>
 8009caa:	4628      	mov	r0, r5
 8009cac:	f000 f830 	bl	8009d10 <_getpid_r>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cba:	f000 b817 	b.w	8009cec <_kill_r>
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d00a      	beq.n	8009cd8 <_raise_r+0x4c>
 8009cc2:	1c59      	adds	r1, r3, #1
 8009cc4:	d103      	bne.n	8009cce <_raise_r+0x42>
 8009cc6:	2316      	movs	r3, #22
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	2001      	movs	r0, #1
 8009ccc:	e7e7      	b.n	8009c9e <_raise_r+0x12>
 8009cce:	2100      	movs	r1, #0
 8009cd0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4798      	blx	r3
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e7e0      	b.n	8009c9e <_raise_r+0x12>

08009cdc <raise>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	@ (8009ce8 <raise+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f7ff bfd3 	b.w	8009c8c <_raise_r>
 8009ce6:	bf00      	nop
 8009ce8:	20000018 	.word	0x20000018

08009cec <_kill_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	@ (8009d0c <_kill_r+0x20>)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f7f8 fc03 	bl	8002504 <_kill>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d102      	bne.n	8009d08 <_kill_r+0x1c>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b103      	cbz	r3, 8009d08 <_kill_r+0x1c>
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	bf00      	nop
 8009d0c:	200005c0 	.word	0x200005c0

08009d10 <_getpid_r>:
 8009d10:	f7f8 bbf0 	b.w	80024f4 <_getpid>

08009d14 <pow>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	ed2d 8b02 	vpush	{d8}
 8009d1a:	eeb0 8a40 	vmov.f32	s16, s0
 8009d1e:	eef0 8a60 	vmov.f32	s17, s1
 8009d22:	ec55 4b11 	vmov	r4, r5, d1
 8009d26:	f000 fa23 	bl	800a170 <__ieee754_pow>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	ec57 6b10 	vmov	r6, r7, d0
 8009d36:	f7f6 ff19 	bl	8000b6c <__aeabi_dcmpun>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d13b      	bne.n	8009db6 <pow+0xa2>
 8009d3e:	ec51 0b18 	vmov	r0, r1, d8
 8009d42:	2200      	movs	r2, #0
 8009d44:	2300      	movs	r3, #0
 8009d46:	f7f6 fedf 	bl	8000b08 <__aeabi_dcmpeq>
 8009d4a:	b1b8      	cbz	r0, 8009d7c <pow+0x68>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4620      	mov	r0, r4
 8009d52:	4629      	mov	r1, r5
 8009d54:	f7f6 fed8 	bl	8000b08 <__aeabi_dcmpeq>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d146      	bne.n	8009dea <pow+0xd6>
 8009d5c:	ec45 4b10 	vmov	d0, r4, r5
 8009d60:	f000 f8ca 	bl	8009ef8 <finite>
 8009d64:	b338      	cbz	r0, 8009db6 <pow+0xa2>
 8009d66:	2200      	movs	r2, #0
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7f6 fed5 	bl	8000b1c <__aeabi_dcmplt>
 8009d72:	b300      	cbz	r0, 8009db6 <pow+0xa2>
 8009d74:	f7fd fecc 	bl	8007b10 <__errno>
 8009d78:	2322      	movs	r3, #34	@ 0x22
 8009d7a:	e01b      	b.n	8009db4 <pow+0xa0>
 8009d7c:	ec47 6b10 	vmov	d0, r6, r7
 8009d80:	f000 f8ba 	bl	8009ef8 <finite>
 8009d84:	b9e0      	cbnz	r0, 8009dc0 <pow+0xac>
 8009d86:	eeb0 0a48 	vmov.f32	s0, s16
 8009d8a:	eef0 0a68 	vmov.f32	s1, s17
 8009d8e:	f000 f8b3 	bl	8009ef8 <finite>
 8009d92:	b1a8      	cbz	r0, 8009dc0 <pow+0xac>
 8009d94:	ec45 4b10 	vmov	d0, r4, r5
 8009d98:	f000 f8ae 	bl	8009ef8 <finite>
 8009d9c:	b180      	cbz	r0, 8009dc0 <pow+0xac>
 8009d9e:	4632      	mov	r2, r6
 8009da0:	463b      	mov	r3, r7
 8009da2:	4630      	mov	r0, r6
 8009da4:	4639      	mov	r1, r7
 8009da6:	f7f6 fee1 	bl	8000b6c <__aeabi_dcmpun>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d0e2      	beq.n	8009d74 <pow+0x60>
 8009dae:	f7fd feaf 	bl	8007b10 <__errno>
 8009db2:	2321      	movs	r3, #33	@ 0x21
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	ecbd 8b02 	vpop	{d8}
 8009dba:	ec47 6b10 	vmov	d0, r6, r7
 8009dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	f7f6 fe9e 	bl	8000b08 <__aeabi_dcmpeq>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d0f2      	beq.n	8009db6 <pow+0xa2>
 8009dd0:	eeb0 0a48 	vmov.f32	s0, s16
 8009dd4:	eef0 0a68 	vmov.f32	s1, s17
 8009dd8:	f000 f88e 	bl	8009ef8 <finite>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d0ea      	beq.n	8009db6 <pow+0xa2>
 8009de0:	ec45 4b10 	vmov	d0, r4, r5
 8009de4:	f000 f888 	bl	8009ef8 <finite>
 8009de8:	e7c3      	b.n	8009d72 <pow+0x5e>
 8009dea:	4f01      	ldr	r7, [pc, #4]	@ (8009df0 <pow+0xdc>)
 8009dec:	2600      	movs	r6, #0
 8009dee:	e7e2      	b.n	8009db6 <pow+0xa2>
 8009df0:	3ff00000 	.word	0x3ff00000

08009df4 <sqrt>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	ed2d 8b02 	vpush	{d8}
 8009dfa:	ec55 4b10 	vmov	r4, r5, d0
 8009dfe:	f000 f8db 	bl	8009fb8 <__ieee754_sqrt>
 8009e02:	4622      	mov	r2, r4
 8009e04:	462b      	mov	r3, r5
 8009e06:	4620      	mov	r0, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	eeb0 8a40 	vmov.f32	s16, s0
 8009e0e:	eef0 8a60 	vmov.f32	s17, s1
 8009e12:	f7f6 feab 	bl	8000b6c <__aeabi_dcmpun>
 8009e16:	b990      	cbnz	r0, 8009e3e <sqrt+0x4a>
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f7f6 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 8009e24:	b158      	cbz	r0, 8009e3e <sqrt+0x4a>
 8009e26:	f7fd fe73 	bl	8007b10 <__errno>
 8009e2a:	2321      	movs	r3, #33	@ 0x21
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	2300      	movs	r3, #0
 8009e32:	4610      	mov	r0, r2
 8009e34:	4619      	mov	r1, r3
 8009e36:	f7f6 fd29 	bl	800088c <__aeabi_ddiv>
 8009e3a:	ec41 0b18 	vmov	d8, r0, r1
 8009e3e:	eeb0 0a48 	vmov.f32	s0, s16
 8009e42:	eef0 0a68 	vmov.f32	s1, s17
 8009e46:	ecbd 8b02 	vpop	{d8}
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	0000      	movs	r0, r0
	...

08009e50 <cos>:
 8009e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e52:	ec53 2b10 	vmov	r2, r3, d0
 8009e56:	4826      	ldr	r0, [pc, #152]	@ (8009ef0 <cos+0xa0>)
 8009e58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009e5c:	4281      	cmp	r1, r0
 8009e5e:	d806      	bhi.n	8009e6e <cos+0x1e>
 8009e60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009ee8 <cos+0x98>
 8009e64:	b005      	add	sp, #20
 8009e66:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e6a:	f001 bc55 	b.w	800b718 <__kernel_cos>
 8009e6e:	4821      	ldr	r0, [pc, #132]	@ (8009ef4 <cos+0xa4>)
 8009e70:	4281      	cmp	r1, r0
 8009e72:	d908      	bls.n	8009e86 <cos+0x36>
 8009e74:	4610      	mov	r0, r2
 8009e76:	4619      	mov	r1, r3
 8009e78:	f7f6 fa26 	bl	80002c8 <__aeabi_dsub>
 8009e7c:	ec41 0b10 	vmov	d0, r0, r1
 8009e80:	b005      	add	sp, #20
 8009e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e86:	4668      	mov	r0, sp
 8009e88:	f000 feb6 	bl	800abf8 <__ieee754_rem_pio2>
 8009e8c:	f000 0003 	and.w	r0, r0, #3
 8009e90:	2801      	cmp	r0, #1
 8009e92:	d00b      	beq.n	8009eac <cos+0x5c>
 8009e94:	2802      	cmp	r0, #2
 8009e96:	d015      	beq.n	8009ec4 <cos+0x74>
 8009e98:	b9d8      	cbnz	r0, 8009ed2 <cos+0x82>
 8009e9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e9e:	ed9d 0b00 	vldr	d0, [sp]
 8009ea2:	f001 fc39 	bl	800b718 <__kernel_cos>
 8009ea6:	ec51 0b10 	vmov	r0, r1, d0
 8009eaa:	e7e7      	b.n	8009e7c <cos+0x2c>
 8009eac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009eb0:	ed9d 0b00 	vldr	d0, [sp]
 8009eb4:	f001 fcf8 	bl	800b8a8 <__kernel_sin>
 8009eb8:	ec53 2b10 	vmov	r2, r3, d0
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009ec2:	e7db      	b.n	8009e7c <cos+0x2c>
 8009ec4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ec8:	ed9d 0b00 	vldr	d0, [sp]
 8009ecc:	f001 fc24 	bl	800b718 <__kernel_cos>
 8009ed0:	e7f2      	b.n	8009eb8 <cos+0x68>
 8009ed2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ed6:	ed9d 0b00 	vldr	d0, [sp]
 8009eda:	2001      	movs	r0, #1
 8009edc:	f001 fce4 	bl	800b8a8 <__kernel_sin>
 8009ee0:	e7e1      	b.n	8009ea6 <cos+0x56>
 8009ee2:	bf00      	nop
 8009ee4:	f3af 8000 	nop.w
	...
 8009ef0:	3fe921fb 	.word	0x3fe921fb
 8009ef4:	7fefffff 	.word	0x7fefffff

08009ef8 <finite>:
 8009ef8:	b082      	sub	sp, #8
 8009efa:	ed8d 0b00 	vstr	d0, [sp]
 8009efe:	9801      	ldr	r0, [sp, #4]
 8009f00:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009f04:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009f08:	0fc0      	lsrs	r0, r0, #31
 8009f0a:	b002      	add	sp, #8
 8009f0c:	4770      	bx	lr
	...

08009f10 <sin>:
 8009f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f12:	ec53 2b10 	vmov	r2, r3, d0
 8009f16:	4826      	ldr	r0, [pc, #152]	@ (8009fb0 <sin+0xa0>)
 8009f18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f1c:	4281      	cmp	r1, r0
 8009f1e:	d807      	bhi.n	8009f30 <sin+0x20>
 8009f20:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009fa8 <sin+0x98>
 8009f24:	2000      	movs	r0, #0
 8009f26:	b005      	add	sp, #20
 8009f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f2c:	f001 bcbc 	b.w	800b8a8 <__kernel_sin>
 8009f30:	4820      	ldr	r0, [pc, #128]	@ (8009fb4 <sin+0xa4>)
 8009f32:	4281      	cmp	r1, r0
 8009f34:	d908      	bls.n	8009f48 <sin+0x38>
 8009f36:	4610      	mov	r0, r2
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f7f6 f9c5 	bl	80002c8 <__aeabi_dsub>
 8009f3e:	ec41 0b10 	vmov	d0, r0, r1
 8009f42:	b005      	add	sp, #20
 8009f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f48:	4668      	mov	r0, sp
 8009f4a:	f000 fe55 	bl	800abf8 <__ieee754_rem_pio2>
 8009f4e:	f000 0003 	and.w	r0, r0, #3
 8009f52:	2801      	cmp	r0, #1
 8009f54:	d00c      	beq.n	8009f70 <sin+0x60>
 8009f56:	2802      	cmp	r0, #2
 8009f58:	d011      	beq.n	8009f7e <sin+0x6e>
 8009f5a:	b9e8      	cbnz	r0, 8009f98 <sin+0x88>
 8009f5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f60:	ed9d 0b00 	vldr	d0, [sp]
 8009f64:	2001      	movs	r0, #1
 8009f66:	f001 fc9f 	bl	800b8a8 <__kernel_sin>
 8009f6a:	ec51 0b10 	vmov	r0, r1, d0
 8009f6e:	e7e6      	b.n	8009f3e <sin+0x2e>
 8009f70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f74:	ed9d 0b00 	vldr	d0, [sp]
 8009f78:	f001 fbce 	bl	800b718 <__kernel_cos>
 8009f7c:	e7f5      	b.n	8009f6a <sin+0x5a>
 8009f7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f82:	ed9d 0b00 	vldr	d0, [sp]
 8009f86:	2001      	movs	r0, #1
 8009f88:	f001 fc8e 	bl	800b8a8 <__kernel_sin>
 8009f8c:	ec53 2b10 	vmov	r2, r3, d0
 8009f90:	4610      	mov	r0, r2
 8009f92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009f96:	e7d2      	b.n	8009f3e <sin+0x2e>
 8009f98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f9c:	ed9d 0b00 	vldr	d0, [sp]
 8009fa0:	f001 fbba 	bl	800b718 <__kernel_cos>
 8009fa4:	e7f2      	b.n	8009f8c <sin+0x7c>
 8009fa6:	bf00      	nop
	...
 8009fb0:	3fe921fb 	.word	0x3fe921fb
 8009fb4:	7fefffff 	.word	0x7fefffff

08009fb8 <__ieee754_sqrt>:
 8009fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	4a68      	ldr	r2, [pc, #416]	@ (800a160 <__ieee754_sqrt+0x1a8>)
 8009fbe:	ec55 4b10 	vmov	r4, r5, d0
 8009fc2:	43aa      	bics	r2, r5
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	d110      	bne.n	8009fec <__ieee754_sqrt+0x34>
 8009fca:	4622      	mov	r2, r4
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 fb32 	bl	8000638 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4620      	mov	r0, r4
 8009fda:	4629      	mov	r1, r5
 8009fdc:	f7f6 f976 	bl	80002cc <__adddf3>
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	ec45 4b10 	vmov	d0, r4, r5
 8009fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fec:	2d00      	cmp	r5, #0
 8009fee:	dc0e      	bgt.n	800a00e <__ieee754_sqrt+0x56>
 8009ff0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009ff4:	4322      	orrs	r2, r4
 8009ff6:	d0f5      	beq.n	8009fe4 <__ieee754_sqrt+0x2c>
 8009ff8:	b19d      	cbz	r5, 800a022 <__ieee754_sqrt+0x6a>
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	4629      	mov	r1, r5
 800a000:	f7f6 f962 	bl	80002c8 <__aeabi_dsub>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	f7f6 fc40 	bl	800088c <__aeabi_ddiv>
 800a00c:	e7e8      	b.n	8009fe0 <__ieee754_sqrt+0x28>
 800a00e:	152a      	asrs	r2, r5, #20
 800a010:	d115      	bne.n	800a03e <__ieee754_sqrt+0x86>
 800a012:	2000      	movs	r0, #0
 800a014:	e009      	b.n	800a02a <__ieee754_sqrt+0x72>
 800a016:	0acb      	lsrs	r3, r1, #11
 800a018:	3a15      	subs	r2, #21
 800a01a:	0549      	lsls	r1, r1, #21
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d0fa      	beq.n	800a016 <__ieee754_sqrt+0x5e>
 800a020:	e7f7      	b.n	800a012 <__ieee754_sqrt+0x5a>
 800a022:	462a      	mov	r2, r5
 800a024:	e7fa      	b.n	800a01c <__ieee754_sqrt+0x64>
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	3001      	adds	r0, #1
 800a02a:	02dc      	lsls	r4, r3, #11
 800a02c:	d5fb      	bpl.n	800a026 <__ieee754_sqrt+0x6e>
 800a02e:	1e44      	subs	r4, r0, #1
 800a030:	1b12      	subs	r2, r2, r4
 800a032:	f1c0 0420 	rsb	r4, r0, #32
 800a036:	fa21 f404 	lsr.w	r4, r1, r4
 800a03a:	4323      	orrs	r3, r4
 800a03c:	4081      	lsls	r1, r0
 800a03e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a042:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a04a:	07d2      	lsls	r2, r2, #31
 800a04c:	bf5c      	itt	pl
 800a04e:	005b      	lslpl	r3, r3, #1
 800a050:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a054:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a058:	bf58      	it	pl
 800a05a:	0049      	lslpl	r1, r1, #1
 800a05c:	2600      	movs	r6, #0
 800a05e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a062:	106d      	asrs	r5, r5, #1
 800a064:	0049      	lsls	r1, r1, #1
 800a066:	2016      	movs	r0, #22
 800a068:	4632      	mov	r2, r6
 800a06a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a06e:	1917      	adds	r7, r2, r4
 800a070:	429f      	cmp	r7, r3
 800a072:	bfde      	ittt	le
 800a074:	193a      	addle	r2, r7, r4
 800a076:	1bdb      	suble	r3, r3, r7
 800a078:	1936      	addle	r6, r6, r4
 800a07a:	0fcf      	lsrs	r7, r1, #31
 800a07c:	3801      	subs	r0, #1
 800a07e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a082:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a086:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a08a:	d1f0      	bne.n	800a06e <__ieee754_sqrt+0xb6>
 800a08c:	4604      	mov	r4, r0
 800a08e:	2720      	movs	r7, #32
 800a090:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a094:	429a      	cmp	r2, r3
 800a096:	eb00 0e0c 	add.w	lr, r0, ip
 800a09a:	db02      	blt.n	800a0a2 <__ieee754_sqrt+0xea>
 800a09c:	d113      	bne.n	800a0c6 <__ieee754_sqrt+0x10e>
 800a09e:	458e      	cmp	lr, r1
 800a0a0:	d811      	bhi.n	800a0c6 <__ieee754_sqrt+0x10e>
 800a0a2:	f1be 0f00 	cmp.w	lr, #0
 800a0a6:	eb0e 000c 	add.w	r0, lr, ip
 800a0aa:	da42      	bge.n	800a132 <__ieee754_sqrt+0x17a>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	db40      	blt.n	800a132 <__ieee754_sqrt+0x17a>
 800a0b0:	f102 0801 	add.w	r8, r2, #1
 800a0b4:	1a9b      	subs	r3, r3, r2
 800a0b6:	458e      	cmp	lr, r1
 800a0b8:	bf88      	it	hi
 800a0ba:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800a0be:	eba1 010e 	sub.w	r1, r1, lr
 800a0c2:	4464      	add	r4, ip
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a0ca:	3f01      	subs	r7, #1
 800a0cc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a0d0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a0d4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a0d8:	d1dc      	bne.n	800a094 <__ieee754_sqrt+0xdc>
 800a0da:	4319      	orrs	r1, r3
 800a0dc:	d01b      	beq.n	800a116 <__ieee754_sqrt+0x15e>
 800a0de:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a164 <__ieee754_sqrt+0x1ac>
 800a0e2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a168 <__ieee754_sqrt+0x1b0>
 800a0e6:	e9da 0100 	ldrd	r0, r1, [sl]
 800a0ea:	e9db 2300 	ldrd	r2, r3, [fp]
 800a0ee:	f7f6 f8eb 	bl	80002c8 <__aeabi_dsub>
 800a0f2:	e9da 8900 	ldrd	r8, r9, [sl]
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	f7f6 fd17 	bl	8000b30 <__aeabi_dcmple>
 800a102:	b140      	cbz	r0, 800a116 <__ieee754_sqrt+0x15e>
 800a104:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800a108:	e9da 0100 	ldrd	r0, r1, [sl]
 800a10c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a110:	d111      	bne.n	800a136 <__ieee754_sqrt+0x17e>
 800a112:	3601      	adds	r6, #1
 800a114:	463c      	mov	r4, r7
 800a116:	1072      	asrs	r2, r6, #1
 800a118:	0863      	lsrs	r3, r4, #1
 800a11a:	07f1      	lsls	r1, r6, #31
 800a11c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a120:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a124:	bf48      	it	mi
 800a126:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a12a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a12e:	4618      	mov	r0, r3
 800a130:	e756      	b.n	8009fe0 <__ieee754_sqrt+0x28>
 800a132:	4690      	mov	r8, r2
 800a134:	e7be      	b.n	800a0b4 <__ieee754_sqrt+0xfc>
 800a136:	f7f6 f8c9 	bl	80002cc <__adddf3>
 800a13a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	4640      	mov	r0, r8
 800a144:	4649      	mov	r1, r9
 800a146:	f7f6 fce9 	bl	8000b1c <__aeabi_dcmplt>
 800a14a:	b120      	cbz	r0, 800a156 <__ieee754_sqrt+0x19e>
 800a14c:	1ca0      	adds	r0, r4, #2
 800a14e:	bf08      	it	eq
 800a150:	3601      	addeq	r6, #1
 800a152:	3402      	adds	r4, #2
 800a154:	e7df      	b.n	800a116 <__ieee754_sqrt+0x15e>
 800a156:	1c63      	adds	r3, r4, #1
 800a158:	f023 0401 	bic.w	r4, r3, #1
 800a15c:	e7db      	b.n	800a116 <__ieee754_sqrt+0x15e>
 800a15e:	bf00      	nop
 800a160:	7ff00000 	.word	0x7ff00000
 800a164:	200001e0 	.word	0x200001e0
 800a168:	200001d8 	.word	0x200001d8
 800a16c:	00000000 	.word	0x00000000

0800a170 <__ieee754_pow>:
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a174:	b091      	sub	sp, #68	@ 0x44
 800a176:	ed8d 1b00 	vstr	d1, [sp]
 800a17a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a17e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a182:	ea5a 0001 	orrs.w	r0, sl, r1
 800a186:	ec57 6b10 	vmov	r6, r7, d0
 800a18a:	d113      	bne.n	800a1b4 <__ieee754_pow+0x44>
 800a18c:	19b3      	adds	r3, r6, r6
 800a18e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a192:	4152      	adcs	r2, r2
 800a194:	4298      	cmp	r0, r3
 800a196:	4b98      	ldr	r3, [pc, #608]	@ (800a3f8 <__ieee754_pow+0x288>)
 800a198:	4193      	sbcs	r3, r2
 800a19a:	f080 84ea 	bcs.w	800ab72 <__ieee754_pow+0xa02>
 800a19e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	f7f6 f891 	bl	80002cc <__adddf3>
 800a1aa:	ec41 0b10 	vmov	d0, r0, r1
 800a1ae:	b011      	add	sp, #68	@ 0x44
 800a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b4:	4a91      	ldr	r2, [pc, #580]	@ (800a3fc <__ieee754_pow+0x28c>)
 800a1b6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a1ba:	4590      	cmp	r8, r2
 800a1bc:	463d      	mov	r5, r7
 800a1be:	4633      	mov	r3, r6
 800a1c0:	d806      	bhi.n	800a1d0 <__ieee754_pow+0x60>
 800a1c2:	d101      	bne.n	800a1c8 <__ieee754_pow+0x58>
 800a1c4:	2e00      	cmp	r6, #0
 800a1c6:	d1ea      	bne.n	800a19e <__ieee754_pow+0x2e>
 800a1c8:	4592      	cmp	sl, r2
 800a1ca:	d801      	bhi.n	800a1d0 <__ieee754_pow+0x60>
 800a1cc:	d10e      	bne.n	800a1ec <__ieee754_pow+0x7c>
 800a1ce:	b169      	cbz	r1, 800a1ec <__ieee754_pow+0x7c>
 800a1d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a1d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a1d8:	431d      	orrs	r5, r3
 800a1da:	d1e0      	bne.n	800a19e <__ieee754_pow+0x2e>
 800a1dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1e0:	18db      	adds	r3, r3, r3
 800a1e2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a1e6:	4152      	adcs	r2, r2
 800a1e8:	429d      	cmp	r5, r3
 800a1ea:	e7d4      	b.n	800a196 <__ieee754_pow+0x26>
 800a1ec:	2d00      	cmp	r5, #0
 800a1ee:	46c3      	mov	fp, r8
 800a1f0:	da3a      	bge.n	800a268 <__ieee754_pow+0xf8>
 800a1f2:	4a83      	ldr	r2, [pc, #524]	@ (800a400 <__ieee754_pow+0x290>)
 800a1f4:	4592      	cmp	sl, r2
 800a1f6:	d84d      	bhi.n	800a294 <__ieee754_pow+0x124>
 800a1f8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a1fc:	4592      	cmp	sl, r2
 800a1fe:	f240 84c7 	bls.w	800ab90 <__ieee754_pow+0xa20>
 800a202:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a206:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a20a:	2a14      	cmp	r2, #20
 800a20c:	dd0f      	ble.n	800a22e <__ieee754_pow+0xbe>
 800a20e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a212:	fa21 f402 	lsr.w	r4, r1, r2
 800a216:	fa04 f202 	lsl.w	r2, r4, r2
 800a21a:	428a      	cmp	r2, r1
 800a21c:	f040 84b8 	bne.w	800ab90 <__ieee754_pow+0xa20>
 800a220:	f004 0401 	and.w	r4, r4, #1
 800a224:	f1c4 0402 	rsb	r4, r4, #2
 800a228:	2900      	cmp	r1, #0
 800a22a:	d158      	bne.n	800a2de <__ieee754_pow+0x16e>
 800a22c:	e00e      	b.n	800a24c <__ieee754_pow+0xdc>
 800a22e:	2900      	cmp	r1, #0
 800a230:	d154      	bne.n	800a2dc <__ieee754_pow+0x16c>
 800a232:	f1c2 0214 	rsb	r2, r2, #20
 800a236:	fa4a f402 	asr.w	r4, sl, r2
 800a23a:	fa04 f202 	lsl.w	r2, r4, r2
 800a23e:	4552      	cmp	r2, sl
 800a240:	f040 84a3 	bne.w	800ab8a <__ieee754_pow+0xa1a>
 800a244:	f004 0401 	and.w	r4, r4, #1
 800a248:	f1c4 0402 	rsb	r4, r4, #2
 800a24c:	4a6d      	ldr	r2, [pc, #436]	@ (800a404 <__ieee754_pow+0x294>)
 800a24e:	4592      	cmp	sl, r2
 800a250:	d12e      	bne.n	800a2b0 <__ieee754_pow+0x140>
 800a252:	f1b9 0f00 	cmp.w	r9, #0
 800a256:	f280 8494 	bge.w	800ab82 <__ieee754_pow+0xa12>
 800a25a:	496a      	ldr	r1, [pc, #424]	@ (800a404 <__ieee754_pow+0x294>)
 800a25c:	4632      	mov	r2, r6
 800a25e:	463b      	mov	r3, r7
 800a260:	2000      	movs	r0, #0
 800a262:	f7f6 fb13 	bl	800088c <__aeabi_ddiv>
 800a266:	e7a0      	b.n	800a1aa <__ieee754_pow+0x3a>
 800a268:	2400      	movs	r4, #0
 800a26a:	bbc1      	cbnz	r1, 800a2de <__ieee754_pow+0x16e>
 800a26c:	4a63      	ldr	r2, [pc, #396]	@ (800a3fc <__ieee754_pow+0x28c>)
 800a26e:	4592      	cmp	sl, r2
 800a270:	d1ec      	bne.n	800a24c <__ieee754_pow+0xdc>
 800a272:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a276:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a27a:	431a      	orrs	r2, r3
 800a27c:	f000 8479 	beq.w	800ab72 <__ieee754_pow+0xa02>
 800a280:	4b61      	ldr	r3, [pc, #388]	@ (800a408 <__ieee754_pow+0x298>)
 800a282:	4598      	cmp	r8, r3
 800a284:	d908      	bls.n	800a298 <__ieee754_pow+0x128>
 800a286:	f1b9 0f00 	cmp.w	r9, #0
 800a28a:	f2c0 8476 	blt.w	800ab7a <__ieee754_pow+0xa0a>
 800a28e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a292:	e78a      	b.n	800a1aa <__ieee754_pow+0x3a>
 800a294:	2402      	movs	r4, #2
 800a296:	e7e8      	b.n	800a26a <__ieee754_pow+0xfa>
 800a298:	f1b9 0f00 	cmp.w	r9, #0
 800a29c:	f04f 0000 	mov.w	r0, #0
 800a2a0:	f04f 0100 	mov.w	r1, #0
 800a2a4:	da81      	bge.n	800a1aa <__ieee754_pow+0x3a>
 800a2a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a2aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a2ae:	e77c      	b.n	800a1aa <__ieee754_pow+0x3a>
 800a2b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a2b4:	d106      	bne.n	800a2c4 <__ieee754_pow+0x154>
 800a2b6:	4632      	mov	r2, r6
 800a2b8:	463b      	mov	r3, r7
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f6 f9bb 	bl	8000638 <__aeabi_dmul>
 800a2c2:	e772      	b.n	800a1aa <__ieee754_pow+0x3a>
 800a2c4:	4a51      	ldr	r2, [pc, #324]	@ (800a40c <__ieee754_pow+0x29c>)
 800a2c6:	4591      	cmp	r9, r2
 800a2c8:	d109      	bne.n	800a2de <__ieee754_pow+0x16e>
 800a2ca:	2d00      	cmp	r5, #0
 800a2cc:	db07      	blt.n	800a2de <__ieee754_pow+0x16e>
 800a2ce:	ec47 6b10 	vmov	d0, r6, r7
 800a2d2:	b011      	add	sp, #68	@ 0x44
 800a2d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d8:	f7ff be6e 	b.w	8009fb8 <__ieee754_sqrt>
 800a2dc:	2400      	movs	r4, #0
 800a2de:	ec47 6b10 	vmov	d0, r6, r7
 800a2e2:	9302      	str	r3, [sp, #8]
 800a2e4:	f001 fb9a 	bl	800ba1c <fabs>
 800a2e8:	9b02      	ldr	r3, [sp, #8]
 800a2ea:	ec51 0b10 	vmov	r0, r1, d0
 800a2ee:	bb53      	cbnz	r3, 800a346 <__ieee754_pow+0x1d6>
 800a2f0:	4b44      	ldr	r3, [pc, #272]	@ (800a404 <__ieee754_pow+0x294>)
 800a2f2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d002      	beq.n	800a300 <__ieee754_pow+0x190>
 800a2fa:	f1b8 0f00 	cmp.w	r8, #0
 800a2fe:	d122      	bne.n	800a346 <__ieee754_pow+0x1d6>
 800a300:	f1b9 0f00 	cmp.w	r9, #0
 800a304:	da05      	bge.n	800a312 <__ieee754_pow+0x1a2>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	2000      	movs	r0, #0
 800a30c:	493d      	ldr	r1, [pc, #244]	@ (800a404 <__ieee754_pow+0x294>)
 800a30e:	f7f6 fabd 	bl	800088c <__aeabi_ddiv>
 800a312:	2d00      	cmp	r5, #0
 800a314:	f6bf af49 	bge.w	800a1aa <__ieee754_pow+0x3a>
 800a318:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a31c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a320:	ea58 0804 	orrs.w	r8, r8, r4
 800a324:	d108      	bne.n	800a338 <__ieee754_pow+0x1c8>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4610      	mov	r0, r2
 800a32c:	4619      	mov	r1, r3
 800a32e:	f7f5 ffcb 	bl	80002c8 <__aeabi_dsub>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	e794      	b.n	800a262 <__ieee754_pow+0xf2>
 800a338:	2c01      	cmp	r4, #1
 800a33a:	f47f af36 	bne.w	800a1aa <__ieee754_pow+0x3a>
 800a33e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a342:	4619      	mov	r1, r3
 800a344:	e731      	b.n	800a1aa <__ieee754_pow+0x3a>
 800a346:	0feb      	lsrs	r3, r5, #31
 800a348:	3b01      	subs	r3, #1
 800a34a:	ea53 0204 	orrs.w	r2, r3, r4
 800a34e:	d102      	bne.n	800a356 <__ieee754_pow+0x1e6>
 800a350:	4632      	mov	r2, r6
 800a352:	463b      	mov	r3, r7
 800a354:	e7e9      	b.n	800a32a <__ieee754_pow+0x1ba>
 800a356:	3c01      	subs	r4, #1
 800a358:	431c      	orrs	r4, r3
 800a35a:	d016      	beq.n	800a38a <__ieee754_pow+0x21a>
 800a35c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a3e8 <__ieee754_pow+0x278>
 800a360:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a364:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a368:	f240 8112 	bls.w	800a590 <__ieee754_pow+0x420>
 800a36c:	4b28      	ldr	r3, [pc, #160]	@ (800a410 <__ieee754_pow+0x2a0>)
 800a36e:	459a      	cmp	sl, r3
 800a370:	4b25      	ldr	r3, [pc, #148]	@ (800a408 <__ieee754_pow+0x298>)
 800a372:	d916      	bls.n	800a3a2 <__ieee754_pow+0x232>
 800a374:	4598      	cmp	r8, r3
 800a376:	d80b      	bhi.n	800a390 <__ieee754_pow+0x220>
 800a378:	f1b9 0f00 	cmp.w	r9, #0
 800a37c:	da0b      	bge.n	800a396 <__ieee754_pow+0x226>
 800a37e:	2000      	movs	r0, #0
 800a380:	b011      	add	sp, #68	@ 0x44
 800a382:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a386:	f000 be67 	b.w	800b058 <__math_oflow>
 800a38a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a3f0 <__ieee754_pow+0x280>
 800a38e:	e7e7      	b.n	800a360 <__ieee754_pow+0x1f0>
 800a390:	f1b9 0f00 	cmp.w	r9, #0
 800a394:	dcf3      	bgt.n	800a37e <__ieee754_pow+0x20e>
 800a396:	2000      	movs	r0, #0
 800a398:	b011      	add	sp, #68	@ 0x44
 800a39a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39e:	f000 be53 	b.w	800b048 <__math_uflow>
 800a3a2:	4598      	cmp	r8, r3
 800a3a4:	d20c      	bcs.n	800a3c0 <__ieee754_pow+0x250>
 800a3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f7f6 fbb5 	bl	8000b1c <__aeabi_dcmplt>
 800a3b2:	3800      	subs	r0, #0
 800a3b4:	bf18      	it	ne
 800a3b6:	2001      	movne	r0, #1
 800a3b8:	f1b9 0f00 	cmp.w	r9, #0
 800a3bc:	daec      	bge.n	800a398 <__ieee754_pow+0x228>
 800a3be:	e7df      	b.n	800a380 <__ieee754_pow+0x210>
 800a3c0:	4b10      	ldr	r3, [pc, #64]	@ (800a404 <__ieee754_pow+0x294>)
 800a3c2:	4598      	cmp	r8, r3
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	d924      	bls.n	800a414 <__ieee754_pow+0x2a4>
 800a3ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f7f6 fba4 	bl	8000b1c <__aeabi_dcmplt>
 800a3d4:	3800      	subs	r0, #0
 800a3d6:	bf18      	it	ne
 800a3d8:	2001      	movne	r0, #1
 800a3da:	f1b9 0f00 	cmp.w	r9, #0
 800a3de:	dccf      	bgt.n	800a380 <__ieee754_pow+0x210>
 800a3e0:	e7da      	b.n	800a398 <__ieee754_pow+0x228>
 800a3e2:	bf00      	nop
 800a3e4:	f3af 8000 	nop.w
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	3ff00000 	.word	0x3ff00000
 800a3f0:	00000000 	.word	0x00000000
 800a3f4:	bff00000 	.word	0xbff00000
 800a3f8:	fff00000 	.word	0xfff00000
 800a3fc:	7ff00000 	.word	0x7ff00000
 800a400:	433fffff 	.word	0x433fffff
 800a404:	3ff00000 	.word	0x3ff00000
 800a408:	3fefffff 	.word	0x3fefffff
 800a40c:	3fe00000 	.word	0x3fe00000
 800a410:	43f00000 	.word	0x43f00000
 800a414:	4b5a      	ldr	r3, [pc, #360]	@ (800a580 <__ieee754_pow+0x410>)
 800a416:	f7f5 ff57 	bl	80002c8 <__aeabi_dsub>
 800a41a:	a351      	add	r3, pc, #324	@ (adr r3, 800a560 <__ieee754_pow+0x3f0>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	f7f6 f908 	bl	8000638 <__aeabi_dmul>
 800a428:	a34f      	add	r3, pc, #316	@ (adr r3, 800a568 <__ieee754_pow+0x3f8>)
 800a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42e:	4606      	mov	r6, r0
 800a430:	460f      	mov	r7, r1
 800a432:	4620      	mov	r0, r4
 800a434:	4629      	mov	r1, r5
 800a436:	f7f6 f8ff 	bl	8000638 <__aeabi_dmul>
 800a43a:	4b52      	ldr	r3, [pc, #328]	@ (800a584 <__ieee754_pow+0x414>)
 800a43c:	4682      	mov	sl, r0
 800a43e:	468b      	mov	fp, r1
 800a440:	2200      	movs	r2, #0
 800a442:	4620      	mov	r0, r4
 800a444:	4629      	mov	r1, r5
 800a446:	f7f6 f8f7 	bl	8000638 <__aeabi_dmul>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	a148      	add	r1, pc, #288	@ (adr r1, 800a570 <__ieee754_pow+0x400>)
 800a450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a454:	f7f5 ff38 	bl	80002c8 <__aeabi_dsub>
 800a458:	4622      	mov	r2, r4
 800a45a:	462b      	mov	r3, r5
 800a45c:	f7f6 f8ec 	bl	8000638 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	2000      	movs	r0, #0
 800a466:	4948      	ldr	r1, [pc, #288]	@ (800a588 <__ieee754_pow+0x418>)
 800a468:	f7f5 ff2e 	bl	80002c8 <__aeabi_dsub>
 800a46c:	4622      	mov	r2, r4
 800a46e:	4680      	mov	r8, r0
 800a470:	4689      	mov	r9, r1
 800a472:	462b      	mov	r3, r5
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f6 f8de 	bl	8000638 <__aeabi_dmul>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4640      	mov	r0, r8
 800a482:	4649      	mov	r1, r9
 800a484:	f7f6 f8d8 	bl	8000638 <__aeabi_dmul>
 800a488:	a33b      	add	r3, pc, #236	@ (adr r3, 800a578 <__ieee754_pow+0x408>)
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	f7f6 f8d3 	bl	8000638 <__aeabi_dmul>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4650      	mov	r0, sl
 800a498:	4659      	mov	r1, fp
 800a49a:	f7f5 ff15 	bl	80002c8 <__aeabi_dsub>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	4689      	mov	r9, r1
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	f7f5 ff0f 	bl	80002cc <__adddf3>
 800a4ae:	2400      	movs	r4, #0
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	463b      	mov	r3, r7
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	460d      	mov	r5, r1
 800a4b8:	f7f5 ff06 	bl	80002c8 <__aeabi_dsub>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	f7f5 ff00 	bl	80002c8 <__aeabi_dsub>
 800a4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a4d8:	4606      	mov	r6, r0
 800a4da:	460f      	mov	r7, r1
 800a4dc:	4652      	mov	r2, sl
 800a4de:	465b      	mov	r3, fp
 800a4e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4e4:	f7f5 fef0 	bl	80002c8 <__aeabi_dsub>
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	f7f6 f8a4 	bl	8000638 <__aeabi_dmul>
 800a4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	4689      	mov	r9, r1
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	f7f6 f89c 	bl	8000638 <__aeabi_dmul>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4640      	mov	r0, r8
 800a506:	4649      	mov	r1, r9
 800a508:	f7f5 fee0 	bl	80002cc <__adddf3>
 800a50c:	4652      	mov	r2, sl
 800a50e:	465b      	mov	r3, fp
 800a510:	4606      	mov	r6, r0
 800a512:	460f      	mov	r7, r1
 800a514:	4620      	mov	r0, r4
 800a516:	4629      	mov	r1, r5
 800a518:	f7f6 f88e 	bl	8000638 <__aeabi_dmul>
 800a51c:	460b      	mov	r3, r1
 800a51e:	4602      	mov	r2, r0
 800a520:	4680      	mov	r8, r0
 800a522:	4689      	mov	r9, r1
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	f7f5 fed0 	bl	80002cc <__adddf3>
 800a52c:	4b17      	ldr	r3, [pc, #92]	@ (800a58c <__ieee754_pow+0x41c>)
 800a52e:	4299      	cmp	r1, r3
 800a530:	4604      	mov	r4, r0
 800a532:	460d      	mov	r5, r1
 800a534:	468a      	mov	sl, r1
 800a536:	468b      	mov	fp, r1
 800a538:	f340 82ef 	ble.w	800ab1a <__ieee754_pow+0x9aa>
 800a53c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a540:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a544:	4303      	orrs	r3, r0
 800a546:	f000 81e8 	beq.w	800a91a <__ieee754_pow+0x7aa>
 800a54a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a54e:	2200      	movs	r2, #0
 800a550:	2300      	movs	r3, #0
 800a552:	f7f6 fae3 	bl	8000b1c <__aeabi_dcmplt>
 800a556:	3800      	subs	r0, #0
 800a558:	bf18      	it	ne
 800a55a:	2001      	movne	r0, #1
 800a55c:	e710      	b.n	800a380 <__ieee754_pow+0x210>
 800a55e:	bf00      	nop
 800a560:	60000000 	.word	0x60000000
 800a564:	3ff71547 	.word	0x3ff71547
 800a568:	f85ddf44 	.word	0xf85ddf44
 800a56c:	3e54ae0b 	.word	0x3e54ae0b
 800a570:	55555555 	.word	0x55555555
 800a574:	3fd55555 	.word	0x3fd55555
 800a578:	652b82fe 	.word	0x652b82fe
 800a57c:	3ff71547 	.word	0x3ff71547
 800a580:	3ff00000 	.word	0x3ff00000
 800a584:	3fd00000 	.word	0x3fd00000
 800a588:	3fe00000 	.word	0x3fe00000
 800a58c:	408fffff 	.word	0x408fffff
 800a590:	4bd5      	ldr	r3, [pc, #852]	@ (800a8e8 <__ieee754_pow+0x778>)
 800a592:	402b      	ands	r3, r5
 800a594:	2200      	movs	r2, #0
 800a596:	b92b      	cbnz	r3, 800a5a4 <__ieee754_pow+0x434>
 800a598:	4bd4      	ldr	r3, [pc, #848]	@ (800a8ec <__ieee754_pow+0x77c>)
 800a59a:	f7f6 f84d 	bl	8000638 <__aeabi_dmul>
 800a59e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a5a2:	468b      	mov	fp, r1
 800a5a4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a5a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a5ac:	4413      	add	r3, r2
 800a5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5b0:	4bcf      	ldr	r3, [pc, #828]	@ (800a8f0 <__ieee754_pow+0x780>)
 800a5b2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a5b6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a5ba:	459b      	cmp	fp, r3
 800a5bc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a5c0:	dd08      	ble.n	800a5d4 <__ieee754_pow+0x464>
 800a5c2:	4bcc      	ldr	r3, [pc, #816]	@ (800a8f4 <__ieee754_pow+0x784>)
 800a5c4:	459b      	cmp	fp, r3
 800a5c6:	f340 81a5 	ble.w	800a914 <__ieee754_pow+0x7a4>
 800a5ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a5d4:	f04f 0a00 	mov.w	sl, #0
 800a5d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a5dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5de:	4bc6      	ldr	r3, [pc, #792]	@ (800a8f8 <__ieee754_pow+0x788>)
 800a5e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5e4:	ed93 7b00 	vldr	d7, [r3]
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	ec53 2b17 	vmov	r2, r3, d7
 800a5ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a5f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a5f6:	f7f5 fe67 	bl	80002c8 <__aeabi_dsub>
 800a5fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a5fe:	4606      	mov	r6, r0
 800a600:	460f      	mov	r7, r1
 800a602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a606:	f7f5 fe61 	bl	80002cc <__adddf3>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	2000      	movs	r0, #0
 800a610:	49ba      	ldr	r1, [pc, #744]	@ (800a8fc <__ieee754_pow+0x78c>)
 800a612:	f7f6 f93b 	bl	800088c <__aeabi_ddiv>
 800a616:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	f7f6 f809 	bl	8000638 <__aeabi_dmul>
 800a626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a62a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a62e:	106d      	asrs	r5, r5, #1
 800a630:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a634:	f04f 0b00 	mov.w	fp, #0
 800a638:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a63c:	4661      	mov	r1, ip
 800a63e:	2200      	movs	r2, #0
 800a640:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a644:	4658      	mov	r0, fp
 800a646:	46e1      	mov	r9, ip
 800a648:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a64c:	4614      	mov	r4, r2
 800a64e:	461d      	mov	r5, r3
 800a650:	f7f5 fff2 	bl	8000638 <__aeabi_dmul>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4630      	mov	r0, r6
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7f5 fe34 	bl	80002c8 <__aeabi_dsub>
 800a660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a664:	4606      	mov	r6, r0
 800a666:	460f      	mov	r7, r1
 800a668:	4620      	mov	r0, r4
 800a66a:	4629      	mov	r1, r5
 800a66c:	f7f5 fe2c 	bl	80002c8 <__aeabi_dsub>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a678:	f7f5 fe26 	bl	80002c8 <__aeabi_dsub>
 800a67c:	465a      	mov	r2, fp
 800a67e:	464b      	mov	r3, r9
 800a680:	f7f5 ffda 	bl	8000638 <__aeabi_dmul>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4630      	mov	r0, r6
 800a68a:	4639      	mov	r1, r7
 800a68c:	f7f5 fe1c 	bl	80002c8 <__aeabi_dsub>
 800a690:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a694:	f7f5 ffd0 	bl	8000638 <__aeabi_dmul>
 800a698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a69c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	f7f5 ffc8 	bl	8000638 <__aeabi_dmul>
 800a6a8:	a37d      	add	r3, pc, #500	@ (adr r3, 800a8a0 <__ieee754_pow+0x730>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	f7f5 ffc1 	bl	8000638 <__aeabi_dmul>
 800a6b6:	a37c      	add	r3, pc, #496	@ (adr r3, 800a8a8 <__ieee754_pow+0x738>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	f7f5 fe06 	bl	80002cc <__adddf3>
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	f7f5 ffb8 	bl	8000638 <__aeabi_dmul>
 800a6c8:	a379      	add	r3, pc, #484	@ (adr r3, 800a8b0 <__ieee754_pow+0x740>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 fdfd 	bl	80002cc <__adddf3>
 800a6d2:	4622      	mov	r2, r4
 800a6d4:	462b      	mov	r3, r5
 800a6d6:	f7f5 ffaf 	bl	8000638 <__aeabi_dmul>
 800a6da:	a377      	add	r3, pc, #476	@ (adr r3, 800a8b8 <__ieee754_pow+0x748>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f7f5 fdf4 	bl	80002cc <__adddf3>
 800a6e4:	4622      	mov	r2, r4
 800a6e6:	462b      	mov	r3, r5
 800a6e8:	f7f5 ffa6 	bl	8000638 <__aeabi_dmul>
 800a6ec:	a374      	add	r3, pc, #464	@ (adr r3, 800a8c0 <__ieee754_pow+0x750>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	f7f5 fdeb 	bl	80002cc <__adddf3>
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	f7f5 ff9d 	bl	8000638 <__aeabi_dmul>
 800a6fe:	a372      	add	r3, pc, #456	@ (adr r3, 800a8c8 <__ieee754_pow+0x758>)
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f7f5 fde2 	bl	80002cc <__adddf3>
 800a708:	4622      	mov	r2, r4
 800a70a:	4606      	mov	r6, r0
 800a70c:	460f      	mov	r7, r1
 800a70e:	462b      	mov	r3, r5
 800a710:	4620      	mov	r0, r4
 800a712:	4629      	mov	r1, r5
 800a714:	f7f5 ff90 	bl	8000638 <__aeabi_dmul>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f5 ff8a 	bl	8000638 <__aeabi_dmul>
 800a724:	465a      	mov	r2, fp
 800a726:	4604      	mov	r4, r0
 800a728:	460d      	mov	r5, r1
 800a72a:	464b      	mov	r3, r9
 800a72c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a730:	f7f5 fdcc 	bl	80002cc <__adddf3>
 800a734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a738:	f7f5 ff7e 	bl	8000638 <__aeabi_dmul>
 800a73c:	4622      	mov	r2, r4
 800a73e:	462b      	mov	r3, r5
 800a740:	f7f5 fdc4 	bl	80002cc <__adddf3>
 800a744:	465a      	mov	r2, fp
 800a746:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a74a:	464b      	mov	r3, r9
 800a74c:	4658      	mov	r0, fp
 800a74e:	4649      	mov	r1, r9
 800a750:	f7f5 ff72 	bl	8000638 <__aeabi_dmul>
 800a754:	4b6a      	ldr	r3, [pc, #424]	@ (800a900 <__ieee754_pow+0x790>)
 800a756:	2200      	movs	r2, #0
 800a758:	4606      	mov	r6, r0
 800a75a:	460f      	mov	r7, r1
 800a75c:	f7f5 fdb6 	bl	80002cc <__adddf3>
 800a760:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a764:	f7f5 fdb2 	bl	80002cc <__adddf3>
 800a768:	46d8      	mov	r8, fp
 800a76a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a76e:	460d      	mov	r5, r1
 800a770:	465a      	mov	r2, fp
 800a772:	460b      	mov	r3, r1
 800a774:	4640      	mov	r0, r8
 800a776:	4649      	mov	r1, r9
 800a778:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a77c:	f7f5 ff5c 	bl	8000638 <__aeabi_dmul>
 800a780:	465c      	mov	r4, fp
 800a782:	4680      	mov	r8, r0
 800a784:	4689      	mov	r9, r1
 800a786:	4b5e      	ldr	r3, [pc, #376]	@ (800a900 <__ieee754_pow+0x790>)
 800a788:	2200      	movs	r2, #0
 800a78a:	4620      	mov	r0, r4
 800a78c:	4629      	mov	r1, r5
 800a78e:	f7f5 fd9b 	bl	80002c8 <__aeabi_dsub>
 800a792:	4632      	mov	r2, r6
 800a794:	463b      	mov	r3, r7
 800a796:	f7f5 fd97 	bl	80002c8 <__aeabi_dsub>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7a2:	f7f5 fd91 	bl	80002c8 <__aeabi_dsub>
 800a7a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7aa:	f7f5 ff45 	bl	8000638 <__aeabi_dmul>
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ba:	f7f5 ff3d 	bl	8000638 <__aeabi_dmul>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	f7f5 fd81 	bl	80002cc <__adddf3>
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460f      	mov	r7, r1
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	f7f5 fd79 	bl	80002cc <__adddf3>
 800a7da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a7de:	a33c      	add	r3, pc, #240	@ (adr r3, 800a8d0 <__ieee754_pow+0x760>)
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	4658      	mov	r0, fp
 800a7e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a7ea:	460d      	mov	r5, r1
 800a7ec:	f7f5 ff24 	bl	8000638 <__aeabi_dmul>
 800a7f0:	465c      	mov	r4, fp
 800a7f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7f6:	4642      	mov	r2, r8
 800a7f8:	464b      	mov	r3, r9
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f5 fd63 	bl	80002c8 <__aeabi_dsub>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4630      	mov	r0, r6
 800a808:	4639      	mov	r1, r7
 800a80a:	f7f5 fd5d 	bl	80002c8 <__aeabi_dsub>
 800a80e:	a332      	add	r3, pc, #200	@ (adr r3, 800a8d8 <__ieee754_pow+0x768>)
 800a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a814:	f7f5 ff10 	bl	8000638 <__aeabi_dmul>
 800a818:	a331      	add	r3, pc, #196	@ (adr r3, 800a8e0 <__ieee754_pow+0x770>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	4606      	mov	r6, r0
 800a820:	460f      	mov	r7, r1
 800a822:	4620      	mov	r0, r4
 800a824:	4629      	mov	r1, r5
 800a826:	f7f5 ff07 	bl	8000638 <__aeabi_dmul>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f5 fd4b 	bl	80002cc <__adddf3>
 800a836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a838:	4b32      	ldr	r3, [pc, #200]	@ (800a904 <__ieee754_pow+0x794>)
 800a83a:	4413      	add	r3, r2
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	f7f5 fd44 	bl	80002cc <__adddf3>
 800a844:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a848:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a84a:	f7f5 fe8b 	bl	8000564 <__aeabi_i2d>
 800a84e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a850:	4b2d      	ldr	r3, [pc, #180]	@ (800a908 <__ieee754_pow+0x798>)
 800a852:	4413      	add	r3, r2
 800a854:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a858:	4606      	mov	r6, r0
 800a85a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a85e:	460f      	mov	r7, r1
 800a860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a864:	f7f5 fd32 	bl	80002cc <__adddf3>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	f7f5 fd2e 	bl	80002cc <__adddf3>
 800a870:	4632      	mov	r2, r6
 800a872:	463b      	mov	r3, r7
 800a874:	f7f5 fd2a 	bl	80002cc <__adddf3>
 800a878:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a87c:	4632      	mov	r2, r6
 800a87e:	463b      	mov	r3, r7
 800a880:	4658      	mov	r0, fp
 800a882:	460d      	mov	r5, r1
 800a884:	f7f5 fd20 	bl	80002c8 <__aeabi_dsub>
 800a888:	4642      	mov	r2, r8
 800a88a:	464b      	mov	r3, r9
 800a88c:	f7f5 fd1c 	bl	80002c8 <__aeabi_dsub>
 800a890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a894:	f7f5 fd18 	bl	80002c8 <__aeabi_dsub>
 800a898:	465c      	mov	r4, fp
 800a89a:	4602      	mov	r2, r0
 800a89c:	e036      	b.n	800a90c <__ieee754_pow+0x79c>
 800a89e:	bf00      	nop
 800a8a0:	4a454eef 	.word	0x4a454eef
 800a8a4:	3fca7e28 	.word	0x3fca7e28
 800a8a8:	93c9db65 	.word	0x93c9db65
 800a8ac:	3fcd864a 	.word	0x3fcd864a
 800a8b0:	a91d4101 	.word	0xa91d4101
 800a8b4:	3fd17460 	.word	0x3fd17460
 800a8b8:	518f264d 	.word	0x518f264d
 800a8bc:	3fd55555 	.word	0x3fd55555
 800a8c0:	db6fabff 	.word	0xdb6fabff
 800a8c4:	3fdb6db6 	.word	0x3fdb6db6
 800a8c8:	33333303 	.word	0x33333303
 800a8cc:	3fe33333 	.word	0x3fe33333
 800a8d0:	e0000000 	.word	0xe0000000
 800a8d4:	3feec709 	.word	0x3feec709
 800a8d8:	dc3a03fd 	.word	0xdc3a03fd
 800a8dc:	3feec709 	.word	0x3feec709
 800a8e0:	145b01f5 	.word	0x145b01f5
 800a8e4:	be3e2fe0 	.word	0xbe3e2fe0
 800a8e8:	7ff00000 	.word	0x7ff00000
 800a8ec:	43400000 	.word	0x43400000
 800a8f0:	0003988e 	.word	0x0003988e
 800a8f4:	000bb679 	.word	0x000bb679
 800a8f8:	0800c108 	.word	0x0800c108
 800a8fc:	3ff00000 	.word	0x3ff00000
 800a900:	40080000 	.word	0x40080000
 800a904:	0800c0e8 	.word	0x0800c0e8
 800a908:	0800c0f8 	.word	0x0800c0f8
 800a90c:	460b      	mov	r3, r1
 800a90e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a912:	e5d7      	b.n	800a4c4 <__ieee754_pow+0x354>
 800a914:	f04f 0a01 	mov.w	sl, #1
 800a918:	e65e      	b.n	800a5d8 <__ieee754_pow+0x468>
 800a91a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800abec <__ieee754_pow+0xa7c>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	4630      	mov	r0, r6
 800a922:	4639      	mov	r1, r7
 800a924:	f7f5 fcd2 	bl	80002cc <__adddf3>
 800a928:	4642      	mov	r2, r8
 800a92a:	e9cd 0100 	strd	r0, r1, [sp]
 800a92e:	464b      	mov	r3, r9
 800a930:	4620      	mov	r0, r4
 800a932:	4629      	mov	r1, r5
 800a934:	f7f5 fcc8 	bl	80002c8 <__aeabi_dsub>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a940:	f7f6 f90a 	bl	8000b58 <__aeabi_dcmpgt>
 800a944:	2800      	cmp	r0, #0
 800a946:	f47f ae00 	bne.w	800a54a <__ieee754_pow+0x3da>
 800a94a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a94e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a952:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a956:	fa43 fa0a 	asr.w	sl, r3, sl
 800a95a:	44da      	add	sl, fp
 800a95c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a960:	489d      	ldr	r0, [pc, #628]	@ (800abd8 <__ieee754_pow+0xa68>)
 800a962:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a966:	4108      	asrs	r0, r1
 800a968:	ea00 030a 	and.w	r3, r0, sl
 800a96c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a970:	f1c1 0114 	rsb	r1, r1, #20
 800a974:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a978:	fa4a fa01 	asr.w	sl, sl, r1
 800a97c:	f1bb 0f00 	cmp.w	fp, #0
 800a980:	4640      	mov	r0, r8
 800a982:	4649      	mov	r1, r9
 800a984:	f04f 0200 	mov.w	r2, #0
 800a988:	bfb8      	it	lt
 800a98a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a98e:	f7f5 fc9b 	bl	80002c8 <__aeabi_dsub>
 800a992:	4680      	mov	r8, r0
 800a994:	4689      	mov	r9, r1
 800a996:	4632      	mov	r2, r6
 800a998:	463b      	mov	r3, r7
 800a99a:	4640      	mov	r0, r8
 800a99c:	4649      	mov	r1, r9
 800a99e:	f7f5 fc95 	bl	80002cc <__adddf3>
 800a9a2:	2400      	movs	r4, #0
 800a9a4:	a37c      	add	r3, pc, #496	@ (adr r3, 800ab98 <__ieee754_pow+0xa28>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	460d      	mov	r5, r1
 800a9ae:	f7f5 fe43 	bl	8000638 <__aeabi_dmul>
 800a9b2:	4642      	mov	r2, r8
 800a9b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a9b8:	464b      	mov	r3, r9
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	4629      	mov	r1, r5
 800a9be:	f7f5 fc83 	bl	80002c8 <__aeabi_dsub>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	f7f5 fc7d 	bl	80002c8 <__aeabi_dsub>
 800a9ce:	a374      	add	r3, pc, #464	@ (adr r3, 800aba0 <__ieee754_pow+0xa30>)
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f7f5 fe30 	bl	8000638 <__aeabi_dmul>
 800a9d8:	a373      	add	r3, pc, #460	@ (adr r3, 800aba8 <__ieee754_pow+0xa38>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	4680      	mov	r8, r0
 800a9e0:	4689      	mov	r9, r1
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	f7f5 fe27 	bl	8000638 <__aeabi_dmul>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	f7f5 fc6b 	bl	80002cc <__adddf3>
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	460d      	mov	r5, r1
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa02:	f7f5 fc63 	bl	80002cc <__adddf3>
 800aa06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4689      	mov	r9, r1
 800aa0e:	f7f5 fc5b 	bl	80002c8 <__aeabi_dsub>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4620      	mov	r0, r4
 800aa18:	4629      	mov	r1, r5
 800aa1a:	f7f5 fc55 	bl	80002c8 <__aeabi_dsub>
 800aa1e:	4642      	mov	r2, r8
 800aa20:	4606      	mov	r6, r0
 800aa22:	460f      	mov	r7, r1
 800aa24:	464b      	mov	r3, r9
 800aa26:	4640      	mov	r0, r8
 800aa28:	4649      	mov	r1, r9
 800aa2a:	f7f5 fe05 	bl	8000638 <__aeabi_dmul>
 800aa2e:	a360      	add	r3, pc, #384	@ (adr r3, 800abb0 <__ieee754_pow+0xa40>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	4604      	mov	r4, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	f7f5 fdfe 	bl	8000638 <__aeabi_dmul>
 800aa3c:	a35e      	add	r3, pc, #376	@ (adr r3, 800abb8 <__ieee754_pow+0xa48>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 fc41 	bl	80002c8 <__aeabi_dsub>
 800aa46:	4622      	mov	r2, r4
 800aa48:	462b      	mov	r3, r5
 800aa4a:	f7f5 fdf5 	bl	8000638 <__aeabi_dmul>
 800aa4e:	a35c      	add	r3, pc, #368	@ (adr r3, 800abc0 <__ieee754_pow+0xa50>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fc3a 	bl	80002cc <__adddf3>
 800aa58:	4622      	mov	r2, r4
 800aa5a:	462b      	mov	r3, r5
 800aa5c:	f7f5 fdec 	bl	8000638 <__aeabi_dmul>
 800aa60:	a359      	add	r3, pc, #356	@ (adr r3, 800abc8 <__ieee754_pow+0xa58>)
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	f7f5 fc2f 	bl	80002c8 <__aeabi_dsub>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	f7f5 fde3 	bl	8000638 <__aeabi_dmul>
 800aa72:	a357      	add	r3, pc, #348	@ (adr r3, 800abd0 <__ieee754_pow+0xa60>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f7f5 fc28 	bl	80002cc <__adddf3>
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	462b      	mov	r3, r5
 800aa80:	f7f5 fdda 	bl	8000638 <__aeabi_dmul>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4640      	mov	r0, r8
 800aa8a:	4649      	mov	r1, r9
 800aa8c:	f7f5 fc1c 	bl	80002c8 <__aeabi_dsub>
 800aa90:	4604      	mov	r4, r0
 800aa92:	460d      	mov	r5, r1
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	f7f5 fdcc 	bl	8000638 <__aeabi_dmul>
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	e9cd 0100 	strd	r0, r1, [sp]
 800aaa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aaaa:	4620      	mov	r0, r4
 800aaac:	4629      	mov	r1, r5
 800aaae:	f7f5 fc0b 	bl	80002c8 <__aeabi_dsub>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaba:	f7f5 fee7 	bl	800088c <__aeabi_ddiv>
 800aabe:	4632      	mov	r2, r6
 800aac0:	4604      	mov	r4, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	463b      	mov	r3, r7
 800aac6:	4640      	mov	r0, r8
 800aac8:	4649      	mov	r1, r9
 800aaca:	f7f5 fdb5 	bl	8000638 <__aeabi_dmul>
 800aace:	4632      	mov	r2, r6
 800aad0:	463b      	mov	r3, r7
 800aad2:	f7f5 fbfb 	bl	80002cc <__adddf3>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4620      	mov	r0, r4
 800aadc:	4629      	mov	r1, r5
 800aade:	f7f5 fbf3 	bl	80002c8 <__aeabi_dsub>
 800aae2:	4642      	mov	r2, r8
 800aae4:	464b      	mov	r3, r9
 800aae6:	f7f5 fbef 	bl	80002c8 <__aeabi_dsub>
 800aaea:	460b      	mov	r3, r1
 800aaec:	4602      	mov	r2, r0
 800aaee:	493b      	ldr	r1, [pc, #236]	@ (800abdc <__ieee754_pow+0xa6c>)
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	f7f5 fbe9 	bl	80002c8 <__aeabi_dsub>
 800aaf6:	ec41 0b10 	vmov	d0, r0, r1
 800aafa:	ee10 3a90 	vmov	r3, s1
 800aafe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ab02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab06:	da30      	bge.n	800ab6a <__ieee754_pow+0x9fa>
 800ab08:	4650      	mov	r0, sl
 800ab0a:	f000 ff91 	bl	800ba30 <scalbn>
 800ab0e:	ec51 0b10 	vmov	r0, r1, d0
 800ab12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab16:	f7ff bbd2 	b.w	800a2be <__ieee754_pow+0x14e>
 800ab1a:	4c31      	ldr	r4, [pc, #196]	@ (800abe0 <__ieee754_pow+0xa70>)
 800ab1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	d91a      	bls.n	800ab5a <__ieee754_pow+0x9ea>
 800ab24:	4b2f      	ldr	r3, [pc, #188]	@ (800abe4 <__ieee754_pow+0xa74>)
 800ab26:	440b      	add	r3, r1
 800ab28:	4303      	orrs	r3, r0
 800ab2a:	d009      	beq.n	800ab40 <__ieee754_pow+0x9d0>
 800ab2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab30:	2200      	movs	r2, #0
 800ab32:	2300      	movs	r3, #0
 800ab34:	f7f5 fff2 	bl	8000b1c <__aeabi_dcmplt>
 800ab38:	3800      	subs	r0, #0
 800ab3a:	bf18      	it	ne
 800ab3c:	2001      	movne	r0, #1
 800ab3e:	e42b      	b.n	800a398 <__ieee754_pow+0x228>
 800ab40:	4642      	mov	r2, r8
 800ab42:	464b      	mov	r3, r9
 800ab44:	f7f5 fbc0 	bl	80002c8 <__aeabi_dsub>
 800ab48:	4632      	mov	r2, r6
 800ab4a:	463b      	mov	r3, r7
 800ab4c:	f7f5 fffa 	bl	8000b44 <__aeabi_dcmpge>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d1eb      	bne.n	800ab2c <__ieee754_pow+0x9bc>
 800ab54:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800abf4 <__ieee754_pow+0xa84>
 800ab58:	e6f7      	b.n	800a94a <__ieee754_pow+0x7da>
 800ab5a:	469a      	mov	sl, r3
 800ab5c:	4b22      	ldr	r3, [pc, #136]	@ (800abe8 <__ieee754_pow+0xa78>)
 800ab5e:	459a      	cmp	sl, r3
 800ab60:	f63f aef3 	bhi.w	800a94a <__ieee754_pow+0x7da>
 800ab64:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ab68:	e715      	b.n	800a996 <__ieee754_pow+0x826>
 800ab6a:	ec51 0b10 	vmov	r0, r1, d0
 800ab6e:	4619      	mov	r1, r3
 800ab70:	e7cf      	b.n	800ab12 <__ieee754_pow+0x9a2>
 800ab72:	491a      	ldr	r1, [pc, #104]	@ (800abdc <__ieee754_pow+0xa6c>)
 800ab74:	2000      	movs	r0, #0
 800ab76:	f7ff bb18 	b.w	800a1aa <__ieee754_pow+0x3a>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	f7ff bb14 	b.w	800a1aa <__ieee754_pow+0x3a>
 800ab82:	4630      	mov	r0, r6
 800ab84:	4639      	mov	r1, r7
 800ab86:	f7ff bb10 	b.w	800a1aa <__ieee754_pow+0x3a>
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	f7ff bb5e 	b.w	800a24c <__ieee754_pow+0xdc>
 800ab90:	2400      	movs	r4, #0
 800ab92:	f7ff bb49 	b.w	800a228 <__ieee754_pow+0xb8>
 800ab96:	bf00      	nop
 800ab98:	00000000 	.word	0x00000000
 800ab9c:	3fe62e43 	.word	0x3fe62e43
 800aba0:	fefa39ef 	.word	0xfefa39ef
 800aba4:	3fe62e42 	.word	0x3fe62e42
 800aba8:	0ca86c39 	.word	0x0ca86c39
 800abac:	be205c61 	.word	0xbe205c61
 800abb0:	72bea4d0 	.word	0x72bea4d0
 800abb4:	3e663769 	.word	0x3e663769
 800abb8:	c5d26bf1 	.word	0xc5d26bf1
 800abbc:	3ebbbd41 	.word	0x3ebbbd41
 800abc0:	af25de2c 	.word	0xaf25de2c
 800abc4:	3f11566a 	.word	0x3f11566a
 800abc8:	16bebd93 	.word	0x16bebd93
 800abcc:	3f66c16c 	.word	0x3f66c16c
 800abd0:	5555553e 	.word	0x5555553e
 800abd4:	3fc55555 	.word	0x3fc55555
 800abd8:	fff00000 	.word	0xfff00000
 800abdc:	3ff00000 	.word	0x3ff00000
 800abe0:	4090cbff 	.word	0x4090cbff
 800abe4:	3f6f3400 	.word	0x3f6f3400
 800abe8:	3fe00000 	.word	0x3fe00000
 800abec:	652b82fe 	.word	0x652b82fe
 800abf0:	3c971547 	.word	0x3c971547
 800abf4:	4090cc00 	.word	0x4090cc00

0800abf8 <__ieee754_rem_pio2>:
 800abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	ec57 6b10 	vmov	r6, r7, d0
 800ac00:	4bc5      	ldr	r3, [pc, #788]	@ (800af18 <__ieee754_rem_pio2+0x320>)
 800ac02:	b08d      	sub	sp, #52	@ 0x34
 800ac04:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ac08:	4598      	cmp	r8, r3
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	9704      	str	r7, [sp, #16]
 800ac0e:	d807      	bhi.n	800ac20 <__ieee754_rem_pio2+0x28>
 800ac10:	2200      	movs	r2, #0
 800ac12:	2300      	movs	r3, #0
 800ac14:	ed80 0b00 	vstr	d0, [r0]
 800ac18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ac1c:	2500      	movs	r5, #0
 800ac1e:	e028      	b.n	800ac72 <__ieee754_rem_pio2+0x7a>
 800ac20:	4bbe      	ldr	r3, [pc, #760]	@ (800af1c <__ieee754_rem_pio2+0x324>)
 800ac22:	4598      	cmp	r8, r3
 800ac24:	d878      	bhi.n	800ad18 <__ieee754_rem_pio2+0x120>
 800ac26:	9b04      	ldr	r3, [sp, #16]
 800ac28:	4dbd      	ldr	r5, [pc, #756]	@ (800af20 <__ieee754_rem_pio2+0x328>)
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800aee0 <__ieee754_rem_pio2+0x2e8>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	4639      	mov	r1, r7
 800ac36:	dd38      	ble.n	800acaa <__ieee754_rem_pio2+0xb2>
 800ac38:	f7f5 fb46 	bl	80002c8 <__aeabi_dsub>
 800ac3c:	45a8      	cmp	r8, r5
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460f      	mov	r7, r1
 800ac42:	d01a      	beq.n	800ac7a <__ieee754_rem_pio2+0x82>
 800ac44:	a3a8      	add	r3, pc, #672	@ (adr r3, 800aee8 <__ieee754_rem_pio2+0x2f0>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fb3d 	bl	80002c8 <__aeabi_dsub>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4680      	mov	r8, r0
 800ac54:	4689      	mov	r9, r1
 800ac56:	4630      	mov	r0, r6
 800ac58:	4639      	mov	r1, r7
 800ac5a:	f7f5 fb35 	bl	80002c8 <__aeabi_dsub>
 800ac5e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800aee8 <__ieee754_rem_pio2+0x2f0>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f7f5 fb30 	bl	80002c8 <__aeabi_dsub>
 800ac68:	e9c4 8900 	strd	r8, r9, [r4]
 800ac6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac70:	2501      	movs	r5, #1
 800ac72:	4628      	mov	r0, r5
 800ac74:	b00d      	add	sp, #52	@ 0x34
 800ac76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7a:	a39d      	add	r3, pc, #628	@ (adr r3, 800aef0 <__ieee754_rem_pio2+0x2f8>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f7f5 fb22 	bl	80002c8 <__aeabi_dsub>
 800ac84:	a39c      	add	r3, pc, #624	@ (adr r3, 800aef8 <__ieee754_rem_pio2+0x300>)
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	f7f5 fb1b 	bl	80002c8 <__aeabi_dsub>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4680      	mov	r8, r0
 800ac98:	4689      	mov	r9, r1
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	f7f5 fb13 	bl	80002c8 <__aeabi_dsub>
 800aca2:	a395      	add	r3, pc, #596	@ (adr r3, 800aef8 <__ieee754_rem_pio2+0x300>)
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	e7dc      	b.n	800ac64 <__ieee754_rem_pio2+0x6c>
 800acaa:	f7f5 fb0f 	bl	80002cc <__adddf3>
 800acae:	45a8      	cmp	r8, r5
 800acb0:	4606      	mov	r6, r0
 800acb2:	460f      	mov	r7, r1
 800acb4:	d018      	beq.n	800ace8 <__ieee754_rem_pio2+0xf0>
 800acb6:	a38c      	add	r3, pc, #560	@ (adr r3, 800aee8 <__ieee754_rem_pio2+0x2f0>)
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 fb06 	bl	80002cc <__adddf3>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4680      	mov	r8, r0
 800acc6:	4689      	mov	r9, r1
 800acc8:	4630      	mov	r0, r6
 800acca:	4639      	mov	r1, r7
 800accc:	f7f5 fafc 	bl	80002c8 <__aeabi_dsub>
 800acd0:	a385      	add	r3, pc, #532	@ (adr r3, 800aee8 <__ieee754_rem_pio2+0x2f0>)
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	f7f5 faf9 	bl	80002cc <__adddf3>
 800acda:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800acde:	e9c4 8900 	strd	r8, r9, [r4]
 800ace2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ace6:	e7c4      	b.n	800ac72 <__ieee754_rem_pio2+0x7a>
 800ace8:	a381      	add	r3, pc, #516	@ (adr r3, 800aef0 <__ieee754_rem_pio2+0x2f8>)
 800acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acee:	f7f5 faed 	bl	80002cc <__adddf3>
 800acf2:	a381      	add	r3, pc, #516	@ (adr r3, 800aef8 <__ieee754_rem_pio2+0x300>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	4606      	mov	r6, r0
 800acfa:	460f      	mov	r7, r1
 800acfc:	f7f5 fae6 	bl	80002cc <__adddf3>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4680      	mov	r8, r0
 800ad06:	4689      	mov	r9, r1
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7f5 fadc 	bl	80002c8 <__aeabi_dsub>
 800ad10:	a379      	add	r3, pc, #484	@ (adr r3, 800aef8 <__ieee754_rem_pio2+0x300>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	e7de      	b.n	800acd6 <__ieee754_rem_pio2+0xde>
 800ad18:	4b82      	ldr	r3, [pc, #520]	@ (800af24 <__ieee754_rem_pio2+0x32c>)
 800ad1a:	4598      	cmp	r8, r3
 800ad1c:	f200 80d1 	bhi.w	800aec2 <__ieee754_rem_pio2+0x2ca>
 800ad20:	f000 fe7c 	bl	800ba1c <fabs>
 800ad24:	ec57 6b10 	vmov	r6, r7, d0
 800ad28:	a375      	add	r3, pc, #468	@ (adr r3, 800af00 <__ieee754_rem_pio2+0x308>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	4630      	mov	r0, r6
 800ad30:	4639      	mov	r1, r7
 800ad32:	f7f5 fc81 	bl	8000638 <__aeabi_dmul>
 800ad36:	4b7c      	ldr	r3, [pc, #496]	@ (800af28 <__ieee754_rem_pio2+0x330>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f7f5 fac7 	bl	80002cc <__adddf3>
 800ad3e:	f7f5 ff2b 	bl	8000b98 <__aeabi_d2iz>
 800ad42:	4605      	mov	r5, r0
 800ad44:	f7f5 fc0e 	bl	8000564 <__aeabi_i2d>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad50:	a363      	add	r3, pc, #396	@ (adr r3, 800aee0 <__ieee754_rem_pio2+0x2e8>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	f7f5 fc6f 	bl	8000638 <__aeabi_dmul>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4630      	mov	r0, r6
 800ad60:	4639      	mov	r1, r7
 800ad62:	f7f5 fab1 	bl	80002c8 <__aeabi_dsub>
 800ad66:	a360      	add	r3, pc, #384	@ (adr r3, 800aee8 <__ieee754_rem_pio2+0x2f0>)
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	4682      	mov	sl, r0
 800ad6e:	468b      	mov	fp, r1
 800ad70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad74:	f7f5 fc60 	bl	8000638 <__aeabi_dmul>
 800ad78:	2d1f      	cmp	r5, #31
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	460f      	mov	r7, r1
 800ad7e:	dc0c      	bgt.n	800ad9a <__ieee754_rem_pio2+0x1a2>
 800ad80:	4b6a      	ldr	r3, [pc, #424]	@ (800af2c <__ieee754_rem_pio2+0x334>)
 800ad82:	1e6a      	subs	r2, r5, #1
 800ad84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad88:	4543      	cmp	r3, r8
 800ad8a:	d006      	beq.n	800ad9a <__ieee754_rem_pio2+0x1a2>
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	463b      	mov	r3, r7
 800ad90:	4650      	mov	r0, sl
 800ad92:	4659      	mov	r1, fp
 800ad94:	f7f5 fa98 	bl	80002c8 <__aeabi_dsub>
 800ad98:	e00e      	b.n	800adb8 <__ieee754_rem_pio2+0x1c0>
 800ad9a:	463b      	mov	r3, r7
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	4650      	mov	r0, sl
 800ada0:	4659      	mov	r1, fp
 800ada2:	f7f5 fa91 	bl	80002c8 <__aeabi_dsub>
 800ada6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800adaa:	9305      	str	r3, [sp, #20]
 800adac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800adb0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800adb4:	2b10      	cmp	r3, #16
 800adb6:	dc02      	bgt.n	800adbe <__ieee754_rem_pio2+0x1c6>
 800adb8:	e9c4 0100 	strd	r0, r1, [r4]
 800adbc:	e039      	b.n	800ae32 <__ieee754_rem_pio2+0x23a>
 800adbe:	a34c      	add	r3, pc, #304	@ (adr r3, 800aef0 <__ieee754_rem_pio2+0x2f8>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc8:	f7f5 fc36 	bl	8000638 <__aeabi_dmul>
 800adcc:	4606      	mov	r6, r0
 800adce:	460f      	mov	r7, r1
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4650      	mov	r0, sl
 800add6:	4659      	mov	r1, fp
 800add8:	f7f5 fa76 	bl	80002c8 <__aeabi_dsub>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4680      	mov	r8, r0
 800ade2:	4689      	mov	r9, r1
 800ade4:	4650      	mov	r0, sl
 800ade6:	4659      	mov	r1, fp
 800ade8:	f7f5 fa6e 	bl	80002c8 <__aeabi_dsub>
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	f7f5 fa6a 	bl	80002c8 <__aeabi_dsub>
 800adf4:	a340      	add	r3, pc, #256	@ (adr r3, 800aef8 <__ieee754_rem_pio2+0x300>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	4606      	mov	r6, r0
 800adfc:	460f      	mov	r7, r1
 800adfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae02:	f7f5 fc19 	bl	8000638 <__aeabi_dmul>
 800ae06:	4632      	mov	r2, r6
 800ae08:	463b      	mov	r3, r7
 800ae0a:	f7f5 fa5d 	bl	80002c8 <__aeabi_dsub>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	4606      	mov	r6, r0
 800ae14:	460f      	mov	r7, r1
 800ae16:	4640      	mov	r0, r8
 800ae18:	4649      	mov	r1, r9
 800ae1a:	f7f5 fa55 	bl	80002c8 <__aeabi_dsub>
 800ae1e:	9a05      	ldr	r2, [sp, #20]
 800ae20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b31      	cmp	r3, #49	@ 0x31
 800ae28:	dc20      	bgt.n	800ae6c <__ieee754_rem_pio2+0x274>
 800ae2a:	e9c4 0100 	strd	r0, r1, [r4]
 800ae2e:	46c2      	mov	sl, r8
 800ae30:	46cb      	mov	fp, r9
 800ae32:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae36:	4650      	mov	r0, sl
 800ae38:	4642      	mov	r2, r8
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	f7f5 fa43 	bl	80002c8 <__aeabi_dsub>
 800ae42:	463b      	mov	r3, r7
 800ae44:	4632      	mov	r2, r6
 800ae46:	f7f5 fa3f 	bl	80002c8 <__aeabi_dsub>
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae52:	f6bf af0e 	bge.w	800ac72 <__ieee754_rem_pio2+0x7a>
 800ae56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ae5a:	6063      	str	r3, [r4, #4]
 800ae5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae60:	f8c4 8000 	str.w	r8, [r4]
 800ae64:	60a0      	str	r0, [r4, #8]
 800ae66:	60e3      	str	r3, [r4, #12]
 800ae68:	426d      	negs	r5, r5
 800ae6a:	e702      	b.n	800ac72 <__ieee754_rem_pio2+0x7a>
 800ae6c:	a326      	add	r3, pc, #152	@ (adr r3, 800af08 <__ieee754_rem_pio2+0x310>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae76:	f7f5 fbdf 	bl	8000638 <__aeabi_dmul>
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460f      	mov	r7, r1
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4640      	mov	r0, r8
 800ae84:	4649      	mov	r1, r9
 800ae86:	f7f5 fa1f 	bl	80002c8 <__aeabi_dsub>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4682      	mov	sl, r0
 800ae90:	468b      	mov	fp, r1
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	f7f5 fa17 	bl	80002c8 <__aeabi_dsub>
 800ae9a:	4632      	mov	r2, r6
 800ae9c:	463b      	mov	r3, r7
 800ae9e:	f7f5 fa13 	bl	80002c8 <__aeabi_dsub>
 800aea2:	a31b      	add	r3, pc, #108	@ (adr r3, 800af10 <__ieee754_rem_pio2+0x318>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460f      	mov	r7, r1
 800aeac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeb0:	f7f5 fbc2 	bl	8000638 <__aeabi_dmul>
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	f7f5 fa06 	bl	80002c8 <__aeabi_dsub>
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	e764      	b.n	800ad8c <__ieee754_rem_pio2+0x194>
 800aec2:	4b1b      	ldr	r3, [pc, #108]	@ (800af30 <__ieee754_rem_pio2+0x338>)
 800aec4:	4598      	cmp	r8, r3
 800aec6:	d935      	bls.n	800af34 <__ieee754_rem_pio2+0x33c>
 800aec8:	4632      	mov	r2, r6
 800aeca:	463b      	mov	r3, r7
 800aecc:	4630      	mov	r0, r6
 800aece:	4639      	mov	r1, r7
 800aed0:	f7f5 f9fa 	bl	80002c8 <__aeabi_dsub>
 800aed4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aed8:	e9c4 0100 	strd	r0, r1, [r4]
 800aedc:	e69e      	b.n	800ac1c <__ieee754_rem_pio2+0x24>
 800aede:	bf00      	nop
 800aee0:	54400000 	.word	0x54400000
 800aee4:	3ff921fb 	.word	0x3ff921fb
 800aee8:	1a626331 	.word	0x1a626331
 800aeec:	3dd0b461 	.word	0x3dd0b461
 800aef0:	1a600000 	.word	0x1a600000
 800aef4:	3dd0b461 	.word	0x3dd0b461
 800aef8:	2e037073 	.word	0x2e037073
 800aefc:	3ba3198a 	.word	0x3ba3198a
 800af00:	6dc9c883 	.word	0x6dc9c883
 800af04:	3fe45f30 	.word	0x3fe45f30
 800af08:	2e000000 	.word	0x2e000000
 800af0c:	3ba3198a 	.word	0x3ba3198a
 800af10:	252049c1 	.word	0x252049c1
 800af14:	397b839a 	.word	0x397b839a
 800af18:	3fe921fb 	.word	0x3fe921fb
 800af1c:	4002d97b 	.word	0x4002d97b
 800af20:	3ff921fb 	.word	0x3ff921fb
 800af24:	413921fb 	.word	0x413921fb
 800af28:	3fe00000 	.word	0x3fe00000
 800af2c:	0800c118 	.word	0x0800c118
 800af30:	7fefffff 	.word	0x7fefffff
 800af34:	ea4f 5528 	mov.w	r5, r8, asr #20
 800af38:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800af3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800af40:	4630      	mov	r0, r6
 800af42:	460f      	mov	r7, r1
 800af44:	f7f5 fe28 	bl	8000b98 <__aeabi_d2iz>
 800af48:	f7f5 fb0c 	bl	8000564 <__aeabi_i2d>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4630      	mov	r0, r6
 800af52:	4639      	mov	r1, r7
 800af54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af58:	f7f5 f9b6 	bl	80002c8 <__aeabi_dsub>
 800af5c:	4b22      	ldr	r3, [pc, #136]	@ (800afe8 <__ieee754_rem_pio2+0x3f0>)
 800af5e:	2200      	movs	r2, #0
 800af60:	f7f5 fb6a 	bl	8000638 <__aeabi_dmul>
 800af64:	460f      	mov	r7, r1
 800af66:	4606      	mov	r6, r0
 800af68:	f7f5 fe16 	bl	8000b98 <__aeabi_d2iz>
 800af6c:	f7f5 fafa 	bl	8000564 <__aeabi_i2d>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af7c:	f7f5 f9a4 	bl	80002c8 <__aeabi_dsub>
 800af80:	4b19      	ldr	r3, [pc, #100]	@ (800afe8 <__ieee754_rem_pio2+0x3f0>)
 800af82:	2200      	movs	r2, #0
 800af84:	f7f5 fb58 	bl	8000638 <__aeabi_dmul>
 800af88:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800af8c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800af90:	f04f 0803 	mov.w	r8, #3
 800af94:	2600      	movs	r6, #0
 800af96:	2700      	movs	r7, #0
 800af98:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800af9c:	4632      	mov	r2, r6
 800af9e:	463b      	mov	r3, r7
 800afa0:	46c2      	mov	sl, r8
 800afa2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800afa6:	f7f5 fdaf 	bl	8000b08 <__aeabi_dcmpeq>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d1f4      	bne.n	800af98 <__ieee754_rem_pio2+0x3a0>
 800afae:	4b0f      	ldr	r3, [pc, #60]	@ (800afec <__ieee754_rem_pio2+0x3f4>)
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	2302      	movs	r3, #2
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	462a      	mov	r2, r5
 800afb8:	4653      	mov	r3, sl
 800afba:	4621      	mov	r1, r4
 800afbc:	a806      	add	r0, sp, #24
 800afbe:	f000 f853 	bl	800b068 <__kernel_rem_pio2>
 800afc2:	9b04      	ldr	r3, [sp, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	4605      	mov	r5, r0
 800afc8:	f6bf ae53 	bge.w	800ac72 <__ieee754_rem_pio2+0x7a>
 800afcc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800afd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afd4:	e9c4 2300 	strd	r2, r3, [r4]
 800afd8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800afdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afe0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800afe4:	e740      	b.n	800ae68 <__ieee754_rem_pio2+0x270>
 800afe6:	bf00      	nop
 800afe8:	41700000 	.word	0x41700000
 800afec:	0800c198 	.word	0x0800c198

0800aff0 <with_errno>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	ed2d 8b02 	vpush	{d8}
 800aff6:	eeb0 8a40 	vmov.f32	s16, s0
 800affa:	eef0 8a60 	vmov.f32	s17, s1
 800affe:	4604      	mov	r4, r0
 800b000:	f7fc fd86 	bl	8007b10 <__errno>
 800b004:	eeb0 0a48 	vmov.f32	s0, s16
 800b008:	eef0 0a68 	vmov.f32	s1, s17
 800b00c:	ecbd 8b02 	vpop	{d8}
 800b010:	6004      	str	r4, [r0, #0]
 800b012:	bd10      	pop	{r4, pc}

0800b014 <xflow>:
 800b014:	4603      	mov	r3, r0
 800b016:	b507      	push	{r0, r1, r2, lr}
 800b018:	ec51 0b10 	vmov	r0, r1, d0
 800b01c:	b183      	cbz	r3, 800b040 <xflow+0x2c>
 800b01e:	4602      	mov	r2, r0
 800b020:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b024:	e9cd 2300 	strd	r2, r3, [sp]
 800b028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b02c:	f7f5 fb04 	bl	8000638 <__aeabi_dmul>
 800b030:	ec41 0b10 	vmov	d0, r0, r1
 800b034:	2022      	movs	r0, #34	@ 0x22
 800b036:	b003      	add	sp, #12
 800b038:	f85d eb04 	ldr.w	lr, [sp], #4
 800b03c:	f7ff bfd8 	b.w	800aff0 <with_errno>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	e7ee      	b.n	800b024 <xflow+0x10>
	...

0800b048 <__math_uflow>:
 800b048:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b050 <__math_uflow+0x8>
 800b04c:	f7ff bfe2 	b.w	800b014 <xflow>
 800b050:	00000000 	.word	0x00000000
 800b054:	10000000 	.word	0x10000000

0800b058 <__math_oflow>:
 800b058:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b060 <__math_oflow+0x8>
 800b05c:	f7ff bfda 	b.w	800b014 <xflow>
 800b060:	00000000 	.word	0x00000000
 800b064:	70000000 	.word	0x70000000

0800b068 <__kernel_rem_pio2>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	ed2d 8b02 	vpush	{d8}
 800b070:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b074:	f112 0f14 	cmn.w	r2, #20
 800b078:	9306      	str	r3, [sp, #24]
 800b07a:	9104      	str	r1, [sp, #16]
 800b07c:	4bbe      	ldr	r3, [pc, #760]	@ (800b378 <__kernel_rem_pio2+0x310>)
 800b07e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b080:	9008      	str	r0, [sp, #32]
 800b082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	9b06      	ldr	r3, [sp, #24]
 800b08a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b08e:	bfa8      	it	ge
 800b090:	1ed4      	subge	r4, r2, #3
 800b092:	9305      	str	r3, [sp, #20]
 800b094:	bfb2      	itee	lt
 800b096:	2400      	movlt	r4, #0
 800b098:	2318      	movge	r3, #24
 800b09a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b09e:	f06f 0317 	mvn.w	r3, #23
 800b0a2:	fb04 3303 	mla	r3, r4, r3, r3
 800b0a6:	eb03 0b02 	add.w	fp, r3, r2
 800b0aa:	9b00      	ldr	r3, [sp, #0]
 800b0ac:	9a05      	ldr	r2, [sp, #20]
 800b0ae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b368 <__kernel_rem_pio2+0x300>
 800b0b2:	eb03 0802 	add.w	r8, r3, r2
 800b0b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b0b8:	1aa7      	subs	r7, r4, r2
 800b0ba:	ae20      	add	r6, sp, #128	@ 0x80
 800b0bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b0c0:	2500      	movs	r5, #0
 800b0c2:	4545      	cmp	r5, r8
 800b0c4:	dd13      	ble.n	800b0ee <__kernel_rem_pio2+0x86>
 800b0c6:	9b06      	ldr	r3, [sp, #24]
 800b0c8:	aa20      	add	r2, sp, #128	@ 0x80
 800b0ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b0ce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b0d2:	f04f 0800 	mov.w	r8, #0
 800b0d6:	9b00      	ldr	r3, [sp, #0]
 800b0d8:	4598      	cmp	r8, r3
 800b0da:	dc31      	bgt.n	800b140 <__kernel_rem_pio2+0xd8>
 800b0dc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b368 <__kernel_rem_pio2+0x300>
 800b0e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b0e8:	462f      	mov	r7, r5
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	e01b      	b.n	800b126 <__kernel_rem_pio2+0xbe>
 800b0ee:	42ef      	cmn	r7, r5
 800b0f0:	d407      	bmi.n	800b102 <__kernel_rem_pio2+0x9a>
 800b0f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b0f6:	f7f5 fa35 	bl	8000564 <__aeabi_i2d>
 800b0fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b0fe:	3501      	adds	r5, #1
 800b100:	e7df      	b.n	800b0c2 <__kernel_rem_pio2+0x5a>
 800b102:	ec51 0b18 	vmov	r0, r1, d8
 800b106:	e7f8      	b.n	800b0fa <__kernel_rem_pio2+0x92>
 800b108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b10c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b110:	f7f5 fa92 	bl	8000638 <__aeabi_dmul>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b11c:	f7f5 f8d6 	bl	80002cc <__adddf3>
 800b120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b124:	3601      	adds	r6, #1
 800b126:	9b05      	ldr	r3, [sp, #20]
 800b128:	429e      	cmp	r6, r3
 800b12a:	f1a7 0708 	sub.w	r7, r7, #8
 800b12e:	ddeb      	ble.n	800b108 <__kernel_rem_pio2+0xa0>
 800b130:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b134:	f108 0801 	add.w	r8, r8, #1
 800b138:	ecaa 7b02 	vstmia	sl!, {d7}
 800b13c:	3508      	adds	r5, #8
 800b13e:	e7ca      	b.n	800b0d6 <__kernel_rem_pio2+0x6e>
 800b140:	9b00      	ldr	r3, [sp, #0]
 800b142:	f8dd 8000 	ldr.w	r8, [sp]
 800b146:	aa0c      	add	r2, sp, #48	@ 0x30
 800b148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b14c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b14e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b150:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b154:	9309      	str	r3, [sp, #36]	@ 0x24
 800b156:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b15a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b15c:	ab98      	add	r3, sp, #608	@ 0x260
 800b15e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b162:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b166:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b16a:	ac0c      	add	r4, sp, #48	@ 0x30
 800b16c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b16e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b172:	46a1      	mov	r9, r4
 800b174:	46c2      	mov	sl, r8
 800b176:	f1ba 0f00 	cmp.w	sl, #0
 800b17a:	f1a5 0508 	sub.w	r5, r5, #8
 800b17e:	dc77      	bgt.n	800b270 <__kernel_rem_pio2+0x208>
 800b180:	4658      	mov	r0, fp
 800b182:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b186:	f000 fc53 	bl	800ba30 <scalbn>
 800b18a:	ec57 6b10 	vmov	r6, r7, d0
 800b18e:	2200      	movs	r2, #0
 800b190:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 fa4e 	bl	8000638 <__aeabi_dmul>
 800b19c:	ec41 0b10 	vmov	d0, r0, r1
 800b1a0:	f000 fcc6 	bl	800bb30 <floor>
 800b1a4:	4b75      	ldr	r3, [pc, #468]	@ (800b37c <__kernel_rem_pio2+0x314>)
 800b1a6:	ec51 0b10 	vmov	r0, r1, d0
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f7f5 fa44 	bl	8000638 <__aeabi_dmul>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 f886 	bl	80002c8 <__aeabi_dsub>
 800b1bc:	460f      	mov	r7, r1
 800b1be:	4606      	mov	r6, r0
 800b1c0:	f7f5 fcea 	bl	8000b98 <__aeabi_d2iz>
 800b1c4:	9002      	str	r0, [sp, #8]
 800b1c6:	f7f5 f9cd 	bl	8000564 <__aeabi_i2d>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	4639      	mov	r1, r7
 800b1d2:	f7f5 f879 	bl	80002c8 <__aeabi_dsub>
 800b1d6:	f1bb 0f00 	cmp.w	fp, #0
 800b1da:	4606      	mov	r6, r0
 800b1dc:	460f      	mov	r7, r1
 800b1de:	dd6c      	ble.n	800b2ba <__kernel_rem_pio2+0x252>
 800b1e0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b1e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1e6:	9d02      	ldr	r5, [sp, #8]
 800b1e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1ec:	f1cb 0018 	rsb	r0, fp, #24
 800b1f0:	fa43 f200 	asr.w	r2, r3, r0
 800b1f4:	4415      	add	r5, r2
 800b1f6:	4082      	lsls	r2, r0
 800b1f8:	1a9b      	subs	r3, r3, r2
 800b1fa:	aa0c      	add	r2, sp, #48	@ 0x30
 800b1fc:	9502      	str	r5, [sp, #8]
 800b1fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b202:	f1cb 0217 	rsb	r2, fp, #23
 800b206:	fa43 f902 	asr.w	r9, r3, r2
 800b20a:	f1b9 0f00 	cmp.w	r9, #0
 800b20e:	dd64      	ble.n	800b2da <__kernel_rem_pio2+0x272>
 800b210:	9b02      	ldr	r3, [sp, #8]
 800b212:	2200      	movs	r2, #0
 800b214:	3301      	adds	r3, #1
 800b216:	9302      	str	r3, [sp, #8]
 800b218:	4615      	mov	r5, r2
 800b21a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b21e:	4590      	cmp	r8, r2
 800b220:	f300 80b8 	bgt.w	800b394 <__kernel_rem_pio2+0x32c>
 800b224:	f1bb 0f00 	cmp.w	fp, #0
 800b228:	dd07      	ble.n	800b23a <__kernel_rem_pio2+0x1d2>
 800b22a:	f1bb 0f01 	cmp.w	fp, #1
 800b22e:	f000 80bf 	beq.w	800b3b0 <__kernel_rem_pio2+0x348>
 800b232:	f1bb 0f02 	cmp.w	fp, #2
 800b236:	f000 80c6 	beq.w	800b3c6 <__kernel_rem_pio2+0x35e>
 800b23a:	f1b9 0f02 	cmp.w	r9, #2
 800b23e:	d14c      	bne.n	800b2da <__kernel_rem_pio2+0x272>
 800b240:	4632      	mov	r2, r6
 800b242:	463b      	mov	r3, r7
 800b244:	494e      	ldr	r1, [pc, #312]	@ (800b380 <__kernel_rem_pio2+0x318>)
 800b246:	2000      	movs	r0, #0
 800b248:	f7f5 f83e 	bl	80002c8 <__aeabi_dsub>
 800b24c:	4606      	mov	r6, r0
 800b24e:	460f      	mov	r7, r1
 800b250:	2d00      	cmp	r5, #0
 800b252:	d042      	beq.n	800b2da <__kernel_rem_pio2+0x272>
 800b254:	4658      	mov	r0, fp
 800b256:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b370 <__kernel_rem_pio2+0x308>
 800b25a:	f000 fbe9 	bl	800ba30 <scalbn>
 800b25e:	4630      	mov	r0, r6
 800b260:	4639      	mov	r1, r7
 800b262:	ec53 2b10 	vmov	r2, r3, d0
 800b266:	f7f5 f82f 	bl	80002c8 <__aeabi_dsub>
 800b26a:	4606      	mov	r6, r0
 800b26c:	460f      	mov	r7, r1
 800b26e:	e034      	b.n	800b2da <__kernel_rem_pio2+0x272>
 800b270:	4b44      	ldr	r3, [pc, #272]	@ (800b384 <__kernel_rem_pio2+0x31c>)
 800b272:	2200      	movs	r2, #0
 800b274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b278:	f7f5 f9de 	bl	8000638 <__aeabi_dmul>
 800b27c:	f7f5 fc8c 	bl	8000b98 <__aeabi_d2iz>
 800b280:	f7f5 f970 	bl	8000564 <__aeabi_i2d>
 800b284:	4b40      	ldr	r3, [pc, #256]	@ (800b388 <__kernel_rem_pio2+0x320>)
 800b286:	2200      	movs	r2, #0
 800b288:	4606      	mov	r6, r0
 800b28a:	460f      	mov	r7, r1
 800b28c:	f7f5 f9d4 	bl	8000638 <__aeabi_dmul>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b298:	f7f5 f816 	bl	80002c8 <__aeabi_dsub>
 800b29c:	f7f5 fc7c 	bl	8000b98 <__aeabi_d2iz>
 800b2a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2a4:	f849 0b04 	str.w	r0, [r9], #4
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7f5 f80e 	bl	80002cc <__adddf3>
 800b2b0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2b8:	e75d      	b.n	800b176 <__kernel_rem_pio2+0x10e>
 800b2ba:	d107      	bne.n	800b2cc <__kernel_rem_pio2+0x264>
 800b2bc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b2c0:	aa0c      	add	r2, sp, #48	@ 0x30
 800b2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2c6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b2ca:	e79e      	b.n	800b20a <__kernel_rem_pio2+0x1a2>
 800b2cc:	4b2f      	ldr	r3, [pc, #188]	@ (800b38c <__kernel_rem_pio2+0x324>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f7f5 fc38 	bl	8000b44 <__aeabi_dcmpge>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d143      	bne.n	800b360 <__kernel_rem_pio2+0x2f8>
 800b2d8:	4681      	mov	r9, r0
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2300      	movs	r3, #0
 800b2de:	4630      	mov	r0, r6
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	f7f5 fc11 	bl	8000b08 <__aeabi_dcmpeq>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f000 80bf 	beq.w	800b46a <__kernel_rem_pio2+0x402>
 800b2ec:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	9900      	ldr	r1, [sp, #0]
 800b2f4:	428b      	cmp	r3, r1
 800b2f6:	da6e      	bge.n	800b3d6 <__kernel_rem_pio2+0x36e>
 800b2f8:	2a00      	cmp	r2, #0
 800b2fa:	f000 8089 	beq.w	800b410 <__kernel_rem_pio2+0x3a8>
 800b2fe:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b302:	ab0c      	add	r3, sp, #48	@ 0x30
 800b304:	f1ab 0b18 	sub.w	fp, fp, #24
 800b308:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d0f6      	beq.n	800b2fe <__kernel_rem_pio2+0x296>
 800b310:	4658      	mov	r0, fp
 800b312:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b370 <__kernel_rem_pio2+0x308>
 800b316:	f000 fb8b 	bl	800ba30 <scalbn>
 800b31a:	f108 0301 	add.w	r3, r8, #1
 800b31e:	00da      	lsls	r2, r3, #3
 800b320:	9205      	str	r2, [sp, #20]
 800b322:	ec55 4b10 	vmov	r4, r5, d0
 800b326:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b328:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b384 <__kernel_rem_pio2+0x31c>
 800b32c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b330:	4646      	mov	r6, r8
 800b332:	f04f 0a00 	mov.w	sl, #0
 800b336:	2e00      	cmp	r6, #0
 800b338:	f280 80cf 	bge.w	800b4da <__kernel_rem_pio2+0x472>
 800b33c:	4644      	mov	r4, r8
 800b33e:	2c00      	cmp	r4, #0
 800b340:	f2c0 80fd 	blt.w	800b53e <__kernel_rem_pio2+0x4d6>
 800b344:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <__kernel_rem_pio2+0x328>)
 800b346:	461f      	mov	r7, r3
 800b348:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b34a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b34e:	9306      	str	r3, [sp, #24]
 800b350:	f04f 0a00 	mov.w	sl, #0
 800b354:	f04f 0b00 	mov.w	fp, #0
 800b358:	2600      	movs	r6, #0
 800b35a:	eba8 0504 	sub.w	r5, r8, r4
 800b35e:	e0e2      	b.n	800b526 <__kernel_rem_pio2+0x4be>
 800b360:	f04f 0902 	mov.w	r9, #2
 800b364:	e754      	b.n	800b210 <__kernel_rem_pio2+0x1a8>
 800b366:	bf00      	nop
	...
 800b374:	3ff00000 	.word	0x3ff00000
 800b378:	0800c2e0 	.word	0x0800c2e0
 800b37c:	40200000 	.word	0x40200000
 800b380:	3ff00000 	.word	0x3ff00000
 800b384:	3e700000 	.word	0x3e700000
 800b388:	41700000 	.word	0x41700000
 800b38c:	3fe00000 	.word	0x3fe00000
 800b390:	0800c2a0 	.word	0x0800c2a0
 800b394:	f854 3b04 	ldr.w	r3, [r4], #4
 800b398:	b945      	cbnz	r5, 800b3ac <__kernel_rem_pio2+0x344>
 800b39a:	b123      	cbz	r3, 800b3a6 <__kernel_rem_pio2+0x33e>
 800b39c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b3a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	3201      	adds	r2, #1
 800b3a8:	461d      	mov	r5, r3
 800b3aa:	e738      	b.n	800b21e <__kernel_rem_pio2+0x1b6>
 800b3ac:	1acb      	subs	r3, r1, r3
 800b3ae:	e7f7      	b.n	800b3a0 <__kernel_rem_pio2+0x338>
 800b3b0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800b3b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b3be:	a90c      	add	r1, sp, #48	@ 0x30
 800b3c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b3c4:	e739      	b.n	800b23a <__kernel_rem_pio2+0x1d2>
 800b3c6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800b3ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800b3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b3d4:	e7f3      	b.n	800b3be <__kernel_rem_pio2+0x356>
 800b3d6:	a90c      	add	r1, sp, #48	@ 0x30
 800b3d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	e787      	b.n	800b2f2 <__kernel_rem_pio2+0x28a>
 800b3e2:	3401      	adds	r4, #1
 800b3e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b3e8:	2a00      	cmp	r2, #0
 800b3ea:	d0fa      	beq.n	800b3e2 <__kernel_rem_pio2+0x37a>
 800b3ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b3f2:	eb0d 0503 	add.w	r5, sp, r3
 800b3f6:	9b06      	ldr	r3, [sp, #24]
 800b3f8:	aa20      	add	r2, sp, #128	@ 0x80
 800b3fa:	4443      	add	r3, r8
 800b3fc:	f108 0701 	add.w	r7, r8, #1
 800b400:	3d98      	subs	r5, #152	@ 0x98
 800b402:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b406:	4444      	add	r4, r8
 800b408:	42bc      	cmp	r4, r7
 800b40a:	da04      	bge.n	800b416 <__kernel_rem_pio2+0x3ae>
 800b40c:	46a0      	mov	r8, r4
 800b40e:	e6a2      	b.n	800b156 <__kernel_rem_pio2+0xee>
 800b410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b412:	2401      	movs	r4, #1
 800b414:	e7e6      	b.n	800b3e4 <__kernel_rem_pio2+0x37c>
 800b416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b418:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b41c:	f7f5 f8a2 	bl	8000564 <__aeabi_i2d>
 800b420:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b6e8 <__kernel_rem_pio2+0x680>
 800b424:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b428:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b42c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b430:	46b2      	mov	sl, r6
 800b432:	f04f 0800 	mov.w	r8, #0
 800b436:	9b05      	ldr	r3, [sp, #20]
 800b438:	4598      	cmp	r8, r3
 800b43a:	dd05      	ble.n	800b448 <__kernel_rem_pio2+0x3e0>
 800b43c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b440:	3701      	adds	r7, #1
 800b442:	eca5 7b02 	vstmia	r5!, {d7}
 800b446:	e7df      	b.n	800b408 <__kernel_rem_pio2+0x3a0>
 800b448:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b44c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b450:	f7f5 f8f2 	bl	8000638 <__aeabi_dmul>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b45c:	f7f4 ff36 	bl	80002cc <__adddf3>
 800b460:	f108 0801 	add.w	r8, r8, #1
 800b464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b468:	e7e5      	b.n	800b436 <__kernel_rem_pio2+0x3ce>
 800b46a:	f1cb 0000 	rsb	r0, fp, #0
 800b46e:	ec47 6b10 	vmov	d0, r6, r7
 800b472:	f000 fadd 	bl	800ba30 <scalbn>
 800b476:	ec55 4b10 	vmov	r4, r5, d0
 800b47a:	4b9d      	ldr	r3, [pc, #628]	@ (800b6f0 <__kernel_rem_pio2+0x688>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f5 fb5f 	bl	8000b44 <__aeabi_dcmpge>
 800b486:	b300      	cbz	r0, 800b4ca <__kernel_rem_pio2+0x462>
 800b488:	4b9a      	ldr	r3, [pc, #616]	@ (800b6f4 <__kernel_rem_pio2+0x68c>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	4620      	mov	r0, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	f7f5 f8d2 	bl	8000638 <__aeabi_dmul>
 800b494:	f7f5 fb80 	bl	8000b98 <__aeabi_d2iz>
 800b498:	4606      	mov	r6, r0
 800b49a:	f7f5 f863 	bl	8000564 <__aeabi_i2d>
 800b49e:	4b94      	ldr	r3, [pc, #592]	@ (800b6f0 <__kernel_rem_pio2+0x688>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f7f5 f8c9 	bl	8000638 <__aeabi_dmul>
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f7f4 ff0b 	bl	80002c8 <__aeabi_dsub>
 800b4b2:	f7f5 fb71 	bl	8000b98 <__aeabi_d2iz>
 800b4b6:	ab0c      	add	r3, sp, #48	@ 0x30
 800b4b8:	f10b 0b18 	add.w	fp, fp, #24
 800b4bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b4c0:	f108 0801 	add.w	r8, r8, #1
 800b4c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b4c8:	e722      	b.n	800b310 <__kernel_rem_pio2+0x2a8>
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	f7f5 fb63 	bl	8000b98 <__aeabi_d2iz>
 800b4d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b4d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b4d8:	e71a      	b.n	800b310 <__kernel_rem_pio2+0x2a8>
 800b4da:	ab0c      	add	r3, sp, #48	@ 0x30
 800b4dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4e0:	f7f5 f840 	bl	8000564 <__aeabi_i2d>
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	f7f5 f8a6 	bl	8000638 <__aeabi_dmul>
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b4f2:	465b      	mov	r3, fp
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f5 f89e 	bl	8000638 <__aeabi_dmul>
 800b4fc:	3e01      	subs	r6, #1
 800b4fe:	4604      	mov	r4, r0
 800b500:	460d      	mov	r5, r1
 800b502:	e718      	b.n	800b336 <__kernel_rem_pio2+0x2ce>
 800b504:	9906      	ldr	r1, [sp, #24]
 800b506:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b50a:	9106      	str	r1, [sp, #24]
 800b50c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b510:	f7f5 f892 	bl	8000638 <__aeabi_dmul>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4650      	mov	r0, sl
 800b51a:	4659      	mov	r1, fp
 800b51c:	f7f4 fed6 	bl	80002cc <__adddf3>
 800b520:	3601      	adds	r6, #1
 800b522:	4682      	mov	sl, r0
 800b524:	468b      	mov	fp, r1
 800b526:	9b00      	ldr	r3, [sp, #0]
 800b528:	429e      	cmp	r6, r3
 800b52a:	dc01      	bgt.n	800b530 <__kernel_rem_pio2+0x4c8>
 800b52c:	42b5      	cmp	r5, r6
 800b52e:	dae9      	bge.n	800b504 <__kernel_rem_pio2+0x49c>
 800b530:	ab48      	add	r3, sp, #288	@ 0x120
 800b532:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b536:	e9c5 ab00 	strd	sl, fp, [r5]
 800b53a:	3c01      	subs	r4, #1
 800b53c:	e6ff      	b.n	800b33e <__kernel_rem_pio2+0x2d6>
 800b53e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b540:	2b02      	cmp	r3, #2
 800b542:	dc0b      	bgt.n	800b55c <__kernel_rem_pio2+0x4f4>
 800b544:	2b00      	cmp	r3, #0
 800b546:	dc39      	bgt.n	800b5bc <__kernel_rem_pio2+0x554>
 800b548:	d05d      	beq.n	800b606 <__kernel_rem_pio2+0x59e>
 800b54a:	9b02      	ldr	r3, [sp, #8]
 800b54c:	f003 0007 	and.w	r0, r3, #7
 800b550:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b554:	ecbd 8b02 	vpop	{d8}
 800b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d1f3      	bne.n	800b54a <__kernel_rem_pio2+0x4e2>
 800b562:	9b05      	ldr	r3, [sp, #20]
 800b564:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b568:	eb0d 0403 	add.w	r4, sp, r3
 800b56c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b570:	4625      	mov	r5, r4
 800b572:	46c2      	mov	sl, r8
 800b574:	f1ba 0f00 	cmp.w	sl, #0
 800b578:	f1a5 0508 	sub.w	r5, r5, #8
 800b57c:	dc6b      	bgt.n	800b656 <__kernel_rem_pio2+0x5ee>
 800b57e:	4645      	mov	r5, r8
 800b580:	2d01      	cmp	r5, #1
 800b582:	f1a4 0408 	sub.w	r4, r4, #8
 800b586:	f300 8087 	bgt.w	800b698 <__kernel_rem_pio2+0x630>
 800b58a:	9c05      	ldr	r4, [sp, #20]
 800b58c:	ab48      	add	r3, sp, #288	@ 0x120
 800b58e:	441c      	add	r4, r3
 800b590:	2000      	movs	r0, #0
 800b592:	2100      	movs	r1, #0
 800b594:	f1b8 0f01 	cmp.w	r8, #1
 800b598:	f300 809c 	bgt.w	800b6d4 <__kernel_rem_pio2+0x66c>
 800b59c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b5a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b5a4:	f1b9 0f00 	cmp.w	r9, #0
 800b5a8:	f040 80a6 	bne.w	800b6f8 <__kernel_rem_pio2+0x690>
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	e9c3 7800 	strd	r7, r8, [r3]
 800b5b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b5b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b5ba:	e7c6      	b.n	800b54a <__kernel_rem_pio2+0x4e2>
 800b5bc:	9d05      	ldr	r5, [sp, #20]
 800b5be:	ab48      	add	r3, sp, #288	@ 0x120
 800b5c0:	441d      	add	r5, r3
 800b5c2:	4644      	mov	r4, r8
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	2c00      	cmp	r4, #0
 800b5ca:	da35      	bge.n	800b638 <__kernel_rem_pio2+0x5d0>
 800b5cc:	f1b9 0f00 	cmp.w	r9, #0
 800b5d0:	d038      	beq.n	800b644 <__kernel_rem_pio2+0x5dc>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5d8:	9c04      	ldr	r4, [sp, #16]
 800b5da:	e9c4 2300 	strd	r2, r3, [r4]
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b5e6:	f7f4 fe6f 	bl	80002c8 <__aeabi_dsub>
 800b5ea:	ad4a      	add	r5, sp, #296	@ 0x128
 800b5ec:	2401      	movs	r4, #1
 800b5ee:	45a0      	cmp	r8, r4
 800b5f0:	da2b      	bge.n	800b64a <__kernel_rem_pio2+0x5e2>
 800b5f2:	f1b9 0f00 	cmp.w	r9, #0
 800b5f6:	d002      	beq.n	800b5fe <__kernel_rem_pio2+0x596>
 800b5f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	9b04      	ldr	r3, [sp, #16]
 800b600:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b604:	e7a1      	b.n	800b54a <__kernel_rem_pio2+0x4e2>
 800b606:	9c05      	ldr	r4, [sp, #20]
 800b608:	ab48      	add	r3, sp, #288	@ 0x120
 800b60a:	441c      	add	r4, r3
 800b60c:	2000      	movs	r0, #0
 800b60e:	2100      	movs	r1, #0
 800b610:	f1b8 0f00 	cmp.w	r8, #0
 800b614:	da09      	bge.n	800b62a <__kernel_rem_pio2+0x5c2>
 800b616:	f1b9 0f00 	cmp.w	r9, #0
 800b61a:	d002      	beq.n	800b622 <__kernel_rem_pio2+0x5ba>
 800b61c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b620:	4619      	mov	r1, r3
 800b622:	9b04      	ldr	r3, [sp, #16]
 800b624:	e9c3 0100 	strd	r0, r1, [r3]
 800b628:	e78f      	b.n	800b54a <__kernel_rem_pio2+0x4e2>
 800b62a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b62e:	f7f4 fe4d 	bl	80002cc <__adddf3>
 800b632:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b636:	e7eb      	b.n	800b610 <__kernel_rem_pio2+0x5a8>
 800b638:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b63c:	f7f4 fe46 	bl	80002cc <__adddf3>
 800b640:	3c01      	subs	r4, #1
 800b642:	e7c1      	b.n	800b5c8 <__kernel_rem_pio2+0x560>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	e7c6      	b.n	800b5d8 <__kernel_rem_pio2+0x570>
 800b64a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b64e:	f7f4 fe3d 	bl	80002cc <__adddf3>
 800b652:	3401      	adds	r4, #1
 800b654:	e7cb      	b.n	800b5ee <__kernel_rem_pio2+0x586>
 800b656:	ed95 7b00 	vldr	d7, [r5]
 800b65a:	ed8d 7b00 	vstr	d7, [sp]
 800b65e:	ed95 7b02 	vldr	d7, [r5, #8]
 800b662:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b666:	ec53 2b17 	vmov	r2, r3, d7
 800b66a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b66e:	f7f4 fe2d 	bl	80002cc <__adddf3>
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	4606      	mov	r6, r0
 800b678:	460f      	mov	r7, r1
 800b67a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b67e:	f7f4 fe23 	bl	80002c8 <__aeabi_dsub>
 800b682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b686:	f7f4 fe21 	bl	80002cc <__adddf3>
 800b68a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b68e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b692:	e9c5 6700 	strd	r6, r7, [r5]
 800b696:	e76d      	b.n	800b574 <__kernel_rem_pio2+0x50c>
 800b698:	ed94 7b00 	vldr	d7, [r4]
 800b69c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b6a0:	ec51 0b17 	vmov	r0, r1, d7
 800b6a4:	4652      	mov	r2, sl
 800b6a6:	465b      	mov	r3, fp
 800b6a8:	ed8d 7b00 	vstr	d7, [sp]
 800b6ac:	f7f4 fe0e 	bl	80002cc <__adddf3>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460f      	mov	r7, r1
 800b6b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6bc:	f7f4 fe04 	bl	80002c8 <__aeabi_dsub>
 800b6c0:	4652      	mov	r2, sl
 800b6c2:	465b      	mov	r3, fp
 800b6c4:	f7f4 fe02 	bl	80002cc <__adddf3>
 800b6c8:	3d01      	subs	r5, #1
 800b6ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6ce:	e9c4 6700 	strd	r6, r7, [r4]
 800b6d2:	e755      	b.n	800b580 <__kernel_rem_pio2+0x518>
 800b6d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6d8:	f7f4 fdf8 	bl	80002cc <__adddf3>
 800b6dc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b6e0:	e758      	b.n	800b594 <__kernel_rem_pio2+0x52c>
 800b6e2:	bf00      	nop
 800b6e4:	f3af 8000 	nop.w
	...
 800b6f0:	41700000 	.word	0x41700000
 800b6f4:	3e700000 	.word	0x3e700000
 800b6f8:	9b04      	ldr	r3, [sp, #16]
 800b6fa:	9a04      	ldr	r2, [sp, #16]
 800b6fc:	601f      	str	r7, [r3, #0]
 800b6fe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b702:	605c      	str	r4, [r3, #4]
 800b704:	609d      	str	r5, [r3, #8]
 800b706:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b70a:	60d3      	str	r3, [r2, #12]
 800b70c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b710:	6110      	str	r0, [r2, #16]
 800b712:	6153      	str	r3, [r2, #20]
 800b714:	e719      	b.n	800b54a <__kernel_rem_pio2+0x4e2>
 800b716:	bf00      	nop

0800b718 <__kernel_cos>:
 800b718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	ec57 6b10 	vmov	r6, r7, d0
 800b720:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b724:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b728:	ed8d 1b00 	vstr	d1, [sp]
 800b72c:	d206      	bcs.n	800b73c <__kernel_cos+0x24>
 800b72e:	4630      	mov	r0, r6
 800b730:	4639      	mov	r1, r7
 800b732:	f7f5 fa31 	bl	8000b98 <__aeabi_d2iz>
 800b736:	2800      	cmp	r0, #0
 800b738:	f000 8088 	beq.w	800b84c <__kernel_cos+0x134>
 800b73c:	4632      	mov	r2, r6
 800b73e:	463b      	mov	r3, r7
 800b740:	4630      	mov	r0, r6
 800b742:	4639      	mov	r1, r7
 800b744:	f7f4 ff78 	bl	8000638 <__aeabi_dmul>
 800b748:	4b51      	ldr	r3, [pc, #324]	@ (800b890 <__kernel_cos+0x178>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	4604      	mov	r4, r0
 800b74e:	460d      	mov	r5, r1
 800b750:	f7f4 ff72 	bl	8000638 <__aeabi_dmul>
 800b754:	a340      	add	r3, pc, #256	@ (adr r3, 800b858 <__kernel_cos+0x140>)
 800b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75a:	4682      	mov	sl, r0
 800b75c:	468b      	mov	fp, r1
 800b75e:	4620      	mov	r0, r4
 800b760:	4629      	mov	r1, r5
 800b762:	f7f4 ff69 	bl	8000638 <__aeabi_dmul>
 800b766:	a33e      	add	r3, pc, #248	@ (adr r3, 800b860 <__kernel_cos+0x148>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	f7f4 fdae 	bl	80002cc <__adddf3>
 800b770:	4622      	mov	r2, r4
 800b772:	462b      	mov	r3, r5
 800b774:	f7f4 ff60 	bl	8000638 <__aeabi_dmul>
 800b778:	a33b      	add	r3, pc, #236	@ (adr r3, 800b868 <__kernel_cos+0x150>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	f7f4 fda3 	bl	80002c8 <__aeabi_dsub>
 800b782:	4622      	mov	r2, r4
 800b784:	462b      	mov	r3, r5
 800b786:	f7f4 ff57 	bl	8000638 <__aeabi_dmul>
 800b78a:	a339      	add	r3, pc, #228	@ (adr r3, 800b870 <__kernel_cos+0x158>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f7f4 fd9c 	bl	80002cc <__adddf3>
 800b794:	4622      	mov	r2, r4
 800b796:	462b      	mov	r3, r5
 800b798:	f7f4 ff4e 	bl	8000638 <__aeabi_dmul>
 800b79c:	a336      	add	r3, pc, #216	@ (adr r3, 800b878 <__kernel_cos+0x160>)
 800b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a2:	f7f4 fd91 	bl	80002c8 <__aeabi_dsub>
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	f7f4 ff45 	bl	8000638 <__aeabi_dmul>
 800b7ae:	a334      	add	r3, pc, #208	@ (adr r3, 800b880 <__kernel_cos+0x168>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f7f4 fd8a 	bl	80002cc <__adddf3>
 800b7b8:	4622      	mov	r2, r4
 800b7ba:	462b      	mov	r3, r5
 800b7bc:	f7f4 ff3c 	bl	8000638 <__aeabi_dmul>
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	462b      	mov	r3, r5
 800b7c4:	f7f4 ff38 	bl	8000638 <__aeabi_dmul>
 800b7c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	4639      	mov	r1, r7
 800b7d4:	f7f4 ff30 	bl	8000638 <__aeabi_dmul>
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4602      	mov	r2, r0
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7f4 fd72 	bl	80002c8 <__aeabi_dsub>
 800b7e4:	4b2b      	ldr	r3, [pc, #172]	@ (800b894 <__kernel_cos+0x17c>)
 800b7e6:	4598      	cmp	r8, r3
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	460f      	mov	r7, r1
 800b7ec:	d810      	bhi.n	800b810 <__kernel_cos+0xf8>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	4659      	mov	r1, fp
 800b7f6:	f7f4 fd67 	bl	80002c8 <__aeabi_dsub>
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4926      	ldr	r1, [pc, #152]	@ (800b898 <__kernel_cos+0x180>)
 800b7fe:	4602      	mov	r2, r0
 800b800:	2000      	movs	r0, #0
 800b802:	f7f4 fd61 	bl	80002c8 <__aeabi_dsub>
 800b806:	ec41 0b10 	vmov	d0, r0, r1
 800b80a:	b003      	add	sp, #12
 800b80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b810:	4b22      	ldr	r3, [pc, #136]	@ (800b89c <__kernel_cos+0x184>)
 800b812:	4921      	ldr	r1, [pc, #132]	@ (800b898 <__kernel_cos+0x180>)
 800b814:	4598      	cmp	r8, r3
 800b816:	bf8c      	ite	hi
 800b818:	4d21      	ldrhi	r5, [pc, #132]	@ (800b8a0 <__kernel_cos+0x188>)
 800b81a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b81e:	2400      	movs	r4, #0
 800b820:	4622      	mov	r2, r4
 800b822:	462b      	mov	r3, r5
 800b824:	2000      	movs	r0, #0
 800b826:	f7f4 fd4f 	bl	80002c8 <__aeabi_dsub>
 800b82a:	4622      	mov	r2, r4
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	462b      	mov	r3, r5
 800b832:	4650      	mov	r0, sl
 800b834:	4659      	mov	r1, fp
 800b836:	f7f4 fd47 	bl	80002c8 <__aeabi_dsub>
 800b83a:	4632      	mov	r2, r6
 800b83c:	463b      	mov	r3, r7
 800b83e:	f7f4 fd43 	bl	80002c8 <__aeabi_dsub>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4640      	mov	r0, r8
 800b848:	4649      	mov	r1, r9
 800b84a:	e7da      	b.n	800b802 <__kernel_cos+0xea>
 800b84c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b888 <__kernel_cos+0x170>
 800b850:	e7db      	b.n	800b80a <__kernel_cos+0xf2>
 800b852:	bf00      	nop
 800b854:	f3af 8000 	nop.w
 800b858:	be8838d4 	.word	0xbe8838d4
 800b85c:	bda8fae9 	.word	0xbda8fae9
 800b860:	bdb4b1c4 	.word	0xbdb4b1c4
 800b864:	3e21ee9e 	.word	0x3e21ee9e
 800b868:	809c52ad 	.word	0x809c52ad
 800b86c:	3e927e4f 	.word	0x3e927e4f
 800b870:	19cb1590 	.word	0x19cb1590
 800b874:	3efa01a0 	.word	0x3efa01a0
 800b878:	16c15177 	.word	0x16c15177
 800b87c:	3f56c16c 	.word	0x3f56c16c
 800b880:	5555554c 	.word	0x5555554c
 800b884:	3fa55555 	.word	0x3fa55555
 800b888:	00000000 	.word	0x00000000
 800b88c:	3ff00000 	.word	0x3ff00000
 800b890:	3fe00000 	.word	0x3fe00000
 800b894:	3fd33332 	.word	0x3fd33332
 800b898:	3ff00000 	.word	0x3ff00000
 800b89c:	3fe90000 	.word	0x3fe90000
 800b8a0:	3fd20000 	.word	0x3fd20000
 800b8a4:	00000000 	.word	0x00000000

0800b8a8 <__kernel_sin>:
 800b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ac:	ec55 4b10 	vmov	r4, r5, d0
 800b8b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b8b4:	b085      	sub	sp, #20
 800b8b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b8ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b8be:	4680      	mov	r8, r0
 800b8c0:	d205      	bcs.n	800b8ce <__kernel_sin+0x26>
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	f7f5 f967 	bl	8000b98 <__aeabi_d2iz>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d052      	beq.n	800b974 <__kernel_sin+0xcc>
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	462b      	mov	r3, r5
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	f7f4 feaf 	bl	8000638 <__aeabi_dmul>
 800b8da:	4682      	mov	sl, r0
 800b8dc:	468b      	mov	fp, r1
 800b8de:	4602      	mov	r2, r0
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7f4 fea7 	bl	8000638 <__aeabi_dmul>
 800b8ea:	a342      	add	r3, pc, #264	@ (adr r3, 800b9f4 <__kernel_sin+0x14c>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	4659      	mov	r1, fp
 800b8f8:	f7f4 fe9e 	bl	8000638 <__aeabi_dmul>
 800b8fc:	a33f      	add	r3, pc, #252	@ (adr r3, 800b9fc <__kernel_sin+0x154>)
 800b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b902:	f7f4 fce1 	bl	80002c8 <__aeabi_dsub>
 800b906:	4652      	mov	r2, sl
 800b908:	465b      	mov	r3, fp
 800b90a:	f7f4 fe95 	bl	8000638 <__aeabi_dmul>
 800b90e:	a33d      	add	r3, pc, #244	@ (adr r3, 800ba04 <__kernel_sin+0x15c>)
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	f7f4 fcda 	bl	80002cc <__adddf3>
 800b918:	4652      	mov	r2, sl
 800b91a:	465b      	mov	r3, fp
 800b91c:	f7f4 fe8c 	bl	8000638 <__aeabi_dmul>
 800b920:	a33a      	add	r3, pc, #232	@ (adr r3, 800ba0c <__kernel_sin+0x164>)
 800b922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b926:	f7f4 fccf 	bl	80002c8 <__aeabi_dsub>
 800b92a:	4652      	mov	r2, sl
 800b92c:	465b      	mov	r3, fp
 800b92e:	f7f4 fe83 	bl	8000638 <__aeabi_dmul>
 800b932:	a338      	add	r3, pc, #224	@ (adr r3, 800ba14 <__kernel_sin+0x16c>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f7f4 fcc8 	bl	80002cc <__adddf3>
 800b93c:	4606      	mov	r6, r0
 800b93e:	460f      	mov	r7, r1
 800b940:	f1b8 0f00 	cmp.w	r8, #0
 800b944:	d11b      	bne.n	800b97e <__kernel_sin+0xd6>
 800b946:	4602      	mov	r2, r0
 800b948:	460b      	mov	r3, r1
 800b94a:	4650      	mov	r0, sl
 800b94c:	4659      	mov	r1, fp
 800b94e:	f7f4 fe73 	bl	8000638 <__aeabi_dmul>
 800b952:	a325      	add	r3, pc, #148	@ (adr r3, 800b9e8 <__kernel_sin+0x140>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f7f4 fcb6 	bl	80002c8 <__aeabi_dsub>
 800b95c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b960:	f7f4 fe6a 	bl	8000638 <__aeabi_dmul>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	4620      	mov	r0, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	f7f4 fcae 	bl	80002cc <__adddf3>
 800b970:	4604      	mov	r4, r0
 800b972:	460d      	mov	r5, r1
 800b974:	ec45 4b10 	vmov	d0, r4, r5
 800b978:	b005      	add	sp, #20
 800b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b982:	4b1b      	ldr	r3, [pc, #108]	@ (800b9f0 <__kernel_sin+0x148>)
 800b984:	2200      	movs	r2, #0
 800b986:	f7f4 fe57 	bl	8000638 <__aeabi_dmul>
 800b98a:	4632      	mov	r2, r6
 800b98c:	4680      	mov	r8, r0
 800b98e:	4689      	mov	r9, r1
 800b990:	463b      	mov	r3, r7
 800b992:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b996:	f7f4 fe4f 	bl	8000638 <__aeabi_dmul>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4640      	mov	r0, r8
 800b9a0:	4649      	mov	r1, r9
 800b9a2:	f7f4 fc91 	bl	80002c8 <__aeabi_dsub>
 800b9a6:	4652      	mov	r2, sl
 800b9a8:	465b      	mov	r3, fp
 800b9aa:	f7f4 fe45 	bl	8000638 <__aeabi_dmul>
 800b9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9b2:	f7f4 fc89 	bl	80002c8 <__aeabi_dsub>
 800b9b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b9e8 <__kernel_sin+0x140>)
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	4606      	mov	r6, r0
 800b9be:	460f      	mov	r7, r1
 800b9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9c4:	f7f4 fe38 	bl	8000638 <__aeabi_dmul>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	4639      	mov	r1, r7
 800b9d0:	f7f4 fc7c 	bl	80002cc <__adddf3>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4620      	mov	r0, r4
 800b9da:	4629      	mov	r1, r5
 800b9dc:	f7f4 fc74 	bl	80002c8 <__aeabi_dsub>
 800b9e0:	e7c6      	b.n	800b970 <__kernel_sin+0xc8>
 800b9e2:	bf00      	nop
 800b9e4:	f3af 8000 	nop.w
 800b9e8:	55555549 	.word	0x55555549
 800b9ec:	3fc55555 	.word	0x3fc55555
 800b9f0:	3fe00000 	.word	0x3fe00000
 800b9f4:	5acfd57c 	.word	0x5acfd57c
 800b9f8:	3de5d93a 	.word	0x3de5d93a
 800b9fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800ba00:	3e5ae5e6 	.word	0x3e5ae5e6
 800ba04:	57b1fe7d 	.word	0x57b1fe7d
 800ba08:	3ec71de3 	.word	0x3ec71de3
 800ba0c:	19c161d5 	.word	0x19c161d5
 800ba10:	3f2a01a0 	.word	0x3f2a01a0
 800ba14:	1110f8a6 	.word	0x1110f8a6
 800ba18:	3f811111 	.word	0x3f811111

0800ba1c <fabs>:
 800ba1c:	ec51 0b10 	vmov	r0, r1, d0
 800ba20:	4602      	mov	r2, r0
 800ba22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ba26:	ec43 2b10 	vmov	d0, r2, r3
 800ba2a:	4770      	bx	lr
 800ba2c:	0000      	movs	r0, r0
	...

0800ba30 <scalbn>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	ec55 4b10 	vmov	r4, r5, d0
 800ba36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	b991      	cbnz	r1, 800ba66 <scalbn+0x36>
 800ba40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ba44:	4323      	orrs	r3, r4
 800ba46:	d03d      	beq.n	800bac4 <scalbn+0x94>
 800ba48:	4b35      	ldr	r3, [pc, #212]	@ (800bb20 <scalbn+0xf0>)
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f7f4 fdf2 	bl	8000638 <__aeabi_dmul>
 800ba54:	4b33      	ldr	r3, [pc, #204]	@ (800bb24 <scalbn+0xf4>)
 800ba56:	429e      	cmp	r6, r3
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	da0f      	bge.n	800ba7e <scalbn+0x4e>
 800ba5e:	a328      	add	r3, pc, #160	@ (adr r3, 800bb00 <scalbn+0xd0>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	e01e      	b.n	800baa4 <scalbn+0x74>
 800ba66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ba6a:	4291      	cmp	r1, r2
 800ba6c:	d10b      	bne.n	800ba86 <scalbn+0x56>
 800ba6e:	4622      	mov	r2, r4
 800ba70:	4620      	mov	r0, r4
 800ba72:	4629      	mov	r1, r5
 800ba74:	f7f4 fc2a 	bl	80002cc <__adddf3>
 800ba78:	4604      	mov	r4, r0
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	e022      	b.n	800bac4 <scalbn+0x94>
 800ba7e:	460b      	mov	r3, r1
 800ba80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ba84:	3936      	subs	r1, #54	@ 0x36
 800ba86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ba8a:	4296      	cmp	r6, r2
 800ba8c:	dd0d      	ble.n	800baaa <scalbn+0x7a>
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	a11d      	add	r1, pc, #116	@ (adr r1, 800bb08 <scalbn+0xd8>)
 800ba92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba96:	da02      	bge.n	800ba9e <scalbn+0x6e>
 800ba98:	a11d      	add	r1, pc, #116	@ (adr r1, 800bb10 <scalbn+0xe0>)
 800ba9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9e:	a31a      	add	r3, pc, #104	@ (adr r3, 800bb08 <scalbn+0xd8>)
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	f7f4 fdc8 	bl	8000638 <__aeabi_dmul>
 800baa8:	e7e6      	b.n	800ba78 <scalbn+0x48>
 800baaa:	1872      	adds	r2, r6, r1
 800baac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bab0:	428a      	cmp	r2, r1
 800bab2:	dcec      	bgt.n	800ba8e <scalbn+0x5e>
 800bab4:	2a00      	cmp	r2, #0
 800bab6:	dd08      	ble.n	800baca <scalbn+0x9a>
 800bab8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800babc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bac0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bac4:	ec45 4b10 	vmov	d0, r4, r5
 800bac8:	bd70      	pop	{r4, r5, r6, pc}
 800baca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bace:	da08      	bge.n	800bae2 <scalbn+0xb2>
 800bad0:	2d00      	cmp	r5, #0
 800bad2:	a10b      	add	r1, pc, #44	@ (adr r1, 800bb00 <scalbn+0xd0>)
 800bad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad8:	dac1      	bge.n	800ba5e <scalbn+0x2e>
 800bada:	a10f      	add	r1, pc, #60	@ (adr r1, 800bb18 <scalbn+0xe8>)
 800badc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae0:	e7bd      	b.n	800ba5e <scalbn+0x2e>
 800bae2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bae6:	3236      	adds	r2, #54	@ 0x36
 800bae8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800baec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800baf0:	4620      	mov	r0, r4
 800baf2:	4b0d      	ldr	r3, [pc, #52]	@ (800bb28 <scalbn+0xf8>)
 800baf4:	4629      	mov	r1, r5
 800baf6:	2200      	movs	r2, #0
 800baf8:	e7d4      	b.n	800baa4 <scalbn+0x74>
 800bafa:	bf00      	nop
 800bafc:	f3af 8000 	nop.w
 800bb00:	c2f8f359 	.word	0xc2f8f359
 800bb04:	01a56e1f 	.word	0x01a56e1f
 800bb08:	8800759c 	.word	0x8800759c
 800bb0c:	7e37e43c 	.word	0x7e37e43c
 800bb10:	8800759c 	.word	0x8800759c
 800bb14:	fe37e43c 	.word	0xfe37e43c
 800bb18:	c2f8f359 	.word	0xc2f8f359
 800bb1c:	81a56e1f 	.word	0x81a56e1f
 800bb20:	43500000 	.word	0x43500000
 800bb24:	ffff3cb0 	.word	0xffff3cb0
 800bb28:	3c900000 	.word	0x3c900000
 800bb2c:	00000000 	.word	0x00000000

0800bb30 <floor>:
 800bb30:	ec51 0b10 	vmov	r0, r1, d0
 800bb34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800bb40:	2e13      	cmp	r6, #19
 800bb42:	460c      	mov	r4, r1
 800bb44:	4605      	mov	r5, r0
 800bb46:	4680      	mov	r8, r0
 800bb48:	dc34      	bgt.n	800bbb4 <floor+0x84>
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	da17      	bge.n	800bb7e <floor+0x4e>
 800bb4e:	a332      	add	r3, pc, #200	@ (adr r3, 800bc18 <floor+0xe8>)
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	f7f4 fbba 	bl	80002cc <__adddf3>
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f7f4 fffc 	bl	8000b58 <__aeabi_dcmpgt>
 800bb60:	b150      	cbz	r0, 800bb78 <floor+0x48>
 800bb62:	2c00      	cmp	r4, #0
 800bb64:	da55      	bge.n	800bc12 <floor+0xe2>
 800bb66:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800bb6a:	432c      	orrs	r4, r5
 800bb6c:	2500      	movs	r5, #0
 800bb6e:	42ac      	cmp	r4, r5
 800bb70:	4c2b      	ldr	r4, [pc, #172]	@ (800bc20 <floor+0xf0>)
 800bb72:	bf08      	it	eq
 800bb74:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	e023      	b.n	800bbc6 <floor+0x96>
 800bb7e:	4f29      	ldr	r7, [pc, #164]	@ (800bc24 <floor+0xf4>)
 800bb80:	4137      	asrs	r7, r6
 800bb82:	ea01 0307 	and.w	r3, r1, r7
 800bb86:	4303      	orrs	r3, r0
 800bb88:	d01d      	beq.n	800bbc6 <floor+0x96>
 800bb8a:	a323      	add	r3, pc, #140	@ (adr r3, 800bc18 <floor+0xe8>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	f7f4 fb9c 	bl	80002cc <__adddf3>
 800bb94:	2200      	movs	r2, #0
 800bb96:	2300      	movs	r3, #0
 800bb98:	f7f4 ffde 	bl	8000b58 <__aeabi_dcmpgt>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d0eb      	beq.n	800bb78 <floor+0x48>
 800bba0:	2c00      	cmp	r4, #0
 800bba2:	bfbe      	ittt	lt
 800bba4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800bba8:	4133      	asrlt	r3, r6
 800bbaa:	18e4      	addlt	r4, r4, r3
 800bbac:	ea24 0407 	bic.w	r4, r4, r7
 800bbb0:	2500      	movs	r5, #0
 800bbb2:	e7e1      	b.n	800bb78 <floor+0x48>
 800bbb4:	2e33      	cmp	r6, #51	@ 0x33
 800bbb6:	dd0a      	ble.n	800bbce <floor+0x9e>
 800bbb8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bbbc:	d103      	bne.n	800bbc6 <floor+0x96>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	f7f4 fb83 	bl	80002cc <__adddf3>
 800bbc6:	ec41 0b10 	vmov	d0, r0, r1
 800bbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800bbd2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bbd6:	40df      	lsrs	r7, r3
 800bbd8:	4207      	tst	r7, r0
 800bbda:	d0f4      	beq.n	800bbc6 <floor+0x96>
 800bbdc:	a30e      	add	r3, pc, #56	@ (adr r3, 800bc18 <floor+0xe8>)
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	f7f4 fb73 	bl	80002cc <__adddf3>
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f7f4 ffb5 	bl	8000b58 <__aeabi_dcmpgt>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0c2      	beq.n	800bb78 <floor+0x48>
 800bbf2:	2c00      	cmp	r4, #0
 800bbf4:	da0a      	bge.n	800bc0c <floor+0xdc>
 800bbf6:	2e14      	cmp	r6, #20
 800bbf8:	d101      	bne.n	800bbfe <floor+0xce>
 800bbfa:	3401      	adds	r4, #1
 800bbfc:	e006      	b.n	800bc0c <floor+0xdc>
 800bbfe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bc02:	2301      	movs	r3, #1
 800bc04:	40b3      	lsls	r3, r6
 800bc06:	441d      	add	r5, r3
 800bc08:	4545      	cmp	r5, r8
 800bc0a:	d3f6      	bcc.n	800bbfa <floor+0xca>
 800bc0c:	ea25 0507 	bic.w	r5, r5, r7
 800bc10:	e7b2      	b.n	800bb78 <floor+0x48>
 800bc12:	2500      	movs	r5, #0
 800bc14:	462c      	mov	r4, r5
 800bc16:	e7af      	b.n	800bb78 <floor+0x48>
 800bc18:	8800759c 	.word	0x8800759c
 800bc1c:	7e37e43c 	.word	0x7e37e43c
 800bc20:	bff00000 	.word	0xbff00000
 800bc24:	000fffff 	.word	0x000fffff

0800bc28 <_init>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr

0800bc34 <_fini>:
 800bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc36:	bf00      	nop
 800bc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3a:	bc08      	pop	{r3}
 800bc3c:	469e      	mov	lr, r3
 800bc3e:	4770      	bx	lr
