
Stewart_platform_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800b780  0800b780  0000c780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd28  0800bd28  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd28  0800bd28  0000cd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd30  0800bd30  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd30  0800bd30  0000cd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd34  0800bd34  0000cd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800bd38  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001f0  0800bf28  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  0800bf28  0000d540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115ed  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb6  00000000  00000000  0001e80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000213c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c53  00000000  00000000  00022398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024996  00000000  00000000  00022feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c13  00000000  00000000  00047981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc3ef  00000000  00000000  0005c594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005680  00000000  00000000  001389c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0013e048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b768 	.word	0x0800b768

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800b768 	.word	0x0800b768

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_5


void CS_Select (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <CS_Select+0x14>)
 8000fc2:	f004 f807 	bl	8004fd4 <HAL_GPIO_WritePin>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <CS_UnSelect+0x14>)
 8000fda:	f003 fffb 	bl	8004fd4 <HAL_GPIO_WritePin>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <CE_Enable>:


void CE_Enable (void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <CE_Enable+0x14>)
 8000ff2:	f003 ffef 	bl	8004fd4 <HAL_GPIO_WritePin>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020400 	.word	0x40020400

08001000 <CE_Disable>:

void CE_Disable (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <CE_Disable+0x14>)
 800100a:	f003 ffe3 	bl	8004fd4 <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020400 	.word	0x40020400

08001018 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f043 0320 	orr.w	r3, r3, #32
 800102e:	b2db      	uxtb	r3, r3
 8001030:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	81fb      	strh	r3, [r7, #14]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800103a:	f7ff ffbd 	bl	8000fb8 <CS_Select>

	if (HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000) != HAL_OK) {
 800103e:	f107 010c 	add.w	r1, r7, #12
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	2202      	movs	r2, #2
 8001048:	480a      	ldr	r0, [pc, #40]	@ (8001074 <nrf24_WriteReg+0x5c>)
 800104a:	f004 ff76 	bl	8005f3a <HAL_SPI_Transmit>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <nrf24_WriteReg+0x48>
		Error_Handler();
 8001054:	f001 f80c 	bl	8002070 <Error_Handler>
	}

	while(i<400) {
 8001058:	e002      	b.n	8001060 <nrf24_WriteReg+0x48>
		i++;
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	3301      	adds	r3, #1
 800105e:	81fb      	strh	r3, [r7, #14]
	while(i<400) {
 8001060:	89fb      	ldrh	r3, [r7, #14]
 8001062:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001066:	d3f8      	bcc.n	800105a <nrf24_WriteReg+0x42>
	}
	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001068:	f7ff ffb2 	bl	8000fd0 <CS_UnSelect>
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000308 	.word	0x20000308

08001078 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	b2db      	uxtb	r3, r3
 800108e:	753b      	strb	r3, [r7, #20]

	uint16_t i = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	82fb      	strh	r3, [r7, #22]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001094:	f7ff ff90 	bl	8000fb8 <CS_Select>

	if (HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100)!= HAL_OK)
 8001098:	f107 0114 	add.w	r1, r7, #20
 800109c:	2364      	movs	r3, #100	@ 0x64
 800109e:	2201      	movs	r2, #1
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <nrf24_WriteRegMulti+0x70>)
 80010a2:	f004 ff4a 	bl	8005f3a <HAL_SPI_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <nrf24_WriteRegMulti+0x38>
	{
		Error_Handler();
 80010ac:	f000 ffe0 	bl	8002070 <Error_Handler>
	}


	if (HAL_SPI_Transmit(NRF24_SPI, data, size, 1000) != HAL_OK)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <nrf24_WriteRegMulti+0x70>)
 80010bc:	f004 ff3d 	bl	8005f3a <HAL_SPI_Transmit>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <nrf24_WriteRegMulti+0x5a>
	{
		Error_Handler();
 80010c6:	f000 ffd3 	bl	8002070 <Error_Handler>
	}

	while (i<400) {
 80010ca:	e002      	b.n	80010d2 <nrf24_WriteRegMulti+0x5a>
		i++;
 80010cc:	8afb      	ldrh	r3, [r7, #22]
 80010ce:	3301      	adds	r3, #1
 80010d0:	82fb      	strh	r3, [r7, #22]
	while (i<400) {
 80010d2:	8afb      	ldrh	r3, [r7, #22]
 80010d4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80010d8:	d3f8      	bcc.n	80010cc <nrf24_WriteRegMulti+0x54>
	}
	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80010da:	f7ff ff79 	bl	8000fd0 <CS_UnSelect>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000308 	.word	0x20000308

080010ec <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	81fb      	strh	r3, [r7, #14]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010fe:	f7ff ff5b 	bl	8000fb8 <CS_Select>

	if (HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100) != HAL_OK)
 8001102:	1df9      	adds	r1, r7, #7
 8001104:	2364      	movs	r3, #100	@ 0x64
 8001106:	2201      	movs	r2, #1
 8001108:	4811      	ldr	r0, [pc, #68]	@ (8001150 <nrf24_ReadReg+0x64>)
 800110a:	f004 ff16 	bl	8005f3a <HAL_SPI_Transmit>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <nrf24_ReadReg+0x2c>
	{
		Error_Handler();
 8001114:	f000 ffac 	bl	8002070 <Error_Handler>
	}

	if (HAL_SPI_Receive(NRF24_SPI, &data, 1, 100) != HAL_OK) {
 8001118:	f107 010d 	add.w	r1, r7, #13
 800111c:	2364      	movs	r3, #100	@ 0x64
 800111e:	2201      	movs	r2, #1
 8001120:	480b      	ldr	r0, [pc, #44]	@ (8001150 <nrf24_ReadReg+0x64>)
 8001122:	f005 f84e 	bl	80061c2 <HAL_SPI_Receive>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <nrf24_ReadReg+0x4c>
		Error_Handler();
 800112c:	f000 ffa0 	bl	8002070 <Error_Handler>
	}

	// Pull the CS HIGH to release the device
	while (i<400) {
 8001130:	e002      	b.n	8001138 <nrf24_ReadReg+0x4c>
		i++;
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	3301      	adds	r3, #1
 8001136:	81fb      	strh	r3, [r7, #14]
	while (i<400) {
 8001138:	89fb      	ldrh	r3, [r7, #14]
 800113a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800113e:	d3f8      	bcc.n	8001132 <nrf24_ReadReg+0x46>
	}
	CS_UnSelect();
 8001140:	f7ff ff46 	bl	8000fd0 <CS_UnSelect>

	return data;
 8001144:	7b7b      	ldrb	r3, [r7, #13]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000308 	.word	0x20000308

08001154 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	81fb      	strh	r3, [r7, #14]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001162:	f7ff ff29 	bl	8000fb8 <CS_Select>

	if (HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100) != HAL_OK) {
 8001166:	1df9      	adds	r1, r7, #7
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	2201      	movs	r2, #1
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <nrfsendCmd+0x44>)
 800116e:	f004 fee4 	bl	8005f3a <HAL_SPI_Transmit>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <nrfsendCmd+0x30>
		Error_Handler();
 8001178:	f000 ff7a 	bl	8002070 <Error_Handler>
	}

	while (i < 400) {
 800117c:	e002      	b.n	8001184 <nrfsendCmd+0x30>
		i++;
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	3301      	adds	r3, #1
 8001182:	81fb      	strh	r3, [r7, #14]
	while (i < 400) {
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800118a:	d3f8      	bcc.n	800117e <nrfsendCmd+0x2a>
	}

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800118c:	f7ff ff20 	bl	8000fd0 <CS_UnSelect>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000308 	.word	0x20000308

0800119c <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d104      	bne.n	80011b6 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80011ac:	2100      	movs	r1, #0
 80011ae:	2007      	movs	r0, #7
 80011b0:	f7ff ff32 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011b4:	e090      	b.n	80012d8 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b17      	cmp	r3, #23
 80011ba:	d104      	bne.n	80011c6 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80011bc:	2111      	movs	r1, #17
 80011be:	2017      	movs	r0, #23
 80011c0:	f7ff ff2a 	bl	8001018 <nrf24_WriteReg>
}
 80011c4:	e088      	b.n	80012d8 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80011c6:	2108      	movs	r1, #8
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ff25 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80011ce:	213f      	movs	r1, #63	@ 0x3f
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff ff21 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80011d6:	2103      	movs	r1, #3
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff ff1d 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80011de:	2103      	movs	r1, #3
 80011e0:	2003      	movs	r0, #3
 80011e2:	f7ff ff19 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80011e6:	2103      	movs	r1, #3
 80011e8:	2004      	movs	r0, #4
 80011ea:	f7ff ff15 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80011ee:	2102      	movs	r1, #2
 80011f0:	2005      	movs	r0, #5
 80011f2:	f7ff ff11 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80011f6:	210e      	movs	r1, #14
 80011f8:	2006      	movs	r0, #6
 80011fa:	f7ff ff0d 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80011fe:	2100      	movs	r1, #0
 8001200:	2007      	movs	r0, #7
 8001202:	f7ff ff09 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001206:	2100      	movs	r1, #0
 8001208:	2008      	movs	r0, #8
 800120a:	f7ff ff05 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800120e:	2100      	movs	r1, #0
 8001210:	2009      	movs	r0, #9
 8001212:	f7ff ff01 	bl	8001018 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001216:	4a32      	ldr	r2, [pc, #200]	@ (80012e0 <nrf24_reset+0x144>)
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001220:	6018      	str	r0, [r3, #0]
 8001222:	3304      	adds	r3, #4
 8001224:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	2205      	movs	r2, #5
 800122c:	4619      	mov	r1, r3
 800122e:	200a      	movs	r0, #10
 8001230:	f7ff ff22 	bl	8001078 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001234:	4a2b      	ldr	r2, [pc, #172]	@ (80012e4 <nrf24_reset+0x148>)
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800123e:	6018      	str	r0, [r3, #0]
 8001240:	3304      	adds	r3, #4
 8001242:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2205      	movs	r2, #5
 800124a:	4619      	mov	r1, r3
 800124c:	200b      	movs	r0, #11
 800124e:	f7ff ff13 	bl	8001078 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8001252:	21c3      	movs	r1, #195	@ 0xc3
 8001254:	200c      	movs	r0, #12
 8001256:	f7ff fedf 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800125a:	21c4      	movs	r1, #196	@ 0xc4
 800125c:	200d      	movs	r0, #13
 800125e:	f7ff fedb 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8001262:	21c5      	movs	r1, #197	@ 0xc5
 8001264:	200e      	movs	r0, #14
 8001266:	f7ff fed7 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800126a:	21c6      	movs	r1, #198	@ 0xc6
 800126c:	200f      	movs	r0, #15
 800126e:	f7ff fed3 	bl	8001018 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001272:	4a1b      	ldr	r2, [pc, #108]	@ (80012e0 <nrf24_reset+0x144>)
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127c:	6018      	str	r0, [r3, #0]
 800127e:	3304      	adds	r3, #4
 8001280:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2205      	movs	r2, #5
 8001288:	4619      	mov	r1, r3
 800128a:	2010      	movs	r0, #16
 800128c:	f7ff fef4 	bl	8001078 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8001290:	2100      	movs	r1, #0
 8001292:	2011      	movs	r0, #17
 8001294:	f7ff fec0 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001298:	2100      	movs	r1, #0
 800129a:	2012      	movs	r0, #18
 800129c:	f7ff febc 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2013      	movs	r0, #19
 80012a4:	f7ff feb8 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2014      	movs	r0, #20
 80012ac:	f7ff feb4 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2015      	movs	r0, #21
 80012b4:	f7ff feb0 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2016      	movs	r0, #22
 80012bc:	f7ff feac 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80012c0:	2111      	movs	r1, #17
 80012c2:	2017      	movs	r0, #23
 80012c4:	f7ff fea8 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80012c8:	2100      	movs	r1, #0
 80012ca:	201c      	movs	r0, #28
 80012cc:	f7ff fea4 	bl	8001018 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	201d      	movs	r0, #29
 80012d4:	f7ff fea0 	bl	8001018 <nrf24_WriteReg>
}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	0800b780 	.word	0x0800b780
 80012e4:	0800b788 	.word	0x0800b788

080012e8 <NRF24_Init>:




void NRF24_Init (void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80012ec:	f7ff fe88 	bl	8001000 <CE_Disable>

	// reset everything
	nrf24_reset (0);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ff53 	bl	800119c <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fe8d 	bl	8001018 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80012fe:	2100      	movs	r1, #0
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff fe89 	bl	8001018 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001306:	2100      	movs	r1, #0
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff fe85 	bl	8001018 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800130e:	2103      	movs	r1, #3
 8001310:	2003      	movs	r0, #3
 8001312:	f7ff fe81 	bl	8001018 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0x0);   // No retransmission
 8001316:	2100      	movs	r1, #0
 8001318:	2004      	movs	r0, #4
 800131a:	f7ff fe7d 	bl	8001018 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800131e:	2100      	movs	r1, #0
 8001320:	2005      	movs	r0, #5
 8001322:	f7ff fe79 	bl	8001018 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x00);   // Power= 0db, data rate = 2Mbps
 8001326:	2100      	movs	r1, #0
 8001328:	2006      	movs	r0, #6
 800132a:	f7ff fe75 	bl	8001018 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800132e:	f7ff fe5b 	bl	8000fe8 <CE_Enable>

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}

08001336 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8001342:	f7ff fe5d 	bl	8001000 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	4619      	mov	r1, r3
 800134a:	2005      	movs	r0, #5
 800134c:	f7ff fe64 	bl	8001018 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8001350:	2205      	movs	r2, #5
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	2010      	movs	r0, #16
 8001356:	f7ff fe8f 	bl	8001078 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fec6 	bl	80010ec <nrf24_ReadReg>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	f023 030d 	bic.w	r3, r3, #13
 800136a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(CONFIG, config);
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4619      	mov	r1, r3
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fe51 	bl	8001018 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001376:	f7ff fe37 	bl	8000fe8 <CE_Enable>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	733b      	strb	r3, [r7, #12]
	uint8_t fifostatus;
	uint16_t i = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	81fb      	strh	r3, [r7, #14]


	// check the FIFO status
	fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8001394:	2017      	movs	r0, #23
 8001396:	f7ff fea9 	bl	80010ec <nrf24_ReadReg>
 800139a:	4603      	mov	r3, r0
 800139c:	737b      	strb	r3, [r7, #13]

	if ( (fifostatus&(1<<5))) {
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <NRF24_Transmit+0x34>
		cmdtosend = FLUSH_TX;
 80013a8:	23e1      	movs	r3, #225	@ 0xe1
 80013aa:	733b      	strb	r3, [r7, #12]
		nrfsendCmd(cmdtosend);
 80013ac:	7b3b      	ldrb	r3, [r7, #12]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fed0 	bl	8001154 <nrfsendCmd>
		return 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e042      	b.n	800143e <NRF24_Transmit+0xba>
	}

	// select the device
	CS_Select();
 80013b8:	f7ff fdfe 	bl	8000fb8 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80013bc:	23a0      	movs	r3, #160	@ 0xa0
 80013be:	733b      	strb	r3, [r7, #12]

	if (HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100) != HAL_OK) {
 80013c0:	f107 010c 	add.w	r1, r7, #12
 80013c4:	2364      	movs	r3, #100	@ 0x64
 80013c6:	2201      	movs	r2, #1
 80013c8:	481f      	ldr	r0, [pc, #124]	@ (8001448 <NRF24_Transmit+0xc4>)
 80013ca:	f004 fdb6 	bl	8005f3a <HAL_SPI_Transmit>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <NRF24_Transmit+0x54>
		return 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e032      	b.n	800143e <NRF24_Transmit+0xba>
	}

	// send the payload
	if (HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000) != HAL_OK) {
 80013d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013dc:	2220      	movs	r2, #32
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4819      	ldr	r0, [pc, #100]	@ (8001448 <NRF24_Transmit+0xc4>)
 80013e2:	f004 fdaa 	bl	8005f3a <HAL_SPI_Transmit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <NRF24_Transmit+0x72>
		return 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e026      	b.n	800143e <NRF24_Transmit+0xba>
	}

	// Unselect the device
	while(i<400) {
		i++;
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	3301      	adds	r3, #1
 80013f4:	81fb      	strh	r3, [r7, #14]
	while(i<400) {
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80013fc:	d3f8      	bcc.n	80013f0 <NRF24_Transmit+0x6c>
	}
	CS_UnSelect();
 80013fe:	f7ff fde7 	bl	8000fd0 <CS_UnSelect>

	HAL_Delay(2);
 8001402:	2002      	movs	r0, #2
 8001404:	f002 fa70 	bl	80038e8 <HAL_Delay>

	fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8001408:	2017      	movs	r0, #23
 800140a:	f7ff fe6f 	bl	80010ec <nrf24_ReadReg>
 800140e:	4603      	mov	r3, r0
 8001410:	737b      	strb	r3, [r7, #13]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00f      	beq.n	800143c <NRF24_Transmit+0xb8>
 800141c:	7b7b      	ldrb	r3, [r7, #13]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10a      	bne.n	800143c <NRF24_Transmit+0xb8>
	{
		cmdtosend = FLUSH_TX;
 8001426:	23e1      	movs	r3, #225	@ 0xe1
 8001428:	733b      	strb	r3, [r7, #12]
		nrfsendCmd(cmdtosend);
 800142a:	7b3b      	ldrb	r3, [r7, #12]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe91 	bl	8001154 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8001432:	2017      	movs	r0, #23
 8001434:	f7ff feb2 	bl	800119c <nrf24_reset>

		return 1;
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <NRF24_Transmit+0xba>
	}

	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000308 	.word	0x20000308

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0ba      	sub	sp, #232	@ 0xe8
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	stewart platform;

	platform_init(&platform);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4618      	mov	r0, r3
 8001456:	f001 f93f 	bl	80026d8 <platform_init>

	// set position limits
	platform.xyz_limit = 50.0;	// [mm]
 800145a:	4b7c      	ldr	r3, [pc, #496]	@ (800164c <main+0x200>)
 800145c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	platform.tilt_limit = 10;	// deg
 8001460:	4b7b      	ldr	r3, [pc, #492]	@ (8001650 <main+0x204>)
 8001462:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	platform.rot_limit = 10;	// deg
 8001466:	4b7a      	ldr	r3, [pc, #488]	@ (8001650 <main+0x204>)
 8001468:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f002 f9ca 	bl	8003804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f90c 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 fac2 	bl	80019fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f000 faa0 	bl	80019bc <MX_DMA_Init>
  MX_ADC1_Init();
 800147c:	f000 f978 	bl	8001770 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001480:	f000 fa3c 	bl	80018fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001484:	f000 fa70 	bl	8001968 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001488:	f000 fa0a 	bl	80018a0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  adc_ready = 0;
 800148c:	4b71      	ldr	r3, [pc, #452]	@ (8001654 <main+0x208>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]


#ifdef RF
  	  NRF24_Init();
 8001492:	f7ff ff29 	bl	80012e8 <NRF24_Init>
  	  nrf24_reset(2);
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff fe80 	bl	800119c <nrf24_reset>
  	  NRF24_TxMode(RF_address, 1);
 800149c:	2101      	movs	r1, #1
 800149e:	486e      	ldr	r0, [pc, #440]	@ (8001658 <main+0x20c>)
 80014a0:	f7ff ff49 	bl	8001336 <NRF24_TxMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, 6);
 80014a4:	2206      	movs	r2, #6
 80014a6:	496d      	ldr	r1, [pc, #436]	@ (800165c <main+0x210>)
 80014a8:	486d      	ldr	r0, [pc, #436]	@ (8001660 <main+0x214>)
 80014aa:	f002 fb95 	bl	8003bd8 <HAL_ADC_Start_DMA>

	  if (adc_ready) {
 80014ae:	4b69      	ldr	r3, [pc, #420]	@ (8001654 <main+0x208>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d03e      	beq.n	8001534 <main+0xe8>

		  joyx = adc_raw_to_joystick(adc_raw[0]);
 80014b6:	4b69      	ldr	r3, [pc, #420]	@ (800165c <main+0x210>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fcfc 	bl	8001eb8 <adc_raw_to_joystick>
 80014c0:	eef0 7a40 	vmov.f32	s15, s0
 80014c4:	4b67      	ldr	r3, [pc, #412]	@ (8001664 <main+0x218>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
		  joyy = adc_raw_to_joystick(adc_raw[1]);
 80014ca:	4b64      	ldr	r3, [pc, #400]	@ (800165c <main+0x210>)
 80014cc:	885b      	ldrh	r3, [r3, #2]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fcf2 	bl	8001eb8 <adc_raw_to_joystick>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	4b63      	ldr	r3, [pc, #396]	@ (8001668 <main+0x21c>)
 80014da:	edc3 7a00 	vstr	s15, [r3]
		  joyz = adc_raw_to_joystick(adc_raw[2]);
 80014de:	4b5f      	ldr	r3, [pc, #380]	@ (800165c <main+0x210>)
 80014e0:	889b      	ldrh	r3, [r3, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fce8 	bl	8001eb8 <adc_raw_to_joystick>
 80014e8:	eef0 7a40 	vmov.f32	s15, s0
 80014ec:	4b5f      	ldr	r3, [pc, #380]	@ (800166c <main+0x220>)
 80014ee:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_x = adc_raw_to_joystick(adc_raw[3]);
 80014f2:	4b5a      	ldr	r3, [pc, #360]	@ (800165c <main+0x210>)
 80014f4:	88db      	ldrh	r3, [r3, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fcde 	bl	8001eb8 <adc_raw_to_joystick>
 80014fc:	eef0 7a40 	vmov.f32	s15, s0
 8001500:	4b5b      	ldr	r3, [pc, #364]	@ (8001670 <main+0x224>)
 8001502:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_y = adc_raw_to_joystick(adc_raw[4]);
 8001506:	4b55      	ldr	r3, [pc, #340]	@ (800165c <main+0x210>)
 8001508:	891b      	ldrh	r3, [r3, #8]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fcd4 	bl	8001eb8 <adc_raw_to_joystick>
 8001510:	eef0 7a40 	vmov.f32	s15, s0
 8001514:	4b57      	ldr	r3, [pc, #348]	@ (8001674 <main+0x228>)
 8001516:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_z = adc_raw_to_joystick(adc_raw[5]);
 800151a:	4b50      	ldr	r3, [pc, #320]	@ (800165c <main+0x210>)
 800151c:	895b      	ldrh	r3, [r3, #10]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fcca 	bl	8001eb8 <adc_raw_to_joystick>
 8001524:	eef0 7a40 	vmov.f32	s15, s0
 8001528:	4b53      	ldr	r3, [pc, #332]	@ (8001678 <main+0x22c>)
 800152a:	edc3 7a00 	vstr	s15, [r3]

		  adc_ready = 0;
 800152e:	4b49      	ldr	r3, [pc, #292]	@ (8001654 <main+0x208>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]

	  }

	  move_target_position(&platform);
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fae4 	bl	8001b04 <move_target_position>

	  rotate_platform(&platform, platform.a1);
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fcfd 	bl	8002f46 <rotate_platform>
	  rotate_platform(&platform, platform.a2);
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fcf5 	bl	8002f46 <rotate_platform>
	  rotate_platform(&platform, platform.a3);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fced 	bl	8002f46 <rotate_platform>
	  rotate_platform(&platform, platform.a4);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f001 fce5 	bl	8002f46 <rotate_platform>
	  rotate_platform(&platform, platform.a5);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fcdd 	bl	8002f46 <rotate_platform>
	  rotate_platform(&platform, platform.a6);
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fcd5 	bl	8002f46 <rotate_platform>

	  run_platform(&platform);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 fd1a 	bl	8002fd8 <run_platform>



	  target_pot[0] = c_length_to_pot_value(platform.c_target[0]);
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f000 fcc8 	bl	8001f40 <c_length_to_pot_value>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b31      	ldr	r3, [pc, #196]	@ (800167c <main+0x230>)
 80015b6:	801a      	strh	r2, [r3, #0]
	  target_pot[1] = c_length_to_pot_value(platform.c_target[1]);
 80015b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	f000 fcbe 	bl	8001f40 <c_length_to_pot_value>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <main+0x230>)
 80015ca:	805a      	strh	r2, [r3, #2]
	  target_pot[2] = c_length_to_pot_value(platform.c_target[2]);
 80015cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	f000 fcb4 	bl	8001f40 <c_length_to_pot_value>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	4b27      	ldr	r3, [pc, #156]	@ (800167c <main+0x230>)
 80015de:	809a      	strh	r2, [r3, #4]
	  target_pot[3] = c_length_to_pot_value(platform.c_target[3]);
 80015e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	f000 fcaa 	bl	8001f40 <c_length_to_pot_value>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <main+0x230>)
 80015f2:	80da      	strh	r2, [r3, #6]
	  target_pot[4] = c_length_to_pot_value(platform.c_target[4]);
 80015f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f8:	eeb0 0a67 	vmov.f32	s0, s15
 80015fc:	f000 fca0 	bl	8001f40 <c_length_to_pot_value>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <main+0x230>)
 8001606:	811a      	strh	r2, [r3, #8]
	  target_pot[5] = c_length_to_pot_value(platform.c_target[5]);
 8001608:	edd7 7a06 	vldr	s15, [r7, #24]
 800160c:	eeb0 0a67 	vmov.f32	s0, s15
 8001610:	f000 fc96 	bl	8001f40 <c_length_to_pot_value>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <main+0x230>)
 800161a:	815a      	strh	r2, [r3, #10]

	  pack_data();
 800161c:	f000 fcc2 	bl	8001fa4 <pack_data>
#endif


#ifdef RF

	  lost_packets = nrf24_ReadReg(0x08);
 8001620:	2008      	movs	r0, #8
 8001622:	f7ff fd63 	bl	80010ec <nrf24_ReadReg>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <main+0x234>)
 800162c:	701a      	strb	r2, [r3, #0]
	  if (NRF24_Transmit(TxData) == 1) {
 800162e:	4815      	ldr	r0, [pc, #84]	@ (8001684 <main+0x238>)
 8001630:	f7ff fea8 	bl	8001384 <NRF24_Transmit>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d103      	bne.n	8001642 <main+0x1f6>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800163a:	2120      	movs	r1, #32
 800163c:	4812      	ldr	r0, [pc, #72]	@ (8001688 <main+0x23c>)
 800163e:	f003 fce2 	bl	8005006 <HAL_GPIO_TogglePin>
	  }

#endif


	  HAL_Delay(500);
 8001642:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001646:	f002 f94f 	bl	80038e8 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, 6);
 800164a:	e72b      	b.n	80014a4 <main+0x58>
 800164c:	42480000 	.word	0x42480000
 8001650:	41200000 	.word	0x41200000
 8001654:	200003cc 	.word	0x200003cc
 8001658:	20000000 	.word	0x20000000
 800165c:	200003a8 	.word	0x200003a8
 8001660:	2000020c 	.word	0x2000020c
 8001664:	200003b4 	.word	0x200003b4
 8001668:	200003b8 	.word	0x200003b8
 800166c:	200003bc 	.word	0x200003bc
 8001670:	200003c0 	.word	0x200003c0
 8001674:	200003c4 	.word	0x200003c4
 8001678:	200003c8 	.word	0x200003c8
 800167c:	200003d0 	.word	0x200003d0
 8001680:	200003e8 	.word	0x200003e8
 8001684:	200003dc 	.word	0x200003dc
 8001688:	40020000 	.word	0x40020000

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	@ 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	2234      	movs	r2, #52	@ 0x34
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f006 f974 	bl	8007988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001768 <SystemClock_Config+0xdc>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001768 <SystemClock_Config+0xdc>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <SystemClock_Config+0xdc>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4b26      	ldr	r3, [pc, #152]	@ (800176c <SystemClock_Config+0xe0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a25      	ldr	r2, [pc, #148]	@ (800176c <SystemClock_Config+0xe0>)
 80016d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <SystemClock_Config+0xe0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f0:	2310      	movs	r3, #16
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	2302      	movs	r3, #2
 80016f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016fc:	2308      	movs	r3, #8
 80016fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001700:	23b4      	movs	r3, #180	@ 0xb4
 8001702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001708:	2302      	movs	r3, #2
 800170a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800170c:	2302      	movs	r3, #2
 800170e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4618      	mov	r0, r3
 8001716:	f004 f8e9 	bl	80058ec <HAL_RCC_OscConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001720:	f000 fca6 	bl	8002070 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001724:	f003 fdce 	bl	80052c4 <HAL_PWREx_EnableOverDrive>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800172e:	f000 fc9f 	bl	8002070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001732:	230f      	movs	r3, #15
 8001734:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001736:	2302      	movs	r3, #2
 8001738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800173e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001748:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2105      	movs	r1, #5
 8001750:	4618      	mov	r0, r3
 8001752:	f003 fe07 	bl	8005364 <HAL_RCC_ClockConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800175c:	f000 fc88 	bl	8002070 <Error_Handler>
  }
}
 8001760:	bf00      	nop
 8001762:	3750      	adds	r7, #80	@ 0x50
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000

08001770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001776:	463b      	mov	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001782:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <MX_ADC1_Init+0x124>)
 8001784:	4a44      	ldr	r2, [pc, #272]	@ (8001898 <MX_ADC1_Init+0x128>)
 8001786:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001788:	4b42      	ldr	r3, [pc, #264]	@ (8001894 <MX_ADC1_Init+0x124>)
 800178a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800178e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001790:	4b40      	ldr	r3, [pc, #256]	@ (8001894 <MX_ADC1_Init+0x124>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001796:	4b3f      	ldr	r3, [pc, #252]	@ (8001894 <MX_ADC1_Init+0x124>)
 8001798:	2201      	movs	r2, #1
 800179a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800179c:	4b3d      	ldr	r3, [pc, #244]	@ (8001894 <MX_ADC1_Init+0x124>)
 800179e:	2200      	movs	r2, #0
 80017a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b0:	4b38      	ldr	r3, [pc, #224]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017b2:	4a3a      	ldr	r2, [pc, #232]	@ (800189c <MX_ADC1_Init+0x12c>)
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017b6:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80017bc:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017be:	2206      	movs	r2, #6
 80017c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017c2:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d0:	4830      	ldr	r0, [pc, #192]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017d2:	f002 f8ad 	bl	8003930 <HAL_ADC_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017dc:	f000 fc48 	bl	8002070 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80017e8:	2305      	movs	r3, #5
 80017ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	4828      	ldr	r0, [pc, #160]	@ (8001894 <MX_ADC1_Init+0x124>)
 80017f2:	f002 fb1f 	bl	8003e34 <HAL_ADC_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017fc:	f000 fc38 	bl	8002070 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001800:	2301      	movs	r3, #1
 8001802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001804:	2302      	movs	r3, #2
 8001806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001808:	463b      	mov	r3, r7
 800180a:	4619      	mov	r1, r3
 800180c:	4821      	ldr	r0, [pc, #132]	@ (8001894 <MX_ADC1_Init+0x124>)
 800180e:	f002 fb11 	bl	8003e34 <HAL_ADC_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001818:	f000 fc2a 	bl	8002070 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800181c:	2302      	movs	r3, #2
 800181e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001820:	2303      	movs	r3, #3
 8001822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	481a      	ldr	r0, [pc, #104]	@ (8001894 <MX_ADC1_Init+0x124>)
 800182a:	f002 fb03 	bl	8003e34 <HAL_ADC_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001834:	f000 fc1c 	bl	8002070 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001838:	2303      	movs	r3, #3
 800183a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800183c:	2304      	movs	r3, #4
 800183e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	4619      	mov	r1, r3
 8001844:	4813      	ldr	r0, [pc, #76]	@ (8001894 <MX_ADC1_Init+0x124>)
 8001846:	f002 faf5 	bl	8003e34 <HAL_ADC_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001850:	f000 fc0e 	bl	8002070 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001854:	2304      	movs	r3, #4
 8001856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001858:	2305      	movs	r3, #5
 800185a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <MX_ADC1_Init+0x124>)
 8001862:	f002 fae7 	bl	8003e34 <HAL_ADC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800186c:	f000 fc00 	bl	8002070 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001870:	2308      	movs	r3, #8
 8001872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001874:	2306      	movs	r3, #6
 8001876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_ADC1_Init+0x124>)
 800187e:	f002 fad9 	bl	8003e34 <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001888:	f000 fbf2 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000020c 	.word	0x2000020c
 8001898:	40012000 	.word	0x40012000
 800189c:	0f000001 	.word	0x0f000001

080018a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018a6:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <MX_I2C2_Init+0x54>)
 80018a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018ac:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_I2C2_Init+0x58>)
 80018ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018de:	f003 fbad 	bl	800503c <HAL_I2C_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018e8:	f000 fbc2 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200002b4 	.word	0x200002b4
 80018f4:	40005800 	.word	0x40005800
 80018f8:	000186a0 	.word	0x000186a0

080018fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001902:	4a18      	ldr	r2, [pc, #96]	@ (8001964 <MX_SPI1_Init+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001908:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800190c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_SPI1_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800192c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001930:	2228      	movs	r2, #40	@ 0x28
 8001932:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001934:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_SPI1_Init+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_SPI1_Init+0x64>)
 8001948:	220a      	movs	r2, #10
 800194a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	@ (8001960 <MX_SPI1_Init+0x64>)
 800194e:	f004 fa6b 	bl	8005e28 <HAL_SPI_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001958:	f000 fb8a 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000308 	.word	0x20000308
 8001964:	40013000 	.word	0x40013000

08001968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <MX_USART1_UART_Init+0x50>)
 8001970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 80019a0:	f005 f814 	bl	80069cc <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019aa:	f000 fb61 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000360 	.word	0x20000360
 80019b8:	40011000 	.word	0x40011000

080019bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_DMA_Init+0x3c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a0b      	ldr	r2, [pc, #44]	@ (80019f8 <MX_DMA_Init+0x3c>)
 80019cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_DMA_Init+0x3c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2038      	movs	r0, #56	@ 0x38
 80019e4:	f002 fdbb 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019e8:	2038      	movs	r0, #56	@ 0x38
 80019ea:	f002 fdd4 	bl	8004596 <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a28      	ldr	r2, [pc, #160]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a21      	ldr	r2, [pc, #132]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <MX_GPIO_Init+0xdc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2120      	movs	r1, #32
 8001a86:	4815      	ldr	r0, [pc, #84]	@ (8001adc <MX_GPIO_Init+0xe0>)
 8001a88:	f003 faa4 	bl	8004fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2130      	movs	r1, #48	@ 0x30
 8001a90:	4813      	ldr	r0, [pc, #76]	@ (8001ae0 <MX_GPIO_Init+0xe4>)
 8001a92:	f003 fa9f 	bl	8004fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a96:	2320      	movs	r3, #32
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480b      	ldr	r0, [pc, #44]	@ (8001adc <MX_GPIO_Init+0xe0>)
 8001aae:	f003 f8fd 	bl	8004cac <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001ab2:	2330      	movs	r3, #48	@ 0x30
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <MX_GPIO_Init+0xe4>)
 8001aca:	f003 f8ef 	bl	8004cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	@ 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400

08001ae4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

	adc_ready = 1;
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]


}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200003cc 	.word	0x200003cc

08001b04 <move_target_position>:


void move_target_position(stewart* stewart) {
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]


	if (stewart->tp_target_pos[0] > stewart->xyz_limit) stewart->tp_target_pos[0] = stewart->xyz_limit;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	dd06      	ble.n	8001b30 <move_target_position+0x2c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8001b2e:	e038      	b.n	8001ba2 <move_target_position+0x9e>
	else if (stewart->tp_target_pos[0] < -stewart->xyz_limit) stewart->tp_target_pos[0] = -stewart->xyz_limit;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001b3c:	eef1 7a67 	vneg.f32	s15, s15
 8001b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	d508      	bpl.n	8001b5c <move_target_position+0x58>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001b50:	eef1 7a67 	vneg.f32	s15, s15
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
 8001b5a:	e022      	b.n	8001ba2 <move_target_position+0x9e>
	else if (stewart->tp_target_pos[0] >= -stewart->xyz_limit || stewart->tp_target_pos[0] <= stewart->xyz_limit )
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001b68:	eef1 7a67 	vneg.f32	s15, s15
 8001b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	da0a      	bge.n	8001b8c <move_target_position+0x88>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	d80a      	bhi.n	8001ba2 <move_target_position+0x9e>
	{
		stewart->tp_target_pos[0] += joyx;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001b92:	4bba      	ldr	r3, [pc, #744]	@ (8001e7c <move_target_position+0x378>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	}

	if (stewart->tp_target_pos[1] > stewart->xyz_limit) stewart->tp_target_pos[1] = stewart->xyz_limit;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dd06      	ble.n	8001bc6 <move_target_position+0xc2>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8001bc4:	e038      	b.n	8001c38 <move_target_position+0x134>
	else if (stewart->tp_target_pos[1] < -stewart->xyz_limit) stewart->tp_target_pos[1] = -stewart->xyz_limit;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001bd2:	eef1 7a67 	vneg.f32	s15, s15
 8001bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	d508      	bpl.n	8001bf2 <move_target_position+0xee>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001be6:	eef1 7a67 	vneg.f32	s15, s15
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
 8001bf0:	e022      	b.n	8001c38 <move_target_position+0x134>
	else if (stewart->tp_target_pos[1] >= -stewart->xyz_limit || stewart->tp_target_pos[1] <= stewart->xyz_limit )
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001bfe:	eef1 7a67 	vneg.f32	s15, s15
 8001c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	da0a      	bge.n	8001c22 <move_target_position+0x11e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001c18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	d80a      	bhi.n	8001c38 <move_target_position+0x134>
	{
		stewart->tp_target_pos[1] += joyy;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001c28:	4b95      	ldr	r3, [pc, #596]	@ (8001e80 <move_target_position+0x37c>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
	}

	if (stewart->tp_target_pos[2] > 0) stewart->tp_target_pos[2] = 0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8001c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	dd05      	ble.n	8001c54 <move_target_position+0x150>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001c52:	e03b      	b.n	8001ccc <move_target_position+0x1c8>
	else if (stewart->tp_target_pos[2] < -2*stewart->xyz_limit) stewart->tp_target_pos[2] = -2*stewart->xyz_limit;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001c60:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8001c64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	d50a      	bpl.n	8001c88 <move_target_position+0x184>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001c78:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
 8001c86:	e021      	b.n	8001ccc <move_target_position+0x1c8>
	else if (stewart->tp_target_pos[2] >= -2*stewart->xyz_limit || stewart->tp_target_pos[2] <= 0 )
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001c94:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8001c98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	da07      	bge.n	8001cb6 <move_target_position+0x1b2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8001cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	d80a      	bhi.n	8001ccc <move_target_position+0x1c8>
	{
		stewart->tp_target_pos[2] += joyz;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001cbc:	4b71      	ldr	r3, [pc, #452]	@ (8001e84 <move_target_position+0x380>)
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
	}


	if (stewart->tp_target_pos[3] > stewart->tilt_limit) stewart->tp_target_pos[3] = stewart->tilt_limit;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	dd06      	ble.n	8001cf0 <move_target_position+0x1ec>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8001cee:	e038      	b.n	8001d62 <move_target_position+0x25e>
	else if (stewart->tp_target_pos[3] < -stewart->tilt_limit) stewart->tp_target_pos[3] = -stewart->tilt_limit;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001cfc:	eef1 7a67 	vneg.f32	s15, s15
 8001d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	d508      	bpl.n	8001d1c <move_target_position+0x218>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001d10:	eef1 7a67 	vneg.f32	s15, s15
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
 8001d1a:	e022      	b.n	8001d62 <move_target_position+0x25e>
	else if (stewart->tp_target_pos[3] >= -stewart->tilt_limit || stewart->tp_target_pos[3] <= stewart->tilt_limit )
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001d28:	eef1 7a67 	vneg.f32	s15, s15
 8001d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	da0a      	bge.n	8001d4c <move_target_position+0x248>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	d80a      	bhi.n	8001d62 <move_target_position+0x25e>
	{
		stewart->tp_target_pos[3] += joyrot_x;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001d52:	4b4d      	ldr	r3, [pc, #308]	@ (8001e88 <move_target_position+0x384>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
	}


	if (stewart->tp_target_pos[4] > stewart->tilt_limit) stewart->tp_target_pos[4] = stewart->tilt_limit;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	dd06      	ble.n	8001d86 <move_target_position+0x282>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8001d84:	e038      	b.n	8001df8 <move_target_position+0x2f4>
	else if (stewart->tp_target_pos[4] < -stewart->tilt_limit) stewart->tp_target_pos[4] = -stewart->tilt_limit;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001d92:	eef1 7a67 	vneg.f32	s15, s15
 8001d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d508      	bpl.n	8001db2 <move_target_position+0x2ae>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001da6:	eef1 7a67 	vneg.f32	s15, s15
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
 8001db0:	e022      	b.n	8001df8 <move_target_position+0x2f4>
	else if (stewart->tp_target_pos[4] >= -stewart->tilt_limit || stewart->tp_target_pos[4] <= stewart->tilt_limit )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001dbe:	eef1 7a67 	vneg.f32	s15, s15
 8001dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	da0a      	bge.n	8001de2 <move_target_position+0x2de>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	d80a      	bhi.n	8001df8 <move_target_position+0x2f4>
	{
		stewart->tp_target_pos[4] += joyrot_y;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001de8:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <move_target_position+0x388>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
	}


	if (stewart->tp_target_pos[5] > stewart->rot_limit) stewart->tp_target_pos[5] = stewart->rot_limit;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	dd06      	ble.n	8001e1c <move_target_position+0x318>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	{
		stewart->tp_target_pos[5] += joyrot_z;
	}


}
 8001e1a:	e044      	b.n	8001ea6 <move_target_position+0x3a2>
	else if (stewart->tp_target_pos[5] < -stewart->rot_limit) stewart->tp_target_pos[5] = -stewart->rot_limit;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001e28:	eef1 7a67 	vneg.f32	s15, s15
 8001e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d508      	bpl.n	8001e48 <move_target_position+0x344>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001e3c:	eef1 7a67 	vneg.f32	s15, s15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 8001e46:	e02e      	b.n	8001ea6 <move_target_position+0x3a2>
	else if (stewart->tp_target_pos[5] >= -stewart->rot_limit || stewart->tp_target_pos[5] <= stewart->rot_limit )
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001e54:	eef1 7a67 	vneg.f32	s15, s15
 8001e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	da16      	bge.n	8001e90 <move_target_position+0x38c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d90b      	bls.n	8001e90 <move_target_position+0x38c>
}
 8001e78:	e015      	b.n	8001ea6 <move_target_position+0x3a2>
 8001e7a:	bf00      	nop
 8001e7c:	200003b4 	.word	0x200003b4
 8001e80:	200003b8 	.word	0x200003b8
 8001e84:	200003bc 	.word	0x200003bc
 8001e88:	200003c0 	.word	0x200003c0
 8001e8c:	200003c4 	.word	0x200003c4
		stewart->tp_target_pos[5] += joyrot_z;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001e96:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <move_target_position+0x3b0>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	200003c8 	.word	0x200003c8

08001eb8 <adc_raw_to_joystick>:


float adc_raw_to_joystick(uint16_t adc_raw) {
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]

	float joy_val;

	if (adc_raw >= 1900 && adc_raw <= 2100) {
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d907      	bls.n	8001edc <adc_raw_to_joystick+0x24>
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	f640 0234 	movw	r2, #2100	@ 0x834
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d802      	bhi.n	8001edc <adc_raw_to_joystick+0x24>
		return 0;
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e025      	b.n	8001f28 <adc_raw_to_joystick+0x70>
	}

	else if (adc_raw > 2100) {
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	f640 0234 	movw	r2, #2100	@ 0x834
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d90d      	bls.n	8001f02 <adc_raw_to_joystick+0x4a>
		joy_val = (float) (adc_raw - 2100) / 1000;
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef4:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001f3c <adc_raw_to_joystick+0x84>
 8001ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001efc:	edc7 7a03 	vstr	s15, [r7, #12]
 8001f00:	e011      	b.n	8001f26 <adc_raw_to_joystick+0x6e>

	}

	else if (adc_raw <1900) {
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d80c      	bhi.n	8001f26 <adc_raw_to_joystick+0x6e>
		joy_val = (float) (adc_raw - 1900)/ 1000;
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001f3c <adc_raw_to_joystick+0x84>
 8001f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f22:	edc7 7a03 	vstr	s15, [r7, #12]

	}
	return joy_val;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	ee07 3a90 	vmov	s15, r3
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	447a0000 	.word	0x447a0000

08001f40 <c_length_to_pot_value>:
	}

}


uint16_t c_length_to_pot_value(float cylinder_length) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	ed87 0a01 	vstr	s0, [r7, #4]

	uint16_t pot_val;

	pot_val = (uint16_t) (cylinder_length - 400.00) * 13.6533;
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fb1c 	bl	8000588 <__aeabi_f2d>
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <c_length_to_pot_value+0x60>)
 8001f56:	f7fe f9b7 	bl	80002c8 <__aeabi_dsub>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe fe41 	bl	8000be8 <__aeabi_d2uiz>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fafa 	bl	8000564 <__aeabi_i2d>
 8001f70:	a309      	add	r3, pc, #36	@ (adr r3, 8001f98 <c_length_to_pot_value+0x58>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb5f 	bl	8000638 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f7fe fe31 	bl	8000be8 <__aeabi_d2uiz>
 8001f86:	4603      	mov	r3, r0
 8001f88:	81fb      	strh	r3, [r7, #14]

	return pot_val;
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	f3af 8000 	nop.w
 8001f98:	566cf41f 	.word	0x566cf41f
 8001f9c:	402b4e7d 	.word	0x402b4e7d
 8001fa0:	40790000 	.word	0x40790000

08001fa4 <pack_data>:

void pack_data(void) {
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

	TxData[0] = (uint8_t) (target_pot[0] & 0xFF);
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <pack_data+0xc4>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <pack_data+0xc8>)
 8001fb0:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t) (target_pot[0] >> 8) & 0x0F;
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <pack_data+0xc4>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <pack_data+0xc8>)
 8001fc4:	705a      	strb	r2, [r3, #1]

	TxData[2] = (uint8_t) (target_pot[1] & 0xFF);
 8001fc6:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <pack_data+0xc4>)
 8001fc8:	885b      	ldrh	r3, [r3, #2]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b27      	ldr	r3, [pc, #156]	@ (800206c <pack_data+0xc8>)
 8001fce:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) (target_pot[1] >> 8) & 0x0F;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <pack_data+0xc4>)
 8001fd2:	885b      	ldrh	r3, [r3, #2]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <pack_data+0xc8>)
 8001fe2:	70da      	strb	r2, [r3, #3]

	TxData[4] = (uint8_t) (target_pot[2] & 0xFF);
 8001fe4:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <pack_data+0xc4>)
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <pack_data+0xc8>)
 8001fec:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) (target_pot[2] >> 8) & 0x0F;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <pack_data+0xc4>)
 8001ff0:	889b      	ldrh	r3, [r3, #4]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <pack_data+0xc8>)
 8002000:	715a      	strb	r2, [r3, #5]

	TxData[6] = (uint8_t) (target_pot[3] & 0xFF);
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <pack_data+0xc4>)
 8002004:	88db      	ldrh	r3, [r3, #6]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <pack_data+0xc8>)
 800200a:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t) (target_pot[3] >> 8) & 0x0F;
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <pack_data+0xc4>)
 800200e:	88db      	ldrh	r3, [r3, #6]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	b29b      	uxth	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <pack_data+0xc8>)
 800201e:	71da      	strb	r2, [r3, #7]

	TxData[8] = (uint8_t) (target_pot[4] & 0xFF);
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <pack_data+0xc4>)
 8002022:	891b      	ldrh	r3, [r3, #8]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <pack_data+0xc8>)
 8002028:	721a      	strb	r2, [r3, #8]
	TxData[9] = (uint8_t) (target_pot[4] >> 8) & 0x0F;
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <pack_data+0xc4>)
 800202c:	891b      	ldrh	r3, [r3, #8]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <pack_data+0xc8>)
 800203c:	725a      	strb	r2, [r3, #9]

	TxData[10] = (uint8_t) (target_pot[5] & 0xFF);
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <pack_data+0xc4>)
 8002040:	895b      	ldrh	r3, [r3, #10]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <pack_data+0xc8>)
 8002046:	729a      	strb	r2, [r3, #10]
	TxData[11] = (uint8_t) (target_pot[5] >> 8) & 0x0F;
 8002048:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <pack_data+0xc4>)
 800204a:	895b      	ldrh	r3, [r3, #10]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b29b      	uxth	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <pack_data+0xc8>)
 800205a:	72da      	strb	r2, [r3, #11]

}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200003d0 	.word	0x200003d0
 800206c:	200003dc 	.word	0x200003dc

08002070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002074:	2120      	movs	r1, #32
 8002076:	4804      	ldr	r0, [pc, #16]	@ (8002088 <Error_Handler+0x18>)
 8002078:	f002 ffc5 	bl	8005006 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800207c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002080:	f001 fc32 	bl	80038e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002084:	bf00      	nop
 8002086:	e7f5      	b.n	8002074 <Error_Handler+0x4>
 8002088:	40020000 	.word	0x40020000

0800208c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a0f      	ldr	r2, [pc, #60]	@ (80020d8 <HAL_MspInit+0x4c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <HAL_MspInit+0x4c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	@ (80020d8 <HAL_MspInit+0x4c>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_MspInit+0x4c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a40      	ldr	r2, [pc, #256]	@ (80021fc <HAL_ADC_MspInit+0x120>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d179      	bne.n	80021f2 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b3f      	ldr	r3, [pc, #252]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	4a3e      	ldr	r2, [pc, #248]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210c:	6453      	str	r3, [r2, #68]	@ 0x44
 800210e:	4b3c      	ldr	r3, [pc, #240]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b38      	ldr	r3, [pc, #224]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4a37      	ldr	r2, [pc, #220]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	@ 0x30
 800212a:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	4a30      	ldr	r2, [pc, #192]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30
 8002146:	4b2e      	ldr	r3, [pc, #184]	@ (8002200 <HAL_ADC_MspInit+0x124>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = joy_x_Pin|joy_y_Pin|joy_z_Pin|joy_rot_x_Pin
 8002152:	231f      	movs	r3, #31
 8002154:	617b      	str	r3, [r7, #20]
                          |joy_rot_y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002156:	2303      	movs	r3, #3
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4827      	ldr	r0, [pc, #156]	@ (8002204 <HAL_ADC_MspInit+0x128>)
 8002166:	f002 fda1 	bl	8004cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joy3_rot_z_Pin;
 800216a:	2301      	movs	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216e:	2303      	movs	r3, #3
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(joy3_rot_z_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4822      	ldr	r0, [pc, #136]	@ (8002208 <HAL_ADC_MspInit+0x12c>)
 800217e:	f002 fd95 	bl	8004cac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_ADC_MspInit+0x130>)
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_ADC_MspInit+0x134>)
 8002186:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002188:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_ADC_MspInit+0x130>)
 800218a:	2200      	movs	r2, #0
 800218c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218e:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <HAL_ADC_MspInit+0x130>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_ADC_MspInit+0x130>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800219a:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <HAL_ADC_MspInit+0x130>)
 800219c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_ADC_MspInit+0x130>)
 80021a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021aa:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_ADC_MspInit+0x130>)
 80021ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021b2:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_ADC_MspInit+0x130>)
 80021b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021ba:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_ADC_MspInit+0x130>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_ADC_MspInit+0x130>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021c6:	4811      	ldr	r0, [pc, #68]	@ (800220c <HAL_ADC_MspInit+0x130>)
 80021c8:	f002 fa00 	bl	80045cc <HAL_DMA_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80021d2:	f7ff ff4d 	bl	8002070 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <HAL_ADC_MspInit+0x130>)
 80021da:	639a      	str	r2, [r3, #56]	@ 0x38
 80021dc:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <HAL_ADC_MspInit+0x130>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2012      	movs	r0, #18
 80021e8:	f002 f9b9 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80021ec:	2012      	movs	r0, #18
 80021ee:	f002 f9d2 	bl	8004596 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	@ 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40012000 	.word	0x40012000
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	20000254 	.word	0x20000254
 8002210:	40026410 	.word	0x40026410

08002214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	@ 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a29      	ldr	r2, [pc, #164]	@ (80022d8 <HAL_I2C_MspInit+0xc4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d14b      	bne.n	80022ce <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b28      	ldr	r3, [pc, #160]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a27      	ldr	r2, [pc, #156]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a20      	ldr	r2, [pc, #128]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800226e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002274:	2312      	movs	r3, #18
 8002276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002278:	2301      	movs	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002280:	2304      	movs	r3, #4
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	4815      	ldr	r0, [pc, #84]	@ (80022e0 <HAL_I2C_MspInit+0xcc>)
 800228c:	f002 fd0e 	bl	8004cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002296:	2312      	movs	r3, #18
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800229a:	2301      	movs	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022a2:	2304      	movs	r3, #4
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <HAL_I2C_MspInit+0xd0>)
 80022ae:	f002 fcfd 	bl	8004cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 80022bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_I2C_MspInit+0xc8>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	@ 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40005800 	.word	0x40005800
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800

080022e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	@ 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a28      	ldr	r2, [pc, #160]	@ (80023a8 <HAL_SPI_MspInit+0xc0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d149      	bne.n	800239e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b27      	ldr	r3, [pc, #156]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 8002314:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002318:	6453      	str	r3, [r2, #68]	@ 0x44
 800231a:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_SPI_MspInit+0xc4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800235e:	23c0      	movs	r3, #192	@ 0xc0
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800236e:	2305      	movs	r3, #5
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	480d      	ldr	r0, [pc, #52]	@ (80023b0 <HAL_SPI_MspInit+0xc8>)
 800237a:	f002 fc97 	bl	8004cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800237e:	2308      	movs	r3, #8
 8002380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800238e:	2305      	movs	r3, #5
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4806      	ldr	r0, [pc, #24]	@ (80023b4 <HAL_SPI_MspInit+0xcc>)
 800239a:	f002 fc87 	bl	8004cac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	@ 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40013000 	.word	0x40013000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400

080023b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a19      	ldr	r2, [pc, #100]	@ (800243c <HAL_UART_MspInit+0x84>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d12c      	bne.n	8002434 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <HAL_UART_MspInit+0x88>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <HAL_UART_MspInit+0x88>)
 80023e4:	f043 0310 	orr.w	r3, r3, #16
 80023e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_UART_MspInit+0x88>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_UART_MspInit+0x88>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <HAL_UART_MspInit+0x88>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6313      	str	r3, [r2, #48]	@ 0x30
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_UART_MspInit+0x88>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002412:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002424:	2307      	movs	r3, #7
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <HAL_UART_MspInit+0x8c>)
 8002430:	f002 fc3c 	bl	8004cac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002434:	bf00      	nop
 8002436:	3728      	adds	r7, #40	@ 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40011000 	.word	0x40011000
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <NMI_Handler+0x4>

08002450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <MemManage_Handler+0x4>

08002460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <UsageFault_Handler+0x4>

08002470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249e:	f001 fa03 	bl	80038a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <ADC_IRQHandler+0x10>)
 80024ae:	f001 fa82 	bl	80039b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000020c 	.word	0x2000020c

080024bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <DMA2_Stream0_IRQHandler+0x10>)
 80024c2:	f002 f989 	bl	80047d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000254 	.word	0x20000254

080024d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return 1;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_kill>:

int _kill(int pid, int sig)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ea:	f005 fa59 	bl	80079a0 <__errno>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2216      	movs	r2, #22
 80024f2:	601a      	str	r2, [r3, #0]
  return -1;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_exit>:

void _exit (int status)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002508:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ffe7 	bl	80024e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002512:	bf00      	nop
 8002514:	e7fd      	b.n	8002512 <_exit+0x12>

08002516 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e00a      	b.n	800253e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002528:	f3af 8000 	nop.w
 800252c:	4601      	mov	r1, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	60ba      	str	r2, [r7, #8]
 8002534:	b2ca      	uxtb	r2, r1
 8002536:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	dbf0      	blt.n	8002528 <_read+0x12>
  }

  return len;
 8002546:	687b      	ldr	r3, [r7, #4]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e009      	b.n	8002576 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	60ba      	str	r2, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbf1      	blt.n	8002562 <_write+0x12>
  }
  return len;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_close>:

int _close(int file)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025b0:	605a      	str	r2, [r3, #4]
  return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_isatty>:

int _isatty(int file)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f8:	4a14      	ldr	r2, [pc, #80]	@ (800264c <_sbrk+0x5c>)
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <_sbrk+0x60>)
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <_sbrk+0x64>)
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <_sbrk+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002620:	f005 f9be 	bl	80079a0 <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	220c      	movs	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800262e:	e009      	b.n	8002644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002636:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <_sbrk+0x64>)
 8002640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20020000 	.word	0x20020000
 8002650:	00000400 	.word	0x00000400
 8002654:	200003ec 	.word	0x200003ec
 8002658:	20000540 	.word	0x20000540

0800265c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <SystemInit+0x20>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <SystemInit+0x20>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002684:	f7ff ffea 	bl	800265c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002688:	480c      	ldr	r0, [pc, #48]	@ (80026bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800268a:	490d      	ldr	r1, [pc, #52]	@ (80026c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800268c:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026a0:	4c0a      	ldr	r4, [pc, #40]	@ (80026cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026ae:	f005 f97d 	bl	80079ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b2:	f7fe fecb 	bl	800144c <main>
  bx  lr    
 80026b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80026c4:	0800bd38 	.word	0x0800bd38
  ldr r2, =_sbss
 80026c8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80026cc:	20000540 	.word	0x20000540

080026d0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <CAN1_RX0_IRQHandler>
 80026d2:	0000      	movs	r0, r0
 80026d4:	0000      	movs	r0, r0
	...

080026d8 <platform_init>:
#include "stewart.h"




void platform_init(stewart* stewart) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

    // base plate joints positions 
    stewart->b1[0]=R*cos(deg_to_rad(60-beta/2)),  stewart->b1[1]=R*sin(deg_to_rad(60-beta/2)),  stewart->b1[2]=h;
 80026e0:	ed9f 0acf 	vldr	s0, [pc, #828]	@ 8002a20 <platform_init+0x348>
 80026e4:	f000 f9ac 	bl	8002a40 <deg_to_rad>
 80026e8:	ee10 3a10 	vmov	r3, s0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd ff4b 	bl	8000588 <__aeabi_f2d>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	ec43 2b10 	vmov	d0, r2, r3
 80026fa:	f007 f949 	bl	8009990 <cos>
 80026fe:	ec51 0b10 	vmov	r0, r1, d0
 8002702:	a3c5      	add	r3, pc, #788	@ (adr r3, 8002a18 <platform_init+0x340>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd ff96 	bl	8000638 <__aeabi_dmul>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe fa88 	bl	8000c28 <__aeabi_d2f>
 8002718:	4602      	mov	r2, r0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	679a      	str	r2, [r3, #120]	@ 0x78
 800271e:	ed9f 0ac0 	vldr	s0, [pc, #768]	@ 8002a20 <platform_init+0x348>
 8002722:	f000 f98d 	bl	8002a40 <deg_to_rad>
 8002726:	ee10 3a10 	vmov	r3, s0
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff2c 	bl	8000588 <__aeabi_f2d>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	ec43 2b10 	vmov	d0, r2, r3
 8002738:	f007 f98a 	bl	8009a50 <sin>
 800273c:	ec51 0b10 	vmov	r0, r1, d0
 8002740:	a3b5      	add	r3, pc, #724	@ (adr r3, 8002a18 <platform_init+0x340>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f7fd ff77 	bl	8000638 <__aeabi_dmul>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe fa69 	bl	8000c28 <__aeabi_d2f>
 8002756:	4602      	mov	r2, r0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4ab1      	ldr	r2, [pc, #708]	@ (8002a24 <platform_init+0x34c>)
 8002760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    stewart->b2[0]=R*cos(deg_to_rad(60+beta/2)),  stewart->b2[1]=R*sin(deg_to_rad(60+beta/2)),  stewart->b2[2]=h;
 8002764:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8002a28 <platform_init+0x350>
 8002768:	f000 f96a 	bl	8002a40 <deg_to_rad>
 800276c:	ee10 3a10 	vmov	r3, s0
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd ff09 	bl	8000588 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ec43 2b10 	vmov	d0, r2, r3
 800277e:	f007 f907 	bl	8009990 <cos>
 8002782:	ec51 0b10 	vmov	r0, r1, d0
 8002786:	a3a4      	add	r3, pc, #656	@ (adr r3, 8002a18 <platform_init+0x340>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f7fd ff54 	bl	8000638 <__aeabi_dmul>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe fa46 	bl	8000c28 <__aeabi_d2f>
 800279c:	4602      	mov	r2, r0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80027a4:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8002a28 <platform_init+0x350>
 80027a8:	f000 f94a 	bl	8002a40 <deg_to_rad>
 80027ac:	ee10 3a10 	vmov	r3, s0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fee9 	bl	8000588 <__aeabi_f2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	ec43 2b10 	vmov	d0, r2, r3
 80027be:	f007 f947 	bl	8009a50 <sin>
 80027c2:	ec51 0b10 	vmov	r0, r1, d0
 80027c6:	a394      	add	r3, pc, #592	@ (adr r3, 8002a18 <platform_init+0x340>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd ff34 	bl	8000638 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe fa26 	bl	8000c28 <__aeabi_d2f>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002a24 <platform_init+0x34c>)
 80027e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    stewart->b3[0]=R*cos(deg_to_rad(180-beta/2)), stewart->b3[1]=R*sin(deg_to_rad(180-beta/2)), stewart->b3[2]=h;
 80027ec:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 8002a2c <platform_init+0x354>
 80027f0:	f000 f926 	bl	8002a40 <deg_to_rad>
 80027f4:	ee10 3a10 	vmov	r3, s0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fec5 	bl	8000588 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ec43 2b10 	vmov	d0, r2, r3
 8002806:	f007 f8c3 	bl	8009990 <cos>
 800280a:	ec51 0b10 	vmov	r0, r1, d0
 800280e:	a382      	add	r3, pc, #520	@ (adr r3, 8002a18 <platform_init+0x340>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fd ff10 	bl	8000638 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7fe fa02 	bl	8000c28 <__aeabi_d2f>
 8002824:	4602      	mov	r2, r0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800282c:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8002a2c <platform_init+0x354>
 8002830:	f000 f906 	bl	8002a40 <deg_to_rad>
 8002834:	ee10 3a10 	vmov	r3, s0
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fea5 	bl	8000588 <__aeabi_f2d>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	ec43 2b10 	vmov	d0, r2, r3
 8002846:	f007 f903 	bl	8009a50 <sin>
 800284a:	ec51 0b10 	vmov	r0, r1, d0
 800284e:	a372      	add	r3, pc, #456	@ (adr r3, 8002a18 <platform_init+0x340>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fd fef0 	bl	8000638 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f9e2 	bl	8000c28 <__aeabi_d2f>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a6d      	ldr	r2, [pc, #436]	@ (8002a24 <platform_init+0x34c>)
 8002870:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    stewart->b4[0]=R*cos(deg_to_rad(180+beta/2)), stewart->b4[1]=R*sin(deg_to_rad(180+beta/2)), stewart->b4[2]=h;
 8002874:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 8002a30 <platform_init+0x358>
 8002878:	f000 f8e2 	bl	8002a40 <deg_to_rad>
 800287c:	ee10 3a10 	vmov	r3, s0
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe81 	bl	8000588 <__aeabi_f2d>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	ec43 2b10 	vmov	d0, r2, r3
 800288e:	f007 f87f 	bl	8009990 <cos>
 8002892:	ec51 0b10 	vmov	r0, r1, d0
 8002896:	a360      	add	r3, pc, #384	@ (adr r3, 8002a18 <platform_init+0x340>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fecc 	bl	8000638 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7fe f9be 	bl	8000c28 <__aeabi_d2f>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80028b4:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8002a30 <platform_init+0x358>
 80028b8:	f000 f8c2 	bl	8002a40 <deg_to_rad>
 80028bc:	ee10 3a10 	vmov	r3, s0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe61 	bl	8000588 <__aeabi_f2d>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	ec43 2b10 	vmov	d0, r2, r3
 80028ce:	f007 f8bf 	bl	8009a50 <sin>
 80028d2:	ec51 0b10 	vmov	r0, r1, d0
 80028d6:	a350      	add	r3, pc, #320	@ (adr r3, 8002a18 <platform_init+0x340>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd feac 	bl	8000638 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f99e 	bl	8000c28 <__aeabi_d2f>
 80028ec:	4602      	mov	r2, r0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002a24 <platform_init+0x34c>)
 80028f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    stewart->b5[0]=R*cos(deg_to_rad(300-beta/2)), stewart->b5[1]=R*sin(deg_to_rad(300-beta/2)), stewart->b5[2]=h;
 80028fc:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8002a34 <platform_init+0x35c>
 8002900:	f000 f89e 	bl	8002a40 <deg_to_rad>
 8002904:	ee10 3a10 	vmov	r3, s0
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe3d 	bl	8000588 <__aeabi_f2d>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	ec43 2b10 	vmov	d0, r2, r3
 8002916:	f007 f83b 	bl	8009990 <cos>
 800291a:	ec51 0b10 	vmov	r0, r1, d0
 800291e:	a33e      	add	r3, pc, #248	@ (adr r3, 8002a18 <platform_init+0x340>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fd fe88 	bl	8000638 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f7fe f97a 	bl	8000c28 <__aeabi_d2f>
 8002934:	4602      	mov	r2, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800293c:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8002a34 <platform_init+0x35c>
 8002940:	f000 f87e 	bl	8002a40 <deg_to_rad>
 8002944:	ee10 3a10 	vmov	r3, s0
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fe1d 	bl	8000588 <__aeabi_f2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	ec43 2b10 	vmov	d0, r2, r3
 8002956:	f007 f87b 	bl	8009a50 <sin>
 800295a:	ec51 0b10 	vmov	r0, r1, d0
 800295e:	a32e      	add	r3, pc, #184	@ (adr r3, 8002a18 <platform_init+0x340>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fe68 	bl	8000638 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f95a 	bl	8000c28 <__aeabi_d2f>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a29      	ldr	r2, [pc, #164]	@ (8002a24 <platform_init+0x34c>)
 8002980:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    stewart->b6[0]=R*cos(deg_to_rad(300+beta/2)), stewart->b6[1]=R*sin(deg_to_rad(300+beta/2)), stewart->b6[2]=h;
 8002984:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002a38 <platform_init+0x360>
 8002988:	f000 f85a 	bl	8002a40 <deg_to_rad>
 800298c:	ee10 3a10 	vmov	r3, s0
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fdf9 	bl	8000588 <__aeabi_f2d>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	ec43 2b10 	vmov	d0, r2, r3
 800299e:	f006 fff7 	bl	8009990 <cos>
 80029a2:	ec51 0b10 	vmov	r0, r1, d0
 80029a6:	a31c      	add	r3, pc, #112	@ (adr r3, 8002a18 <platform_init+0x340>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fe44 	bl	8000638 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f936 	bl	8000c28 <__aeabi_d2f>
 80029bc:	4602      	mov	r2, r0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80029c4:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8002a38 <platform_init+0x360>
 80029c8:	f000 f83a 	bl	8002a40 <deg_to_rad>
 80029cc:	ee10 3a10 	vmov	r3, s0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fdd9 	bl	8000588 <__aeabi_f2d>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	ec43 2b10 	vmov	d0, r2, r3
 80029de:	f007 f837 	bl	8009a50 <sin>
 80029e2:	ec51 0b10 	vmov	r0, r1, d0
 80029e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8002a18 <platform_init+0x340>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fe24 	bl	8000638 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7fe f916 	bl	8000c28 <__aeabi_d2f>
 80029fc:	4602      	mov	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a07      	ldr	r2, [pc, #28]	@ (8002a24 <platform_init+0x34c>)
 8002a08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	f3af 8000 	nop.w
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	4072c000 	.word	0x4072c000
 8002a20:	425c0000 	.word	0x425c0000
 8002a24:	43c80000 	.word	0x43c80000
 8002a28:	42820000 	.word	0x42820000
 8002a2c:	432f0000 	.word	0x432f0000
 8002a30:	43390000 	.word	0x43390000
 8002a34:	43938000 	.word	0x43938000
 8002a38:	43988000 	.word	0x43988000
 8002a3c:	00000000 	.word	0x00000000

08002a40 <deg_to_rad>:


/*convert degrees to radians */
float deg_to_rad(float deg) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	ed87 0a01 	vstr	s0, [r7, #4]
    float rad = deg * PI / 180;
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fd fd9c 	bl	8000588 <__aeabi_f2d>
 8002a50:	a310      	add	r3, pc, #64	@ (adr r3, 8002a94 <deg_to_rad+0x54>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fdef 	bl	8000638 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <deg_to_rad+0x50>)
 8002a68:	f7fd ff10 	bl	800088c <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fe f8d8 	bl	8000c28 <__aeabi_d2f>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]
    return rad;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	ee07 3a90 	vmov	s15, r3
}
 8002a82:	eeb0 0a67 	vmov.f32	s0, s15
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	f3af 8000 	nop.w
 8002a90:	40668000 	.word	0x40668000
 8002a94:	54442d18 	.word	0x54442d18
 8002a98:	400921fb 	.word	0x400921fb

08002a9c <rot_x>:


void rot_x(float theta_x, float vector[3]) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b090      	sub	sp, #64	@ 0x40
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002aa6:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_x[3][3] = {
 8002aba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
        {1, 0, 0},
        {0, cos(deg_to_rad(theta_x)), -sin(deg_to_rad(theta_x))},
 8002ad2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ad6:	f7ff ffb3 	bl	8002a40 <deg_to_rad>
 8002ada:	ee10 3a10 	vmov	r3, s0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd52 	bl	8000588 <__aeabi_f2d>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	ec43 2b10 	vmov	d0, r2, r3
 8002aec:	f006 ff50 	bl	8009990 <cos>
 8002af0:	ec53 2b10 	vmov	r2, r3, d0
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fe f896 	bl	8000c28 <__aeabi_d2f>
 8002afc:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002afe:	61bb      	str	r3, [r7, #24]
        {0, cos(deg_to_rad(theta_x)), -sin(deg_to_rad(theta_x))},
 8002b00:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b04:	f7ff ff9c 	bl	8002a40 <deg_to_rad>
 8002b08:	ee10 3a10 	vmov	r3, s0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fd3b 	bl	8000588 <__aeabi_f2d>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	ec43 2b10 	vmov	d0, r2, r3
 8002b1a:	f006 ff99 	bl	8009a50 <sin>
 8002b1e:	ec53 2b10 	vmov	r2, r3, d0
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fe f87f 	bl	8000c28 <__aeabi_d2f>
 8002b2a:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eef1 7a67 	vneg.f32	s15, s15
 8002b34:	edc7 7a07 	vstr	s15, [r7, #28]
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	623b      	str	r3, [r7, #32]
        {0, sin(deg_to_rad(theta_x)), cos(deg_to_rad(theta_x))}
 8002b3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b42:	f7ff ff7d 	bl	8002a40 <deg_to_rad>
 8002b46:	ee10 3a10 	vmov	r3, s0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fd1c 	bl	8000588 <__aeabi_f2d>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	ec43 2b10 	vmov	d0, r2, r3
 8002b58:	f006 ff7a 	bl	8009a50 <sin>
 8002b5c:	ec53 2b10 	vmov	r2, r3, d0
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7fe f860 	bl	8000c28 <__aeabi_d2f>
 8002b68:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        {0, sin(deg_to_rad(theta_x)), cos(deg_to_rad(theta_x))}
 8002b6c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b70:	f7ff ff66 	bl	8002a40 <deg_to_rad>
 8002b74:	ee10 3a10 	vmov	r3, s0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fd05 	bl	8000588 <__aeabi_f2d>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	ec43 2b10 	vmov	d0, r2, r3
 8002b86:	f006 ff03 	bl	8009990 <cos>
 8002b8a:	ec53 2b10 	vmov	r2, r3, d0
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fe f849 	bl	8000c28 <__aeabi_d2f>
 8002b96:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3308      	adds	r3, #8
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bba:	e02e      	b.n	8002c1a <rot_x+0x17e>
        
        for (int column=0;column<3;column++) {
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bc0:	e025      	b.n	8002c0e <rot_x+0x172>
            vector[row] += rot_x[row][column] * vector_copy[column];  
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	ed93 7a00 	vldr	s14, [r3]
 8002bce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	3340      	adds	r3, #64	@ 0x40
 8002bde:	443b      	add	r3, r7
 8002be0:	3b38      	subs	r3, #56	@ 0x38
 8002be2:	edd3 6a00 	vldr	s13, [r3]
 8002be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	3340      	adds	r3, #64	@ 0x40
 8002bec:	443b      	add	r3, r7
 8002bee:	3b14      	subs	r3, #20
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c04:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	ddd6      	ble.n	8002bc2 <rot_x+0x126>
    for (int row=0;row<3;row++) {
 8002c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c16:	3301      	adds	r3, #1
 8002c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	ddcd      	ble.n	8002bbc <rot_x+0x120>
            
        }
    }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3740      	adds	r7, #64	@ 0x40
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <rot_y>:



void rot_y(float theta_y, float vector[3]) {
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b090      	sub	sp, #64	@ 0x40
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c34:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_y[3][3] = {
        {cos(deg_to_rad(theta_y)), 0, sin(deg_to_rad(theta_y))},
 8002c48:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c4c:	f7ff fef8 	bl	8002a40 <deg_to_rad>
 8002c50:	ee10 3a10 	vmov	r3, s0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd fc97 	bl	8000588 <__aeabi_f2d>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	ec43 2b10 	vmov	d0, r2, r3
 8002c62:	f006 fe95 	bl	8009990 <cos>
 8002c66:	ec53 2b10 	vmov	r2, r3, d0
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f7fd ffdb 	bl	8000c28 <__aeabi_d2f>
 8002c72:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
        {cos(deg_to_rad(theta_y)), 0, sin(deg_to_rad(theta_y))},
 8002c7c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c80:	f7ff fede 	bl	8002a40 <deg_to_rad>
 8002c84:	ee10 3a10 	vmov	r3, s0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc7d 	bl	8000588 <__aeabi_f2d>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	ec43 2b10 	vmov	d0, r2, r3
 8002c96:	f006 fedb 	bl	8009a50 <sin>
 8002c9a:	ec53 2b10 	vmov	r2, r3, d0
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f7fd ffc1 	bl	8000c28 <__aeabi_d2f>
 8002ca6:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
        {0, 1, 0},
        {-sin(deg_to_rad(theta_y)), 0, cos(deg_to_rad(theta_y))}
 8002cbc:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cc0:	f7ff febe 	bl	8002a40 <deg_to_rad>
 8002cc4:	ee10 3a10 	vmov	r3, s0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc5d 	bl	8000588 <__aeabi_f2d>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	ec43 2b10 	vmov	d0, r2, r3
 8002cd6:	f006 febb 	bl	8009a50 <sin>
 8002cda:	ec53 2b10 	vmov	r2, r3, d0
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd ffa1 	bl	8000c28 <__aeabi_d2f>
 8002ce6:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef1 7a67 	vneg.f32	s15, s15
 8002cf0:	edc7 7a08 	vstr	s15, [r7, #32]
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
        {-sin(deg_to_rad(theta_y)), 0, cos(deg_to_rad(theta_y))}
 8002cfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cfe:	f7ff fe9f 	bl	8002a40 <deg_to_rad>
 8002d02:	ee10 3a10 	vmov	r3, s0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc3e 	bl	8000588 <__aeabi_f2d>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	ec43 2b10 	vmov	d0, r2, r3
 8002d14:	f006 fe3c 	bl	8009990 <cos>
 8002d18:	ec53 2b10 	vmov	r2, r3, d0
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd ff82 	bl	8000c28 <__aeabi_d2f>
 8002d24:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3304      	adds	r3, #4
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002d44:	2300      	movs	r3, #0
 8002d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d48:	e02e      	b.n	8002da8 <rot_y+0x17e>
        
        for (int column=0;column<3;column++) {
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d4e:	e025      	b.n	8002d9c <rot_y+0x172>
            vector[row] += rot_y[row][column] * vector_copy[column];  
 8002d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	ed93 7a00 	vldr	s14, [r3]
 8002d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	3340      	adds	r3, #64	@ 0x40
 8002d6c:	443b      	add	r3, r7
 8002d6e:	3b38      	subs	r3, #56	@ 0x38
 8002d70:	edd3 6a00 	vldr	s13, [r3]
 8002d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	3340      	adds	r3, #64	@ 0x40
 8002d7a:	443b      	add	r3, r7
 8002d7c:	3b14      	subs	r3, #20
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d92:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	3301      	adds	r3, #1
 8002d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	ddd6      	ble.n	8002d50 <rot_y+0x126>
    for (int row=0;row<3;row++) {
 8002da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da4:	3301      	adds	r3, #1
 8002da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	ddcd      	ble.n	8002d4a <rot_y+0x120>
            
        }
    }
}
 8002dae:	bf00      	nop
 8002db0:	bf00      	nop
 8002db2:	3740      	adds	r7, #64	@ 0x40
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <rot_z>:


void rot_z(float theta_z, float vector[3]) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b090      	sub	sp, #64	@ 0x40
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002dc2:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_z[3][3] = {
        {cos(deg_to_rad(theta_z)), -sin(deg_to_rad(theta_z)), 0},
 8002dd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002dda:	f7ff fe31 	bl	8002a40 <deg_to_rad>
 8002dde:	ee10 3a10 	vmov	r3, s0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fbd0 	bl	8000588 <__aeabi_f2d>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	ec43 2b10 	vmov	d0, r2, r3
 8002df0:	f006 fdce 	bl	8009990 <cos>
 8002df4:	ec53 2b10 	vmov	r2, r3, d0
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd ff14 	bl	8000c28 <__aeabi_d2f>
 8002e00:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002e02:	60bb      	str	r3, [r7, #8]
        {cos(deg_to_rad(theta_z)), -sin(deg_to_rad(theta_z)), 0},
 8002e04:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e08:	f7ff fe1a 	bl	8002a40 <deg_to_rad>
 8002e0c:	ee10 3a10 	vmov	r3, s0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd fbb9 	bl	8000588 <__aeabi_f2d>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	ec43 2b10 	vmov	d0, r2, r3
 8002e1e:	f006 fe17 	bl	8009a50 <sin>
 8002e22:	ec53 2b10 	vmov	r2, r3, d0
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f7fd fefd 	bl	8000c28 <__aeabi_d2f>
 8002e2e:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eef1 7a67 	vneg.f32	s15, s15
 8002e38:	edc7 7a03 	vstr	s15, [r7, #12]
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
        {sin(deg_to_rad(theta_z)), cos(deg_to_rad(theta_z)), 0},
 8002e42:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e46:	f7ff fdfb 	bl	8002a40 <deg_to_rad>
 8002e4a:	ee10 3a10 	vmov	r3, s0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb9a 	bl	8000588 <__aeabi_f2d>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	ec43 2b10 	vmov	d0, r2, r3
 8002e5c:	f006 fdf8 	bl	8009a50 <sin>
 8002e60:	ec53 2b10 	vmov	r2, r3, d0
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd fede 	bl	8000c28 <__aeabi_d2f>
 8002e6c:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002e6e:	617b      	str	r3, [r7, #20]
        {sin(deg_to_rad(theta_z)), cos(deg_to_rad(theta_z)), 0},
 8002e70:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e74:	f7ff fde4 	bl	8002a40 <deg_to_rad>
 8002e78:	ee10 3a10 	vmov	r3, s0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb83 	bl	8000588 <__aeabi_f2d>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	ec43 2b10 	vmov	d0, r2, r3
 8002e8a:	f006 fd81 	bl	8009990 <cos>
 8002e8e:	ec53 2b10 	vmov	r2, r3, d0
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f7fd fec7 	bl	8000c28 <__aeabi_d2f>
 8002e9a:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	623b      	str	r3, [r7, #32]
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
        {0, 0, 1},
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ed6:	e02e      	b.n	8002f36 <rot_z+0x17e>
        
        for (int column=0;column<3;column++) {
 8002ed8:	2300      	movs	r3, #0
 8002eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002edc:	e025      	b.n	8002f2a <rot_z+0x172>
            vector[row] += rot_z[row][column] * vector_copy[column];  
 8002ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	ed93 7a00 	vldr	s14, [r3]
 8002eea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	3340      	adds	r3, #64	@ 0x40
 8002efa:	443b      	add	r3, r7
 8002efc:	3b38      	subs	r3, #56	@ 0x38
 8002efe:	edd3 6a00 	vldr	s13, [r3]
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	3340      	adds	r3, #64	@ 0x40
 8002f08:	443b      	add	r3, r7
 8002f0a:	3b14      	subs	r3, #20
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f20:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f26:	3301      	adds	r3, #1
 8002f28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	ddd6      	ble.n	8002ede <rot_z+0x126>
    for (int row=0;row<3;row++) {
 8002f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f32:	3301      	adds	r3, #1
 8002f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	ddcd      	ble.n	8002ed8 <rot_z+0x120>
            
        }
    }
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3740      	adds	r7, #64	@ 0x40
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <rotate_platform>:


void rotate_platform(stewart* stewart, float vector[3]) {
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]

    rot_z(stewart->tp_target_pos[5], vector);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	eeb0 0a67 	vmov.f32	s0, s15
 8002f5c:	f7ff ff2c 	bl	8002db8 <rot_z>
    rot_y(stewart->tp_target_pos[4], vector);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002f66:	6838      	ldr	r0, [r7, #0]
 8002f68:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6c:	f7ff fe5d 	bl	8002c2a <rot_y>
    rot_x(stewart->tp_target_pos[3], vector);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8002f76:	6838      	ldr	r0, [r7, #0]
 8002f78:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7c:	f7ff fd8e 	bl	8002a9c <rot_x>

    vector[0] = vector[0] + stewart->tp_target_pos[0];
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	ed93 7a00 	vldr	s14, [r3]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	edc3 7a00 	vstr	s15, [r3]
    vector[1] = vector[1] + stewart->tp_target_pos[1];
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	ed93 7a00 	vldr	s14, [r3]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fac:	edc3 7a00 	vstr	s15, [r3]
    vector[2] = vector[2] + stewart->tp_target_pos[2];
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	ed93 7a00 	vldr	s14, [r3]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc6:	edc3 7a00 	vstr	s15, [r3]

}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	0000      	movs	r0, r0
 8002fd4:	0000      	movs	r0, r0
	...

08002fd8 <run_platform>:





void run_platform(stewart* stewart)  {
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

    stewart->a1[0]=r*cos(deg_to_rad(0+beta/2)),   stewart->a1[1]=r*sin(deg_to_rad(0+beta/2)),    stewart->a1[2] = 0;
 8002fe0:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002fe4:	f7ff fd2c 	bl	8002a40 <deg_to_rad>
 8002fe8:	ee10 3a10 	vmov	r3, s0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd facb 	bl	8000588 <__aeabi_f2d>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	ec43 2b10 	vmov	d0, r2, r3
 8002ffa:	f006 fcc9 	bl	8009990 <cos>
 8002ffe:	ec51 0b10 	vmov	r0, r1, d0
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	4bd3      	ldr	r3, [pc, #844]	@ (8003354 <run_platform+0x37c>)
 8003008:	f7fd fb16 	bl	8000638 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	f7fd fe08 	bl	8000c28 <__aeabi_d2f>
 8003018:	4602      	mov	r2, r0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
 800301e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8003022:	f7ff fd0d 	bl	8002a40 <deg_to_rad>
 8003026:	ee10 3a10 	vmov	r3, s0
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd faac 	bl	8000588 <__aeabi_f2d>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	ec43 2b10 	vmov	d0, r2, r3
 8003038:	f006 fd0a 	bl	8009a50 <sin>
 800303c:	ec51 0b10 	vmov	r0, r1, d0
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	4bc3      	ldr	r3, [pc, #780]	@ (8003354 <run_platform+0x37c>)
 8003046:	f7fd faf7 	bl	8000638 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fde9 	bl	8000c28 <__aeabi_d2f>
 8003056:	4602      	mov	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	635a      	str	r2, [r3, #52]	@ 0x34
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38
    stewart->a2[0]=r*cos(deg_to_rad(120-beta/2)), stewart->a2[1]=r*sin(deg_to_rad(120-beta/2)),  stewart->a2[2] = 0;
 8003064:	ed9f 0abc 	vldr	s0, [pc, #752]	@ 8003358 <run_platform+0x380>
 8003068:	f7ff fcea 	bl	8002a40 <deg_to_rad>
 800306c:	ee10 3a10 	vmov	r3, s0
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fa89 	bl	8000588 <__aeabi_f2d>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	ec43 2b10 	vmov	d0, r2, r3
 800307e:	f006 fc87 	bl	8009990 <cos>
 8003082:	ec51 0b10 	vmov	r0, r1, d0
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	4bb2      	ldr	r3, [pc, #712]	@ (8003354 <run_platform+0x37c>)
 800308c:	f7fd fad4 	bl	8000638 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f7fd fdc6 	bl	8000c28 <__aeabi_d2f>
 800309c:	4602      	mov	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030a2:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8003358 <run_platform+0x380>
 80030a6:	f7ff fccb 	bl	8002a40 <deg_to_rad>
 80030aa:	ee10 3a10 	vmov	r3, s0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa6a 	bl	8000588 <__aeabi_f2d>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	ec43 2b10 	vmov	d0, r2, r3
 80030bc:	f006 fcc8 	bl	8009a50 <sin>
 80030c0:	ec51 0b10 	vmov	r0, r1, d0
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	4ba2      	ldr	r3, [pc, #648]	@ (8003354 <run_platform+0x37c>)
 80030ca:	f7fd fab5 	bl	8000638 <__aeabi_dmul>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7fd fda7 	bl	8000c28 <__aeabi_d2f>
 80030da:	4602      	mov	r2, r0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	645a      	str	r2, [r3, #68]	@ 0x44
    stewart->a3[0]=r*cos(deg_to_rad(120+beta/2)), stewart->a3[1]=r*sin(deg_to_rad(120+beta/2)),  stewart->a3[2] = 0;
 80030e8:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 800335c <run_platform+0x384>
 80030ec:	f7ff fca8 	bl	8002a40 <deg_to_rad>
 80030f0:	ee10 3a10 	vmov	r3, s0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fa47 	bl	8000588 <__aeabi_f2d>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	ec43 2b10 	vmov	d0, r2, r3
 8003102:	f006 fc45 	bl	8009990 <cos>
 8003106:	ec51 0b10 	vmov	r0, r1, d0
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	4b91      	ldr	r3, [pc, #580]	@ (8003354 <run_platform+0x37c>)
 8003110:	f7fd fa92 	bl	8000638 <__aeabi_dmul>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f7fd fd84 	bl	8000c28 <__aeabi_d2f>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	649a      	str	r2, [r3, #72]	@ 0x48
 8003126:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 800335c <run_platform+0x384>
 800312a:	f7ff fc89 	bl	8002a40 <deg_to_rad>
 800312e:	ee10 3a10 	vmov	r3, s0
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fa28 	bl	8000588 <__aeabi_f2d>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	ec43 2b10 	vmov	d0, r2, r3
 8003140:	f006 fc86 	bl	8009a50 <sin>
 8003144:	ec51 0b10 	vmov	r0, r1, d0
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	4b81      	ldr	r3, [pc, #516]	@ (8003354 <run_platform+0x37c>)
 800314e:	f7fd fa73 	bl	8000638 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fd65 	bl	8000c28 <__aeabi_d2f>
 800315e:	4602      	mov	r2, r0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	651a      	str	r2, [r3, #80]	@ 0x50
    stewart->a4[0]=r*cos(deg_to_rad(240-beta/2)), stewart->a4[1]=r*sin(deg_to_rad(240-beta/2)),  stewart->a4[2] = 0;
 800316c:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8003360 <run_platform+0x388>
 8003170:	f7ff fc66 	bl	8002a40 <deg_to_rad>
 8003174:	ee10 3a10 	vmov	r3, s0
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fa05 	bl	8000588 <__aeabi_f2d>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	ec43 2b10 	vmov	d0, r2, r3
 8003186:	f006 fc03 	bl	8009990 <cos>
 800318a:	ec51 0b10 	vmov	r0, r1, d0
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	4b70      	ldr	r3, [pc, #448]	@ (8003354 <run_platform+0x37c>)
 8003194:	f7fd fa50 	bl	8000638 <__aeabi_dmul>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4610      	mov	r0, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	f7fd fd42 	bl	8000c28 <__aeabi_d2f>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80031aa:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8003360 <run_platform+0x388>
 80031ae:	f7ff fc47 	bl	8002a40 <deg_to_rad>
 80031b2:	ee10 3a10 	vmov	r3, s0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f9e6 	bl	8000588 <__aeabi_f2d>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	ec43 2b10 	vmov	d0, r2, r3
 80031c4:	f006 fc44 	bl	8009a50 <sin>
 80031c8:	ec51 0b10 	vmov	r0, r1, d0
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	4b60      	ldr	r3, [pc, #384]	@ (8003354 <run_platform+0x37c>)
 80031d2:	f7fd fa31 	bl	8000638 <__aeabi_dmul>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	f7fd fd23 	bl	8000c28 <__aeabi_d2f>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    stewart->a5[0]=r*cos(deg_to_rad(240+beta/2)), stewart->a5[1]=r*sin(deg_to_rad(240+beta/2)),  stewart->a5[2] = 0;
 80031f0:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8003364 <run_platform+0x38c>
 80031f4:	f7ff fc24 	bl	8002a40 <deg_to_rad>
 80031f8:	ee10 3a10 	vmov	r3, s0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f9c3 	bl	8000588 <__aeabi_f2d>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	ec43 2b10 	vmov	d0, r2, r3
 800320a:	f006 fbc1 	bl	8009990 <cos>
 800320e:	ec51 0b10 	vmov	r0, r1, d0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	4b4f      	ldr	r3, [pc, #316]	@ (8003354 <run_platform+0x37c>)
 8003218:	f7fd fa0e 	bl	8000638 <__aeabi_dmul>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	f7fd fd00 	bl	8000c28 <__aeabi_d2f>
 8003228:	4602      	mov	r2, r0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	661a      	str	r2, [r3, #96]	@ 0x60
 800322e:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8003364 <run_platform+0x38c>
 8003232:	f7ff fc05 	bl	8002a40 <deg_to_rad>
 8003236:	ee10 3a10 	vmov	r3, s0
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f9a4 	bl	8000588 <__aeabi_f2d>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	ec43 2b10 	vmov	d0, r2, r3
 8003248:	f006 fc02 	bl	8009a50 <sin>
 800324c:	ec51 0b10 	vmov	r0, r1, d0
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	4b3f      	ldr	r3, [pc, #252]	@ (8003354 <run_platform+0x37c>)
 8003256:	f7fd f9ef 	bl	8000638 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f7fd fce1 	bl	8000c28 <__aeabi_d2f>
 8003266:	4602      	mov	r2, r0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	665a      	str	r2, [r3, #100]	@ 0x64
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	669a      	str	r2, [r3, #104]	@ 0x68
    stewart->a6[0]=r*cos(deg_to_rad(360-beta/2)), stewart->a6[1]=r*sin(deg_to_rad(360-beta/2)),  stewart->a6[2] = 0;
 8003274:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8003368 <run_platform+0x390>
 8003278:	f7ff fbe2 	bl	8002a40 <deg_to_rad>
 800327c:	ee10 3a10 	vmov	r3, s0
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd f981 	bl	8000588 <__aeabi_f2d>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	ec43 2b10 	vmov	d0, r2, r3
 800328e:	f006 fb7f 	bl	8009990 <cos>
 8003292:	ec51 0b10 	vmov	r0, r1, d0
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	4b2e      	ldr	r3, [pc, #184]	@ (8003354 <run_platform+0x37c>)
 800329c:	f7fd f9cc 	bl	8000638 <__aeabi_dmul>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	f7fd fcbe 	bl	8000c28 <__aeabi_d2f>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80032b2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8003368 <run_platform+0x390>
 80032b6:	f7ff fbc3 	bl	8002a40 <deg_to_rad>
 80032ba:	ee10 3a10 	vmov	r3, s0
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f962 	bl	8000588 <__aeabi_f2d>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	ec43 2b10 	vmov	d0, r2, r3
 80032cc:	f006 fbc0 	bl	8009a50 <sin>
 80032d0:	ec51 0b10 	vmov	r0, r1, d0
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <run_platform+0x37c>)
 80032da:	f7fd f9ad 	bl	8000638 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd fc9f 	bl	8000c28 <__aeabi_d2f>
 80032ea:	4602      	mov	r2, r0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	675a      	str	r2, [r3, #116]	@ 0x74


    rotate_platform(stewart, stewart->a1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3330      	adds	r3, #48	@ 0x30
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fe21 	bl	8002f46 <rotate_platform>
    rotate_platform(stewart, stewart->a2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	333c      	adds	r3, #60	@ 0x3c
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fe1b 	bl	8002f46 <rotate_platform>
    rotate_platform(stewart, stewart->a3);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3348      	adds	r3, #72	@ 0x48
 8003314:	4619      	mov	r1, r3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff fe15 	bl	8002f46 <rotate_platform>
    rotate_platform(stewart, stewart->a4);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3354      	adds	r3, #84	@ 0x54
 8003320:	4619      	mov	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fe0f 	bl	8002f46 <rotate_platform>
    rotate_platform(stewart, stewart->a5);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3360      	adds	r3, #96	@ 0x60
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fe09 	bl	8002f46 <rotate_platform>
    rotate_platform(stewart, stewart->a6);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	336c      	adds	r3, #108	@ 0x6c
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fe03 	bl	8002f46 <rotate_platform>


    // calculate the length of each arm 
    stewart->c_target[0]=sqrt(pow(stewart->a1[0]-stewart->b1[0],2)+pow(stewart->a1[1]-stewart->b1[1],2) + pow(stewart->a1[2]-stewart->b1[2],2));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800334c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003350:	e00c      	b.n	800336c <run_platform+0x394>
 8003352:	bf00      	nop
 8003354:	40590000 	.word	0x40590000
 8003358:	42e60000 	.word	0x42e60000
 800335c:	42fa0000 	.word	0x42fa0000
 8003360:	436b0000 	.word	0x436b0000
 8003364:	43750000 	.word	0x43750000
 8003368:	43b18000 	.word	0x43b18000
 800336c:	ee17 0a90 	vmov	r0, s15
 8003370:	f7fd f90a 	bl	8000588 <__aeabi_f2d>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	ed9f 1be9 	vldr	d1, [pc, #932]	@ 8003720 <run_platform+0x748>
 800337c:	ec43 2b10 	vmov	d0, r2, r3
 8003380:	f006 fa68 	bl	8009854 <pow>
 8003384:	ec55 4b10 	vmov	r4, r5, d0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8003394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003398:	ee17 0a90 	vmov	r0, s15
 800339c:	f7fd f8f4 	bl	8000588 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	ed9f 1bde 	vldr	d1, [pc, #888]	@ 8003720 <run_platform+0x748>
 80033a8:	ec43 2b10 	vmov	d0, r2, r3
 80033ac:	f006 fa52 	bl	8009854 <pow>
 80033b0:	ec53 2b10 	vmov	r2, r3, d0
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fc ff88 	bl	80002cc <__adddf3>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4614      	mov	r4, r2
 80033c2:	461d      	mov	r5, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80033d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d4:	ee17 0a90 	vmov	r0, s15
 80033d8:	f7fd f8d6 	bl	8000588 <__aeabi_f2d>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	ed9f 1bcf 	vldr	d1, [pc, #828]	@ 8003720 <run_platform+0x748>
 80033e4:	ec43 2b10 	vmov	d0, r2, r3
 80033e8:	f006 fa34 	bl	8009854 <pow>
 80033ec:	ec53 2b10 	vmov	r2, r3, d0
 80033f0:	4620      	mov	r0, r4
 80033f2:	4629      	mov	r1, r5
 80033f4:	f7fc ff6a 	bl	80002cc <__adddf3>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	ec43 2b17 	vmov	d7, r2, r3
 8003400:	eeb0 0a47 	vmov.f32	s0, s14
 8003404:	eef0 0a67 	vmov.f32	s1, s15
 8003408:	f006 fa94 	bl	8009934 <sqrt>
 800340c:	ec53 2b10 	vmov	r2, r3, d0
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	f7fd fc08 	bl	8000c28 <__aeabi_d2f>
 8003418:	4602      	mov	r2, r0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
    stewart->c_target[1]=sqrt(pow(stewart->a2[0]-stewart->b2[0],2)+pow(stewart->a2[1]-stewart->b2[1],2) + pow(stewart->a2[2]-stewart->b2[2],2));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800342a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342e:	ee17 0a90 	vmov	r0, s15
 8003432:	f7fd f8a9 	bl	8000588 <__aeabi_f2d>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	ed9f 1bb9 	vldr	d1, [pc, #740]	@ 8003720 <run_platform+0x748>
 800343e:	ec43 2b10 	vmov	d0, r2, r3
 8003442:	f006 fa07 	bl	8009854 <pow>
 8003446:	ec55 4b10 	vmov	r4, r5, d0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8003456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800345a:	ee17 0a90 	vmov	r0, s15
 800345e:	f7fd f893 	bl	8000588 <__aeabi_f2d>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	ed9f 1bae 	vldr	d1, [pc, #696]	@ 8003720 <run_platform+0x748>
 800346a:	ec43 2b10 	vmov	d0, r2, r3
 800346e:	f006 f9f1 	bl	8009854 <pow>
 8003472:	ec53 2b10 	vmov	r2, r3, d0
 8003476:	4620      	mov	r0, r4
 8003478:	4629      	mov	r1, r5
 800347a:	f7fc ff27 	bl	80002cc <__adddf3>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4614      	mov	r4, r2
 8003484:	461d      	mov	r5, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8003492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003496:	ee17 0a90 	vmov	r0, s15
 800349a:	f7fd f875 	bl	8000588 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8003720 <run_platform+0x748>
 80034a6:	ec43 2b10 	vmov	d0, r2, r3
 80034aa:	f006 f9d3 	bl	8009854 <pow>
 80034ae:	ec53 2b10 	vmov	r2, r3, d0
 80034b2:	4620      	mov	r0, r4
 80034b4:	4629      	mov	r1, r5
 80034b6:	f7fc ff09 	bl	80002cc <__adddf3>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ec43 2b17 	vmov	d7, r2, r3
 80034c2:	eeb0 0a47 	vmov.f32	s0, s14
 80034c6:	eef0 0a67 	vmov.f32	s1, s15
 80034ca:	f006 fa33 	bl	8009934 <sqrt>
 80034ce:	ec53 2b10 	vmov	r2, r3, d0
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	f7fd fba7 	bl	8000c28 <__aeabi_d2f>
 80034da:	4602      	mov	r2, r0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	605a      	str	r2, [r3, #4]
    stewart->c_target[2]=sqrt(pow(stewart->a3[0]-stewart->b3[0],2)+pow(stewart->a3[1]-stewart->b3[1],2) + pow(stewart->a3[2]-stewart->b3[2],2));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80034ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f0:	ee17 0a90 	vmov	r0, s15
 80034f4:	f7fd f848 	bl	8000588 <__aeabi_f2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 8003720 <run_platform+0x748>
 8003500:	ec43 2b10 	vmov	d0, r2, r3
 8003504:	f006 f9a6 	bl	8009854 <pow>
 8003508:	ec55 4b10 	vmov	r4, r5, d0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351c:	ee17 0a90 	vmov	r0, s15
 8003520:	f7fd f832 	bl	8000588 <__aeabi_f2d>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8003720 <run_platform+0x748>
 800352c:	ec43 2b10 	vmov	d0, r2, r3
 8003530:	f006 f990 	bl	8009854 <pow>
 8003534:	ec53 2b10 	vmov	r2, r3, d0
 8003538:	4620      	mov	r0, r4
 800353a:	4629      	mov	r1, r5
 800353c:	f7fc fec6 	bl	80002cc <__adddf3>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4614      	mov	r4, r2
 8003546:	461d      	mov	r5, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003558:	ee17 0a90 	vmov	r0, s15
 800355c:	f7fd f814 	bl	8000588 <__aeabi_f2d>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 8003720 <run_platform+0x748>
 8003568:	ec43 2b10 	vmov	d0, r2, r3
 800356c:	f006 f972 	bl	8009854 <pow>
 8003570:	ec53 2b10 	vmov	r2, r3, d0
 8003574:	4620      	mov	r0, r4
 8003576:	4629      	mov	r1, r5
 8003578:	f7fc fea8 	bl	80002cc <__adddf3>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	ec43 2b17 	vmov	d7, r2, r3
 8003584:	eeb0 0a47 	vmov.f32	s0, s14
 8003588:	eef0 0a67 	vmov.f32	s1, s15
 800358c:	f006 f9d2 	bl	8009934 <sqrt>
 8003590:	ec53 2b10 	vmov	r2, r3, d0
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	f7fd fb46 	bl	8000c28 <__aeabi_d2f>
 800359c:	4602      	mov	r2, r0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	609a      	str	r2, [r3, #8]
    stewart->c_target[3]=sqrt(pow(stewart->a4[0]-stewart->b4[0],2)+pow(stewart->a4[1]-stewart->b4[1],2) + pow(stewart->a4[2]-stewart->b4[2],2));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 80035ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b2:	ee17 0a90 	vmov	r0, s15
 80035b6:	f7fc ffe7 	bl	8000588 <__aeabi_f2d>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8003720 <run_platform+0x748>
 80035c2:	ec43 2b10 	vmov	d0, r2, r3
 80035c6:	f006 f945 	bl	8009854 <pow>
 80035ca:	ec55 4b10 	vmov	r4, r5, d0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 80035da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035de:	ee17 0a90 	vmov	r0, s15
 80035e2:	f7fc ffd1 	bl	8000588 <__aeabi_f2d>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8003720 <run_platform+0x748>
 80035ee:	ec43 2b10 	vmov	d0, r2, r3
 80035f2:	f006 f92f 	bl	8009854 <pow>
 80035f6:	ec53 2b10 	vmov	r2, r3, d0
 80035fa:	4620      	mov	r0, r4
 80035fc:	4629      	mov	r1, r5
 80035fe:	f7fc fe65 	bl	80002cc <__adddf3>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4614      	mov	r4, r2
 8003608:	461d      	mov	r5, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8003616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800361a:	ee17 0a90 	vmov	r0, s15
 800361e:	f7fc ffb3 	bl	8000588 <__aeabi_f2d>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8003720 <run_platform+0x748>
 800362a:	ec43 2b10 	vmov	d0, r2, r3
 800362e:	f006 f911 	bl	8009854 <pow>
 8003632:	ec53 2b10 	vmov	r2, r3, d0
 8003636:	4620      	mov	r0, r4
 8003638:	4629      	mov	r1, r5
 800363a:	f7fc fe47 	bl	80002cc <__adddf3>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	ec43 2b17 	vmov	d7, r2, r3
 8003646:	eeb0 0a47 	vmov.f32	s0, s14
 800364a:	eef0 0a67 	vmov.f32	s1, s15
 800364e:	f006 f971 	bl	8009934 <sqrt>
 8003652:	ec53 2b10 	vmov	r2, r3, d0
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f7fd fae5 	bl	8000c28 <__aeabi_d2f>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]
    stewart->c_target[4]=sqrt(pow(stewart->a5[0]-stewart->b5[0],2)+pow(stewart->a5[1]-stewart->b5[1],2) + pow(stewart->a5[2]-stewart->b5[2],2));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 8003670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003674:	ee17 0a90 	vmov	r0, s15
 8003678:	f7fc ff86 	bl	8000588 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003720 <run_platform+0x748>
 8003684:	ec43 2b10 	vmov	d0, r2, r3
 8003688:	f006 f8e4 	bl	8009854 <pow>
 800368c:	ec55 4b10 	vmov	r4, r5, d0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 800369c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a0:	ee17 0a90 	vmov	r0, s15
 80036a4:	f7fc ff70 	bl	8000588 <__aeabi_f2d>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8003720 <run_platform+0x748>
 80036b0:	ec43 2b10 	vmov	d0, r2, r3
 80036b4:	f006 f8ce 	bl	8009854 <pow>
 80036b8:	ec53 2b10 	vmov	r2, r3, d0
 80036bc:	4620      	mov	r0, r4
 80036be:	4629      	mov	r1, r5
 80036c0:	f7fc fe04 	bl	80002cc <__adddf3>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4614      	mov	r4, r2
 80036ca:	461d      	mov	r5, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80036d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036dc:	ee17 0a90 	vmov	r0, s15
 80036e0:	f7fc ff52 	bl	8000588 <__aeabi_f2d>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8003720 <run_platform+0x748>
 80036ec:	ec43 2b10 	vmov	d0, r2, r3
 80036f0:	f006 f8b0 	bl	8009854 <pow>
 80036f4:	ec53 2b10 	vmov	r2, r3, d0
 80036f8:	4620      	mov	r0, r4
 80036fa:	4629      	mov	r1, r5
 80036fc:	f7fc fde6 	bl	80002cc <__adddf3>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	ec43 2b17 	vmov	d7, r2, r3
 8003708:	eeb0 0a47 	vmov.f32	s0, s14
 800370c:	eef0 0a67 	vmov.f32	s1, s15
 8003710:	f006 f910 	bl	8009934 <sqrt>
 8003714:	ec53 2b10 	vmov	r2, r3, d0
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	e008      	b.n	8003730 <run_platform+0x758>
 800371e:	bf00      	nop
 8003720:	00000000 	.word	0x00000000
 8003724:	40000000 	.word	0x40000000
 8003728:	00000000 	.word	0x00000000
 800372c:	40000000 	.word	0x40000000
 8003730:	f7fd fa7a 	bl	8000c28 <__aeabi_d2f>
 8003734:	4602      	mov	r2, r0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]
    stewart->c_target[5]=sqrt(pow(stewart->a6[0]-stewart->b6[0],2)+pow(stewart->a6[1]-stewart->b6[1],2) + pow(stewart->a6[2]-stewart->b6[2],2));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8003746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374a:	ee17 0a90 	vmov	r0, s15
 800374e:	f7fc ff1b 	bl	8000588 <__aeabi_f2d>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	ed1f 1b0c 	vldr	d1, [pc, #-48]	@ 8003728 <run_platform+0x750>
 800375a:	ec43 2b10 	vmov	d0, r2, r3
 800375e:	f006 f879 	bl	8009854 <pow>
 8003762:	ec55 4b10 	vmov	r4, r5, d0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 8003772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003776:	ee17 0a90 	vmov	r0, s15
 800377a:	f7fc ff05 	bl	8000588 <__aeabi_f2d>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	ed1f 1b17 	vldr	d1, [pc, #-92]	@ 8003728 <run_platform+0x750>
 8003786:	ec43 2b10 	vmov	d0, r2, r3
 800378a:	f006 f863 	bl	8009854 <pow>
 800378e:	ec53 2b10 	vmov	r2, r3, d0
 8003792:	4620      	mov	r0, r4
 8003794:	4629      	mov	r1, r5
 8003796:	f7fc fd99 	bl	80002cc <__adddf3>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4614      	mov	r4, r2
 80037a0:	461d      	mov	r5, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80037ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037b2:	ee17 0a90 	vmov	r0, s15
 80037b6:	f7fc fee7 	bl	8000588 <__aeabi_f2d>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	ed1f 1b26 	vldr	d1, [pc, #-152]	@ 8003728 <run_platform+0x750>
 80037c2:	ec43 2b10 	vmov	d0, r2, r3
 80037c6:	f006 f845 	bl	8009854 <pow>
 80037ca:	ec53 2b10 	vmov	r2, r3, d0
 80037ce:	4620      	mov	r0, r4
 80037d0:	4629      	mov	r1, r5
 80037d2:	f7fc fd7b 	bl	80002cc <__adddf3>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	ec43 2b17 	vmov	d7, r2, r3
 80037de:	eeb0 0a47 	vmov.f32	s0, s14
 80037e2:	eef0 0a67 	vmov.f32	s1, s15
 80037e6:	f006 f8a5 	bl	8009934 <sqrt>
 80037ea:	ec53 2b10 	vmov	r2, r3, d0
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f7fd fa19 	bl	8000c28 <__aeabi_d2f>
 80037f6:	4602      	mov	r2, r0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	615a      	str	r2, [r3, #20]

}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bdb0      	pop	{r4, r5, r7, pc}

08003804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003808:	4b0e      	ldr	r3, [pc, #56]	@ (8003844 <HAL_Init+0x40>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <HAL_Init+0x40>)
 800380e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_Init+0x40>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <HAL_Init+0x40>)
 800381a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800381e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_Init+0x40>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a07      	ldr	r2, [pc, #28]	@ (8003844 <HAL_Init+0x40>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800382c:	2003      	movs	r0, #3
 800382e:	f000 fe8b 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003832:	200f      	movs	r0, #15
 8003834:	f000 f808 	bl	8003848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003838:	f7fe fc28 	bl	800208c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023c00 	.word	0x40023c00

08003848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003850:	4b12      	ldr	r3, [pc, #72]	@ (800389c <HAL_InitTick+0x54>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <HAL_InitTick+0x58>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800385e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fea3 	bl	80045b2 <HAL_SYSTICK_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e00e      	b.n	8003894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d80a      	bhi.n	8003892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800387c:	2200      	movs	r2, #0
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003884:	f000 fe6b 	bl	800455e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003888:	4a06      	ldr	r2, [pc, #24]	@ (80038a4 <HAL_InitTick+0x5c>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000008 	.word	0x20000008
 80038a0:	20000010 	.word	0x20000010
 80038a4:	2000000c 	.word	0x2000000c

080038a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <HAL_IncTick+0x20>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_IncTick+0x24>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <HAL_IncTick+0x24>)
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000010 	.word	0x20000010
 80038cc:	200003f0 	.word	0x200003f0

080038d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return uwTick;
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <HAL_GetTick+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	200003f0 	.word	0x200003f0

080038e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f0:	f7ff ffee 	bl	80038d0 <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003900:	d005      	beq.n	800390e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003902:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <HAL_Delay+0x44>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800390e:	bf00      	nop
 8003910:	f7ff ffde 	bl	80038d0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	429a      	cmp	r2, r3
 800391e:	d8f7      	bhi.n	8003910 <HAL_Delay+0x28>
  {
  }
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000010 	.word	0x20000010

08003930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e033      	b.n	80039ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe fbc4 	bl	80020dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	d118      	bne.n	80039a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003976:	f023 0302 	bic.w	r3, r3, #2
 800397a:	f043 0202 	orr.w	r2, r3, #2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fb88 	bl	8004098 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40
 800399e:	e001      	b.n	80039a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d049      	beq.n	8003a80 <HAL_ADC_IRQHandler+0xca>
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d046      	beq.n	8003a80 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d105      	bne.n	8003a0a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d12b      	bne.n	8003a70 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d127      	bne.n	8003a70 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d119      	bne.n	8003a70 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0220 	bic.w	r2, r2, #32
 8003a4a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f043 0201 	orr.w	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fe f837 	bl	8001ae4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0212 	mvn.w	r2, #18
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d057      	beq.n	8003b46 <HAL_ADC_IRQHandler+0x190>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d054      	beq.n	8003b46 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d105      	bne.n	8003ab4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d139      	bne.n	8003b36 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d12b      	bne.n	8003b36 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d124      	bne.n	8003b36 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11d      	bne.n	8003b36 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d119      	bne.n	8003b36 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b10:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d105      	bne.n	8003b36 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fc2c 	bl	8004394 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 020c 	mvn.w	r2, #12
 8003b44:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d017      	beq.n	8003b8c <HAL_ADC_IRQHandler+0x1d6>
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d014      	beq.n	8003b8c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10d      	bne.n	8003b8c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f945 	bl	8003e0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f06f 0201 	mvn.w	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b9a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d015      	beq.n	8003bce <HAL_ADC_IRQHandler+0x218>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d012      	beq.n	8003bce <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bac:	f043 0202 	orr.w	r2, r3, #2
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0220 	mvn.w	r2, #32
 8003bbc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f92e 	bl	8003e20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0220 	mvn.w	r2, #32
 8003bcc:	601a      	str	r2, [r3, #0]
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_Start_DMA+0x1e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0e9      	b.n	8003dca <HAL_ADC_Start_DMA+0x1f2>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d018      	beq.n	8003c3e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c1c:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd4 <HAL_ADC_Start_DMA+0x1fc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6d      	ldr	r2, [pc, #436]	@ (8003dd8 <HAL_ADC_Start_DMA+0x200>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9a      	lsrs	r2, r3, #18
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003c30:	e002      	b.n	8003c38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f9      	bne.n	8003c32 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c4c:	d107      	bne.n	8003c5e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c5c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	f040 80a1 	bne.w	8003db0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cac:	d106      	bne.n	8003cbc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	f023 0206 	bic.w	r2, r3, #6
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cba:	e002      	b.n	8003cc2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cca:	4b44      	ldr	r3, [pc, #272]	@ (8003ddc <HAL_ADC_Start_DMA+0x204>)
 8003ccc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	4a43      	ldr	r2, [pc, #268]	@ (8003de0 <HAL_ADC_Start_DMA+0x208>)
 8003cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cda:	4a42      	ldr	r2, [pc, #264]	@ (8003de4 <HAL_ADC_Start_DMA+0x20c>)
 8003cdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	4a41      	ldr	r2, [pc, #260]	@ (8003de8 <HAL_ADC_Start_DMA+0x210>)
 8003ce4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003cee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003cfe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d0e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	334c      	adds	r3, #76	@ 0x4c
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f000 fd02 	bl	8004728 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d12a      	bne.n	8003d86 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2d      	ldr	r2, [pc, #180]	@ (8003dec <HAL_ADC_Start_DMA+0x214>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d015      	beq.n	8003d66 <HAL_ADC_Start_DMA+0x18e>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003df0 <HAL_ADC_Start_DMA+0x218>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d105      	bne.n	8003d50 <HAL_ADC_Start_DMA+0x178>
 8003d44:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_ADC_Start_DMA+0x204>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a27      	ldr	r2, [pc, #156]	@ (8003df4 <HAL_ADC_Start_DMA+0x21c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d136      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x1f0>
 8003d5a:	4b20      	ldr	r3, [pc, #128]	@ (8003ddc <HAL_ADC_Start_DMA+0x204>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d130      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d129      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	e020      	b.n	8003dc8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a18      	ldr	r2, [pc, #96]	@ (8003dec <HAL_ADC_Start_DMA+0x214>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x1f0>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d114      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	e00b      	b.n	8003dc8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f043 0210 	orr.w	r2, r3, #16
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000008 	.word	0x20000008
 8003dd8:	431bde83 	.word	0x431bde83
 8003ddc:	40012300 	.word	0x40012300
 8003de0:	08004291 	.word	0x08004291
 8003de4:	0800434b 	.word	0x0800434b
 8003de8:	08004367 	.word	0x08004367
 8003dec:	40012000 	.word	0x40012000
 8003df0:	40012100 	.word	0x40012100
 8003df4:	40012200 	.word	0x40012200

08003df8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x1c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e113      	b.n	8004078 <HAL_ADC_ConfigChannel+0x244>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	d925      	bls.n	8003eac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	2207      	movs	r2, #7
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	400a      	ands	r2, r1
 8003e84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68d9      	ldr	r1, [r3, #12]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	4603      	mov	r3, r0
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4403      	add	r3, r0
 8003e9e:	3b1e      	subs	r3, #30
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	e022      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6919      	ldr	r1, [r3, #16]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4613      	mov	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	400a      	ands	r2, r1
 8003ece:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6919      	ldr	r1, [r3, #16]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4403      	add	r3, r0
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d824      	bhi.n	8003f44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b05      	subs	r3, #5
 8003f0c:	221f      	movs	r2, #31
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	400a      	ands	r2, r1
 8003f1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	4618      	mov	r0, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b05      	subs	r3, #5
 8003f36:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f42:	e04c      	b.n	8003fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d824      	bhi.n	8003f96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3b23      	subs	r3, #35	@ 0x23
 8003f5e:	221f      	movs	r2, #31
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43da      	mvns	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	3b23      	subs	r3, #35	@ 0x23
 8003f88:	fa00 f203 	lsl.w	r2, r0, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f94:	e023      	b.n	8003fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3b41      	subs	r3, #65	@ 0x41
 8003fa8:	221f      	movs	r2, #31
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	3b41      	subs	r3, #65	@ 0x41
 8003fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fde:	4b29      	ldr	r3, [pc, #164]	@ (8004084 <HAL_ADC_ConfigChannel+0x250>)
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a28      	ldr	r2, [pc, #160]	@ (8004088 <HAL_ADC_ConfigChannel+0x254>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10f      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1d8>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b12      	cmp	r3, #18
 8003ff2:	d10b      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1d      	ldr	r2, [pc, #116]	@ (8004088 <HAL_ADC_ConfigChannel+0x254>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12b      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1c      	ldr	r2, [pc, #112]	@ (800408c <HAL_ADC_ConfigChannel+0x258>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <HAL_ADC_ConfigChannel+0x1f4>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b11      	cmp	r3, #17
 8004026:	d122      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a11      	ldr	r2, [pc, #68]	@ (800408c <HAL_ADC_ConfigChannel+0x258>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d111      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800404a:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <HAL_ADC_ConfigChannel+0x25c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <HAL_ADC_ConfigChannel+0x260>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	0c9a      	lsrs	r2, r3, #18
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004060:	e002      	b.n	8004068 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3b01      	subs	r3, #1
 8004066:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f9      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012300 	.word	0x40012300
 8004088:	40012000 	.word	0x40012000
 800408c:	10000012 	.word	0x10000012
 8004090:	20000008 	.word	0x20000008
 8004094:	431bde83 	.word	0x431bde83

08004098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040a0:	4b79      	ldr	r3, [pc, #484]	@ (8004288 <ADC_Init+0x1f0>)
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	021a      	lsls	r2, r3, #8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80040f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6899      	ldr	r1, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	4a58      	ldr	r2, [pc, #352]	@ (800428c <ADC_Init+0x1f4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800413e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	e00f      	b.n	8004196 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004194:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0202 	bic.w	r2, r2, #2
 80041a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	7e1b      	ldrb	r3, [r3, #24]
 80041b0:	005a      	lsls	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01b      	beq.n	80041fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80041e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	3b01      	subs	r3, #1
 80041f0:	035a      	lsls	r2, r3, #13
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	e007      	b.n	800420c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800421a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	3b01      	subs	r3, #1
 8004228:	051a      	lsls	r2, r3, #20
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6899      	ldr	r1, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800424e:	025a      	lsls	r2, r3, #9
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6899      	ldr	r1, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	029a      	lsls	r2, r3, #10
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40012300 	.word	0x40012300
 800428c:	0f000001 	.word	0x0f000001

08004290 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d13c      	bne.n	8004324 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d12b      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d127      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d119      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0220 	bic.w	r2, r2, #32
 80042f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0201 	orr.w	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7fd fbe1 	bl	8001ae4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004322:	e00e      	b.n	8004342 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fd75 	bl	8003e20 <HAL_ADC_ErrorCallback>
}
 8004336:	e004      	b.n	8004342 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fd4d 	bl	8003df8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004372:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2240      	movs	r2, #64	@ 0x40
 8004378:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	f043 0204 	orr.w	r2, r3, #4
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fd4a 	bl	8003e20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043da:	4a04      	ldr	r2, [pc, #16]	@ (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	60d3      	str	r3, [r2, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__NVIC_GetPriorityGrouping+0x18>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0307 	and.w	r3, r3, #7
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	2b00      	cmp	r3, #0
 800441c:	db0b      	blt.n	8004436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	4907      	ldr	r1, [pc, #28]	@ (8004444 <__NVIC_EnableIRQ+0x38>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2001      	movs	r0, #1
 800442e:	fa00 f202 	lsl.w	r2, r0, r2
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000e100 	.word	0xe000e100

08004448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db0a      	blt.n	8004472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	490c      	ldr	r1, [pc, #48]	@ (8004494 <__NVIC_SetPriority+0x4c>)
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	440b      	add	r3, r1
 800446c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004470:	e00a      	b.n	8004488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4908      	ldr	r1, [pc, #32]	@ (8004498 <__NVIC_SetPriority+0x50>)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3b04      	subs	r3, #4
 8004480:	0112      	lsls	r2, r2, #4
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	440b      	add	r3, r1
 8004486:	761a      	strb	r2, [r3, #24]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf28      	it	cs
 80044ba:	2304      	movcs	r3, #4
 80044bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d902      	bls.n	80044cc <NVIC_EncodePriority+0x30>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3b03      	subs	r3, #3
 80044ca:	e000      	b.n	80044ce <NVIC_EncodePriority+0x32>
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	401a      	ands	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	43d9      	mvns	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	4313      	orrs	r3, r2
         );
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	@ 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004514:	d301      	bcc.n	800451a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004516:	2301      	movs	r3, #1
 8004518:	e00f      	b.n	800453a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451a:	4a0a      	ldr	r2, [pc, #40]	@ (8004544 <SysTick_Config+0x40>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004522:	210f      	movs	r1, #15
 8004524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004528:	f7ff ff8e 	bl	8004448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <SysTick_Config+0x40>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004532:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <SysTick_Config+0x40>)
 8004534:	2207      	movs	r2, #7
 8004536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000e010 	.word	0xe000e010

08004548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff29 	bl	80043a8 <__NVIC_SetPriorityGrouping>
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004570:	f7ff ff3e 	bl	80043f0 <__NVIC_GetPriorityGrouping>
 8004574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	f7ff ff8e 	bl	800449c <NVIC_EncodePriority>
 8004580:	4602      	mov	r2, r0
 8004582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff5d 	bl	8004448 <__NVIC_SetPriority>
}
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	4603      	mov	r3, r0
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ff31 	bl	800440c <__NVIC_EnableIRQ>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ffa2 	bl	8004504 <SysTick_Config>
 80045c0:	4603      	mov	r3, r0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7ff f97a 	bl	80038d0 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e099      	b.n	800471c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004608:	e00f      	b.n	800462a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800460a:	f7ff f961 	bl	80038d0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b05      	cmp	r3, #5
 8004616:	d908      	bls.n	800462a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2203      	movs	r2, #3
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e078      	b.n	800471c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e8      	bne.n	800460a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4b38      	ldr	r3, [pc, #224]	@ (8004724 <HAL_DMA_Init+0x158>)
 8004644:	4013      	ands	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	2b04      	cmp	r3, #4
 8004682:	d107      	bne.n	8004694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	4313      	orrs	r3, r2
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0307 	bic.w	r3, r3, #7
 80046aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d117      	bne.n	80046ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fa6f 	bl	8004bb4 <DMA_CheckFifoParam>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2240      	movs	r2, #64	@ 0x40
 80046e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80046ea:	2301      	movs	r3, #1
 80046ec:	e016      	b.n	800471c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa26 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 80046fc:	4603      	mov	r3, r0
 80046fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004704:	223f      	movs	r2, #63	@ 0x3f
 8004706:	409a      	lsls	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	f010803f 	.word	0xf010803f

08004728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_DMA_Start_IT+0x26>
 800474a:	2302      	movs	r3, #2
 800474c:	e040      	b.n	80047d0 <HAL_DMA_Start_IT+0xa8>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d12f      	bne.n	80047c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f9b8 	bl	8004aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004780:	223f      	movs	r2, #63	@ 0x3f
 8004782:	409a      	lsls	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0216 	orr.w	r2, r2, #22
 8004796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e005      	b.n	80047ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
 80047cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004a20 <HAL_DMA_IRQHandler+0x248>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a8e      	ldr	r2, [pc, #568]	@ (8004a24 <HAL_DMA_IRQHandler+0x24c>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0a9b      	lsrs	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004802:	2208      	movs	r2, #8
 8004804:	409a      	lsls	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01a      	beq.n	8004844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d013      	beq.n	8004844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0204 	bic.w	r2, r2, #4
 800482a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	2208      	movs	r2, #8
 8004832:	409a      	lsls	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f043 0201 	orr.w	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004848:	2201      	movs	r2, #1
 800484a:	409a      	lsls	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d012      	beq.n	800487a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004866:	2201      	movs	r2, #1
 8004868:	409a      	lsls	r2, r3
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004872:	f043 0202 	orr.w	r2, r3, #2
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487e:	2204      	movs	r2, #4
 8004880:	409a      	lsls	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d012      	beq.n	80048b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00b      	beq.n	80048b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	2204      	movs	r2, #4
 800489e:	409a      	lsls	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a8:	f043 0204 	orr.w	r2, r3, #4
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b4:	2210      	movs	r2, #16
 80048b6:	409a      	lsls	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d043      	beq.n	8004948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d03c      	beq.n	8004948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d2:	2210      	movs	r2, #16
 80048d4:	409a      	lsls	r2, r3
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d018      	beq.n	800491a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d108      	bne.n	8004908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d024      	beq.n	8004948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
 8004906:	e01f      	b.n	8004948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01b      	beq.n	8004948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
 8004918:	e016      	b.n	8004948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0208 	bic.w	r2, r2, #8
 8004936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494c:	2220      	movs	r2, #32
 800494e:	409a      	lsls	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 808f 	beq.w	8004a78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8087 	beq.w	8004a78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496e:	2220      	movs	r2, #32
 8004970:	409a      	lsls	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b05      	cmp	r3, #5
 8004980:	d136      	bne.n	80049f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0216 	bic.w	r2, r2, #22
 8004990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <HAL_DMA_IRQHandler+0x1da>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0208 	bic.w	r2, r2, #8
 80049c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c6:	223f      	movs	r2, #63	@ 0x3f
 80049c8:	409a      	lsls	r2, r3
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d07e      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	4798      	blx	r3
        }
        return;
 80049ee:	e079      	b.n	8004ae4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01d      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10d      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d031      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	4798      	blx	r3
 8004a1c:	e02c      	b.n	8004a78 <HAL_DMA_IRQHandler+0x2a0>
 8004a1e:	bf00      	nop
 8004a20:	20000008 	.word	0x20000008
 8004a24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d023      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
 8004a38:	e01e      	b.n	8004a78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10f      	bne.n	8004a68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0210 	bic.w	r2, r2, #16
 8004a56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d032      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d022      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2205      	movs	r2, #5
 8004a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d307      	bcc.n	8004ac0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f2      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x2cc>
 8004abe:	e000      	b.n	8004ac2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ac0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
 8004ae2:	e000      	b.n	8004ae6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ae4:	bf00      	nop
    }
  }
}
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b40      	cmp	r3, #64	@ 0x40
 8004b18:	d108      	bne.n	8004b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b2a:	e007      	b.n	8004b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	60da      	str	r2, [r3, #12]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	3b10      	subs	r3, #16
 8004b58:	4a14      	ldr	r2, [pc, #80]	@ (8004bac <DMA_CalcBaseAndBitshift+0x64>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b62:	4a13      	ldr	r2, [pc, #76]	@ (8004bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d909      	bls.n	8004b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b88:	e007      	b.n	8004b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	aaaaaaab 	.word	0xaaaaaaab
 8004bb0:	0800b7a8 	.word	0x0800b7a8

08004bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11f      	bne.n	8004c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d856      	bhi.n	8004c82 <DMA_CheckFifoParam+0xce>
 8004bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <DMA_CheckFifoParam+0x28>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bff 	.word	0x08004bff
 8004be4:	08004bed 	.word	0x08004bed
 8004be8:	08004c83 	.word	0x08004c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d046      	beq.n	8004c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfc:	e043      	b.n	8004c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c06:	d140      	bne.n	8004c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0c:	e03d      	b.n	8004c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c16:	d121      	bne.n	8004c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d837      	bhi.n	8004c8e <DMA_CheckFifoParam+0xda>
 8004c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <DMA_CheckFifoParam+0x70>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c35 	.word	0x08004c35
 8004c28:	08004c3b 	.word	0x08004c3b
 8004c2c:	08004c35 	.word	0x08004c35
 8004c30:	08004c4d 	.word	0x08004c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
      break;
 8004c38:	e030      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d025      	beq.n	8004c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4a:	e022      	b.n	8004c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c54:	d11f      	bne.n	8004c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c5a:	e01c      	b.n	8004c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d903      	bls.n	8004c6a <DMA_CheckFifoParam+0xb6>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d003      	beq.n	8004c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c68:	e018      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c6e:	e015      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00e      	beq.n	8004c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e00b      	b.n	8004c9a <DMA_CheckFifoParam+0xe6>
      break;
 8004c82:	bf00      	nop
 8004c84:	e00a      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
      break;
 8004c86:	bf00      	nop
 8004c88:	e008      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e006      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
      break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
      break;
 8004c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop

08004cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b089      	sub	sp, #36	@ 0x24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	e165      	b.n	8004f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cc8:	2201      	movs	r2, #1
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	f040 8154 	bne.w	8004f8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d005      	beq.n	8004cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d130      	bne.n	8004d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	2203      	movs	r2, #3
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d34:	2201      	movs	r2, #1
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 0201 	and.w	r2, r3, #1
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d017      	beq.n	8004d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	2203      	movs	r2, #3
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d123      	bne.n	8004df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	08da      	lsrs	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3208      	adds	r2, #8
 8004db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	220f      	movs	r2, #15
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	08da      	lsrs	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3208      	adds	r2, #8
 8004dea:	69b9      	ldr	r1, [r7, #24]
 8004dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 0203 	and.w	r2, r3, #3
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80ae 	beq.w	8004f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	4b5d      	ldr	r3, [pc, #372]	@ (8004fac <HAL_GPIO_Init+0x300>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004fac <HAL_GPIO_Init+0x300>)
 8004e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e42:	4b5a      	ldr	r3, [pc, #360]	@ (8004fac <HAL_GPIO_Init+0x300>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e4e:	4a58      	ldr	r2, [pc, #352]	@ (8004fb0 <HAL_GPIO_Init+0x304>)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	220f      	movs	r2, #15
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a4f      	ldr	r2, [pc, #316]	@ (8004fb4 <HAL_GPIO_Init+0x308>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d025      	beq.n	8004ec6 <HAL_GPIO_Init+0x21a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004fb8 <HAL_GPIO_Init+0x30c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01f      	beq.n	8004ec2 <HAL_GPIO_Init+0x216>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a4d      	ldr	r2, [pc, #308]	@ (8004fbc <HAL_GPIO_Init+0x310>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d019      	beq.n	8004ebe <HAL_GPIO_Init+0x212>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8004fc0 <HAL_GPIO_Init+0x314>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <HAL_GPIO_Init+0x20e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a4b      	ldr	r2, [pc, #300]	@ (8004fc4 <HAL_GPIO_Init+0x318>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00d      	beq.n	8004eb6 <HAL_GPIO_Init+0x20a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc8 <HAL_GPIO_Init+0x31c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <HAL_GPIO_Init+0x206>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a49      	ldr	r2, [pc, #292]	@ (8004fcc <HAL_GPIO_Init+0x320>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d101      	bne.n	8004eae <HAL_GPIO_Init+0x202>
 8004eaa:	2306      	movs	r3, #6
 8004eac:	e00c      	b.n	8004ec8 <HAL_GPIO_Init+0x21c>
 8004eae:	2307      	movs	r3, #7
 8004eb0:	e00a      	b.n	8004ec8 <HAL_GPIO_Init+0x21c>
 8004eb2:	2305      	movs	r3, #5
 8004eb4:	e008      	b.n	8004ec8 <HAL_GPIO_Init+0x21c>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e006      	b.n	8004ec8 <HAL_GPIO_Init+0x21c>
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e004      	b.n	8004ec8 <HAL_GPIO_Init+0x21c>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e002      	b.n	8004ec8 <HAL_GPIO_Init+0x21c>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_GPIO_Init+0x21c>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	f002 0203 	and.w	r2, r2, #3
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	4093      	lsls	r3, r2
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed8:	4935      	ldr	r1, [pc, #212]	@ (8004fb0 <HAL_GPIO_Init+0x304>)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	089b      	lsrs	r3, r3, #2
 8004ede:	3302      	adds	r3, #2
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f0a:	4a31      	ldr	r2, [pc, #196]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f10:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f34:	4a26      	ldr	r2, [pc, #152]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f3a:	4b25      	ldr	r3, [pc, #148]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f64:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f88:	4a11      	ldr	r2, [pc, #68]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	f67f ae96 	bls.w	8004cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	3724      	adds	r7, #36	@ 0x24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	40020400 	.word	0x40020400
 8004fbc:	40020800 	.word	0x40020800
 8004fc0:	40020c00 	.word	0x40020c00
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40021400 	.word	0x40021400
 8004fcc:	40021800 	.word	0x40021800
 8004fd0:	40013c00 	.word	0x40013c00

08004fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	807b      	strh	r3, [r7, #2]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fe4:	787b      	ldrb	r3, [r7, #1]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ff0:	e003      	b.n	8004ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ff2:	887b      	ldrh	r3, [r7, #2]
 8004ff4:	041a      	lsls	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	619a      	str	r2, [r3, #24]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005018:	887a      	ldrh	r2, [r7, #2]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4013      	ands	r3, r2
 800501e:	041a      	lsls	r2, r3, #16
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	43d9      	mvns	r1, r3
 8005024:	887b      	ldrh	r3, [r7, #2]
 8005026:	400b      	ands	r3, r1
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	619a      	str	r2, [r3, #24]
}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e12b      	b.n	80052a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fd f8d6 	bl	8002214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2224      	movs	r2, #36	@ 0x24
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800508e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800509e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050a0:	f000 fa52 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 80050a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4a81      	ldr	r2, [pc, #516]	@ (80052b0 <HAL_I2C_Init+0x274>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d807      	bhi.n	80050c0 <HAL_I2C_Init+0x84>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a80      	ldr	r2, [pc, #512]	@ (80052b4 <HAL_I2C_Init+0x278>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	bf94      	ite	ls
 80050b8:	2301      	movls	r3, #1
 80050ba:	2300      	movhi	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e006      	b.n	80050ce <HAL_I2C_Init+0x92>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a7d      	ldr	r2, [pc, #500]	@ (80052b8 <HAL_I2C_Init+0x27c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bf94      	ite	ls
 80050c8:	2301      	movls	r3, #1
 80050ca:	2300      	movhi	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0e7      	b.n	80052a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a78      	ldr	r2, [pc, #480]	@ (80052bc <HAL_I2C_Init+0x280>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	0c9b      	lsrs	r3, r3, #18
 80050e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4a6a      	ldr	r2, [pc, #424]	@ (80052b0 <HAL_I2C_Init+0x274>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d802      	bhi.n	8005110 <HAL_I2C_Init+0xd4>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3301      	adds	r3, #1
 800510e:	e009      	b.n	8005124 <HAL_I2C_Init+0xe8>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	4a69      	ldr	r2, [pc, #420]	@ (80052c0 <HAL_I2C_Init+0x284>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	099b      	lsrs	r3, r3, #6
 8005122:	3301      	adds	r3, #1
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	430b      	orrs	r3, r1
 800512a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005136:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	495c      	ldr	r1, [pc, #368]	@ (80052b0 <HAL_I2C_Init+0x274>)
 8005140:	428b      	cmp	r3, r1
 8005142:	d819      	bhi.n	8005178 <HAL_I2C_Init+0x13c>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1e59      	subs	r1, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005158:	400b      	ands	r3, r1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_I2C_Init+0x138>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1e59      	subs	r1, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	fbb1 f3f3 	udiv	r3, r1, r3
 800516c:	3301      	adds	r3, #1
 800516e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005172:	e051      	b.n	8005218 <HAL_I2C_Init+0x1dc>
 8005174:	2304      	movs	r3, #4
 8005176:	e04f      	b.n	8005218 <HAL_I2C_Init+0x1dc>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d111      	bne.n	80051a4 <HAL_I2C_Init+0x168>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1e58      	subs	r0, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	440b      	add	r3, r1
 800518e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005192:	3301      	adds	r3, #1
 8005194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2301      	moveq	r3, #1
 800519e:	2300      	movne	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e012      	b.n	80051ca <HAL_I2C_Init+0x18e>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1e58      	subs	r0, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	0099      	lsls	r1, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ba:	3301      	adds	r3, #1
 80051bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_I2C_Init+0x196>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e022      	b.n	8005218 <HAL_I2C_Init+0x1dc>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10e      	bne.n	80051f8 <HAL_I2C_Init+0x1bc>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1e58      	subs	r0, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6859      	ldr	r1, [r3, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	440b      	add	r3, r1
 80051e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ec:	3301      	adds	r3, #1
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f6:	e00f      	b.n	8005218 <HAL_I2C_Init+0x1dc>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1e58      	subs	r0, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	0099      	lsls	r1, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	fbb0 f3f3 	udiv	r3, r0, r3
 800520e:	3301      	adds	r3, #1
 8005210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005214:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	6809      	ldr	r1, [r1, #0]
 800521c:	4313      	orrs	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005246:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6911      	ldr	r1, [r2, #16]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68d2      	ldr	r2, [r2, #12]
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	430b      	orrs	r3, r1
 800525a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	000186a0 	.word	0x000186a0
 80052b4:	001e847f 	.word	0x001e847f
 80052b8:	003d08ff 	.word	0x003d08ff
 80052bc:	431bde83 	.word	0x431bde83
 80052c0:	10624dd3 	.word	0x10624dd3

080052c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	4b20      	ldr	r3, [pc, #128]	@ (8005354 <HAL_PWREx_EnableOverDrive+0x90>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005354 <HAL_PWREx_EnableOverDrive+0x90>)
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80052de:	4b1d      	ldr	r3, [pc, #116]	@ (8005354 <HAL_PWREx_EnableOverDrive+0x90>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80052ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005358 <HAL_PWREx_EnableOverDrive+0x94>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052f0:	f7fe faee 	bl	80038d0 <HAL_GetTick>
 80052f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052f6:	e009      	b.n	800530c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052f8:	f7fe faea 	bl	80038d0 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005306:	d901      	bls.n	800530c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e01f      	b.n	800534c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800530c:	4b13      	ldr	r3, [pc, #76]	@ (800535c <HAL_PWREx_EnableOverDrive+0x98>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005318:	d1ee      	bne.n	80052f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800531a:	4b11      	ldr	r3, [pc, #68]	@ (8005360 <HAL_PWREx_EnableOverDrive+0x9c>)
 800531c:	2201      	movs	r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005320:	f7fe fad6 	bl	80038d0 <HAL_GetTick>
 8005324:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005326:	e009      	b.n	800533c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005328:	f7fe fad2 	bl	80038d0 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005336:	d901      	bls.n	800533c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e007      	b.n	800534c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800533c:	4b07      	ldr	r3, [pc, #28]	@ (800535c <HAL_PWREx_EnableOverDrive+0x98>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005348:	d1ee      	bne.n	8005328 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40023800 	.word	0x40023800
 8005358:	420e0040 	.word	0x420e0040
 800535c:	40007000 	.word	0x40007000
 8005360:	420e0044 	.word	0x420e0044

08005364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0cc      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005378:	4b68      	ldr	r3, [pc, #416]	@ (800551c <HAL_RCC_ClockConfig+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d90c      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b65      	ldr	r3, [pc, #404]	@ (800551c <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b63      	ldr	r3, [pc, #396]	@ (800551c <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0b8      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d020      	beq.n	80053ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b8:	4b59      	ldr	r3, [pc, #356]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4a58      	ldr	r2, [pc, #352]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d0:	4b53      	ldr	r3, [pc, #332]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a52      	ldr	r2, [pc, #328]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053dc:	4b50      	ldr	r3, [pc, #320]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	494d      	ldr	r1, [pc, #308]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d044      	beq.n	8005484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	4b47      	ldr	r3, [pc, #284]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d119      	bne.n	8005442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e07f      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d003      	beq.n	8005422 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800541e:	2b03      	cmp	r3, #3
 8005420:	d107      	bne.n	8005432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005422:	4b3f      	ldr	r3, [pc, #252]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e06f      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005432:	4b3b      	ldr	r3, [pc, #236]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e067      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005442:	4b37      	ldr	r3, [pc, #220]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f023 0203 	bic.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4934      	ldr	r1, [pc, #208]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005454:	f7fe fa3c 	bl	80038d0 <HAL_GetTick>
 8005458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	e00a      	b.n	8005472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545c:	f7fe fa38 	bl	80038d0 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e04f      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	4b2b      	ldr	r3, [pc, #172]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 020c 	and.w	r2, r3, #12
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	429a      	cmp	r2, r3
 8005482:	d1eb      	bne.n	800545c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005484:	4b25      	ldr	r3, [pc, #148]	@ (800551c <HAL_RCC_ClockConfig+0x1b8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d20c      	bcs.n	80054ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b22      	ldr	r3, [pc, #136]	@ (800551c <HAL_RCC_ClockConfig+0x1b8>)
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b20      	ldr	r3, [pc, #128]	@ (800551c <HAL_RCC_ClockConfig+0x1b8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e032      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b8:	4b19      	ldr	r3, [pc, #100]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4916      	ldr	r1, [pc, #88]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054d6:	4b12      	ldr	r3, [pc, #72]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	490e      	ldr	r1, [pc, #56]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ea:	f000 f855 	bl	8005598 <HAL_RCC_GetSysClockFreq>
 80054ee:	4602      	mov	r2, r0
 80054f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	490a      	ldr	r1, [pc, #40]	@ (8005524 <HAL_RCC_ClockConfig+0x1c0>)
 80054fc:	5ccb      	ldrb	r3, [r1, r3]
 80054fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005502:	4a09      	ldr	r2, [pc, #36]	@ (8005528 <HAL_RCC_ClockConfig+0x1c4>)
 8005504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <HAL_RCC_ClockConfig+0x1c8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe f99c 	bl	8003848 <HAL_InitTick>

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023c00 	.word	0x40023c00
 8005520:	40023800 	.word	0x40023800
 8005524:	0800b790 	.word	0x0800b790
 8005528:	20000008 	.word	0x20000008
 800552c:	2000000c 	.word	0x2000000c

08005530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005534:	4b03      	ldr	r3, [pc, #12]	@ (8005544 <HAL_RCC_GetHCLKFreq+0x14>)
 8005536:	681b      	ldr	r3, [r3, #0]
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000008 	.word	0x20000008

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800554c:	f7ff fff0 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005550:	4602      	mov	r2, r0
 8005552:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	0a9b      	lsrs	r3, r3, #10
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4903      	ldr	r1, [pc, #12]	@ (800556c <HAL_RCC_GetPCLK1Freq+0x24>)
 800555e:	5ccb      	ldrb	r3, [r1, r3]
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40023800 	.word	0x40023800
 800556c:	0800b7a0 	.word	0x0800b7a0

08005570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005574:	f7ff ffdc 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005578:	4602      	mov	r2, r0
 800557a:	4b05      	ldr	r3, [pc, #20]	@ (8005590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	0b5b      	lsrs	r3, r3, #13
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4903      	ldr	r1, [pc, #12]	@ (8005594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40023800 	.word	0x40023800
 8005594:	0800b7a0 	.word	0x0800b7a0

08005598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800559c:	b0a6      	sub	sp, #152	@ 0x98
 800559e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055be:	4bc8      	ldr	r3, [pc, #800]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 030c 	and.w	r3, r3, #12
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	f200 817e 	bhi.w	80058c8 <HAL_RCC_GetSysClockFreq+0x330>
 80055cc:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005609 	.word	0x08005609
 80055d8:	080058c9 	.word	0x080058c9
 80055dc:	080058c9 	.word	0x080058c9
 80055e0:	080058c9 	.word	0x080058c9
 80055e4:	08005611 	.word	0x08005611
 80055e8:	080058c9 	.word	0x080058c9
 80055ec:	080058c9 	.word	0x080058c9
 80055f0:	080058c9 	.word	0x080058c9
 80055f4:	08005619 	.word	0x08005619
 80055f8:	080058c9 	.word	0x080058c9
 80055fc:	080058c9 	.word	0x080058c9
 8005600:	080058c9 	.word	0x080058c9
 8005604:	08005783 	.word	0x08005783
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005608:	4bb6      	ldr	r3, [pc, #728]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800560a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800560e:	e15f      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005610:	4bb5      	ldr	r3, [pc, #724]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005616:	e15b      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005618:	4bb1      	ldr	r3, [pc, #708]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005624:	4bae      	ldr	r3, [pc, #696]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d031      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005630:	4bab      	ldr	r3, [pc, #684]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	2200      	movs	r2, #0
 8005638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800563a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800563c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	663b      	str	r3, [r7, #96]	@ 0x60
 8005644:	2300      	movs	r3, #0
 8005646:	667b      	str	r3, [r7, #100]	@ 0x64
 8005648:	4ba7      	ldr	r3, [pc, #668]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x350>)
 800564a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800564e:	462a      	mov	r2, r5
 8005650:	fb03 f202 	mul.w	r2, r3, r2
 8005654:	2300      	movs	r3, #0
 8005656:	4621      	mov	r1, r4
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	4413      	add	r3, r2
 800565e:	4aa2      	ldr	r2, [pc, #648]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005660:	4621      	mov	r1, r4
 8005662:	fba1 1202 	umull	r1, r2, r1, r2
 8005666:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005668:	460a      	mov	r2, r1
 800566a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800566c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800566e:	4413      	add	r3, r2
 8005670:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005676:	2200      	movs	r2, #0
 8005678:	65bb      	str	r3, [r7, #88]	@ 0x58
 800567a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800567c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005680:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005684:	f7fb fb20 	bl	8000cc8 <__aeabi_uldivmod>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4613      	mov	r3, r2
 800568e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005692:	e064      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005694:	4b92      	ldr	r3, [pc, #584]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	099b      	lsrs	r3, r3, #6
 800569a:	2200      	movs	r2, #0
 800569c:	653b      	str	r3, [r7, #80]	@ 0x50
 800569e:	657a      	str	r2, [r7, #84]	@ 0x54
 80056a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056a8:	2300      	movs	r3, #0
 80056aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80056b0:	4622      	mov	r2, r4
 80056b2:	462b      	mov	r3, r5
 80056b4:	f04f 0000 	mov.w	r0, #0
 80056b8:	f04f 0100 	mov.w	r1, #0
 80056bc:	0159      	lsls	r1, r3, #5
 80056be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c2:	0150      	lsls	r0, r2, #5
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4621      	mov	r1, r4
 80056ca:	1a51      	subs	r1, r2, r1
 80056cc:	6139      	str	r1, [r7, #16]
 80056ce:	4629      	mov	r1, r5
 80056d0:	eb63 0301 	sbc.w	r3, r3, r1
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e2:	4659      	mov	r1, fp
 80056e4:	018b      	lsls	r3, r1, #6
 80056e6:	4651      	mov	r1, sl
 80056e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056ec:	4651      	mov	r1, sl
 80056ee:	018a      	lsls	r2, r1, #6
 80056f0:	4651      	mov	r1, sl
 80056f2:	ebb2 0801 	subs.w	r8, r2, r1
 80056f6:	4659      	mov	r1, fp
 80056f8:	eb63 0901 	sbc.w	r9, r3, r1
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800570c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005710:	4690      	mov	r8, r2
 8005712:	4699      	mov	r9, r3
 8005714:	4623      	mov	r3, r4
 8005716:	eb18 0303 	adds.w	r3, r8, r3
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	462b      	mov	r3, r5
 800571e:	eb49 0303 	adc.w	r3, r9, r3
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005730:	4629      	mov	r1, r5
 8005732:	028b      	lsls	r3, r1, #10
 8005734:	4621      	mov	r1, r4
 8005736:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800573a:	4621      	mov	r1, r4
 800573c:	028a      	lsls	r2, r1, #10
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005746:	2200      	movs	r2, #0
 8005748:	643b      	str	r3, [r7, #64]	@ 0x40
 800574a:	647a      	str	r2, [r7, #68]	@ 0x44
 800574c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005750:	f7fb faba 	bl	8000cc8 <__aeabi_uldivmod>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4613      	mov	r3, r2
 800575a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800575e:	4b60      	ldr	r3, [pc, #384]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	0c1b      	lsrs	r3, r3, #16
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	3301      	adds	r3, #1
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005770:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005780:	e0a6      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005782:	4b57      	ldr	r3, [pc, #348]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800578a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800578e:	4b54      	ldr	r3, [pc, #336]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d02a      	beq.n	80057f0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579a:	4b51      	ldr	r3, [pc, #324]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	099b      	lsrs	r3, r3, #6
 80057a0:	2200      	movs	r2, #0
 80057a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057ac:	2100      	movs	r1, #0
 80057ae:	4b4e      	ldr	r3, [pc, #312]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80057b0:	fb03 f201 	mul.w	r2, r3, r1
 80057b4:	2300      	movs	r3, #0
 80057b6:	fb00 f303 	mul.w	r3, r0, r3
 80057ba:	4413      	add	r3, r2
 80057bc:	4a4a      	ldr	r2, [pc, #296]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80057be:	fba0 1202 	umull	r1, r2, r0, r2
 80057c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80057c4:	460a      	mov	r2, r1
 80057c6:	673a      	str	r2, [r7, #112]	@ 0x70
 80057c8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80057ca:	4413      	add	r3, r2
 80057cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80057ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057d2:	2200      	movs	r2, #0
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80057d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80057dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80057e0:	f7fb fa72 	bl	8000cc8 <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4613      	mov	r3, r2
 80057ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057ee:	e05b      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f0:	4b3b      	ldr	r3, [pc, #236]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	099b      	lsrs	r3, r3, #6
 80057f6:	2200      	movs	r2, #0
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	2300      	movs	r3, #0
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24
 8005808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	f04f 0000 	mov.w	r0, #0
 8005814:	f04f 0100 	mov.w	r1, #0
 8005818:	0159      	lsls	r1, r3, #5
 800581a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800581e:	0150      	lsls	r0, r2, #5
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4641      	mov	r1, r8
 8005826:	ebb2 0a01 	subs.w	sl, r2, r1
 800582a:	4649      	mov	r1, r9
 800582c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800583c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005844:	ebb2 040a 	subs.w	r4, r2, sl
 8005848:	eb63 050b 	sbc.w	r5, r3, fp
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	00eb      	lsls	r3, r5, #3
 8005856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800585a:	00e2      	lsls	r2, r4, #3
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	4643      	mov	r3, r8
 8005862:	18e3      	adds	r3, r4, r3
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	464b      	mov	r3, r9
 8005868:	eb45 0303 	adc.w	r3, r5, r3
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800587a:	4629      	mov	r1, r5
 800587c:	028b      	lsls	r3, r1, #10
 800587e:	4621      	mov	r1, r4
 8005880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005884:	4621      	mov	r1, r4
 8005886:	028a      	lsls	r2, r1, #10
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005890:	2200      	movs	r2, #0
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	61fa      	str	r2, [r7, #28]
 8005896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800589a:	f7fb fa15 	bl	8000cc8 <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4613      	mov	r3, r2
 80058a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80058a8:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	0f1b      	lsrs	r3, r3, #28
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80058b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80058c6:	e003      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058c8:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80058ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80058ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3798      	adds	r7, #152	@ 0x98
 80058d8:	46bd      	mov	sp, r7
 80058da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058de:	bf00      	nop
 80058e0:	40023800 	.word	0x40023800
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	017d7840 	.word	0x017d7840

080058ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e28d      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8083 	beq.w	8005a12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800590c:	4b94      	ldr	r3, [pc, #592]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 030c 	and.w	r3, r3, #12
 8005914:	2b04      	cmp	r3, #4
 8005916:	d019      	beq.n	800594c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005918:	4b91      	ldr	r3, [pc, #580]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005920:	2b08      	cmp	r3, #8
 8005922:	d106      	bne.n	8005932 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005924:	4b8e      	ldr	r3, [pc, #568]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800592c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005930:	d00c      	beq.n	800594c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005932:	4b8b      	ldr	r3, [pc, #556]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800593a:	2b0c      	cmp	r3, #12
 800593c:	d112      	bne.n	8005964 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b88      	ldr	r3, [pc, #544]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800594a:	d10b      	bne.n	8005964 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	4b84      	ldr	r3, [pc, #528]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d05b      	beq.n	8005a10 <HAL_RCC_OscConfig+0x124>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d157      	bne.n	8005a10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e25a      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596c:	d106      	bne.n	800597c <HAL_RCC_OscConfig+0x90>
 800596e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a7b      	ldr	r2, [pc, #492]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e01d      	b.n	80059b8 <HAL_RCC_OscConfig+0xcc>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0xb4>
 8005986:	4b76      	ldr	r3, [pc, #472]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a75      	ldr	r2, [pc, #468]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 800598c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4b73      	ldr	r3, [pc, #460]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a72      	ldr	r2, [pc, #456]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e00b      	b.n	80059b8 <HAL_RCC_OscConfig+0xcc>
 80059a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 80059b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fd ff86 	bl	80038d0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fd ff82 	bl	80038d0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	@ 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e21f      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	4b61      	ldr	r3, [pc, #388]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0xdc>
 80059e6:	e014      	b.n	8005a12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fd ff72 	bl	80038d0 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fd ff6e 	bl	80038d0 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	@ 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e20b      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	4b57      	ldr	r3, [pc, #348]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x104>
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d06f      	beq.n	8005afe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a1e:	4b50      	ldr	r3, [pc, #320]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a2a:	4b4d      	ldr	r3, [pc, #308]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d105      	bne.n	8005a42 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a36:	4b4a      	ldr	r3, [pc, #296]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a42:	4b47      	ldr	r3, [pc, #284]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d11c      	bne.n	8005a88 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a4e:	4b44      	ldr	r3, [pc, #272]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d116      	bne.n	8005a88 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5a:	4b41      	ldr	r3, [pc, #260]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_RCC_OscConfig+0x186>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e1d3      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a72:	4b3b      	ldr	r3, [pc, #236]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4937      	ldr	r1, [pc, #220]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a86:	e03a      	b.n	8005afe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a90:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <HAL_RCC_OscConfig+0x278>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fd ff1b 	bl	80038d0 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9e:	f7fd ff17 	bl	80038d0 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e1b4      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abc:	4b28      	ldr	r3, [pc, #160]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4925      	ldr	r1, [pc, #148]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]
 8005ad0:	e015      	b.n	8005afe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad2:	4b24      	ldr	r3, [pc, #144]	@ (8005b64 <HAL_RCC_OscConfig+0x278>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad8:	f7fd fefa 	bl	80038d0 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae0:	f7fd fef6 	bl	80038d0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e193      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d036      	beq.n	8005b78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b12:	4b15      	ldr	r3, [pc, #84]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b18:	f7fd feda 	bl	80038d0 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b20:	f7fd fed6 	bl	80038d0 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e173      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b32:	4b0b      	ldr	r3, [pc, #44]	@ (8005b60 <HAL_RCC_OscConfig+0x274>)
 8005b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0x234>
 8005b3e:	e01b      	b.n	8005b78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b40:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b46:	f7fd fec3 	bl	80038d0 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b4c:	e00e      	b.n	8005b6c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4e:	f7fd febf 	bl	80038d0 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d907      	bls.n	8005b6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e15c      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
 8005b60:	40023800 	.word	0x40023800
 8005b64:	42470000 	.word	0x42470000
 8005b68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b6c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1ea      	bne.n	8005b4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8097 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8a:	4b83      	ldr	r3, [pc, #524]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10f      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ba6:	4b7c      	ldr	r3, [pc, #496]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb6:	4b79      	ldr	r3, [pc, #484]	@ (8005d9c <HAL_RCC_OscConfig+0x4b0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d118      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bc2:	4b76      	ldr	r3, [pc, #472]	@ (8005d9c <HAL_RCC_OscConfig+0x4b0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a75      	ldr	r2, [pc, #468]	@ (8005d9c <HAL_RCC_OscConfig+0x4b0>)
 8005bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bce:	f7fd fe7f 	bl	80038d0 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd6:	f7fd fe7b 	bl	80038d0 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e118      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d9c <HAL_RCC_OscConfig+0x4b0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x31e>
 8005bfc:	4b66      	ldr	r3, [pc, #408]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c00:	4a65      	ldr	r2, [pc, #404]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c08:	e01c      	b.n	8005c44 <HAL_RCC_OscConfig+0x358>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x340>
 8005c12:	4b61      	ldr	r3, [pc, #388]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c16:	4a60      	ldr	r2, [pc, #384]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c18:	f043 0304 	orr.w	r3, r3, #4
 8005c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c22:	4a5d      	ldr	r2, [pc, #372]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCC_OscConfig+0x358>
 8005c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c30:	4a59      	ldr	r2, [pc, #356]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c38:	4b57      	ldr	r3, [pc, #348]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3c:	4a56      	ldr	r2, [pc, #344]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c3e:	f023 0304 	bic.w	r3, r3, #4
 8005c42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d015      	beq.n	8005c78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4c:	f7fd fe40 	bl	80038d0 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c54:	f7fd fe3c 	bl	80038d0 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e0d7      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0ee      	beq.n	8005c54 <HAL_RCC_OscConfig+0x368>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c78:	f7fd fe2a 	bl	80038d0 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c80:	f7fd fe26 	bl	80038d0 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e0c1      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c96:	4b40      	ldr	r3, [pc, #256]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1ee      	bne.n	8005c80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	4a3a      	ldr	r2, [pc, #232]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80ad 	beq.w	8005e18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cbe:	4b36      	ldr	r3, [pc, #216]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d060      	beq.n	8005d8c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d145      	bne.n	8005d5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	4b33      	ldr	r3, [pc, #204]	@ (8005da0 <HAL_RCC_OscConfig+0x4b4>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd8:	f7fd fdfa 	bl	80038d0 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce0:	f7fd fdf6 	bl	80038d0 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e093      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	4b29      	ldr	r3, [pc, #164]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	3b01      	subs	r3, #1
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	061b      	lsls	r3, r3, #24
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d28:	071b      	lsls	r3, r3, #28
 8005d2a:	491b      	ldr	r1, [pc, #108]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d30:	4b1b      	ldr	r3, [pc, #108]	@ (8005da0 <HAL_RCC_OscConfig+0x4b4>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fd fdcb 	bl	80038d0 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fd fdc7 	bl	80038d0 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e064      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d50:	4b11      	ldr	r3, [pc, #68]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x452>
 8005d5c:	e05c      	b.n	8005e18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5e:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <HAL_RCC_OscConfig+0x4b4>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fd fdb4 	bl	80038d0 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6c:	f7fd fdb0 	bl	80038d0 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e04d      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7e:	4b06      	ldr	r3, [pc, #24]	@ (8005d98 <HAL_RCC_OscConfig+0x4ac>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f0      	bne.n	8005d6c <HAL_RCC_OscConfig+0x480>
 8005d8a:	e045      	b.n	8005e18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e040      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40007000 	.word	0x40007000
 8005da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005da4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e24 <HAL_RCC_OscConfig+0x538>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d030      	beq.n	8005e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d129      	bne.n	8005e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d122      	bne.n	8005e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d119      	bne.n	8005e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	3b01      	subs	r3, #1
 8005dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d10f      	bne.n	8005e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d107      	bne.n	8005e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40023800 	.word	0x40023800

08005e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e07b      	b.n	8005f32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d108      	bne.n	8005e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e4a:	d009      	beq.n	8005e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	61da      	str	r2, [r3, #28]
 8005e52:	e005      	b.n	8005e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fc fa34 	bl	80022e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee4:	ea42 0103 	orr.w	r1, r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	f003 0104 	and.w	r1, r3, #4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f06:	f003 0210 	and.w	r2, r3, #16
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b088      	sub	sp, #32
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4a:	f7fd fcc1 	bl	80038d0 <HAL_GetTick>
 8005f4e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
 8005f62:	e12a      	b.n	80061ba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_SPI_Transmit+0x36>
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e122      	b.n	80061ba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_SPI_Transmit+0x48>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e11b      	b.n	80061ba <HAL_SPI_Transmit+0x280>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd0:	d10f      	bne.n	8005ff2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ff0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffc:	2b40      	cmp	r3, #64	@ 0x40
 8005ffe:	d007      	beq.n	8006010 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800600e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006018:	d152      	bne.n	80060c0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_SPI_Transmit+0xee>
 8006022:	8b7b      	ldrh	r3, [r7, #26]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d145      	bne.n	80060b4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602c:	881a      	ldrh	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006038:	1c9a      	adds	r2, r3, #2
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800604c:	e032      	b.n	80060b4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b02      	cmp	r3, #2
 800605a:	d112      	bne.n	8006082 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606c:	1c9a      	adds	r2, r3, #2
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006080:	e018      	b.n	80060b4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006082:	f7fd fc25 	bl	80038d0 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d803      	bhi.n	800609a <HAL_SPI_Transmit+0x160>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006098:	d102      	bne.n	80060a0 <HAL_SPI_Transmit+0x166>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e082      	b.n	80061ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1c7      	bne.n	800604e <HAL_SPI_Transmit+0x114>
 80060be:	e053      	b.n	8006168 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <HAL_SPI_Transmit+0x194>
 80060c8:	8b7b      	ldrh	r3, [r7, #26]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d147      	bne.n	800615e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060f4:	e033      	b.n	800615e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b02      	cmp	r3, #2
 8006102:	d113      	bne.n	800612c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	330c      	adds	r3, #12
 800610e:	7812      	ldrb	r2, [r2, #0]
 8006110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	86da      	strh	r2, [r3, #54]	@ 0x36
 800612a:	e018      	b.n	800615e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800612c:	f7fd fbd0 	bl	80038d0 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d803      	bhi.n	8006144 <HAL_SPI_Transmit+0x20a>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006142:	d102      	bne.n	800614a <HAL_SPI_Transmit+0x210>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e02d      	b.n	80061ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1c6      	bne.n	80060f6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fbd9 	bl	8006924 <SPI_EndRxTxTransaction>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
  }
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3720      	adds	r7, #32
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b088      	sub	sp, #32
 80061c6:	af02      	add	r7, sp, #8
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	603b      	str	r3, [r7, #0]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d001      	beq.n	80061e2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80061de:	2302      	movs	r3, #2
 80061e0:	e104      	b.n	80063ec <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061ea:	d112      	bne.n	8006212 <HAL_SPI_Receive+0x50>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10e      	bne.n	8006212 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2204      	movs	r2, #4
 80061f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061fc:	88fa      	ldrh	r2, [r7, #6]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f8f3 	bl	80063f4 <HAL_SPI_TransmitReceive>
 800620e:	4603      	mov	r3, r0
 8006210:	e0ec      	b.n	80063ec <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006212:	f7fd fb5d 	bl	80038d0 <HAL_GetTick>
 8006216:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_SPI_Receive+0x62>
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0e1      	b.n	80063ec <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_SPI_Receive+0x74>
 8006232:	2302      	movs	r3, #2
 8006234:	e0da      	b.n	80063ec <HAL_SPI_Receive+0x22a>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2204      	movs	r2, #4
 8006242:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006284:	d10f      	bne.n	80062a6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006294:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d007      	beq.n	80062c4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d170      	bne.n	80063ae <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80062cc:	e035      	b.n	800633a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d115      	bne.n	8006308 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f103 020c 	add.w	r2, r3, #12
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	7812      	ldrb	r2, [r2, #0]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006306:	e018      	b.n	800633a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006308:	f7fd fae2 	bl	80038d0 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d803      	bhi.n	8006320 <HAL_SPI_Receive+0x15e>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800631e:	d102      	bne.n	8006326 <HAL_SPI_Receive+0x164>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e058      	b.n	80063ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1c4      	bne.n	80062ce <HAL_SPI_Receive+0x10c>
 8006344:	e038      	b.n	80063b8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b01      	cmp	r3, #1
 8006352:	d113      	bne.n	800637c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	b292      	uxth	r2, r2
 8006360:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006366:	1c9a      	adds	r2, r3, #2
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800637a:	e018      	b.n	80063ae <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800637c:	f7fd faa8 	bl	80038d0 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d803      	bhi.n	8006394 <HAL_SPI_Receive+0x1d2>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006392:	d102      	bne.n	800639a <HAL_SPI_Receive+0x1d8>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e01e      	b.n	80063ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1c6      	bne.n	8006346 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fa4b 	bl	8006858 <SPI_EndRxTransaction>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80063ea:	2300      	movs	r3, #0
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	@ 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006402:	2301      	movs	r3, #1
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006406:	f7fd fa63 	bl	80038d0 <HAL_GetTick>
 800640a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006412:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800641a:	887b      	ldrh	r3, [r7, #2]
 800641c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800641e:	7ffb      	ldrb	r3, [r7, #31]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d00c      	beq.n	800643e <HAL_SPI_TransmitReceive+0x4a>
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800642a:	d106      	bne.n	800643a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <HAL_SPI_TransmitReceive+0x46>
 8006434:	7ffb      	ldrb	r3, [r7, #31]
 8006436:	2b04      	cmp	r3, #4
 8006438:	d001      	beq.n	800643e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800643a:	2302      	movs	r3, #2
 800643c:	e17f      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x5c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x5c>
 800644a:	887b      	ldrh	r3, [r7, #2]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e174      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_SPI_TransmitReceive+0x6e>
 800645e:	2302      	movs	r3, #2
 8006460:	e16d      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b04      	cmp	r3, #4
 8006474:	d003      	beq.n	800647e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2205      	movs	r2, #5
 800647a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	887a      	ldrh	r2, [r7, #2]
 800648e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	887a      	ldrh	r2, [r7, #2]
 8006494:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	887a      	ldrh	r2, [r7, #2]
 80064a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	887a      	ldrh	r2, [r7, #2]
 80064a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064be:	2b40      	cmp	r3, #64	@ 0x40
 80064c0:	d007      	beq.n	80064d2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064da:	d17e      	bne.n	80065da <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <HAL_SPI_TransmitReceive+0xf6>
 80064e4:	8afb      	ldrh	r3, [r7, #22]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d16c      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ee:	881a      	ldrh	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fa:	1c9a      	adds	r2, r3, #2
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800650e:	e059      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b02      	cmp	r3, #2
 800651c:	d11b      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x162>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d016      	beq.n	8006556 <HAL_SPI_TransmitReceive+0x162>
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	2b01      	cmp	r3, #1
 800652c:	d113      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006532:	881a      	ldrh	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	d119      	bne.n	8006598 <HAL_SPI_TransmitReceive+0x1a4>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d014      	beq.n	8006598 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006578:	b292      	uxth	r2, r2
 800657a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006580:	1c9a      	adds	r2, r3, #2
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006594:	2301      	movs	r3, #1
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006598:	f7fd f99a 	bl	80038d0 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d80d      	bhi.n	80065c4 <HAL_SPI_TransmitReceive+0x1d0>
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065ae:	d009      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e0bc      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1a0      	bne.n	8006510 <HAL_SPI_TransmitReceive+0x11c>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d19b      	bne.n	8006510 <HAL_SPI_TransmitReceive+0x11c>
 80065d8:	e082      	b.n	80066e0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_SPI_TransmitReceive+0x1f4>
 80065e2:	8afb      	ldrh	r3, [r7, #22]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d171      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800660e:	e05d      	b.n	80066cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d11c      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x264>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d017      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x264>
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	2b01      	cmp	r3, #1
 800662c:	d114      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	7812      	ldrb	r2, [r2, #0]
 800663a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b01      	cmp	r3, #1
 8006664:	d119      	bne.n	800669a <HAL_SPI_TransmitReceive+0x2a6>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d014      	beq.n	800669a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006696:	2301      	movs	r3, #1
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800669a:	f7fd f919 	bl	80038d0 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d803      	bhi.n	80066b2 <HAL_SPI_TransmitReceive+0x2be>
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066b0:	d102      	bne.n	80066b8 <HAL_SPI_TransmitReceive+0x2c4>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e038      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d19c      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x21c>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d197      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066e0:	6a3a      	ldr	r2, [r7, #32]
 80066e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f91d 	bl	8006924 <SPI_EndRxTxTransaction>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e01d      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800673c:	2300      	movs	r3, #0
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3728      	adds	r7, #40	@ 0x28
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	4613      	mov	r3, r2
 8006756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006758:	f7fd f8ba 	bl	80038d0 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006760:	1a9b      	subs	r3, r3, r2
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	4413      	add	r3, r2
 8006766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006768:	f7fd f8b2 	bl	80038d0 <HAL_GetTick>
 800676c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800676e:	4b39      	ldr	r3, [pc, #228]	@ (8006854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	015b      	lsls	r3, r3, #5
 8006774:	0d1b      	lsrs	r3, r3, #20
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	fb02 f303 	mul.w	r3, r2, r3
 800677c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677e:	e054      	b.n	800682a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006786:	d050      	beq.n	800682a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006788:	f7fd f8a2 	bl	80038d0 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	429a      	cmp	r2, r3
 8006796:	d902      	bls.n	800679e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d13d      	bne.n	800681a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067b6:	d111      	bne.n	80067dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c0:	d004      	beq.n	80067cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ca:	d107      	bne.n	80067dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067e4:	d10f      	bne.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e017      	b.n	800684a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	3b01      	subs	r3, #1
 8006828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4013      	ands	r3, r2
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	bf0c      	ite	eq
 800683a:	2301      	moveq	r3, #1
 800683c:	2300      	movne	r3, #0
 800683e:	b2db      	uxtb	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	429a      	cmp	r2, r3
 8006846:	d19b      	bne.n	8006780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000008 	.word	0x20000008

08006858 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af02      	add	r7, sp, #8
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800686c:	d111      	bne.n	8006892 <SPI_EndRxTransaction+0x3a>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006876:	d004      	beq.n	8006882 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006880:	d107      	bne.n	8006892 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006890:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800689a:	d12a      	bne.n	80068f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a4:	d012      	beq.n	80068cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2200      	movs	r2, #0
 80068ae:	2180      	movs	r1, #128	@ 0x80
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff ff49 	bl	8006748 <SPI_WaitFlagStateUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02d      	beq.n	8006918 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c0:	f043 0220 	orr.w	r2, r3, #32
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e026      	b.n	800691a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	2101      	movs	r1, #1
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff ff36 	bl	8006748 <SPI_WaitFlagStateUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01a      	beq.n	8006918 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e6:	f043 0220 	orr.w	r2, r3, #32
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e013      	b.n	800691a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2101      	movs	r1, #1
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff ff23 	bl	8006748 <SPI_WaitFlagStateUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e000      	b.n	800691a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2201      	movs	r2, #1
 8006938:	2102      	movs	r1, #2
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff ff04 	bl	8006748 <SPI_WaitFlagStateUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694a:	f043 0220 	orr.w	r2, r3, #32
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e032      	b.n	80069bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006956:	4b1b      	ldr	r3, [pc, #108]	@ (80069c4 <SPI_EndRxTxTransaction+0xa0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1b      	ldr	r2, [pc, #108]	@ (80069c8 <SPI_EndRxTxTransaction+0xa4>)
 800695c:	fba2 2303 	umull	r2, r3, r2, r3
 8006960:	0d5b      	lsrs	r3, r3, #21
 8006962:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006974:	d112      	bne.n	800699c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2200      	movs	r2, #0
 800697e:	2180      	movs	r1, #128	@ 0x80
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff fee1 	bl	8006748 <SPI_WaitFlagStateUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d016      	beq.n	80069ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006990:	f043 0220 	orr.w	r2, r3, #32
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e00f      	b.n	80069bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b2:	2b80      	cmp	r3, #128	@ 0x80
 80069b4:	d0f2      	beq.n	800699c <SPI_EndRxTxTransaction+0x78>
 80069b6:	e000      	b.n	80069ba <SPI_EndRxTxTransaction+0x96>
        break;
 80069b8:	bf00      	nop
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000008 	.word	0x20000008
 80069c8:	165e9f81 	.word	0x165e9f81

080069cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e042      	b.n	8006a64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fb fce0 	bl	80023b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2224      	movs	r2, #36	@ 0x24
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f82b 	bl	8006a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a70:	b0c0      	sub	sp, #256	@ 0x100
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a88:	68d9      	ldr	r1, [r3, #12]
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	ea40 0301 	orr.w	r3, r0, r1
 8006a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ac4:	f021 010c 	bic.w	r1, r1, #12
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae6:	6999      	ldr	r1, [r3, #24]
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	ea40 0301 	orr.w	r3, r0, r1
 8006af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b8f      	ldr	r3, [pc, #572]	@ (8006d38 <UART_SetConfig+0x2cc>)
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d005      	beq.n	8006b0c <UART_SetConfig+0xa0>
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b8d      	ldr	r3, [pc, #564]	@ (8006d3c <UART_SetConfig+0x2d0>)
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d104      	bne.n	8006b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7fe fd30 	bl	8005570 <HAL_RCC_GetPCLK2Freq>
 8006b10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b14:	e003      	b.n	8006b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b16:	f7fe fd17 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8006b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b28:	f040 810c 	bne.w	8006d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b3e:	4622      	mov	r2, r4
 8006b40:	462b      	mov	r3, r5
 8006b42:	1891      	adds	r1, r2, r2
 8006b44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006b46:	415b      	adcs	r3, r3
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b4e:	4621      	mov	r1, r4
 8006b50:	eb12 0801 	adds.w	r8, r2, r1
 8006b54:	4629      	mov	r1, r5
 8006b56:	eb43 0901 	adc.w	r9, r3, r1
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b6e:	4690      	mov	r8, r2
 8006b70:	4699      	mov	r9, r3
 8006b72:	4623      	mov	r3, r4
 8006b74:	eb18 0303 	adds.w	r3, r8, r3
 8006b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	eb49 0303 	adc.w	r3, r9, r3
 8006b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	18db      	adds	r3, r3, r3
 8006b9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	eb42 0303 	adc.w	r3, r2, r3
 8006ba6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006bb0:	f7fa f88a 	bl	8000cc8 <__aeabi_uldivmod>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4b61      	ldr	r3, [pc, #388]	@ (8006d40 <UART_SetConfig+0x2d4>)
 8006bba:	fba3 2302 	umull	r2, r3, r3, r2
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	011c      	lsls	r4, r3, #4
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	1891      	adds	r1, r2, r2
 8006bda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006bdc:	415b      	adcs	r3, r3
 8006bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006be4:	4641      	mov	r1, r8
 8006be6:	eb12 0a01 	adds.w	sl, r2, r1
 8006bea:	4649      	mov	r1, r9
 8006bec:	eb43 0b01 	adc.w	fp, r3, r1
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c04:	4692      	mov	sl, r2
 8006c06:	469b      	mov	fp, r3
 8006c08:	4643      	mov	r3, r8
 8006c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c12:	464b      	mov	r3, r9
 8006c14:	eb4b 0303 	adc.w	r3, fp, r3
 8006c18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c30:	460b      	mov	r3, r1
 8006c32:	18db      	adds	r3, r3, r3
 8006c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c36:	4613      	mov	r3, r2
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006c46:	f7fa f83f 	bl	8000cc8 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4b3b      	ldr	r3, [pc, #236]	@ (8006d40 <UART_SetConfig+0x2d4>)
 8006c52:	fba3 2301 	umull	r2, r3, r3, r1
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	2264      	movs	r2, #100	@ 0x64
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	1acb      	subs	r3, r1, r3
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006c66:	4b36      	ldr	r3, [pc, #216]	@ (8006d40 <UART_SetConfig+0x2d4>)
 8006c68:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006c74:	441c      	add	r4, r3
 8006c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	1891      	adds	r1, r2, r2
 8006c8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c90:	415b      	adcs	r3, r3
 8006c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c98:	4641      	mov	r1, r8
 8006c9a:	1851      	adds	r1, r2, r1
 8006c9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	414b      	adcs	r3, r1
 8006ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	00cb      	lsls	r3, r1, #3
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cba:	4651      	mov	r1, sl
 8006cbc:	00ca      	lsls	r2, r1, #3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	189b      	adds	r3, r3, r2
 8006cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ccc:	464b      	mov	r3, r9
 8006cce:	460a      	mov	r2, r1
 8006cd0:	eb42 0303 	adc.w	r3, r2, r3
 8006cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006cec:	460b      	mov	r3, r1
 8006cee:	18db      	adds	r3, r3, r3
 8006cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	eb42 0303 	adc.w	r3, r2, r3
 8006cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d02:	f7f9 ffe1 	bl	8000cc8 <__aeabi_uldivmod>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <UART_SetConfig+0x2d4>)
 8006d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	2164      	movs	r1, #100	@ 0x64
 8006d14:	fb01 f303 	mul.w	r3, r1, r3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	3332      	adds	r3, #50	@ 0x32
 8006d1e:	4a08      	ldr	r2, [pc, #32]	@ (8006d40 <UART_SetConfig+0x2d4>)
 8006d20:	fba2 2303 	umull	r2, r3, r2, r3
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	f003 0207 	and.w	r2, r3, #7
 8006d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4422      	add	r2, r4
 8006d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d34:	e106      	b.n	8006f44 <UART_SetConfig+0x4d8>
 8006d36:	bf00      	nop
 8006d38:	40011000 	.word	0x40011000
 8006d3c:	40011400 	.word	0x40011400
 8006d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006d56:	4642      	mov	r2, r8
 8006d58:	464b      	mov	r3, r9
 8006d5a:	1891      	adds	r1, r2, r2
 8006d5c:	6239      	str	r1, [r7, #32]
 8006d5e:	415b      	adcs	r3, r3
 8006d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d66:	4641      	mov	r1, r8
 8006d68:	1854      	adds	r4, r2, r1
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	eb43 0501 	adc.w	r5, r3, r1
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	00eb      	lsls	r3, r5, #3
 8006d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d7e:	00e2      	lsls	r2, r4, #3
 8006d80:	4614      	mov	r4, r2
 8006d82:	461d      	mov	r5, r3
 8006d84:	4643      	mov	r3, r8
 8006d86:	18e3      	adds	r3, r4, r3
 8006d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	eb45 0303 	adc.w	r3, r5, r3
 8006d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006da2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006db2:	4629      	mov	r1, r5
 8006db4:	008b      	lsls	r3, r1, #2
 8006db6:	4621      	mov	r1, r4
 8006db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	008a      	lsls	r2, r1, #2
 8006dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006dc4:	f7f9 ff80 	bl	8000cc8 <__aeabi_uldivmod>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4b60      	ldr	r3, [pc, #384]	@ (8006f50 <UART_SetConfig+0x4e4>)
 8006dce:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	011c      	lsls	r4, r3, #4
 8006dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006de0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	1891      	adds	r1, r2, r2
 8006dee:	61b9      	str	r1, [r7, #24]
 8006df0:	415b      	adcs	r3, r3
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006df8:	4641      	mov	r1, r8
 8006dfa:	1851      	adds	r1, r2, r1
 8006dfc:	6139      	str	r1, [r7, #16]
 8006dfe:	4649      	mov	r1, r9
 8006e00:	414b      	adcs	r3, r1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e10:	4659      	mov	r1, fp
 8006e12:	00cb      	lsls	r3, r1, #3
 8006e14:	4651      	mov	r1, sl
 8006e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e1a:	4651      	mov	r1, sl
 8006e1c:	00ca      	lsls	r2, r1, #3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	4642      	mov	r2, r8
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	460a      	mov	r2, r1
 8006e30:	eb42 0303 	adc.w	r3, r2, r3
 8006e34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006e50:	4649      	mov	r1, r9
 8006e52:	008b      	lsls	r3, r1, #2
 8006e54:	4641      	mov	r1, r8
 8006e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	008a      	lsls	r2, r1, #2
 8006e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006e62:	f7f9 ff31 	bl	8000cc8 <__aeabi_uldivmod>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4b38      	ldr	r3, [pc, #224]	@ (8006f50 <UART_SetConfig+0x4e4>)
 8006e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2264      	movs	r2, #100	@ 0x64
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	1acb      	subs	r3, r1, r3
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	3332      	adds	r3, #50	@ 0x32
 8006e80:	4a33      	ldr	r2, [pc, #204]	@ (8006f50 <UART_SetConfig+0x4e4>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e8c:	441c      	add	r4, r3
 8006e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e92:	2200      	movs	r2, #0
 8006e94:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e96:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	1891      	adds	r1, r2, r2
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	415b      	adcs	r3, r3
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eac:	4641      	mov	r1, r8
 8006eae:	1851      	adds	r1, r2, r1
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	414b      	adcs	r3, r1
 8006eb6:	607b      	str	r3, [r7, #4]
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	00cb      	lsls	r3, r1, #3
 8006ec8:	4651      	mov	r1, sl
 8006eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ece:	4651      	mov	r1, sl
 8006ed0:	00ca      	lsls	r2, r1, #3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4642      	mov	r2, r8
 8006eda:	189b      	adds	r3, r3, r2
 8006edc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ede:	464b      	mov	r3, r9
 8006ee0:	460a      	mov	r2, r1
 8006ee2:	eb42 0303 	adc.w	r3, r2, r3
 8006ee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ef2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f00:	4649      	mov	r1, r9
 8006f02:	008b      	lsls	r3, r1, #2
 8006f04:	4641      	mov	r1, r8
 8006f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	008a      	lsls	r2, r1, #2
 8006f0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f12:	f7f9 fed9 	bl	8000cc8 <__aeabi_uldivmod>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <UART_SetConfig+0x4e4>)
 8006f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	2164      	movs	r1, #100	@ 0x64
 8006f24:	fb01 f303 	mul.w	r3, r1, r3
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	3332      	adds	r3, #50	@ 0x32
 8006f2e:	4a08      	ldr	r2, [pc, #32]	@ (8006f50 <UART_SetConfig+0x4e4>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	f003 020f 	and.w	r2, r3, #15
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4422      	add	r2, r4
 8006f42:	609a      	str	r2, [r3, #8]
}
 8006f44:	bf00      	nop
 8006f46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f50:	51eb851f 	.word	0x51eb851f

08006f54 <__cvt>:
 8006f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	ec57 6b10 	vmov	r6, r7, d0
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	4619      	mov	r1, r3
 8006f62:	463b      	mov	r3, r7
 8006f64:	bfbb      	ittet	lt
 8006f66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f6a:	461f      	movlt	r7, r3
 8006f6c:	2300      	movge	r3, #0
 8006f6e:	232d      	movlt	r3, #45	@ 0x2d
 8006f70:	700b      	strb	r3, [r1, #0]
 8006f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f78:	4691      	mov	r9, r2
 8006f7a:	f023 0820 	bic.w	r8, r3, #32
 8006f7e:	bfbc      	itt	lt
 8006f80:	4632      	movlt	r2, r6
 8006f82:	4616      	movlt	r6, r2
 8006f84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f88:	d005      	beq.n	8006f96 <__cvt+0x42>
 8006f8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f8e:	d100      	bne.n	8006f92 <__cvt+0x3e>
 8006f90:	3401      	adds	r4, #1
 8006f92:	2102      	movs	r1, #2
 8006f94:	e000      	b.n	8006f98 <__cvt+0x44>
 8006f96:	2103      	movs	r1, #3
 8006f98:	ab03      	add	r3, sp, #12
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	ab02      	add	r3, sp, #8
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	ec47 6b10 	vmov	d0, r6, r7
 8006fa4:	4653      	mov	r3, sl
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	f000 fdb2 	bl	8007b10 <_dtoa_r>
 8006fac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	d119      	bne.n	8006fe8 <__cvt+0x94>
 8006fb4:	f019 0f01 	tst.w	r9, #1
 8006fb8:	d00e      	beq.n	8006fd8 <__cvt+0x84>
 8006fba:	eb00 0904 	add.w	r9, r0, r4
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	f7f9 fd9f 	bl	8000b08 <__aeabi_dcmpeq>
 8006fca:	b108      	cbz	r0, 8006fd0 <__cvt+0x7c>
 8006fcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fd0:	2230      	movs	r2, #48	@ 0x30
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	454b      	cmp	r3, r9
 8006fd6:	d31e      	bcc.n	8007016 <__cvt+0xc2>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fdc:	1b5b      	subs	r3, r3, r5
 8006fde:	4628      	mov	r0, r5
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	b004      	add	sp, #16
 8006fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fec:	eb00 0904 	add.w	r9, r0, r4
 8006ff0:	d1e5      	bne.n	8006fbe <__cvt+0x6a>
 8006ff2:	7803      	ldrb	r3, [r0, #0]
 8006ff4:	2b30      	cmp	r3, #48	@ 0x30
 8006ff6:	d10a      	bne.n	800700e <__cvt+0xba>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7f9 fd82 	bl	8000b08 <__aeabi_dcmpeq>
 8007004:	b918      	cbnz	r0, 800700e <__cvt+0xba>
 8007006:	f1c4 0401 	rsb	r4, r4, #1
 800700a:	f8ca 4000 	str.w	r4, [sl]
 800700e:	f8da 3000 	ldr.w	r3, [sl]
 8007012:	4499      	add	r9, r3
 8007014:	e7d3      	b.n	8006fbe <__cvt+0x6a>
 8007016:	1c59      	adds	r1, r3, #1
 8007018:	9103      	str	r1, [sp, #12]
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e7d9      	b.n	8006fd2 <__cvt+0x7e>

0800701e <__exponent>:
 800701e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007020:	2900      	cmp	r1, #0
 8007022:	bfba      	itte	lt
 8007024:	4249      	neglt	r1, r1
 8007026:	232d      	movlt	r3, #45	@ 0x2d
 8007028:	232b      	movge	r3, #43	@ 0x2b
 800702a:	2909      	cmp	r1, #9
 800702c:	7002      	strb	r2, [r0, #0]
 800702e:	7043      	strb	r3, [r0, #1]
 8007030:	dd29      	ble.n	8007086 <__exponent+0x68>
 8007032:	f10d 0307 	add.w	r3, sp, #7
 8007036:	461d      	mov	r5, r3
 8007038:	270a      	movs	r7, #10
 800703a:	461a      	mov	r2, r3
 800703c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007040:	fb07 1416 	mls	r4, r7, r6, r1
 8007044:	3430      	adds	r4, #48	@ 0x30
 8007046:	f802 4c01 	strb.w	r4, [r2, #-1]
 800704a:	460c      	mov	r4, r1
 800704c:	2c63      	cmp	r4, #99	@ 0x63
 800704e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007052:	4631      	mov	r1, r6
 8007054:	dcf1      	bgt.n	800703a <__exponent+0x1c>
 8007056:	3130      	adds	r1, #48	@ 0x30
 8007058:	1e94      	subs	r4, r2, #2
 800705a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800705e:	1c41      	adds	r1, r0, #1
 8007060:	4623      	mov	r3, r4
 8007062:	42ab      	cmp	r3, r5
 8007064:	d30a      	bcc.n	800707c <__exponent+0x5e>
 8007066:	f10d 0309 	add.w	r3, sp, #9
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	42ac      	cmp	r4, r5
 800706e:	bf88      	it	hi
 8007070:	2300      	movhi	r3, #0
 8007072:	3302      	adds	r3, #2
 8007074:	4403      	add	r3, r0
 8007076:	1a18      	subs	r0, r3, r0
 8007078:	b003      	add	sp, #12
 800707a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007080:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007084:	e7ed      	b.n	8007062 <__exponent+0x44>
 8007086:	2330      	movs	r3, #48	@ 0x30
 8007088:	3130      	adds	r1, #48	@ 0x30
 800708a:	7083      	strb	r3, [r0, #2]
 800708c:	70c1      	strb	r1, [r0, #3]
 800708e:	1d03      	adds	r3, r0, #4
 8007090:	e7f1      	b.n	8007076 <__exponent+0x58>
	...

08007094 <_printf_float>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b08d      	sub	sp, #52	@ 0x34
 800709a:	460c      	mov	r4, r1
 800709c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070a0:	4616      	mov	r6, r2
 80070a2:	461f      	mov	r7, r3
 80070a4:	4605      	mov	r5, r0
 80070a6:	f000 fc77 	bl	8007998 <_localeconv_r>
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	9304      	str	r3, [sp, #16]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 f8fe 	bl	80002b0 <strlen>
 80070b4:	2300      	movs	r3, #0
 80070b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070b8:	f8d8 3000 	ldr.w	r3, [r8]
 80070bc:	9005      	str	r0, [sp, #20]
 80070be:	3307      	adds	r3, #7
 80070c0:	f023 0307 	bic.w	r3, r3, #7
 80070c4:	f103 0208 	add.w	r2, r3, #8
 80070c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070cc:	f8d4 b000 	ldr.w	fp, [r4]
 80070d0:	f8c8 2000 	str.w	r2, [r8]
 80070d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070dc:	9307      	str	r3, [sp, #28]
 80070de:	f8cd 8018 	str.w	r8, [sp, #24]
 80070e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ea:	4b9c      	ldr	r3, [pc, #624]	@ (800735c <_printf_float+0x2c8>)
 80070ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070f0:	f7f9 fd3c 	bl	8000b6c <__aeabi_dcmpun>
 80070f4:	bb70      	cbnz	r0, 8007154 <_printf_float+0xc0>
 80070f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fa:	4b98      	ldr	r3, [pc, #608]	@ (800735c <_printf_float+0x2c8>)
 80070fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007100:	f7f9 fd16 	bl	8000b30 <__aeabi_dcmple>
 8007104:	bb30      	cbnz	r0, 8007154 <_printf_float+0xc0>
 8007106:	2200      	movs	r2, #0
 8007108:	2300      	movs	r3, #0
 800710a:	4640      	mov	r0, r8
 800710c:	4649      	mov	r1, r9
 800710e:	f7f9 fd05 	bl	8000b1c <__aeabi_dcmplt>
 8007112:	b110      	cbz	r0, 800711a <_printf_float+0x86>
 8007114:	232d      	movs	r3, #45	@ 0x2d
 8007116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800711a:	4a91      	ldr	r2, [pc, #580]	@ (8007360 <_printf_float+0x2cc>)
 800711c:	4b91      	ldr	r3, [pc, #580]	@ (8007364 <_printf_float+0x2d0>)
 800711e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007122:	bf94      	ite	ls
 8007124:	4690      	movls	r8, r2
 8007126:	4698      	movhi	r8, r3
 8007128:	2303      	movs	r3, #3
 800712a:	6123      	str	r3, [r4, #16]
 800712c:	f02b 0304 	bic.w	r3, fp, #4
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	f04f 0900 	mov.w	r9, #0
 8007136:	9700      	str	r7, [sp, #0]
 8007138:	4633      	mov	r3, r6
 800713a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800713c:	4621      	mov	r1, r4
 800713e:	4628      	mov	r0, r5
 8007140:	f000 f9d2 	bl	80074e8 <_printf_common>
 8007144:	3001      	adds	r0, #1
 8007146:	f040 808d 	bne.w	8007264 <_printf_float+0x1d0>
 800714a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800714e:	b00d      	add	sp, #52	@ 0x34
 8007150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 fd06 	bl	8000b6c <__aeabi_dcmpun>
 8007160:	b140      	cbz	r0, 8007174 <_printf_float+0xe0>
 8007162:	464b      	mov	r3, r9
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfbc      	itt	lt
 8007168:	232d      	movlt	r3, #45	@ 0x2d
 800716a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800716e:	4a7e      	ldr	r2, [pc, #504]	@ (8007368 <_printf_float+0x2d4>)
 8007170:	4b7e      	ldr	r3, [pc, #504]	@ (800736c <_printf_float+0x2d8>)
 8007172:	e7d4      	b.n	800711e <_printf_float+0x8a>
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800717a:	9206      	str	r2, [sp, #24]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	d13b      	bne.n	80071f8 <_printf_float+0x164>
 8007180:	2306      	movs	r3, #6
 8007182:	6063      	str	r3, [r4, #4]
 8007184:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007188:	2300      	movs	r3, #0
 800718a:	6022      	str	r2, [r4, #0]
 800718c:	9303      	str	r3, [sp, #12]
 800718e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007190:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007194:	ab09      	add	r3, sp, #36	@ 0x24
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	6861      	ldr	r1, [r4, #4]
 800719a:	ec49 8b10 	vmov	d0, r8, r9
 800719e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071a2:	4628      	mov	r0, r5
 80071a4:	f7ff fed6 	bl	8006f54 <__cvt>
 80071a8:	9b06      	ldr	r3, [sp, #24]
 80071aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071ac:	2b47      	cmp	r3, #71	@ 0x47
 80071ae:	4680      	mov	r8, r0
 80071b0:	d129      	bne.n	8007206 <_printf_float+0x172>
 80071b2:	1cc8      	adds	r0, r1, #3
 80071b4:	db02      	blt.n	80071bc <_printf_float+0x128>
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	4299      	cmp	r1, r3
 80071ba:	dd41      	ble.n	8007240 <_printf_float+0x1ac>
 80071bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80071c0:	fa5f fa8a 	uxtb.w	sl, sl
 80071c4:	3901      	subs	r1, #1
 80071c6:	4652      	mov	r2, sl
 80071c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80071ce:	f7ff ff26 	bl	800701e <__exponent>
 80071d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071d4:	1813      	adds	r3, r2, r0
 80071d6:	2a01      	cmp	r2, #1
 80071d8:	4681      	mov	r9, r0
 80071da:	6123      	str	r3, [r4, #16]
 80071dc:	dc02      	bgt.n	80071e4 <_printf_float+0x150>
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	07d2      	lsls	r2, r2, #31
 80071e2:	d501      	bpl.n	80071e8 <_printf_float+0x154>
 80071e4:	3301      	adds	r3, #1
 80071e6:	6123      	str	r3, [r4, #16]
 80071e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0a2      	beq.n	8007136 <_printf_float+0xa2>
 80071f0:	232d      	movs	r3, #45	@ 0x2d
 80071f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f6:	e79e      	b.n	8007136 <_printf_float+0xa2>
 80071f8:	9a06      	ldr	r2, [sp, #24]
 80071fa:	2a47      	cmp	r2, #71	@ 0x47
 80071fc:	d1c2      	bne.n	8007184 <_printf_float+0xf0>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1c0      	bne.n	8007184 <_printf_float+0xf0>
 8007202:	2301      	movs	r3, #1
 8007204:	e7bd      	b.n	8007182 <_printf_float+0xee>
 8007206:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800720a:	d9db      	bls.n	80071c4 <_printf_float+0x130>
 800720c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007210:	d118      	bne.n	8007244 <_printf_float+0x1b0>
 8007212:	2900      	cmp	r1, #0
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	dd0b      	ble.n	8007230 <_printf_float+0x19c>
 8007218:	6121      	str	r1, [r4, #16]
 800721a:	b913      	cbnz	r3, 8007222 <_printf_float+0x18e>
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	07d0      	lsls	r0, r2, #31
 8007220:	d502      	bpl.n	8007228 <_printf_float+0x194>
 8007222:	3301      	adds	r3, #1
 8007224:	440b      	add	r3, r1
 8007226:	6123      	str	r3, [r4, #16]
 8007228:	65a1      	str	r1, [r4, #88]	@ 0x58
 800722a:	f04f 0900 	mov.w	r9, #0
 800722e:	e7db      	b.n	80071e8 <_printf_float+0x154>
 8007230:	b913      	cbnz	r3, 8007238 <_printf_float+0x1a4>
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	07d2      	lsls	r2, r2, #31
 8007236:	d501      	bpl.n	800723c <_printf_float+0x1a8>
 8007238:	3302      	adds	r3, #2
 800723a:	e7f4      	b.n	8007226 <_printf_float+0x192>
 800723c:	2301      	movs	r3, #1
 800723e:	e7f2      	b.n	8007226 <_printf_float+0x192>
 8007240:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007246:	4299      	cmp	r1, r3
 8007248:	db05      	blt.n	8007256 <_printf_float+0x1c2>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	6121      	str	r1, [r4, #16]
 800724e:	07d8      	lsls	r0, r3, #31
 8007250:	d5ea      	bpl.n	8007228 <_printf_float+0x194>
 8007252:	1c4b      	adds	r3, r1, #1
 8007254:	e7e7      	b.n	8007226 <_printf_float+0x192>
 8007256:	2900      	cmp	r1, #0
 8007258:	bfd4      	ite	le
 800725a:	f1c1 0202 	rsble	r2, r1, #2
 800725e:	2201      	movgt	r2, #1
 8007260:	4413      	add	r3, r2
 8007262:	e7e0      	b.n	8007226 <_printf_float+0x192>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	055a      	lsls	r2, r3, #21
 8007268:	d407      	bmi.n	800727a <_printf_float+0x1e6>
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	4642      	mov	r2, r8
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	d12b      	bne.n	80072d0 <_printf_float+0x23c>
 8007278:	e767      	b.n	800714a <_printf_float+0xb6>
 800727a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800727e:	f240 80dd 	bls.w	800743c <_printf_float+0x3a8>
 8007282:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007286:	2200      	movs	r2, #0
 8007288:	2300      	movs	r3, #0
 800728a:	f7f9 fc3d 	bl	8000b08 <__aeabi_dcmpeq>
 800728e:	2800      	cmp	r0, #0
 8007290:	d033      	beq.n	80072fa <_printf_float+0x266>
 8007292:	4a37      	ldr	r2, [pc, #220]	@ (8007370 <_printf_float+0x2dc>)
 8007294:	2301      	movs	r3, #1
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f af54 	beq.w	800714a <_printf_float+0xb6>
 80072a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072a6:	4543      	cmp	r3, r8
 80072a8:	db02      	blt.n	80072b0 <_printf_float+0x21c>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	07d8      	lsls	r0, r3, #31
 80072ae:	d50f      	bpl.n	80072d0 <_printf_float+0x23c>
 80072b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f af45 	beq.w	800714a <_printf_float+0xb6>
 80072c0:	f04f 0900 	mov.w	r9, #0
 80072c4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80072c8:	f104 0a1a 	add.w	sl, r4, #26
 80072cc:	45c8      	cmp	r8, r9
 80072ce:	dc09      	bgt.n	80072e4 <_printf_float+0x250>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	079b      	lsls	r3, r3, #30
 80072d4:	f100 8103 	bmi.w	80074de <_printf_float+0x44a>
 80072d8:	68e0      	ldr	r0, [r4, #12]
 80072da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072dc:	4298      	cmp	r0, r3
 80072de:	bfb8      	it	lt
 80072e0:	4618      	movlt	r0, r3
 80072e2:	e734      	b.n	800714e <_printf_float+0xba>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4652      	mov	r2, sl
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f af2b 	beq.w	800714a <_printf_float+0xb6>
 80072f4:	f109 0901 	add.w	r9, r9, #1
 80072f8:	e7e8      	b.n	80072cc <_printf_float+0x238>
 80072fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dc39      	bgt.n	8007374 <_printf_float+0x2e0>
 8007300:	4a1b      	ldr	r2, [pc, #108]	@ (8007370 <_printf_float+0x2dc>)
 8007302:	2301      	movs	r3, #1
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f af1d 	beq.w	800714a <_printf_float+0xb6>
 8007310:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007314:	ea59 0303 	orrs.w	r3, r9, r3
 8007318:	d102      	bne.n	8007320 <_printf_float+0x28c>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	07d9      	lsls	r1, r3, #31
 800731e:	d5d7      	bpl.n	80072d0 <_printf_float+0x23c>
 8007320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f af0d 	beq.w	800714a <_printf_float+0xb6>
 8007330:	f04f 0a00 	mov.w	sl, #0
 8007334:	f104 0b1a 	add.w	fp, r4, #26
 8007338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733a:	425b      	negs	r3, r3
 800733c:	4553      	cmp	r3, sl
 800733e:	dc01      	bgt.n	8007344 <_printf_float+0x2b0>
 8007340:	464b      	mov	r3, r9
 8007342:	e793      	b.n	800726c <_printf_float+0x1d8>
 8007344:	2301      	movs	r3, #1
 8007346:	465a      	mov	r2, fp
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f aefb 	beq.w	800714a <_printf_float+0xb6>
 8007354:	f10a 0a01 	add.w	sl, sl, #1
 8007358:	e7ee      	b.n	8007338 <_printf_float+0x2a4>
 800735a:	bf00      	nop
 800735c:	7fefffff 	.word	0x7fefffff
 8007360:	0800b7b0 	.word	0x0800b7b0
 8007364:	0800b7b4 	.word	0x0800b7b4
 8007368:	0800b7b8 	.word	0x0800b7b8
 800736c:	0800b7bc 	.word	0x0800b7bc
 8007370:	0800b7c0 	.word	0x0800b7c0
 8007374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007376:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800737a:	4553      	cmp	r3, sl
 800737c:	bfa8      	it	ge
 800737e:	4653      	movge	r3, sl
 8007380:	2b00      	cmp	r3, #0
 8007382:	4699      	mov	r9, r3
 8007384:	dc36      	bgt.n	80073f4 <_printf_float+0x360>
 8007386:	f04f 0b00 	mov.w	fp, #0
 800738a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800738e:	f104 021a 	add.w	r2, r4, #26
 8007392:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007394:	9306      	str	r3, [sp, #24]
 8007396:	eba3 0309 	sub.w	r3, r3, r9
 800739a:	455b      	cmp	r3, fp
 800739c:	dc31      	bgt.n	8007402 <_printf_float+0x36e>
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	459a      	cmp	sl, r3
 80073a2:	dc3a      	bgt.n	800741a <_printf_float+0x386>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07da      	lsls	r2, r3, #31
 80073a8:	d437      	bmi.n	800741a <_printf_float+0x386>
 80073aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ac:	ebaa 0903 	sub.w	r9, sl, r3
 80073b0:	9b06      	ldr	r3, [sp, #24]
 80073b2:	ebaa 0303 	sub.w	r3, sl, r3
 80073b6:	4599      	cmp	r9, r3
 80073b8:	bfa8      	it	ge
 80073ba:	4699      	movge	r9, r3
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	dc33      	bgt.n	800742a <_printf_float+0x396>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ca:	f104 0b1a 	add.w	fp, r4, #26
 80073ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d0:	ebaa 0303 	sub.w	r3, sl, r3
 80073d4:	eba3 0309 	sub.w	r3, r3, r9
 80073d8:	4543      	cmp	r3, r8
 80073da:	f77f af79 	ble.w	80072d0 <_printf_float+0x23c>
 80073de:	2301      	movs	r3, #1
 80073e0:	465a      	mov	r2, fp
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f aeae 	beq.w	800714a <_printf_float+0xb6>
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	e7ec      	b.n	80073ce <_printf_float+0x33a>
 80073f4:	4642      	mov	r2, r8
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	d1c2      	bne.n	8007386 <_printf_float+0x2f2>
 8007400:	e6a3      	b.n	800714a <_printf_float+0xb6>
 8007402:	2301      	movs	r3, #1
 8007404:	4631      	mov	r1, r6
 8007406:	4628      	mov	r0, r5
 8007408:	9206      	str	r2, [sp, #24]
 800740a:	47b8      	blx	r7
 800740c:	3001      	adds	r0, #1
 800740e:	f43f ae9c 	beq.w	800714a <_printf_float+0xb6>
 8007412:	9a06      	ldr	r2, [sp, #24]
 8007414:	f10b 0b01 	add.w	fp, fp, #1
 8007418:	e7bb      	b.n	8007392 <_printf_float+0x2fe>
 800741a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	d1c0      	bne.n	80073aa <_printf_float+0x316>
 8007428:	e68f      	b.n	800714a <_printf_float+0xb6>
 800742a:	9a06      	ldr	r2, [sp, #24]
 800742c:	464b      	mov	r3, r9
 800742e:	4442      	add	r2, r8
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	47b8      	blx	r7
 8007436:	3001      	adds	r0, #1
 8007438:	d1c3      	bne.n	80073c2 <_printf_float+0x32e>
 800743a:	e686      	b.n	800714a <_printf_float+0xb6>
 800743c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007440:	f1ba 0f01 	cmp.w	sl, #1
 8007444:	dc01      	bgt.n	800744a <_printf_float+0x3b6>
 8007446:	07db      	lsls	r3, r3, #31
 8007448:	d536      	bpl.n	80074b8 <_printf_float+0x424>
 800744a:	2301      	movs	r3, #1
 800744c:	4642      	mov	r2, r8
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae78 	beq.w	800714a <_printf_float+0xb6>
 800745a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	f43f ae70 	beq.w	800714a <_printf_float+0xb6>
 800746a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800746e:	2200      	movs	r2, #0
 8007470:	2300      	movs	r3, #0
 8007472:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007476:	f7f9 fb47 	bl	8000b08 <__aeabi_dcmpeq>
 800747a:	b9c0      	cbnz	r0, 80074ae <_printf_float+0x41a>
 800747c:	4653      	mov	r3, sl
 800747e:	f108 0201 	add.w	r2, r8, #1
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d10c      	bne.n	80074a6 <_printf_float+0x412>
 800748c:	e65d      	b.n	800714a <_printf_float+0xb6>
 800748e:	2301      	movs	r3, #1
 8007490:	465a      	mov	r2, fp
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f ae56 	beq.w	800714a <_printf_float+0xb6>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	45d0      	cmp	r8, sl
 80074a4:	dbf3      	blt.n	800748e <_printf_float+0x3fa>
 80074a6:	464b      	mov	r3, r9
 80074a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074ac:	e6df      	b.n	800726e <_printf_float+0x1da>
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	f104 0b1a 	add.w	fp, r4, #26
 80074b6:	e7f4      	b.n	80074a2 <_printf_float+0x40e>
 80074b8:	2301      	movs	r3, #1
 80074ba:	4642      	mov	r2, r8
 80074bc:	e7e1      	b.n	8007482 <_printf_float+0x3ee>
 80074be:	2301      	movs	r3, #1
 80074c0:	464a      	mov	r2, r9
 80074c2:	4631      	mov	r1, r6
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b8      	blx	r7
 80074c8:	3001      	adds	r0, #1
 80074ca:	f43f ae3e 	beq.w	800714a <_printf_float+0xb6>
 80074ce:	f108 0801 	add.w	r8, r8, #1
 80074d2:	68e3      	ldr	r3, [r4, #12]
 80074d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074d6:	1a5b      	subs	r3, r3, r1
 80074d8:	4543      	cmp	r3, r8
 80074da:	dcf0      	bgt.n	80074be <_printf_float+0x42a>
 80074dc:	e6fc      	b.n	80072d8 <_printf_float+0x244>
 80074de:	f04f 0800 	mov.w	r8, #0
 80074e2:	f104 0919 	add.w	r9, r4, #25
 80074e6:	e7f4      	b.n	80074d2 <_printf_float+0x43e>

080074e8 <_printf_common>:
 80074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	4616      	mov	r6, r2
 80074ee:	4698      	mov	r8, r3
 80074f0:	688a      	ldr	r2, [r1, #8]
 80074f2:	690b      	ldr	r3, [r1, #16]
 80074f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074f8:	4293      	cmp	r3, r2
 80074fa:	bfb8      	it	lt
 80074fc:	4613      	movlt	r3, r2
 80074fe:	6033      	str	r3, [r6, #0]
 8007500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007504:	4607      	mov	r7, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b10a      	cbz	r2, 800750e <_printf_common+0x26>
 800750a:	3301      	adds	r3, #1
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	0699      	lsls	r1, r3, #26
 8007512:	bf42      	ittt	mi
 8007514:	6833      	ldrmi	r3, [r6, #0]
 8007516:	3302      	addmi	r3, #2
 8007518:	6033      	strmi	r3, [r6, #0]
 800751a:	6825      	ldr	r5, [r4, #0]
 800751c:	f015 0506 	ands.w	r5, r5, #6
 8007520:	d106      	bne.n	8007530 <_printf_common+0x48>
 8007522:	f104 0a19 	add.w	sl, r4, #25
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	6832      	ldr	r2, [r6, #0]
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	42ab      	cmp	r3, r5
 800752e:	dc26      	bgt.n	800757e <_printf_common+0x96>
 8007530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	3b00      	subs	r3, #0
 8007538:	bf18      	it	ne
 800753a:	2301      	movne	r3, #1
 800753c:	0692      	lsls	r2, r2, #26
 800753e:	d42b      	bmi.n	8007598 <_printf_common+0xb0>
 8007540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007544:	4641      	mov	r1, r8
 8007546:	4638      	mov	r0, r7
 8007548:	47c8      	blx	r9
 800754a:	3001      	adds	r0, #1
 800754c:	d01e      	beq.n	800758c <_printf_common+0xa4>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	f003 0306 	and.w	r3, r3, #6
 8007556:	2b04      	cmp	r3, #4
 8007558:	bf02      	ittt	eq
 800755a:	68e5      	ldreq	r5, [r4, #12]
 800755c:	6833      	ldreq	r3, [r6, #0]
 800755e:	1aed      	subeq	r5, r5, r3
 8007560:	68a3      	ldr	r3, [r4, #8]
 8007562:	bf0c      	ite	eq
 8007564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007568:	2500      	movne	r5, #0
 800756a:	4293      	cmp	r3, r2
 800756c:	bfc4      	itt	gt
 800756e:	1a9b      	subgt	r3, r3, r2
 8007570:	18ed      	addgt	r5, r5, r3
 8007572:	2600      	movs	r6, #0
 8007574:	341a      	adds	r4, #26
 8007576:	42b5      	cmp	r5, r6
 8007578:	d11a      	bne.n	80075b0 <_printf_common+0xc8>
 800757a:	2000      	movs	r0, #0
 800757c:	e008      	b.n	8007590 <_printf_common+0xa8>
 800757e:	2301      	movs	r3, #1
 8007580:	4652      	mov	r2, sl
 8007582:	4641      	mov	r1, r8
 8007584:	4638      	mov	r0, r7
 8007586:	47c8      	blx	r9
 8007588:	3001      	adds	r0, #1
 800758a:	d103      	bne.n	8007594 <_printf_common+0xac>
 800758c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007594:	3501      	adds	r5, #1
 8007596:	e7c6      	b.n	8007526 <_printf_common+0x3e>
 8007598:	18e1      	adds	r1, r4, r3
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	2030      	movs	r0, #48	@ 0x30
 800759e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075a2:	4422      	add	r2, r4
 80075a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075ac:	3302      	adds	r3, #2
 80075ae:	e7c7      	b.n	8007540 <_printf_common+0x58>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4622      	mov	r2, r4
 80075b4:	4641      	mov	r1, r8
 80075b6:	4638      	mov	r0, r7
 80075b8:	47c8      	blx	r9
 80075ba:	3001      	adds	r0, #1
 80075bc:	d0e6      	beq.n	800758c <_printf_common+0xa4>
 80075be:	3601      	adds	r6, #1
 80075c0:	e7d9      	b.n	8007576 <_printf_common+0x8e>
	...

080075c4 <_printf_i>:
 80075c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	7e0f      	ldrb	r7, [r1, #24]
 80075ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075cc:	2f78      	cmp	r7, #120	@ 0x78
 80075ce:	4691      	mov	r9, r2
 80075d0:	4680      	mov	r8, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	469a      	mov	sl, r3
 80075d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075da:	d807      	bhi.n	80075ec <_printf_i+0x28>
 80075dc:	2f62      	cmp	r7, #98	@ 0x62
 80075de:	d80a      	bhi.n	80075f6 <_printf_i+0x32>
 80075e0:	2f00      	cmp	r7, #0
 80075e2:	f000 80d2 	beq.w	800778a <_printf_i+0x1c6>
 80075e6:	2f58      	cmp	r7, #88	@ 0x58
 80075e8:	f000 80b9 	beq.w	800775e <_printf_i+0x19a>
 80075ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075f4:	e03a      	b.n	800766c <_printf_i+0xa8>
 80075f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075fa:	2b15      	cmp	r3, #21
 80075fc:	d8f6      	bhi.n	80075ec <_printf_i+0x28>
 80075fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007604 <_printf_i+0x40>)
 8007600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007604:	0800765d 	.word	0x0800765d
 8007608:	08007671 	.word	0x08007671
 800760c:	080075ed 	.word	0x080075ed
 8007610:	080075ed 	.word	0x080075ed
 8007614:	080075ed 	.word	0x080075ed
 8007618:	080075ed 	.word	0x080075ed
 800761c:	08007671 	.word	0x08007671
 8007620:	080075ed 	.word	0x080075ed
 8007624:	080075ed 	.word	0x080075ed
 8007628:	080075ed 	.word	0x080075ed
 800762c:	080075ed 	.word	0x080075ed
 8007630:	08007771 	.word	0x08007771
 8007634:	0800769b 	.word	0x0800769b
 8007638:	0800772b 	.word	0x0800772b
 800763c:	080075ed 	.word	0x080075ed
 8007640:	080075ed 	.word	0x080075ed
 8007644:	08007793 	.word	0x08007793
 8007648:	080075ed 	.word	0x080075ed
 800764c:	0800769b 	.word	0x0800769b
 8007650:	080075ed 	.word	0x080075ed
 8007654:	080075ed 	.word	0x080075ed
 8007658:	08007733 	.word	0x08007733
 800765c:	6833      	ldr	r3, [r6, #0]
 800765e:	1d1a      	adds	r2, r3, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6032      	str	r2, [r6, #0]
 8007664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800766c:	2301      	movs	r3, #1
 800766e:	e09d      	b.n	80077ac <_printf_i+0x1e8>
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	6820      	ldr	r0, [r4, #0]
 8007674:	1d19      	adds	r1, r3, #4
 8007676:	6031      	str	r1, [r6, #0]
 8007678:	0606      	lsls	r6, r0, #24
 800767a:	d501      	bpl.n	8007680 <_printf_i+0xbc>
 800767c:	681d      	ldr	r5, [r3, #0]
 800767e:	e003      	b.n	8007688 <_printf_i+0xc4>
 8007680:	0645      	lsls	r5, r0, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0xb8>
 8007684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007688:	2d00      	cmp	r5, #0
 800768a:	da03      	bge.n	8007694 <_printf_i+0xd0>
 800768c:	232d      	movs	r3, #45	@ 0x2d
 800768e:	426d      	negs	r5, r5
 8007690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007694:	4859      	ldr	r0, [pc, #356]	@ (80077fc <_printf_i+0x238>)
 8007696:	230a      	movs	r3, #10
 8007698:	e011      	b.n	80076be <_printf_i+0xfa>
 800769a:	6821      	ldr	r1, [r4, #0]
 800769c:	6833      	ldr	r3, [r6, #0]
 800769e:	0608      	lsls	r0, r1, #24
 80076a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80076a4:	d402      	bmi.n	80076ac <_printf_i+0xe8>
 80076a6:	0649      	lsls	r1, r1, #25
 80076a8:	bf48      	it	mi
 80076aa:	b2ad      	uxthmi	r5, r5
 80076ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80076ae:	4853      	ldr	r0, [pc, #332]	@ (80077fc <_printf_i+0x238>)
 80076b0:	6033      	str	r3, [r6, #0]
 80076b2:	bf14      	ite	ne
 80076b4:	230a      	movne	r3, #10
 80076b6:	2308      	moveq	r3, #8
 80076b8:	2100      	movs	r1, #0
 80076ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076be:	6866      	ldr	r6, [r4, #4]
 80076c0:	60a6      	str	r6, [r4, #8]
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	bfa2      	ittt	ge
 80076c6:	6821      	ldrge	r1, [r4, #0]
 80076c8:	f021 0104 	bicge.w	r1, r1, #4
 80076cc:	6021      	strge	r1, [r4, #0]
 80076ce:	b90d      	cbnz	r5, 80076d4 <_printf_i+0x110>
 80076d0:	2e00      	cmp	r6, #0
 80076d2:	d04b      	beq.n	800776c <_printf_i+0x1a8>
 80076d4:	4616      	mov	r6, r2
 80076d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80076da:	fb03 5711 	mls	r7, r3, r1, r5
 80076de:	5dc7      	ldrb	r7, [r0, r7]
 80076e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076e4:	462f      	mov	r7, r5
 80076e6:	42bb      	cmp	r3, r7
 80076e8:	460d      	mov	r5, r1
 80076ea:	d9f4      	bls.n	80076d6 <_printf_i+0x112>
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d10b      	bne.n	8007708 <_printf_i+0x144>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	07df      	lsls	r7, r3, #31
 80076f4:	d508      	bpl.n	8007708 <_printf_i+0x144>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6861      	ldr	r1, [r4, #4]
 80076fa:	4299      	cmp	r1, r3
 80076fc:	bfde      	ittt	le
 80076fe:	2330      	movle	r3, #48	@ 0x30
 8007700:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007704:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007708:	1b92      	subs	r2, r2, r6
 800770a:	6122      	str	r2, [r4, #16]
 800770c:	f8cd a000 	str.w	sl, [sp]
 8007710:	464b      	mov	r3, r9
 8007712:	aa03      	add	r2, sp, #12
 8007714:	4621      	mov	r1, r4
 8007716:	4640      	mov	r0, r8
 8007718:	f7ff fee6 	bl	80074e8 <_printf_common>
 800771c:	3001      	adds	r0, #1
 800771e:	d14a      	bne.n	80077b6 <_printf_i+0x1f2>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007724:	b004      	add	sp, #16
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	f043 0320 	orr.w	r3, r3, #32
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	4833      	ldr	r0, [pc, #204]	@ (8007800 <_printf_i+0x23c>)
 8007734:	2778      	movs	r7, #120	@ 0x78
 8007736:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	6831      	ldr	r1, [r6, #0]
 800773e:	061f      	lsls	r7, r3, #24
 8007740:	f851 5b04 	ldr.w	r5, [r1], #4
 8007744:	d402      	bmi.n	800774c <_printf_i+0x188>
 8007746:	065f      	lsls	r7, r3, #25
 8007748:	bf48      	it	mi
 800774a:	b2ad      	uxthmi	r5, r5
 800774c:	6031      	str	r1, [r6, #0]
 800774e:	07d9      	lsls	r1, r3, #31
 8007750:	bf44      	itt	mi
 8007752:	f043 0320 	orrmi.w	r3, r3, #32
 8007756:	6023      	strmi	r3, [r4, #0]
 8007758:	b11d      	cbz	r5, 8007762 <_printf_i+0x19e>
 800775a:	2310      	movs	r3, #16
 800775c:	e7ac      	b.n	80076b8 <_printf_i+0xf4>
 800775e:	4827      	ldr	r0, [pc, #156]	@ (80077fc <_printf_i+0x238>)
 8007760:	e7e9      	b.n	8007736 <_printf_i+0x172>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f023 0320 	bic.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	e7f6      	b.n	800775a <_printf_i+0x196>
 800776c:	4616      	mov	r6, r2
 800776e:	e7bd      	b.n	80076ec <_printf_i+0x128>
 8007770:	6833      	ldr	r3, [r6, #0]
 8007772:	6825      	ldr	r5, [r4, #0]
 8007774:	6961      	ldr	r1, [r4, #20]
 8007776:	1d18      	adds	r0, r3, #4
 8007778:	6030      	str	r0, [r6, #0]
 800777a:	062e      	lsls	r6, r5, #24
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	d501      	bpl.n	8007784 <_printf_i+0x1c0>
 8007780:	6019      	str	r1, [r3, #0]
 8007782:	e002      	b.n	800778a <_printf_i+0x1c6>
 8007784:	0668      	lsls	r0, r5, #25
 8007786:	d5fb      	bpl.n	8007780 <_printf_i+0x1bc>
 8007788:	8019      	strh	r1, [r3, #0]
 800778a:	2300      	movs	r3, #0
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	4616      	mov	r6, r2
 8007790:	e7bc      	b.n	800770c <_printf_i+0x148>
 8007792:	6833      	ldr	r3, [r6, #0]
 8007794:	1d1a      	adds	r2, r3, #4
 8007796:	6032      	str	r2, [r6, #0]
 8007798:	681e      	ldr	r6, [r3, #0]
 800779a:	6862      	ldr	r2, [r4, #4]
 800779c:	2100      	movs	r1, #0
 800779e:	4630      	mov	r0, r6
 80077a0:	f7f8 fd36 	bl	8000210 <memchr>
 80077a4:	b108      	cbz	r0, 80077aa <_printf_i+0x1e6>
 80077a6:	1b80      	subs	r0, r0, r6
 80077a8:	6060      	str	r0, [r4, #4]
 80077aa:	6863      	ldr	r3, [r4, #4]
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	2300      	movs	r3, #0
 80077b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077b4:	e7aa      	b.n	800770c <_printf_i+0x148>
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	4632      	mov	r2, r6
 80077ba:	4649      	mov	r1, r9
 80077bc:	4640      	mov	r0, r8
 80077be:	47d0      	blx	sl
 80077c0:	3001      	adds	r0, #1
 80077c2:	d0ad      	beq.n	8007720 <_printf_i+0x15c>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	079b      	lsls	r3, r3, #30
 80077c8:	d413      	bmi.n	80077f2 <_printf_i+0x22e>
 80077ca:	68e0      	ldr	r0, [r4, #12]
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	4298      	cmp	r0, r3
 80077d0:	bfb8      	it	lt
 80077d2:	4618      	movlt	r0, r3
 80077d4:	e7a6      	b.n	8007724 <_printf_i+0x160>
 80077d6:	2301      	movs	r3, #1
 80077d8:	4632      	mov	r2, r6
 80077da:	4649      	mov	r1, r9
 80077dc:	4640      	mov	r0, r8
 80077de:	47d0      	blx	sl
 80077e0:	3001      	adds	r0, #1
 80077e2:	d09d      	beq.n	8007720 <_printf_i+0x15c>
 80077e4:	3501      	adds	r5, #1
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	9903      	ldr	r1, [sp, #12]
 80077ea:	1a5b      	subs	r3, r3, r1
 80077ec:	42ab      	cmp	r3, r5
 80077ee:	dcf2      	bgt.n	80077d6 <_printf_i+0x212>
 80077f0:	e7eb      	b.n	80077ca <_printf_i+0x206>
 80077f2:	2500      	movs	r5, #0
 80077f4:	f104 0619 	add.w	r6, r4, #25
 80077f8:	e7f5      	b.n	80077e6 <_printf_i+0x222>
 80077fa:	bf00      	nop
 80077fc:	0800b7c2 	.word	0x0800b7c2
 8007800:	0800b7d3 	.word	0x0800b7d3

08007804 <std>:
 8007804:	2300      	movs	r3, #0
 8007806:	b510      	push	{r4, lr}
 8007808:	4604      	mov	r4, r0
 800780a:	e9c0 3300 	strd	r3, r3, [r0]
 800780e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007812:	6083      	str	r3, [r0, #8]
 8007814:	8181      	strh	r1, [r0, #12]
 8007816:	6643      	str	r3, [r0, #100]	@ 0x64
 8007818:	81c2      	strh	r2, [r0, #14]
 800781a:	6183      	str	r3, [r0, #24]
 800781c:	4619      	mov	r1, r3
 800781e:	2208      	movs	r2, #8
 8007820:	305c      	adds	r0, #92	@ 0x5c
 8007822:	f000 f8b1 	bl	8007988 <memset>
 8007826:	4b0d      	ldr	r3, [pc, #52]	@ (800785c <std+0x58>)
 8007828:	6263      	str	r3, [r4, #36]	@ 0x24
 800782a:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <std+0x5c>)
 800782c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800782e:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <std+0x60>)
 8007830:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007832:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <std+0x64>)
 8007834:	6323      	str	r3, [r4, #48]	@ 0x30
 8007836:	4b0d      	ldr	r3, [pc, #52]	@ (800786c <std+0x68>)
 8007838:	6224      	str	r4, [r4, #32]
 800783a:	429c      	cmp	r4, r3
 800783c:	d006      	beq.n	800784c <std+0x48>
 800783e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007842:	4294      	cmp	r4, r2
 8007844:	d002      	beq.n	800784c <std+0x48>
 8007846:	33d0      	adds	r3, #208	@ 0xd0
 8007848:	429c      	cmp	r4, r3
 800784a:	d105      	bne.n	8007858 <std+0x54>
 800784c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	f000 b8ce 	b.w	80079f4 <__retarget_lock_init_recursive>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	bf00      	nop
 800785c:	08009061 	.word	0x08009061
 8007860:	08009083 	.word	0x08009083
 8007864:	080090bb 	.word	0x080090bb
 8007868:	080090df 	.word	0x080090df
 800786c:	200003f4 	.word	0x200003f4

08007870 <stdio_exit_handler>:
 8007870:	4a02      	ldr	r2, [pc, #8]	@ (800787c <stdio_exit_handler+0xc>)
 8007872:	4903      	ldr	r1, [pc, #12]	@ (8007880 <stdio_exit_handler+0x10>)
 8007874:	4803      	ldr	r0, [pc, #12]	@ (8007884 <stdio_exit_handler+0x14>)
 8007876:	f000 b869 	b.w	800794c <_fwalk_sglue>
 800787a:	bf00      	nop
 800787c:	20000014 	.word	0x20000014
 8007880:	080088f5 	.word	0x080088f5
 8007884:	20000024 	.word	0x20000024

08007888 <cleanup_stdio>:
 8007888:	6841      	ldr	r1, [r0, #4]
 800788a:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <cleanup_stdio+0x34>)
 800788c:	4299      	cmp	r1, r3
 800788e:	b510      	push	{r4, lr}
 8007890:	4604      	mov	r4, r0
 8007892:	d001      	beq.n	8007898 <cleanup_stdio+0x10>
 8007894:	f001 f82e 	bl	80088f4 <_fflush_r>
 8007898:	68a1      	ldr	r1, [r4, #8]
 800789a:	4b09      	ldr	r3, [pc, #36]	@ (80078c0 <cleanup_stdio+0x38>)
 800789c:	4299      	cmp	r1, r3
 800789e:	d002      	beq.n	80078a6 <cleanup_stdio+0x1e>
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 f827 	bl	80088f4 <_fflush_r>
 80078a6:	68e1      	ldr	r1, [r4, #12]
 80078a8:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <cleanup_stdio+0x3c>)
 80078aa:	4299      	cmp	r1, r3
 80078ac:	d004      	beq.n	80078b8 <cleanup_stdio+0x30>
 80078ae:	4620      	mov	r0, r4
 80078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b4:	f001 b81e 	b.w	80088f4 <_fflush_r>
 80078b8:	bd10      	pop	{r4, pc}
 80078ba:	bf00      	nop
 80078bc:	200003f4 	.word	0x200003f4
 80078c0:	2000045c 	.word	0x2000045c
 80078c4:	200004c4 	.word	0x200004c4

080078c8 <global_stdio_init.part.0>:
 80078c8:	b510      	push	{r4, lr}
 80078ca:	4b0b      	ldr	r3, [pc, #44]	@ (80078f8 <global_stdio_init.part.0+0x30>)
 80078cc:	4c0b      	ldr	r4, [pc, #44]	@ (80078fc <global_stdio_init.part.0+0x34>)
 80078ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007900 <global_stdio_init.part.0+0x38>)
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	4620      	mov	r0, r4
 80078d4:	2200      	movs	r2, #0
 80078d6:	2104      	movs	r1, #4
 80078d8:	f7ff ff94 	bl	8007804 <std>
 80078dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078e0:	2201      	movs	r2, #1
 80078e2:	2109      	movs	r1, #9
 80078e4:	f7ff ff8e 	bl	8007804 <std>
 80078e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078ec:	2202      	movs	r2, #2
 80078ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f2:	2112      	movs	r1, #18
 80078f4:	f7ff bf86 	b.w	8007804 <std>
 80078f8:	2000052c 	.word	0x2000052c
 80078fc:	200003f4 	.word	0x200003f4
 8007900:	08007871 	.word	0x08007871

08007904 <__sfp_lock_acquire>:
 8007904:	4801      	ldr	r0, [pc, #4]	@ (800790c <__sfp_lock_acquire+0x8>)
 8007906:	f000 b876 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	20000531 	.word	0x20000531

08007910 <__sfp_lock_release>:
 8007910:	4801      	ldr	r0, [pc, #4]	@ (8007918 <__sfp_lock_release+0x8>)
 8007912:	f000 b871 	b.w	80079f8 <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	20000531 	.word	0x20000531

0800791c <__sinit>:
 800791c:	b510      	push	{r4, lr}
 800791e:	4604      	mov	r4, r0
 8007920:	f7ff fff0 	bl	8007904 <__sfp_lock_acquire>
 8007924:	6a23      	ldr	r3, [r4, #32]
 8007926:	b11b      	cbz	r3, 8007930 <__sinit+0x14>
 8007928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800792c:	f7ff bff0 	b.w	8007910 <__sfp_lock_release>
 8007930:	4b04      	ldr	r3, [pc, #16]	@ (8007944 <__sinit+0x28>)
 8007932:	6223      	str	r3, [r4, #32]
 8007934:	4b04      	ldr	r3, [pc, #16]	@ (8007948 <__sinit+0x2c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f5      	bne.n	8007928 <__sinit+0xc>
 800793c:	f7ff ffc4 	bl	80078c8 <global_stdio_init.part.0>
 8007940:	e7f2      	b.n	8007928 <__sinit+0xc>
 8007942:	bf00      	nop
 8007944:	08007889 	.word	0x08007889
 8007948:	2000052c 	.word	0x2000052c

0800794c <_fwalk_sglue>:
 800794c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007950:	4607      	mov	r7, r0
 8007952:	4688      	mov	r8, r1
 8007954:	4614      	mov	r4, r2
 8007956:	2600      	movs	r6, #0
 8007958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800795c:	f1b9 0901 	subs.w	r9, r9, #1
 8007960:	d505      	bpl.n	800796e <_fwalk_sglue+0x22>
 8007962:	6824      	ldr	r4, [r4, #0]
 8007964:	2c00      	cmp	r4, #0
 8007966:	d1f7      	bne.n	8007958 <_fwalk_sglue+0xc>
 8007968:	4630      	mov	r0, r6
 800796a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800796e:	89ab      	ldrh	r3, [r5, #12]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d907      	bls.n	8007984 <_fwalk_sglue+0x38>
 8007974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007978:	3301      	adds	r3, #1
 800797a:	d003      	beq.n	8007984 <_fwalk_sglue+0x38>
 800797c:	4629      	mov	r1, r5
 800797e:	4638      	mov	r0, r7
 8007980:	47c0      	blx	r8
 8007982:	4306      	orrs	r6, r0
 8007984:	3568      	adds	r5, #104	@ 0x68
 8007986:	e7e9      	b.n	800795c <_fwalk_sglue+0x10>

08007988 <memset>:
 8007988:	4402      	add	r2, r0
 800798a:	4603      	mov	r3, r0
 800798c:	4293      	cmp	r3, r2
 800798e:	d100      	bne.n	8007992 <memset+0xa>
 8007990:	4770      	bx	lr
 8007992:	f803 1b01 	strb.w	r1, [r3], #1
 8007996:	e7f9      	b.n	800798c <memset+0x4>

08007998 <_localeconv_r>:
 8007998:	4800      	ldr	r0, [pc, #0]	@ (800799c <_localeconv_r+0x4>)
 800799a:	4770      	bx	lr
 800799c:	20000160 	.word	0x20000160

080079a0 <__errno>:
 80079a0:	4b01      	ldr	r3, [pc, #4]	@ (80079a8 <__errno+0x8>)
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000020 	.word	0x20000020

080079ac <__libc_init_array>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	4d0d      	ldr	r5, [pc, #52]	@ (80079e4 <__libc_init_array+0x38>)
 80079b0:	4c0d      	ldr	r4, [pc, #52]	@ (80079e8 <__libc_init_array+0x3c>)
 80079b2:	1b64      	subs	r4, r4, r5
 80079b4:	10a4      	asrs	r4, r4, #2
 80079b6:	2600      	movs	r6, #0
 80079b8:	42a6      	cmp	r6, r4
 80079ba:	d109      	bne.n	80079d0 <__libc_init_array+0x24>
 80079bc:	4d0b      	ldr	r5, [pc, #44]	@ (80079ec <__libc_init_array+0x40>)
 80079be:	4c0c      	ldr	r4, [pc, #48]	@ (80079f0 <__libc_init_array+0x44>)
 80079c0:	f003 fed2 	bl	800b768 <_init>
 80079c4:	1b64      	subs	r4, r4, r5
 80079c6:	10a4      	asrs	r4, r4, #2
 80079c8:	2600      	movs	r6, #0
 80079ca:	42a6      	cmp	r6, r4
 80079cc:	d105      	bne.n	80079da <__libc_init_array+0x2e>
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d4:	4798      	blx	r3
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7ee      	b.n	80079b8 <__libc_init_array+0xc>
 80079da:	f855 3b04 	ldr.w	r3, [r5], #4
 80079de:	4798      	blx	r3
 80079e0:	3601      	adds	r6, #1
 80079e2:	e7f2      	b.n	80079ca <__libc_init_array+0x1e>
 80079e4:	0800bd30 	.word	0x0800bd30
 80079e8:	0800bd30 	.word	0x0800bd30
 80079ec:	0800bd30 	.word	0x0800bd30
 80079f0:	0800bd34 	.word	0x0800bd34

080079f4 <__retarget_lock_init_recursive>:
 80079f4:	4770      	bx	lr

080079f6 <__retarget_lock_acquire_recursive>:
 80079f6:	4770      	bx	lr

080079f8 <__retarget_lock_release_recursive>:
 80079f8:	4770      	bx	lr

080079fa <quorem>:
 80079fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fe:	6903      	ldr	r3, [r0, #16]
 8007a00:	690c      	ldr	r4, [r1, #16]
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	4607      	mov	r7, r0
 8007a06:	db7e      	blt.n	8007b06 <quorem+0x10c>
 8007a08:	3c01      	subs	r4, #1
 8007a0a:	f101 0814 	add.w	r8, r1, #20
 8007a0e:	00a3      	lsls	r3, r4, #2
 8007a10:	f100 0514 	add.w	r5, r0, #20
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a24:	3301      	adds	r3, #1
 8007a26:	429a      	cmp	r2, r3
 8007a28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a30:	d32e      	bcc.n	8007a90 <quorem+0x96>
 8007a32:	f04f 0a00 	mov.w	sl, #0
 8007a36:	46c4      	mov	ip, r8
 8007a38:	46ae      	mov	lr, r5
 8007a3a:	46d3      	mov	fp, sl
 8007a3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a40:	b298      	uxth	r0, r3
 8007a42:	fb06 a000 	mla	r0, r6, r0, sl
 8007a46:	0c02      	lsrs	r2, r0, #16
 8007a48:	0c1b      	lsrs	r3, r3, #16
 8007a4a:	fb06 2303 	mla	r3, r6, r3, r2
 8007a4e:	f8de 2000 	ldr.w	r2, [lr]
 8007a52:	b280      	uxth	r0, r0
 8007a54:	b292      	uxth	r2, r2
 8007a56:	1a12      	subs	r2, r2, r0
 8007a58:	445a      	add	r2, fp
 8007a5a:	f8de 0000 	ldr.w	r0, [lr]
 8007a5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a6c:	b292      	uxth	r2, r2
 8007a6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a72:	45e1      	cmp	r9, ip
 8007a74:	f84e 2b04 	str.w	r2, [lr], #4
 8007a78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a7c:	d2de      	bcs.n	8007a3c <quorem+0x42>
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	58eb      	ldr	r3, [r5, r3]
 8007a82:	b92b      	cbnz	r3, 8007a90 <quorem+0x96>
 8007a84:	9b01      	ldr	r3, [sp, #4]
 8007a86:	3b04      	subs	r3, #4
 8007a88:	429d      	cmp	r5, r3
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	d32f      	bcc.n	8007aee <quorem+0xf4>
 8007a8e:	613c      	str	r4, [r7, #16]
 8007a90:	4638      	mov	r0, r7
 8007a92:	f001 f9dd 	bl	8008e50 <__mcmp>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	db25      	blt.n	8007ae6 <quorem+0xec>
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007aa2:	f8d1 c000 	ldr.w	ip, [r1]
 8007aa6:	fa1f fe82 	uxth.w	lr, r2
 8007aaa:	fa1f f38c 	uxth.w	r3, ip
 8007aae:	eba3 030e 	sub.w	r3, r3, lr
 8007ab2:	4403      	add	r3, r0
 8007ab4:	0c12      	lsrs	r2, r2, #16
 8007ab6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007aba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ac4:	45c1      	cmp	r9, r8
 8007ac6:	f841 3b04 	str.w	r3, [r1], #4
 8007aca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ace:	d2e6      	bcs.n	8007a9e <quorem+0xa4>
 8007ad0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ad8:	b922      	cbnz	r2, 8007ae4 <quorem+0xea>
 8007ada:	3b04      	subs	r3, #4
 8007adc:	429d      	cmp	r5, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	d30b      	bcc.n	8007afa <quorem+0x100>
 8007ae2:	613c      	str	r4, [r7, #16]
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	b003      	add	sp, #12
 8007aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d1cb      	bne.n	8007a8e <quorem+0x94>
 8007af6:	3c01      	subs	r4, #1
 8007af8:	e7c6      	b.n	8007a88 <quorem+0x8e>
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	3b04      	subs	r3, #4
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	d1ef      	bne.n	8007ae2 <quorem+0xe8>
 8007b02:	3c01      	subs	r4, #1
 8007b04:	e7ea      	b.n	8007adc <quorem+0xe2>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e7ee      	b.n	8007ae8 <quorem+0xee>
 8007b0a:	0000      	movs	r0, r0
 8007b0c:	0000      	movs	r0, r0
	...

08007b10 <_dtoa_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	69c7      	ldr	r7, [r0, #28]
 8007b16:	b099      	sub	sp, #100	@ 0x64
 8007b18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b1c:	ec55 4b10 	vmov	r4, r5, d0
 8007b20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007b22:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b24:	4683      	mov	fp, r0
 8007b26:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b2a:	b97f      	cbnz	r7, 8007b4c <_dtoa_r+0x3c>
 8007b2c:	2010      	movs	r0, #16
 8007b2e:	f000 fdb3 	bl	8008698 <malloc>
 8007b32:	4602      	mov	r2, r0
 8007b34:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b38:	b920      	cbnz	r0, 8007b44 <_dtoa_r+0x34>
 8007b3a:	4ba7      	ldr	r3, [pc, #668]	@ (8007dd8 <_dtoa_r+0x2c8>)
 8007b3c:	21ef      	movs	r1, #239	@ 0xef
 8007b3e:	48a7      	ldr	r0, [pc, #668]	@ (8007ddc <_dtoa_r+0x2cc>)
 8007b40:	f001 fb36 	bl	80091b0 <__assert_func>
 8007b44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b48:	6007      	str	r7, [r0, #0]
 8007b4a:	60c7      	str	r7, [r0, #12]
 8007b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b50:	6819      	ldr	r1, [r3, #0]
 8007b52:	b159      	cbz	r1, 8007b6c <_dtoa_r+0x5c>
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	604a      	str	r2, [r1, #4]
 8007b58:	2301      	movs	r3, #1
 8007b5a:	4093      	lsls	r3, r2
 8007b5c:	608b      	str	r3, [r1, #8]
 8007b5e:	4658      	mov	r0, fp
 8007b60:	f000 ff3c 	bl	80089dc <_Bfree>
 8007b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	1e2b      	subs	r3, r5, #0
 8007b6e:	bfb9      	ittee	lt
 8007b70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b74:	9303      	strlt	r3, [sp, #12]
 8007b76:	2300      	movge	r3, #0
 8007b78:	6033      	strge	r3, [r6, #0]
 8007b7a:	9f03      	ldr	r7, [sp, #12]
 8007b7c:	4b98      	ldr	r3, [pc, #608]	@ (8007de0 <_dtoa_r+0x2d0>)
 8007b7e:	bfbc      	itt	lt
 8007b80:	2201      	movlt	r2, #1
 8007b82:	6032      	strlt	r2, [r6, #0]
 8007b84:	43bb      	bics	r3, r7
 8007b86:	d112      	bne.n	8007bae <_dtoa_r+0x9e>
 8007b88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b94:	4323      	orrs	r3, r4
 8007b96:	f000 854d 	beq.w	8008634 <_dtoa_r+0xb24>
 8007b9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007df4 <_dtoa_r+0x2e4>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 854f 	beq.w	8008644 <_dtoa_r+0xb34>
 8007ba6:	f10a 0303 	add.w	r3, sl, #3
 8007baa:	f000 bd49 	b.w	8008640 <_dtoa_r+0xb30>
 8007bae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	ec51 0b17 	vmov	r0, r1, d7
 8007bb8:	2300      	movs	r3, #0
 8007bba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007bbe:	f7f8 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	b158      	cbz	r0, 8007bde <_dtoa_r+0xce>
 8007bc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007bc8:	2301      	movs	r3, #1
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bce:	b113      	cbz	r3, 8007bd6 <_dtoa_r+0xc6>
 8007bd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007bd2:	4b84      	ldr	r3, [pc, #528]	@ (8007de4 <_dtoa_r+0x2d4>)
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007df8 <_dtoa_r+0x2e8>
 8007bda:	f000 bd33 	b.w	8008644 <_dtoa_r+0xb34>
 8007bde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007be2:	aa16      	add	r2, sp, #88	@ 0x58
 8007be4:	a917      	add	r1, sp, #92	@ 0x5c
 8007be6:	4658      	mov	r0, fp
 8007be8:	f001 f9e2 	bl	8008fb0 <__d2b>
 8007bec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	2e00      	cmp	r6, #0
 8007bf4:	d077      	beq.n	8007ce6 <_dtoa_r+0x1d6>
 8007bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c10:	4619      	mov	r1, r3
 8007c12:	2200      	movs	r2, #0
 8007c14:	4b74      	ldr	r3, [pc, #464]	@ (8007de8 <_dtoa_r+0x2d8>)
 8007c16:	f7f8 fb57 	bl	80002c8 <__aeabi_dsub>
 8007c1a:	a369      	add	r3, pc, #420	@ (adr r3, 8007dc0 <_dtoa_r+0x2b0>)
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f7f8 fd0a 	bl	8000638 <__aeabi_dmul>
 8007c24:	a368      	add	r3, pc, #416	@ (adr r3, 8007dc8 <_dtoa_r+0x2b8>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f7f8 fb4f 	bl	80002cc <__adddf3>
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4630      	mov	r0, r6
 8007c32:	460d      	mov	r5, r1
 8007c34:	f7f8 fc96 	bl	8000564 <__aeabi_i2d>
 8007c38:	a365      	add	r3, pc, #404	@ (adr r3, 8007dd0 <_dtoa_r+0x2c0>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fcfb 	bl	8000638 <__aeabi_dmul>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4620      	mov	r0, r4
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7f8 fb3f 	bl	80002cc <__adddf3>
 8007c4e:	4604      	mov	r4, r0
 8007c50:	460d      	mov	r5, r1
 8007c52:	f7f8 ffa1 	bl	8000b98 <__aeabi_d2iz>
 8007c56:	2200      	movs	r2, #0
 8007c58:	4607      	mov	r7, r0
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f7f8 ff5c 	bl	8000b1c <__aeabi_dcmplt>
 8007c64:	b140      	cbz	r0, 8007c78 <_dtoa_r+0x168>
 8007c66:	4638      	mov	r0, r7
 8007c68:	f7f8 fc7c 	bl	8000564 <__aeabi_i2d>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 ff4a 	bl	8000b08 <__aeabi_dcmpeq>
 8007c74:	b900      	cbnz	r0, 8007c78 <_dtoa_r+0x168>
 8007c76:	3f01      	subs	r7, #1
 8007c78:	2f16      	cmp	r7, #22
 8007c7a:	d851      	bhi.n	8007d20 <_dtoa_r+0x210>
 8007c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8007dec <_dtoa_r+0x2dc>)
 8007c7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c8a:	f7f8 ff47 	bl	8000b1c <__aeabi_dcmplt>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d048      	beq.n	8007d24 <_dtoa_r+0x214>
 8007c92:	3f01      	subs	r7, #1
 8007c94:	2300      	movs	r3, #0
 8007c96:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c9a:	1b9b      	subs	r3, r3, r6
 8007c9c:	1e5a      	subs	r2, r3, #1
 8007c9e:	bf44      	itt	mi
 8007ca0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007ca4:	2300      	movmi	r3, #0
 8007ca6:	9208      	str	r2, [sp, #32]
 8007ca8:	bf54      	ite	pl
 8007caa:	f04f 0800 	movpl.w	r8, #0
 8007cae:	9308      	strmi	r3, [sp, #32]
 8007cb0:	2f00      	cmp	r7, #0
 8007cb2:	db39      	blt.n	8007d28 <_dtoa_r+0x218>
 8007cb4:	9b08      	ldr	r3, [sp, #32]
 8007cb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007cb8:	443b      	add	r3, r7
 8007cba:	9308      	str	r3, [sp, #32]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc2:	2b09      	cmp	r3, #9
 8007cc4:	d864      	bhi.n	8007d90 <_dtoa_r+0x280>
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	bfc4      	itt	gt
 8007cca:	3b04      	subgt	r3, #4
 8007ccc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd0:	f1a3 0302 	sub.w	r3, r3, #2
 8007cd4:	bfcc      	ite	gt
 8007cd6:	2400      	movgt	r4, #0
 8007cd8:	2401      	movle	r4, #1
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d863      	bhi.n	8007da6 <_dtoa_r+0x296>
 8007cde:	e8df f003 	tbb	[pc, r3]
 8007ce2:	372a      	.short	0x372a
 8007ce4:	5535      	.short	0x5535
 8007ce6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007cea:	441e      	add	r6, r3
 8007cec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	bfc1      	itttt	gt
 8007cf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cf8:	409f      	lslgt	r7, r3
 8007cfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d02:	bfd6      	itet	le
 8007d04:	f1c3 0320 	rsble	r3, r3, #32
 8007d08:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d0c:	fa04 f003 	lslle.w	r0, r4, r3
 8007d10:	f7f8 fc18 	bl	8000544 <__aeabi_ui2d>
 8007d14:	2201      	movs	r2, #1
 8007d16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d1a:	3e01      	subs	r6, #1
 8007d1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007d1e:	e777      	b.n	8007c10 <_dtoa_r+0x100>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e7b8      	b.n	8007c96 <_dtoa_r+0x186>
 8007d24:	9012      	str	r0, [sp, #72]	@ 0x48
 8007d26:	e7b7      	b.n	8007c98 <_dtoa_r+0x188>
 8007d28:	427b      	negs	r3, r7
 8007d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	eba8 0807 	sub.w	r8, r8, r7
 8007d32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d34:	e7c4      	b.n	8007cc0 <_dtoa_r+0x1b0>
 8007d36:	2300      	movs	r3, #0
 8007d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dc35      	bgt.n	8007dac <_dtoa_r+0x29c>
 8007d40:	2301      	movs	r3, #1
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	9307      	str	r3, [sp, #28]
 8007d46:	461a      	mov	r2, r3
 8007d48:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d4a:	e00b      	b.n	8007d64 <_dtoa_r+0x254>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e7f3      	b.n	8007d38 <_dtoa_r+0x228>
 8007d50:	2300      	movs	r3, #0
 8007d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d56:	18fb      	adds	r3, r7, r3
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	bfb8      	it	lt
 8007d62:	2301      	movlt	r3, #1
 8007d64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	f102 0514 	add.w	r5, r2, #20
 8007d70:	429d      	cmp	r5, r3
 8007d72:	d91f      	bls.n	8007db4 <_dtoa_r+0x2a4>
 8007d74:	6041      	str	r1, [r0, #4]
 8007d76:	4658      	mov	r0, fp
 8007d78:	f000 fdf0 	bl	800895c <_Balloc>
 8007d7c:	4682      	mov	sl, r0
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d13c      	bne.n	8007dfc <_dtoa_r+0x2ec>
 8007d82:	4b1b      	ldr	r3, [pc, #108]	@ (8007df0 <_dtoa_r+0x2e0>)
 8007d84:	4602      	mov	r2, r0
 8007d86:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d8a:	e6d8      	b.n	8007b3e <_dtoa_r+0x2e>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e7e0      	b.n	8007d52 <_dtoa_r+0x242>
 8007d90:	2401      	movs	r4, #1
 8007d92:	2300      	movs	r3, #0
 8007d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	9307      	str	r3, [sp, #28]
 8007da0:	2200      	movs	r2, #0
 8007da2:	2312      	movs	r3, #18
 8007da4:	e7d0      	b.n	8007d48 <_dtoa_r+0x238>
 8007da6:	2301      	movs	r3, #1
 8007da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007daa:	e7f5      	b.n	8007d98 <_dtoa_r+0x288>
 8007dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	9307      	str	r3, [sp, #28]
 8007db2:	e7d7      	b.n	8007d64 <_dtoa_r+0x254>
 8007db4:	3101      	adds	r1, #1
 8007db6:	0052      	lsls	r2, r2, #1
 8007db8:	e7d8      	b.n	8007d6c <_dtoa_r+0x25c>
 8007dba:	bf00      	nop
 8007dbc:	f3af 8000 	nop.w
 8007dc0:	636f4361 	.word	0x636f4361
 8007dc4:	3fd287a7 	.word	0x3fd287a7
 8007dc8:	8b60c8b3 	.word	0x8b60c8b3
 8007dcc:	3fc68a28 	.word	0x3fc68a28
 8007dd0:	509f79fb 	.word	0x509f79fb
 8007dd4:	3fd34413 	.word	0x3fd34413
 8007dd8:	0800b7f1 	.word	0x0800b7f1
 8007ddc:	0800b808 	.word	0x0800b808
 8007de0:	7ff00000 	.word	0x7ff00000
 8007de4:	0800b7c1 	.word	0x0800b7c1
 8007de8:	3ff80000 	.word	0x3ff80000
 8007dec:	0800b900 	.word	0x0800b900
 8007df0:	0800b860 	.word	0x0800b860
 8007df4:	0800b7ed 	.word	0x0800b7ed
 8007df8:	0800b7c0 	.word	0x0800b7c0
 8007dfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e00:	6018      	str	r0, [r3, #0]
 8007e02:	9b07      	ldr	r3, [sp, #28]
 8007e04:	2b0e      	cmp	r3, #14
 8007e06:	f200 80a4 	bhi.w	8007f52 <_dtoa_r+0x442>
 8007e0a:	2c00      	cmp	r4, #0
 8007e0c:	f000 80a1 	beq.w	8007f52 <_dtoa_r+0x442>
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	dd33      	ble.n	8007e7c <_dtoa_r+0x36c>
 8007e14:	4bad      	ldr	r3, [pc, #692]	@ (80080cc <_dtoa_r+0x5bc>)
 8007e16:	f007 020f 	and.w	r2, r7, #15
 8007e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e1e:	ed93 7b00 	vldr	d7, [r3]
 8007e22:	05f8      	lsls	r0, r7, #23
 8007e24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e2c:	d516      	bpl.n	8007e5c <_dtoa_r+0x34c>
 8007e2e:	4ba8      	ldr	r3, [pc, #672]	@ (80080d0 <_dtoa_r+0x5c0>)
 8007e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e38:	f7f8 fd28 	bl	800088c <__aeabi_ddiv>
 8007e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e40:	f004 040f 	and.w	r4, r4, #15
 8007e44:	2603      	movs	r6, #3
 8007e46:	4da2      	ldr	r5, [pc, #648]	@ (80080d0 <_dtoa_r+0x5c0>)
 8007e48:	b954      	cbnz	r4, 8007e60 <_dtoa_r+0x350>
 8007e4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e52:	f7f8 fd1b 	bl	800088c <__aeabi_ddiv>
 8007e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e5a:	e028      	b.n	8007eae <_dtoa_r+0x39e>
 8007e5c:	2602      	movs	r6, #2
 8007e5e:	e7f2      	b.n	8007e46 <_dtoa_r+0x336>
 8007e60:	07e1      	lsls	r1, r4, #31
 8007e62:	d508      	bpl.n	8007e76 <_dtoa_r+0x366>
 8007e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e6c:	f7f8 fbe4 	bl	8000638 <__aeabi_dmul>
 8007e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e74:	3601      	adds	r6, #1
 8007e76:	1064      	asrs	r4, r4, #1
 8007e78:	3508      	adds	r5, #8
 8007e7a:	e7e5      	b.n	8007e48 <_dtoa_r+0x338>
 8007e7c:	f000 80d2 	beq.w	8008024 <_dtoa_r+0x514>
 8007e80:	427c      	negs	r4, r7
 8007e82:	4b92      	ldr	r3, [pc, #584]	@ (80080cc <_dtoa_r+0x5bc>)
 8007e84:	4d92      	ldr	r5, [pc, #584]	@ (80080d0 <_dtoa_r+0x5c0>)
 8007e86:	f004 020f 	and.w	r2, r4, #15
 8007e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e96:	f7f8 fbcf 	bl	8000638 <__aeabi_dmul>
 8007e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e9e:	1124      	asrs	r4, r4, #4
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2602      	movs	r6, #2
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	f040 80b2 	bne.w	800800e <_dtoa_r+0x4fe>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1d3      	bne.n	8007e56 <_dtoa_r+0x346>
 8007eae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007eb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80b7 	beq.w	8008028 <_dtoa_r+0x518>
 8007eba:	4b86      	ldr	r3, [pc, #536]	@ (80080d4 <_dtoa_r+0x5c4>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7f8 fe2b 	bl	8000b1c <__aeabi_dcmplt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f000 80ae 	beq.w	8008028 <_dtoa_r+0x518>
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80aa 	beq.w	8008028 <_dtoa_r+0x518>
 8007ed4:	9b00      	ldr	r3, [sp, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dd37      	ble.n	8007f4a <_dtoa_r+0x43a>
 8007eda:	1e7b      	subs	r3, r7, #1
 8007edc:	9304      	str	r3, [sp, #16]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4b7d      	ldr	r3, [pc, #500]	@ (80080d8 <_dtoa_r+0x5c8>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	f7f8 fba7 	bl	8000638 <__aeabi_dmul>
 8007eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eee:	9c00      	ldr	r4, [sp, #0]
 8007ef0:	3601      	adds	r6, #1
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7f8 fb36 	bl	8000564 <__aeabi_i2d>
 8007ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007efc:	f7f8 fb9c 	bl	8000638 <__aeabi_dmul>
 8007f00:	4b76      	ldr	r3, [pc, #472]	@ (80080dc <_dtoa_r+0x5cc>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	f7f8 f9e2 	bl	80002cc <__adddf3>
 8007f08:	4605      	mov	r5, r0
 8007f0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	f040 808d 	bne.w	800802e <_dtoa_r+0x51e>
 8007f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f18:	4b71      	ldr	r3, [pc, #452]	@ (80080e0 <_dtoa_r+0x5d0>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f7f8 f9d4 	bl	80002c8 <__aeabi_dsub>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f28:	462a      	mov	r2, r5
 8007f2a:	4633      	mov	r3, r6
 8007f2c:	f7f8 fe14 	bl	8000b58 <__aeabi_dcmpgt>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	f040 828b 	bne.w	800844c <_dtoa_r+0x93c>
 8007f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f3a:	462a      	mov	r2, r5
 8007f3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f40:	f7f8 fdec 	bl	8000b1c <__aeabi_dcmplt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f040 8128 	bne.w	800819a <_dtoa_r+0x68a>
 8007f4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f2c0 815a 	blt.w	800820e <_dtoa_r+0x6fe>
 8007f5a:	2f0e      	cmp	r7, #14
 8007f5c:	f300 8157 	bgt.w	800820e <_dtoa_r+0x6fe>
 8007f60:	4b5a      	ldr	r3, [pc, #360]	@ (80080cc <_dtoa_r+0x5bc>)
 8007f62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f66:	ed93 7b00 	vldr	d7, [r3]
 8007f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	ed8d 7b00 	vstr	d7, [sp]
 8007f72:	da03      	bge.n	8007f7c <_dtoa_r+0x46c>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f340 8101 	ble.w	800817e <_dtoa_r+0x66e>
 8007f7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f80:	4656      	mov	r6, sl
 8007f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f86:	4620      	mov	r0, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7f8 fc7f 	bl	800088c <__aeabi_ddiv>
 8007f8e:	f7f8 fe03 	bl	8000b98 <__aeabi_d2iz>
 8007f92:	4680      	mov	r8, r0
 8007f94:	f7f8 fae6 	bl	8000564 <__aeabi_i2d>
 8007f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f9c:	f7f8 fb4c 	bl	8000638 <__aeabi_dmul>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007fac:	f7f8 f98c 	bl	80002c8 <__aeabi_dsub>
 8007fb0:	f806 4b01 	strb.w	r4, [r6], #1
 8007fb4:	9d07      	ldr	r5, [sp, #28]
 8007fb6:	eba6 040a 	sub.w	r4, r6, sl
 8007fba:	42a5      	cmp	r5, r4
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	f040 8117 	bne.w	80081f2 <_dtoa_r+0x6e2>
 8007fc4:	f7f8 f982 	bl	80002cc <__adddf3>
 8007fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fcc:	4604      	mov	r4, r0
 8007fce:	460d      	mov	r5, r1
 8007fd0:	f7f8 fdc2 	bl	8000b58 <__aeabi_dcmpgt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f040 80f9 	bne.w	80081cc <_dtoa_r+0x6bc>
 8007fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 fd91 	bl	8000b08 <__aeabi_dcmpeq>
 8007fe6:	b118      	cbz	r0, 8007ff0 <_dtoa_r+0x4e0>
 8007fe8:	f018 0f01 	tst.w	r8, #1
 8007fec:	f040 80ee 	bne.w	80081cc <_dtoa_r+0x6bc>
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	4658      	mov	r0, fp
 8007ff4:	f000 fcf2 	bl	80089dc <_Bfree>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	7033      	strb	r3, [r6, #0]
 8007ffc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ffe:	3701      	adds	r7, #1
 8008000:	601f      	str	r7, [r3, #0]
 8008002:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 831d 	beq.w	8008644 <_dtoa_r+0xb34>
 800800a:	601e      	str	r6, [r3, #0]
 800800c:	e31a      	b.n	8008644 <_dtoa_r+0xb34>
 800800e:	07e2      	lsls	r2, r4, #31
 8008010:	d505      	bpl.n	800801e <_dtoa_r+0x50e>
 8008012:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008016:	f7f8 fb0f 	bl	8000638 <__aeabi_dmul>
 800801a:	3601      	adds	r6, #1
 800801c:	2301      	movs	r3, #1
 800801e:	1064      	asrs	r4, r4, #1
 8008020:	3508      	adds	r5, #8
 8008022:	e73f      	b.n	8007ea4 <_dtoa_r+0x394>
 8008024:	2602      	movs	r6, #2
 8008026:	e742      	b.n	8007eae <_dtoa_r+0x39e>
 8008028:	9c07      	ldr	r4, [sp, #28]
 800802a:	9704      	str	r7, [sp, #16]
 800802c:	e761      	b.n	8007ef2 <_dtoa_r+0x3e2>
 800802e:	4b27      	ldr	r3, [pc, #156]	@ (80080cc <_dtoa_r+0x5bc>)
 8008030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008036:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800803a:	4454      	add	r4, sl
 800803c:	2900      	cmp	r1, #0
 800803e:	d053      	beq.n	80080e8 <_dtoa_r+0x5d8>
 8008040:	4928      	ldr	r1, [pc, #160]	@ (80080e4 <_dtoa_r+0x5d4>)
 8008042:	2000      	movs	r0, #0
 8008044:	f7f8 fc22 	bl	800088c <__aeabi_ddiv>
 8008048:	4633      	mov	r3, r6
 800804a:	462a      	mov	r2, r5
 800804c:	f7f8 f93c 	bl	80002c8 <__aeabi_dsub>
 8008050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008054:	4656      	mov	r6, sl
 8008056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800805a:	f7f8 fd9d 	bl	8000b98 <__aeabi_d2iz>
 800805e:	4605      	mov	r5, r0
 8008060:	f7f8 fa80 	bl	8000564 <__aeabi_i2d>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800806c:	f7f8 f92c 	bl	80002c8 <__aeabi_dsub>
 8008070:	3530      	adds	r5, #48	@ 0x30
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800807a:	f806 5b01 	strb.w	r5, [r6], #1
 800807e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008082:	f7f8 fd4b 	bl	8000b1c <__aeabi_dcmplt>
 8008086:	2800      	cmp	r0, #0
 8008088:	d171      	bne.n	800816e <_dtoa_r+0x65e>
 800808a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800808e:	4911      	ldr	r1, [pc, #68]	@ (80080d4 <_dtoa_r+0x5c4>)
 8008090:	2000      	movs	r0, #0
 8008092:	f7f8 f919 	bl	80002c8 <__aeabi_dsub>
 8008096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800809a:	f7f8 fd3f 	bl	8000b1c <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	f040 8095 	bne.w	80081ce <_dtoa_r+0x6be>
 80080a4:	42a6      	cmp	r6, r4
 80080a6:	f43f af50 	beq.w	8007f4a <_dtoa_r+0x43a>
 80080aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080ae:	4b0a      	ldr	r3, [pc, #40]	@ (80080d8 <_dtoa_r+0x5c8>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	f7f8 fac1 	bl	8000638 <__aeabi_dmul>
 80080b6:	4b08      	ldr	r3, [pc, #32]	@ (80080d8 <_dtoa_r+0x5c8>)
 80080b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080bc:	2200      	movs	r2, #0
 80080be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c2:	f7f8 fab9 	bl	8000638 <__aeabi_dmul>
 80080c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ca:	e7c4      	b.n	8008056 <_dtoa_r+0x546>
 80080cc:	0800b900 	.word	0x0800b900
 80080d0:	0800b8d8 	.word	0x0800b8d8
 80080d4:	3ff00000 	.word	0x3ff00000
 80080d8:	40240000 	.word	0x40240000
 80080dc:	401c0000 	.word	0x401c0000
 80080e0:	40140000 	.word	0x40140000
 80080e4:	3fe00000 	.word	0x3fe00000
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	f7f8 faa4 	bl	8000638 <__aeabi_dmul>
 80080f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80080f6:	4656      	mov	r6, sl
 80080f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080fc:	f7f8 fd4c 	bl	8000b98 <__aeabi_d2iz>
 8008100:	4605      	mov	r5, r0
 8008102:	f7f8 fa2f 	bl	8000564 <__aeabi_i2d>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810e:	f7f8 f8db 	bl	80002c8 <__aeabi_dsub>
 8008112:	3530      	adds	r5, #48	@ 0x30
 8008114:	f806 5b01 	strb.w	r5, [r6], #1
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	42a6      	cmp	r6, r4
 800811e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	d124      	bne.n	8008172 <_dtoa_r+0x662>
 8008128:	4bac      	ldr	r3, [pc, #688]	@ (80083dc <_dtoa_r+0x8cc>)
 800812a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800812e:	f7f8 f8cd 	bl	80002cc <__adddf3>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800813a:	f7f8 fd0d 	bl	8000b58 <__aeabi_dcmpgt>
 800813e:	2800      	cmp	r0, #0
 8008140:	d145      	bne.n	80081ce <_dtoa_r+0x6be>
 8008142:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008146:	49a5      	ldr	r1, [pc, #660]	@ (80083dc <_dtoa_r+0x8cc>)
 8008148:	2000      	movs	r0, #0
 800814a:	f7f8 f8bd 	bl	80002c8 <__aeabi_dsub>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008156:	f7f8 fce1 	bl	8000b1c <__aeabi_dcmplt>
 800815a:	2800      	cmp	r0, #0
 800815c:	f43f aef5 	beq.w	8007f4a <_dtoa_r+0x43a>
 8008160:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008162:	1e73      	subs	r3, r6, #1
 8008164:	9315      	str	r3, [sp, #84]	@ 0x54
 8008166:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800816a:	2b30      	cmp	r3, #48	@ 0x30
 800816c:	d0f8      	beq.n	8008160 <_dtoa_r+0x650>
 800816e:	9f04      	ldr	r7, [sp, #16]
 8008170:	e73e      	b.n	8007ff0 <_dtoa_r+0x4e0>
 8008172:	4b9b      	ldr	r3, [pc, #620]	@ (80083e0 <_dtoa_r+0x8d0>)
 8008174:	f7f8 fa60 	bl	8000638 <__aeabi_dmul>
 8008178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800817c:	e7bc      	b.n	80080f8 <_dtoa_r+0x5e8>
 800817e:	d10c      	bne.n	800819a <_dtoa_r+0x68a>
 8008180:	4b98      	ldr	r3, [pc, #608]	@ (80083e4 <_dtoa_r+0x8d4>)
 8008182:	2200      	movs	r2, #0
 8008184:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008188:	f7f8 fa56 	bl	8000638 <__aeabi_dmul>
 800818c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008190:	f7f8 fcd8 	bl	8000b44 <__aeabi_dcmpge>
 8008194:	2800      	cmp	r0, #0
 8008196:	f000 8157 	beq.w	8008448 <_dtoa_r+0x938>
 800819a:	2400      	movs	r4, #0
 800819c:	4625      	mov	r5, r4
 800819e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081a0:	43db      	mvns	r3, r3
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	4656      	mov	r6, sl
 80081a6:	2700      	movs	r7, #0
 80081a8:	4621      	mov	r1, r4
 80081aa:	4658      	mov	r0, fp
 80081ac:	f000 fc16 	bl	80089dc <_Bfree>
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	d0dc      	beq.n	800816e <_dtoa_r+0x65e>
 80081b4:	b12f      	cbz	r7, 80081c2 <_dtoa_r+0x6b2>
 80081b6:	42af      	cmp	r7, r5
 80081b8:	d003      	beq.n	80081c2 <_dtoa_r+0x6b2>
 80081ba:	4639      	mov	r1, r7
 80081bc:	4658      	mov	r0, fp
 80081be:	f000 fc0d 	bl	80089dc <_Bfree>
 80081c2:	4629      	mov	r1, r5
 80081c4:	4658      	mov	r0, fp
 80081c6:	f000 fc09 	bl	80089dc <_Bfree>
 80081ca:	e7d0      	b.n	800816e <_dtoa_r+0x65e>
 80081cc:	9704      	str	r7, [sp, #16]
 80081ce:	4633      	mov	r3, r6
 80081d0:	461e      	mov	r6, r3
 80081d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081d6:	2a39      	cmp	r2, #57	@ 0x39
 80081d8:	d107      	bne.n	80081ea <_dtoa_r+0x6da>
 80081da:	459a      	cmp	sl, r3
 80081dc:	d1f8      	bne.n	80081d0 <_dtoa_r+0x6c0>
 80081de:	9a04      	ldr	r2, [sp, #16]
 80081e0:	3201      	adds	r2, #1
 80081e2:	9204      	str	r2, [sp, #16]
 80081e4:	2230      	movs	r2, #48	@ 0x30
 80081e6:	f88a 2000 	strb.w	r2, [sl]
 80081ea:	781a      	ldrb	r2, [r3, #0]
 80081ec:	3201      	adds	r2, #1
 80081ee:	701a      	strb	r2, [r3, #0]
 80081f0:	e7bd      	b.n	800816e <_dtoa_r+0x65e>
 80081f2:	4b7b      	ldr	r3, [pc, #492]	@ (80083e0 <_dtoa_r+0x8d0>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	f7f8 fa1f 	bl	8000638 <__aeabi_dmul>
 80081fa:	2200      	movs	r2, #0
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	460d      	mov	r5, r1
 8008202:	f7f8 fc81 	bl	8000b08 <__aeabi_dcmpeq>
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f aebb 	beq.w	8007f82 <_dtoa_r+0x472>
 800820c:	e6f0      	b.n	8007ff0 <_dtoa_r+0x4e0>
 800820e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008210:	2a00      	cmp	r2, #0
 8008212:	f000 80db 	beq.w	80083cc <_dtoa_r+0x8bc>
 8008216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008218:	2a01      	cmp	r2, #1
 800821a:	f300 80bf 	bgt.w	800839c <_dtoa_r+0x88c>
 800821e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008220:	2a00      	cmp	r2, #0
 8008222:	f000 80b7 	beq.w	8008394 <_dtoa_r+0x884>
 8008226:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800822a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800822c:	4646      	mov	r6, r8
 800822e:	9a08      	ldr	r2, [sp, #32]
 8008230:	2101      	movs	r1, #1
 8008232:	441a      	add	r2, r3
 8008234:	4658      	mov	r0, fp
 8008236:	4498      	add	r8, r3
 8008238:	9208      	str	r2, [sp, #32]
 800823a:	f000 fc83 	bl	8008b44 <__i2b>
 800823e:	4605      	mov	r5, r0
 8008240:	b15e      	cbz	r6, 800825a <_dtoa_r+0x74a>
 8008242:	9b08      	ldr	r3, [sp, #32]
 8008244:	2b00      	cmp	r3, #0
 8008246:	dd08      	ble.n	800825a <_dtoa_r+0x74a>
 8008248:	42b3      	cmp	r3, r6
 800824a:	9a08      	ldr	r2, [sp, #32]
 800824c:	bfa8      	it	ge
 800824e:	4633      	movge	r3, r6
 8008250:	eba8 0803 	sub.w	r8, r8, r3
 8008254:	1af6      	subs	r6, r6, r3
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	9308      	str	r3, [sp, #32]
 800825a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825c:	b1f3      	cbz	r3, 800829c <_dtoa_r+0x78c>
 800825e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80b7 	beq.w	80083d4 <_dtoa_r+0x8c4>
 8008266:	b18c      	cbz	r4, 800828c <_dtoa_r+0x77c>
 8008268:	4629      	mov	r1, r5
 800826a:	4622      	mov	r2, r4
 800826c:	4658      	mov	r0, fp
 800826e:	f000 fd29 	bl	8008cc4 <__pow5mult>
 8008272:	464a      	mov	r2, r9
 8008274:	4601      	mov	r1, r0
 8008276:	4605      	mov	r5, r0
 8008278:	4658      	mov	r0, fp
 800827a:	f000 fc79 	bl	8008b70 <__multiply>
 800827e:	4649      	mov	r1, r9
 8008280:	9004      	str	r0, [sp, #16]
 8008282:	4658      	mov	r0, fp
 8008284:	f000 fbaa 	bl	80089dc <_Bfree>
 8008288:	9b04      	ldr	r3, [sp, #16]
 800828a:	4699      	mov	r9, r3
 800828c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800828e:	1b1a      	subs	r2, r3, r4
 8008290:	d004      	beq.n	800829c <_dtoa_r+0x78c>
 8008292:	4649      	mov	r1, r9
 8008294:	4658      	mov	r0, fp
 8008296:	f000 fd15 	bl	8008cc4 <__pow5mult>
 800829a:	4681      	mov	r9, r0
 800829c:	2101      	movs	r1, #1
 800829e:	4658      	mov	r0, fp
 80082a0:	f000 fc50 	bl	8008b44 <__i2b>
 80082a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082a6:	4604      	mov	r4, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 81cf 	beq.w	800864c <_dtoa_r+0xb3c>
 80082ae:	461a      	mov	r2, r3
 80082b0:	4601      	mov	r1, r0
 80082b2:	4658      	mov	r0, fp
 80082b4:	f000 fd06 	bl	8008cc4 <__pow5mult>
 80082b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	4604      	mov	r4, r0
 80082be:	f300 8095 	bgt.w	80083ec <_dtoa_r+0x8dc>
 80082c2:	9b02      	ldr	r3, [sp, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f040 8087 	bne.w	80083d8 <_dtoa_r+0x8c8>
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f040 8089 	bne.w	80083e8 <_dtoa_r+0x8d8>
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082dc:	0d1b      	lsrs	r3, r3, #20
 80082de:	051b      	lsls	r3, r3, #20
 80082e0:	b12b      	cbz	r3, 80082ee <_dtoa_r+0x7de>
 80082e2:	9b08      	ldr	r3, [sp, #32]
 80082e4:	3301      	adds	r3, #1
 80082e6:	9308      	str	r3, [sp, #32]
 80082e8:	f108 0801 	add.w	r8, r8, #1
 80082ec:	2301      	movs	r3, #1
 80082ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80082f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 81b0 	beq.w	8008658 <_dtoa_r+0xb48>
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082fe:	6918      	ldr	r0, [r3, #16]
 8008300:	f000 fbd4 	bl	8008aac <__hi0bits>
 8008304:	f1c0 0020 	rsb	r0, r0, #32
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	4418      	add	r0, r3
 800830c:	f010 001f 	ands.w	r0, r0, #31
 8008310:	d077      	beq.n	8008402 <_dtoa_r+0x8f2>
 8008312:	f1c0 0320 	rsb	r3, r0, #32
 8008316:	2b04      	cmp	r3, #4
 8008318:	dd6b      	ble.n	80083f2 <_dtoa_r+0x8e2>
 800831a:	9b08      	ldr	r3, [sp, #32]
 800831c:	f1c0 001c 	rsb	r0, r0, #28
 8008320:	4403      	add	r3, r0
 8008322:	4480      	add	r8, r0
 8008324:	4406      	add	r6, r0
 8008326:	9308      	str	r3, [sp, #32]
 8008328:	f1b8 0f00 	cmp.w	r8, #0
 800832c:	dd05      	ble.n	800833a <_dtoa_r+0x82a>
 800832e:	4649      	mov	r1, r9
 8008330:	4642      	mov	r2, r8
 8008332:	4658      	mov	r0, fp
 8008334:	f000 fd20 	bl	8008d78 <__lshift>
 8008338:	4681      	mov	r9, r0
 800833a:	9b08      	ldr	r3, [sp, #32]
 800833c:	2b00      	cmp	r3, #0
 800833e:	dd05      	ble.n	800834c <_dtoa_r+0x83c>
 8008340:	4621      	mov	r1, r4
 8008342:	461a      	mov	r2, r3
 8008344:	4658      	mov	r0, fp
 8008346:	f000 fd17 	bl	8008d78 <__lshift>
 800834a:	4604      	mov	r4, r0
 800834c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800834e:	2b00      	cmp	r3, #0
 8008350:	d059      	beq.n	8008406 <_dtoa_r+0x8f6>
 8008352:	4621      	mov	r1, r4
 8008354:	4648      	mov	r0, r9
 8008356:	f000 fd7b 	bl	8008e50 <__mcmp>
 800835a:	2800      	cmp	r0, #0
 800835c:	da53      	bge.n	8008406 <_dtoa_r+0x8f6>
 800835e:	1e7b      	subs	r3, r7, #1
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	4649      	mov	r1, r9
 8008364:	2300      	movs	r3, #0
 8008366:	220a      	movs	r2, #10
 8008368:	4658      	mov	r0, fp
 800836a:	f000 fb59 	bl	8008a20 <__multadd>
 800836e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008370:	4681      	mov	r9, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 8172 	beq.w	800865c <_dtoa_r+0xb4c>
 8008378:	2300      	movs	r3, #0
 800837a:	4629      	mov	r1, r5
 800837c:	220a      	movs	r2, #10
 800837e:	4658      	mov	r0, fp
 8008380:	f000 fb4e 	bl	8008a20 <__multadd>
 8008384:	9b00      	ldr	r3, [sp, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	4605      	mov	r5, r0
 800838a:	dc67      	bgt.n	800845c <_dtoa_r+0x94c>
 800838c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838e:	2b02      	cmp	r3, #2
 8008390:	dc41      	bgt.n	8008416 <_dtoa_r+0x906>
 8008392:	e063      	b.n	800845c <_dtoa_r+0x94c>
 8008394:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800839a:	e746      	b.n	800822a <_dtoa_r+0x71a>
 800839c:	9b07      	ldr	r3, [sp, #28]
 800839e:	1e5c      	subs	r4, r3, #1
 80083a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	bfbf      	itttt	lt
 80083a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80083a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80083aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80083ac:	1ae3      	sublt	r3, r4, r3
 80083ae:	bfb4      	ite	lt
 80083b0:	18d2      	addlt	r2, r2, r3
 80083b2:	1b1c      	subge	r4, r3, r4
 80083b4:	9b07      	ldr	r3, [sp, #28]
 80083b6:	bfbc      	itt	lt
 80083b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80083ba:	2400      	movlt	r4, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	bfb5      	itete	lt
 80083c0:	eba8 0603 	sublt.w	r6, r8, r3
 80083c4:	9b07      	ldrge	r3, [sp, #28]
 80083c6:	2300      	movlt	r3, #0
 80083c8:	4646      	movge	r6, r8
 80083ca:	e730      	b.n	800822e <_dtoa_r+0x71e>
 80083cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083d0:	4646      	mov	r6, r8
 80083d2:	e735      	b.n	8008240 <_dtoa_r+0x730>
 80083d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083d6:	e75c      	b.n	8008292 <_dtoa_r+0x782>
 80083d8:	2300      	movs	r3, #0
 80083da:	e788      	b.n	80082ee <_dtoa_r+0x7de>
 80083dc:	3fe00000 	.word	0x3fe00000
 80083e0:	40240000 	.word	0x40240000
 80083e4:	40140000 	.word	0x40140000
 80083e8:	9b02      	ldr	r3, [sp, #8]
 80083ea:	e780      	b.n	80082ee <_dtoa_r+0x7de>
 80083ec:	2300      	movs	r3, #0
 80083ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f0:	e782      	b.n	80082f8 <_dtoa_r+0x7e8>
 80083f2:	d099      	beq.n	8008328 <_dtoa_r+0x818>
 80083f4:	9a08      	ldr	r2, [sp, #32]
 80083f6:	331c      	adds	r3, #28
 80083f8:	441a      	add	r2, r3
 80083fa:	4498      	add	r8, r3
 80083fc:	441e      	add	r6, r3
 80083fe:	9208      	str	r2, [sp, #32]
 8008400:	e792      	b.n	8008328 <_dtoa_r+0x818>
 8008402:	4603      	mov	r3, r0
 8008404:	e7f6      	b.n	80083f4 <_dtoa_r+0x8e4>
 8008406:	9b07      	ldr	r3, [sp, #28]
 8008408:	9704      	str	r7, [sp, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	dc20      	bgt.n	8008450 <_dtoa_r+0x940>
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008412:	2b02      	cmp	r3, #2
 8008414:	dd1e      	ble.n	8008454 <_dtoa_r+0x944>
 8008416:	9b00      	ldr	r3, [sp, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f47f aec0 	bne.w	800819e <_dtoa_r+0x68e>
 800841e:	4621      	mov	r1, r4
 8008420:	2205      	movs	r2, #5
 8008422:	4658      	mov	r0, fp
 8008424:	f000 fafc 	bl	8008a20 <__multadd>
 8008428:	4601      	mov	r1, r0
 800842a:	4604      	mov	r4, r0
 800842c:	4648      	mov	r0, r9
 800842e:	f000 fd0f 	bl	8008e50 <__mcmp>
 8008432:	2800      	cmp	r0, #0
 8008434:	f77f aeb3 	ble.w	800819e <_dtoa_r+0x68e>
 8008438:	4656      	mov	r6, sl
 800843a:	2331      	movs	r3, #49	@ 0x31
 800843c:	f806 3b01 	strb.w	r3, [r6], #1
 8008440:	9b04      	ldr	r3, [sp, #16]
 8008442:	3301      	adds	r3, #1
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	e6ae      	b.n	80081a6 <_dtoa_r+0x696>
 8008448:	9c07      	ldr	r4, [sp, #28]
 800844a:	9704      	str	r7, [sp, #16]
 800844c:	4625      	mov	r5, r4
 800844e:	e7f3      	b.n	8008438 <_dtoa_r+0x928>
 8008450:	9b07      	ldr	r3, [sp, #28]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 8104 	beq.w	8008664 <_dtoa_r+0xb54>
 800845c:	2e00      	cmp	r6, #0
 800845e:	dd05      	ble.n	800846c <_dtoa_r+0x95c>
 8008460:	4629      	mov	r1, r5
 8008462:	4632      	mov	r2, r6
 8008464:	4658      	mov	r0, fp
 8008466:	f000 fc87 	bl	8008d78 <__lshift>
 800846a:	4605      	mov	r5, r0
 800846c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	d05a      	beq.n	8008528 <_dtoa_r+0xa18>
 8008472:	6869      	ldr	r1, [r5, #4]
 8008474:	4658      	mov	r0, fp
 8008476:	f000 fa71 	bl	800895c <_Balloc>
 800847a:	4606      	mov	r6, r0
 800847c:	b928      	cbnz	r0, 800848a <_dtoa_r+0x97a>
 800847e:	4b84      	ldr	r3, [pc, #528]	@ (8008690 <_dtoa_r+0xb80>)
 8008480:	4602      	mov	r2, r0
 8008482:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008486:	f7ff bb5a 	b.w	8007b3e <_dtoa_r+0x2e>
 800848a:	692a      	ldr	r2, [r5, #16]
 800848c:	3202      	adds	r2, #2
 800848e:	0092      	lsls	r2, r2, #2
 8008490:	f105 010c 	add.w	r1, r5, #12
 8008494:	300c      	adds	r0, #12
 8008496:	f000 fe7d 	bl	8009194 <memcpy>
 800849a:	2201      	movs	r2, #1
 800849c:	4631      	mov	r1, r6
 800849e:	4658      	mov	r0, fp
 80084a0:	f000 fc6a 	bl	8008d78 <__lshift>
 80084a4:	f10a 0301 	add.w	r3, sl, #1
 80084a8:	9307      	str	r3, [sp, #28]
 80084aa:	9b00      	ldr	r3, [sp, #0]
 80084ac:	4453      	add	r3, sl
 80084ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084b0:	9b02      	ldr	r3, [sp, #8]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	462f      	mov	r7, r5
 80084b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80084ba:	4605      	mov	r5, r0
 80084bc:	9b07      	ldr	r3, [sp, #28]
 80084be:	4621      	mov	r1, r4
 80084c0:	3b01      	subs	r3, #1
 80084c2:	4648      	mov	r0, r9
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	f7ff fa98 	bl	80079fa <quorem>
 80084ca:	4639      	mov	r1, r7
 80084cc:	9002      	str	r0, [sp, #8]
 80084ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084d2:	4648      	mov	r0, r9
 80084d4:	f000 fcbc 	bl	8008e50 <__mcmp>
 80084d8:	462a      	mov	r2, r5
 80084da:	9008      	str	r0, [sp, #32]
 80084dc:	4621      	mov	r1, r4
 80084de:	4658      	mov	r0, fp
 80084e0:	f000 fcd2 	bl	8008e88 <__mdiff>
 80084e4:	68c2      	ldr	r2, [r0, #12]
 80084e6:	4606      	mov	r6, r0
 80084e8:	bb02      	cbnz	r2, 800852c <_dtoa_r+0xa1c>
 80084ea:	4601      	mov	r1, r0
 80084ec:	4648      	mov	r0, r9
 80084ee:	f000 fcaf 	bl	8008e50 <__mcmp>
 80084f2:	4602      	mov	r2, r0
 80084f4:	4631      	mov	r1, r6
 80084f6:	4658      	mov	r0, fp
 80084f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80084fa:	f000 fa6f 	bl	80089dc <_Bfree>
 80084fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008500:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008502:	9e07      	ldr	r6, [sp, #28]
 8008504:	ea43 0102 	orr.w	r1, r3, r2
 8008508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800850a:	4319      	orrs	r1, r3
 800850c:	d110      	bne.n	8008530 <_dtoa_r+0xa20>
 800850e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008512:	d029      	beq.n	8008568 <_dtoa_r+0xa58>
 8008514:	9b08      	ldr	r3, [sp, #32]
 8008516:	2b00      	cmp	r3, #0
 8008518:	dd02      	ble.n	8008520 <_dtoa_r+0xa10>
 800851a:	9b02      	ldr	r3, [sp, #8]
 800851c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008520:	9b00      	ldr	r3, [sp, #0]
 8008522:	f883 8000 	strb.w	r8, [r3]
 8008526:	e63f      	b.n	80081a8 <_dtoa_r+0x698>
 8008528:	4628      	mov	r0, r5
 800852a:	e7bb      	b.n	80084a4 <_dtoa_r+0x994>
 800852c:	2201      	movs	r2, #1
 800852e:	e7e1      	b.n	80084f4 <_dtoa_r+0x9e4>
 8008530:	9b08      	ldr	r3, [sp, #32]
 8008532:	2b00      	cmp	r3, #0
 8008534:	db04      	blt.n	8008540 <_dtoa_r+0xa30>
 8008536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008538:	430b      	orrs	r3, r1
 800853a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800853c:	430b      	orrs	r3, r1
 800853e:	d120      	bne.n	8008582 <_dtoa_r+0xa72>
 8008540:	2a00      	cmp	r2, #0
 8008542:	dded      	ble.n	8008520 <_dtoa_r+0xa10>
 8008544:	4649      	mov	r1, r9
 8008546:	2201      	movs	r2, #1
 8008548:	4658      	mov	r0, fp
 800854a:	f000 fc15 	bl	8008d78 <__lshift>
 800854e:	4621      	mov	r1, r4
 8008550:	4681      	mov	r9, r0
 8008552:	f000 fc7d 	bl	8008e50 <__mcmp>
 8008556:	2800      	cmp	r0, #0
 8008558:	dc03      	bgt.n	8008562 <_dtoa_r+0xa52>
 800855a:	d1e1      	bne.n	8008520 <_dtoa_r+0xa10>
 800855c:	f018 0f01 	tst.w	r8, #1
 8008560:	d0de      	beq.n	8008520 <_dtoa_r+0xa10>
 8008562:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008566:	d1d8      	bne.n	800851a <_dtoa_r+0xa0a>
 8008568:	9a00      	ldr	r2, [sp, #0]
 800856a:	2339      	movs	r3, #57	@ 0x39
 800856c:	7013      	strb	r3, [r2, #0]
 800856e:	4633      	mov	r3, r6
 8008570:	461e      	mov	r6, r3
 8008572:	3b01      	subs	r3, #1
 8008574:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008578:	2a39      	cmp	r2, #57	@ 0x39
 800857a:	d052      	beq.n	8008622 <_dtoa_r+0xb12>
 800857c:	3201      	adds	r2, #1
 800857e:	701a      	strb	r2, [r3, #0]
 8008580:	e612      	b.n	80081a8 <_dtoa_r+0x698>
 8008582:	2a00      	cmp	r2, #0
 8008584:	dd07      	ble.n	8008596 <_dtoa_r+0xa86>
 8008586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800858a:	d0ed      	beq.n	8008568 <_dtoa_r+0xa58>
 800858c:	9a00      	ldr	r2, [sp, #0]
 800858e:	f108 0301 	add.w	r3, r8, #1
 8008592:	7013      	strb	r3, [r2, #0]
 8008594:	e608      	b.n	80081a8 <_dtoa_r+0x698>
 8008596:	9b07      	ldr	r3, [sp, #28]
 8008598:	9a07      	ldr	r2, [sp, #28]
 800859a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800859e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d028      	beq.n	80085f6 <_dtoa_r+0xae6>
 80085a4:	4649      	mov	r1, r9
 80085a6:	2300      	movs	r3, #0
 80085a8:	220a      	movs	r2, #10
 80085aa:	4658      	mov	r0, fp
 80085ac:	f000 fa38 	bl	8008a20 <__multadd>
 80085b0:	42af      	cmp	r7, r5
 80085b2:	4681      	mov	r9, r0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	f04f 020a 	mov.w	r2, #10
 80085bc:	4639      	mov	r1, r7
 80085be:	4658      	mov	r0, fp
 80085c0:	d107      	bne.n	80085d2 <_dtoa_r+0xac2>
 80085c2:	f000 fa2d 	bl	8008a20 <__multadd>
 80085c6:	4607      	mov	r7, r0
 80085c8:	4605      	mov	r5, r0
 80085ca:	9b07      	ldr	r3, [sp, #28]
 80085cc:	3301      	adds	r3, #1
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	e774      	b.n	80084bc <_dtoa_r+0x9ac>
 80085d2:	f000 fa25 	bl	8008a20 <__multadd>
 80085d6:	4629      	mov	r1, r5
 80085d8:	4607      	mov	r7, r0
 80085da:	2300      	movs	r3, #0
 80085dc:	220a      	movs	r2, #10
 80085de:	4658      	mov	r0, fp
 80085e0:	f000 fa1e 	bl	8008a20 <__multadd>
 80085e4:	4605      	mov	r5, r0
 80085e6:	e7f0      	b.n	80085ca <_dtoa_r+0xaba>
 80085e8:	9b00      	ldr	r3, [sp, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bfcc      	ite	gt
 80085ee:	461e      	movgt	r6, r3
 80085f0:	2601      	movle	r6, #1
 80085f2:	4456      	add	r6, sl
 80085f4:	2700      	movs	r7, #0
 80085f6:	4649      	mov	r1, r9
 80085f8:	2201      	movs	r2, #1
 80085fa:	4658      	mov	r0, fp
 80085fc:	f000 fbbc 	bl	8008d78 <__lshift>
 8008600:	4621      	mov	r1, r4
 8008602:	4681      	mov	r9, r0
 8008604:	f000 fc24 	bl	8008e50 <__mcmp>
 8008608:	2800      	cmp	r0, #0
 800860a:	dcb0      	bgt.n	800856e <_dtoa_r+0xa5e>
 800860c:	d102      	bne.n	8008614 <_dtoa_r+0xb04>
 800860e:	f018 0f01 	tst.w	r8, #1
 8008612:	d1ac      	bne.n	800856e <_dtoa_r+0xa5e>
 8008614:	4633      	mov	r3, r6
 8008616:	461e      	mov	r6, r3
 8008618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800861c:	2a30      	cmp	r2, #48	@ 0x30
 800861e:	d0fa      	beq.n	8008616 <_dtoa_r+0xb06>
 8008620:	e5c2      	b.n	80081a8 <_dtoa_r+0x698>
 8008622:	459a      	cmp	sl, r3
 8008624:	d1a4      	bne.n	8008570 <_dtoa_r+0xa60>
 8008626:	9b04      	ldr	r3, [sp, #16]
 8008628:	3301      	adds	r3, #1
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	2331      	movs	r3, #49	@ 0x31
 800862e:	f88a 3000 	strb.w	r3, [sl]
 8008632:	e5b9      	b.n	80081a8 <_dtoa_r+0x698>
 8008634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008636:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008694 <_dtoa_r+0xb84>
 800863a:	b11b      	cbz	r3, 8008644 <_dtoa_r+0xb34>
 800863c:	f10a 0308 	add.w	r3, sl, #8
 8008640:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	4650      	mov	r0, sl
 8008646:	b019      	add	sp, #100	@ 0x64
 8008648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864e:	2b01      	cmp	r3, #1
 8008650:	f77f ae37 	ble.w	80082c2 <_dtoa_r+0x7b2>
 8008654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008656:	930a      	str	r3, [sp, #40]	@ 0x28
 8008658:	2001      	movs	r0, #1
 800865a:	e655      	b.n	8008308 <_dtoa_r+0x7f8>
 800865c:	9b00      	ldr	r3, [sp, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f77f aed6 	ble.w	8008410 <_dtoa_r+0x900>
 8008664:	4656      	mov	r6, sl
 8008666:	4621      	mov	r1, r4
 8008668:	4648      	mov	r0, r9
 800866a:	f7ff f9c6 	bl	80079fa <quorem>
 800866e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008672:	f806 8b01 	strb.w	r8, [r6], #1
 8008676:	9b00      	ldr	r3, [sp, #0]
 8008678:	eba6 020a 	sub.w	r2, r6, sl
 800867c:	4293      	cmp	r3, r2
 800867e:	ddb3      	ble.n	80085e8 <_dtoa_r+0xad8>
 8008680:	4649      	mov	r1, r9
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	4658      	mov	r0, fp
 8008688:	f000 f9ca 	bl	8008a20 <__multadd>
 800868c:	4681      	mov	r9, r0
 800868e:	e7ea      	b.n	8008666 <_dtoa_r+0xb56>
 8008690:	0800b860 	.word	0x0800b860
 8008694:	0800b7e4 	.word	0x0800b7e4

08008698 <malloc>:
 8008698:	4b02      	ldr	r3, [pc, #8]	@ (80086a4 <malloc+0xc>)
 800869a:	4601      	mov	r1, r0
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f000 b825 	b.w	80086ec <_malloc_r>
 80086a2:	bf00      	nop
 80086a4:	20000020 	.word	0x20000020

080086a8 <sbrk_aligned>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4e0f      	ldr	r6, [pc, #60]	@ (80086e8 <sbrk_aligned+0x40>)
 80086ac:	460c      	mov	r4, r1
 80086ae:	6831      	ldr	r1, [r6, #0]
 80086b0:	4605      	mov	r5, r0
 80086b2:	b911      	cbnz	r1, 80086ba <sbrk_aligned+0x12>
 80086b4:	f000 fd4c 	bl	8009150 <_sbrk_r>
 80086b8:	6030      	str	r0, [r6, #0]
 80086ba:	4621      	mov	r1, r4
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 fd47 	bl	8009150 <_sbrk_r>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	d103      	bne.n	80086ce <sbrk_aligned+0x26>
 80086c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80086ca:	4620      	mov	r0, r4
 80086cc:	bd70      	pop	{r4, r5, r6, pc}
 80086ce:	1cc4      	adds	r4, r0, #3
 80086d0:	f024 0403 	bic.w	r4, r4, #3
 80086d4:	42a0      	cmp	r0, r4
 80086d6:	d0f8      	beq.n	80086ca <sbrk_aligned+0x22>
 80086d8:	1a21      	subs	r1, r4, r0
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 fd38 	bl	8009150 <_sbrk_r>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d1f2      	bne.n	80086ca <sbrk_aligned+0x22>
 80086e4:	e7ef      	b.n	80086c6 <sbrk_aligned+0x1e>
 80086e6:	bf00      	nop
 80086e8:	20000534 	.word	0x20000534

080086ec <_malloc_r>:
 80086ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f0:	1ccd      	adds	r5, r1, #3
 80086f2:	f025 0503 	bic.w	r5, r5, #3
 80086f6:	3508      	adds	r5, #8
 80086f8:	2d0c      	cmp	r5, #12
 80086fa:	bf38      	it	cc
 80086fc:	250c      	movcc	r5, #12
 80086fe:	2d00      	cmp	r5, #0
 8008700:	4606      	mov	r6, r0
 8008702:	db01      	blt.n	8008708 <_malloc_r+0x1c>
 8008704:	42a9      	cmp	r1, r5
 8008706:	d904      	bls.n	8008712 <_malloc_r+0x26>
 8008708:	230c      	movs	r3, #12
 800870a:	6033      	str	r3, [r6, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087e8 <_malloc_r+0xfc>
 8008716:	f000 f915 	bl	8008944 <__malloc_lock>
 800871a:	f8d8 3000 	ldr.w	r3, [r8]
 800871e:	461c      	mov	r4, r3
 8008720:	bb44      	cbnz	r4, 8008774 <_malloc_r+0x88>
 8008722:	4629      	mov	r1, r5
 8008724:	4630      	mov	r0, r6
 8008726:	f7ff ffbf 	bl	80086a8 <sbrk_aligned>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	4604      	mov	r4, r0
 800872e:	d158      	bne.n	80087e2 <_malloc_r+0xf6>
 8008730:	f8d8 4000 	ldr.w	r4, [r8]
 8008734:	4627      	mov	r7, r4
 8008736:	2f00      	cmp	r7, #0
 8008738:	d143      	bne.n	80087c2 <_malloc_r+0xd6>
 800873a:	2c00      	cmp	r4, #0
 800873c:	d04b      	beq.n	80087d6 <_malloc_r+0xea>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	4639      	mov	r1, r7
 8008742:	4630      	mov	r0, r6
 8008744:	eb04 0903 	add.w	r9, r4, r3
 8008748:	f000 fd02 	bl	8009150 <_sbrk_r>
 800874c:	4581      	cmp	r9, r0
 800874e:	d142      	bne.n	80087d6 <_malloc_r+0xea>
 8008750:	6821      	ldr	r1, [r4, #0]
 8008752:	1a6d      	subs	r5, r5, r1
 8008754:	4629      	mov	r1, r5
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff ffa6 	bl	80086a8 <sbrk_aligned>
 800875c:	3001      	adds	r0, #1
 800875e:	d03a      	beq.n	80087d6 <_malloc_r+0xea>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	442b      	add	r3, r5
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	f8d8 3000 	ldr.w	r3, [r8]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	bb62      	cbnz	r2, 80087c8 <_malloc_r+0xdc>
 800876e:	f8c8 7000 	str.w	r7, [r8]
 8008772:	e00f      	b.n	8008794 <_malloc_r+0xa8>
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	1b52      	subs	r2, r2, r5
 8008778:	d420      	bmi.n	80087bc <_malloc_r+0xd0>
 800877a:	2a0b      	cmp	r2, #11
 800877c:	d917      	bls.n	80087ae <_malloc_r+0xc2>
 800877e:	1961      	adds	r1, r4, r5
 8008780:	42a3      	cmp	r3, r4
 8008782:	6025      	str	r5, [r4, #0]
 8008784:	bf18      	it	ne
 8008786:	6059      	strne	r1, [r3, #4]
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	bf08      	it	eq
 800878c:	f8c8 1000 	streq.w	r1, [r8]
 8008790:	5162      	str	r2, [r4, r5]
 8008792:	604b      	str	r3, [r1, #4]
 8008794:	4630      	mov	r0, r6
 8008796:	f000 f8db 	bl	8008950 <__malloc_unlock>
 800879a:	f104 000b 	add.w	r0, r4, #11
 800879e:	1d23      	adds	r3, r4, #4
 80087a0:	f020 0007 	bic.w	r0, r0, #7
 80087a4:	1ac2      	subs	r2, r0, r3
 80087a6:	bf1c      	itt	ne
 80087a8:	1a1b      	subne	r3, r3, r0
 80087aa:	50a3      	strne	r3, [r4, r2]
 80087ac:	e7af      	b.n	800870e <_malloc_r+0x22>
 80087ae:	6862      	ldr	r2, [r4, #4]
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	bf0c      	ite	eq
 80087b4:	f8c8 2000 	streq.w	r2, [r8]
 80087b8:	605a      	strne	r2, [r3, #4]
 80087ba:	e7eb      	b.n	8008794 <_malloc_r+0xa8>
 80087bc:	4623      	mov	r3, r4
 80087be:	6864      	ldr	r4, [r4, #4]
 80087c0:	e7ae      	b.n	8008720 <_malloc_r+0x34>
 80087c2:	463c      	mov	r4, r7
 80087c4:	687f      	ldr	r7, [r7, #4]
 80087c6:	e7b6      	b.n	8008736 <_malloc_r+0x4a>
 80087c8:	461a      	mov	r2, r3
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	d1fb      	bne.n	80087c8 <_malloc_r+0xdc>
 80087d0:	2300      	movs	r3, #0
 80087d2:	6053      	str	r3, [r2, #4]
 80087d4:	e7de      	b.n	8008794 <_malloc_r+0xa8>
 80087d6:	230c      	movs	r3, #12
 80087d8:	6033      	str	r3, [r6, #0]
 80087da:	4630      	mov	r0, r6
 80087dc:	f000 f8b8 	bl	8008950 <__malloc_unlock>
 80087e0:	e794      	b.n	800870c <_malloc_r+0x20>
 80087e2:	6005      	str	r5, [r0, #0]
 80087e4:	e7d6      	b.n	8008794 <_malloc_r+0xa8>
 80087e6:	bf00      	nop
 80087e8:	20000538 	.word	0x20000538

080087ec <__sflush_r>:
 80087ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f4:	0716      	lsls	r6, r2, #28
 80087f6:	4605      	mov	r5, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	d454      	bmi.n	80088a6 <__sflush_r+0xba>
 80087fc:	684b      	ldr	r3, [r1, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dc02      	bgt.n	8008808 <__sflush_r+0x1c>
 8008802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	dd48      	ble.n	800889a <__sflush_r+0xae>
 8008808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800880a:	2e00      	cmp	r6, #0
 800880c:	d045      	beq.n	800889a <__sflush_r+0xae>
 800880e:	2300      	movs	r3, #0
 8008810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008814:	682f      	ldr	r7, [r5, #0]
 8008816:	6a21      	ldr	r1, [r4, #32]
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	d030      	beq.n	800887e <__sflush_r+0x92>
 800881c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	0759      	lsls	r1, r3, #29
 8008822:	d505      	bpl.n	8008830 <__sflush_r+0x44>
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800882a:	b10b      	cbz	r3, 8008830 <__sflush_r+0x44>
 800882c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800882e:	1ad2      	subs	r2, r2, r3
 8008830:	2300      	movs	r3, #0
 8008832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008834:	6a21      	ldr	r1, [r4, #32]
 8008836:	4628      	mov	r0, r5
 8008838:	47b0      	blx	r6
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	d106      	bne.n	800884e <__sflush_r+0x62>
 8008840:	6829      	ldr	r1, [r5, #0]
 8008842:	291d      	cmp	r1, #29
 8008844:	d82b      	bhi.n	800889e <__sflush_r+0xb2>
 8008846:	4a2a      	ldr	r2, [pc, #168]	@ (80088f0 <__sflush_r+0x104>)
 8008848:	410a      	asrs	r2, r1
 800884a:	07d6      	lsls	r6, r2, #31
 800884c:	d427      	bmi.n	800889e <__sflush_r+0xb2>
 800884e:	2200      	movs	r2, #0
 8008850:	6062      	str	r2, [r4, #4]
 8008852:	04d9      	lsls	r1, r3, #19
 8008854:	6922      	ldr	r2, [r4, #16]
 8008856:	6022      	str	r2, [r4, #0]
 8008858:	d504      	bpl.n	8008864 <__sflush_r+0x78>
 800885a:	1c42      	adds	r2, r0, #1
 800885c:	d101      	bne.n	8008862 <__sflush_r+0x76>
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	b903      	cbnz	r3, 8008864 <__sflush_r+0x78>
 8008862:	6560      	str	r0, [r4, #84]	@ 0x54
 8008864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008866:	602f      	str	r7, [r5, #0]
 8008868:	b1b9      	cbz	r1, 800889a <__sflush_r+0xae>
 800886a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800886e:	4299      	cmp	r1, r3
 8008870:	d002      	beq.n	8008878 <__sflush_r+0x8c>
 8008872:	4628      	mov	r0, r5
 8008874:	f000 fcce 	bl	8009214 <_free_r>
 8008878:	2300      	movs	r3, #0
 800887a:	6363      	str	r3, [r4, #52]	@ 0x34
 800887c:	e00d      	b.n	800889a <__sflush_r+0xae>
 800887e:	2301      	movs	r3, #1
 8008880:	4628      	mov	r0, r5
 8008882:	47b0      	blx	r6
 8008884:	4602      	mov	r2, r0
 8008886:	1c50      	adds	r0, r2, #1
 8008888:	d1c9      	bne.n	800881e <__sflush_r+0x32>
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0c6      	beq.n	800881e <__sflush_r+0x32>
 8008890:	2b1d      	cmp	r3, #29
 8008892:	d001      	beq.n	8008898 <__sflush_r+0xac>
 8008894:	2b16      	cmp	r3, #22
 8008896:	d11e      	bne.n	80088d6 <__sflush_r+0xea>
 8008898:	602f      	str	r7, [r5, #0]
 800889a:	2000      	movs	r0, #0
 800889c:	e022      	b.n	80088e4 <__sflush_r+0xf8>
 800889e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a2:	b21b      	sxth	r3, r3
 80088a4:	e01b      	b.n	80088de <__sflush_r+0xf2>
 80088a6:	690f      	ldr	r7, [r1, #16]
 80088a8:	2f00      	cmp	r7, #0
 80088aa:	d0f6      	beq.n	800889a <__sflush_r+0xae>
 80088ac:	0793      	lsls	r3, r2, #30
 80088ae:	680e      	ldr	r6, [r1, #0]
 80088b0:	bf08      	it	eq
 80088b2:	694b      	ldreq	r3, [r1, #20]
 80088b4:	600f      	str	r7, [r1, #0]
 80088b6:	bf18      	it	ne
 80088b8:	2300      	movne	r3, #0
 80088ba:	eba6 0807 	sub.w	r8, r6, r7
 80088be:	608b      	str	r3, [r1, #8]
 80088c0:	f1b8 0f00 	cmp.w	r8, #0
 80088c4:	dde9      	ble.n	800889a <__sflush_r+0xae>
 80088c6:	6a21      	ldr	r1, [r4, #32]
 80088c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088ca:	4643      	mov	r3, r8
 80088cc:	463a      	mov	r2, r7
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b0      	blx	r6
 80088d2:	2800      	cmp	r0, #0
 80088d4:	dc08      	bgt.n	80088e8 <__sflush_r+0xfc>
 80088d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e8:	4407      	add	r7, r0
 80088ea:	eba8 0800 	sub.w	r8, r8, r0
 80088ee:	e7e7      	b.n	80088c0 <__sflush_r+0xd4>
 80088f0:	dfbffffe 	.word	0xdfbffffe

080088f4 <_fflush_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	690b      	ldr	r3, [r1, #16]
 80088f8:	4605      	mov	r5, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	b913      	cbnz	r3, 8008904 <_fflush_r+0x10>
 80088fe:	2500      	movs	r5, #0
 8008900:	4628      	mov	r0, r5
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	b118      	cbz	r0, 800890e <_fflush_r+0x1a>
 8008906:	6a03      	ldr	r3, [r0, #32]
 8008908:	b90b      	cbnz	r3, 800890e <_fflush_r+0x1a>
 800890a:	f7ff f807 	bl	800791c <__sinit>
 800890e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0f3      	beq.n	80088fe <_fflush_r+0xa>
 8008916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008918:	07d0      	lsls	r0, r2, #31
 800891a:	d404      	bmi.n	8008926 <_fflush_r+0x32>
 800891c:	0599      	lsls	r1, r3, #22
 800891e:	d402      	bmi.n	8008926 <_fflush_r+0x32>
 8008920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008922:	f7ff f868 	bl	80079f6 <__retarget_lock_acquire_recursive>
 8008926:	4628      	mov	r0, r5
 8008928:	4621      	mov	r1, r4
 800892a:	f7ff ff5f 	bl	80087ec <__sflush_r>
 800892e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008930:	07da      	lsls	r2, r3, #31
 8008932:	4605      	mov	r5, r0
 8008934:	d4e4      	bmi.n	8008900 <_fflush_r+0xc>
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	059b      	lsls	r3, r3, #22
 800893a:	d4e1      	bmi.n	8008900 <_fflush_r+0xc>
 800893c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800893e:	f7ff f85b 	bl	80079f8 <__retarget_lock_release_recursive>
 8008942:	e7dd      	b.n	8008900 <_fflush_r+0xc>

08008944 <__malloc_lock>:
 8008944:	4801      	ldr	r0, [pc, #4]	@ (800894c <__malloc_lock+0x8>)
 8008946:	f7ff b856 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	20000530 	.word	0x20000530

08008950 <__malloc_unlock>:
 8008950:	4801      	ldr	r0, [pc, #4]	@ (8008958 <__malloc_unlock+0x8>)
 8008952:	f7ff b851 	b.w	80079f8 <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	20000530 	.word	0x20000530

0800895c <_Balloc>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	69c6      	ldr	r6, [r0, #28]
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
 8008964:	b976      	cbnz	r6, 8008984 <_Balloc+0x28>
 8008966:	2010      	movs	r0, #16
 8008968:	f7ff fe96 	bl	8008698 <malloc>
 800896c:	4602      	mov	r2, r0
 800896e:	61e0      	str	r0, [r4, #28]
 8008970:	b920      	cbnz	r0, 800897c <_Balloc+0x20>
 8008972:	4b18      	ldr	r3, [pc, #96]	@ (80089d4 <_Balloc+0x78>)
 8008974:	4818      	ldr	r0, [pc, #96]	@ (80089d8 <_Balloc+0x7c>)
 8008976:	216b      	movs	r1, #107	@ 0x6b
 8008978:	f000 fc1a 	bl	80091b0 <__assert_func>
 800897c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008980:	6006      	str	r6, [r0, #0]
 8008982:	60c6      	str	r6, [r0, #12]
 8008984:	69e6      	ldr	r6, [r4, #28]
 8008986:	68f3      	ldr	r3, [r6, #12]
 8008988:	b183      	cbz	r3, 80089ac <_Balloc+0x50>
 800898a:	69e3      	ldr	r3, [r4, #28]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008992:	b9b8      	cbnz	r0, 80089c4 <_Balloc+0x68>
 8008994:	2101      	movs	r1, #1
 8008996:	fa01 f605 	lsl.w	r6, r1, r5
 800899a:	1d72      	adds	r2, r6, #5
 800899c:	0092      	lsls	r2, r2, #2
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 fc24 	bl	80091ec <_calloc_r>
 80089a4:	b160      	cbz	r0, 80089c0 <_Balloc+0x64>
 80089a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089aa:	e00e      	b.n	80089ca <_Balloc+0x6e>
 80089ac:	2221      	movs	r2, #33	@ 0x21
 80089ae:	2104      	movs	r1, #4
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fc1b 	bl	80091ec <_calloc_r>
 80089b6:	69e3      	ldr	r3, [r4, #28]
 80089b8:	60f0      	str	r0, [r6, #12]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e4      	bne.n	800898a <_Balloc+0x2e>
 80089c0:	2000      	movs	r0, #0
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	6802      	ldr	r2, [r0, #0]
 80089c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ca:	2300      	movs	r3, #0
 80089cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d0:	e7f7      	b.n	80089c2 <_Balloc+0x66>
 80089d2:	bf00      	nop
 80089d4:	0800b7f1 	.word	0x0800b7f1
 80089d8:	0800b871 	.word	0x0800b871

080089dc <_Bfree>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	69c6      	ldr	r6, [r0, #28]
 80089e0:	4605      	mov	r5, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	b976      	cbnz	r6, 8008a04 <_Bfree+0x28>
 80089e6:	2010      	movs	r0, #16
 80089e8:	f7ff fe56 	bl	8008698 <malloc>
 80089ec:	4602      	mov	r2, r0
 80089ee:	61e8      	str	r0, [r5, #28]
 80089f0:	b920      	cbnz	r0, 80089fc <_Bfree+0x20>
 80089f2:	4b09      	ldr	r3, [pc, #36]	@ (8008a18 <_Bfree+0x3c>)
 80089f4:	4809      	ldr	r0, [pc, #36]	@ (8008a1c <_Bfree+0x40>)
 80089f6:	218f      	movs	r1, #143	@ 0x8f
 80089f8:	f000 fbda 	bl	80091b0 <__assert_func>
 80089fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a00:	6006      	str	r6, [r0, #0]
 8008a02:	60c6      	str	r6, [r0, #12]
 8008a04:	b13c      	cbz	r4, 8008a16 <_Bfree+0x3a>
 8008a06:	69eb      	ldr	r3, [r5, #28]
 8008a08:	6862      	ldr	r2, [r4, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a10:	6021      	str	r1, [r4, #0]
 8008a12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	0800b7f1 	.word	0x0800b7f1
 8008a1c:	0800b871 	.word	0x0800b871

08008a20 <__multadd>:
 8008a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a24:	690d      	ldr	r5, [r1, #16]
 8008a26:	4607      	mov	r7, r0
 8008a28:	460c      	mov	r4, r1
 8008a2a:	461e      	mov	r6, r3
 8008a2c:	f101 0c14 	add.w	ip, r1, #20
 8008a30:	2000      	movs	r0, #0
 8008a32:	f8dc 3000 	ldr.w	r3, [ip]
 8008a36:	b299      	uxth	r1, r3
 8008a38:	fb02 6101 	mla	r1, r2, r1, r6
 8008a3c:	0c1e      	lsrs	r6, r3, #16
 8008a3e:	0c0b      	lsrs	r3, r1, #16
 8008a40:	fb02 3306 	mla	r3, r2, r6, r3
 8008a44:	b289      	uxth	r1, r1
 8008a46:	3001      	adds	r0, #1
 8008a48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a4c:	4285      	cmp	r5, r0
 8008a4e:	f84c 1b04 	str.w	r1, [ip], #4
 8008a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a56:	dcec      	bgt.n	8008a32 <__multadd+0x12>
 8008a58:	b30e      	cbz	r6, 8008a9e <__multadd+0x7e>
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	42ab      	cmp	r3, r5
 8008a5e:	dc19      	bgt.n	8008a94 <__multadd+0x74>
 8008a60:	6861      	ldr	r1, [r4, #4]
 8008a62:	4638      	mov	r0, r7
 8008a64:	3101      	adds	r1, #1
 8008a66:	f7ff ff79 	bl	800895c <_Balloc>
 8008a6a:	4680      	mov	r8, r0
 8008a6c:	b928      	cbnz	r0, 8008a7a <__multadd+0x5a>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa4 <__multadd+0x84>)
 8008a72:	480d      	ldr	r0, [pc, #52]	@ (8008aa8 <__multadd+0x88>)
 8008a74:	21ba      	movs	r1, #186	@ 0xba
 8008a76:	f000 fb9b 	bl	80091b0 <__assert_func>
 8008a7a:	6922      	ldr	r2, [r4, #16]
 8008a7c:	3202      	adds	r2, #2
 8008a7e:	f104 010c 	add.w	r1, r4, #12
 8008a82:	0092      	lsls	r2, r2, #2
 8008a84:	300c      	adds	r0, #12
 8008a86:	f000 fb85 	bl	8009194 <memcpy>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f7ff ffa5 	bl	80089dc <_Bfree>
 8008a92:	4644      	mov	r4, r8
 8008a94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a98:	3501      	adds	r5, #1
 8008a9a:	615e      	str	r6, [r3, #20]
 8008a9c:	6125      	str	r5, [r4, #16]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	0800b860 	.word	0x0800b860
 8008aa8:	0800b871 	.word	0x0800b871

08008aac <__hi0bits>:
 8008aac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	bf36      	itet	cc
 8008ab4:	0403      	lslcc	r3, r0, #16
 8008ab6:	2000      	movcs	r0, #0
 8008ab8:	2010      	movcc	r0, #16
 8008aba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008abe:	bf3c      	itt	cc
 8008ac0:	021b      	lslcc	r3, r3, #8
 8008ac2:	3008      	addcc	r0, #8
 8008ac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ac8:	bf3c      	itt	cc
 8008aca:	011b      	lslcc	r3, r3, #4
 8008acc:	3004      	addcc	r0, #4
 8008ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad2:	bf3c      	itt	cc
 8008ad4:	009b      	lslcc	r3, r3, #2
 8008ad6:	3002      	addcc	r0, #2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	db05      	blt.n	8008ae8 <__hi0bits+0x3c>
 8008adc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ae0:	f100 0001 	add.w	r0, r0, #1
 8008ae4:	bf08      	it	eq
 8008ae6:	2020      	moveq	r0, #32
 8008ae8:	4770      	bx	lr

08008aea <__lo0bits>:
 8008aea:	6803      	ldr	r3, [r0, #0]
 8008aec:	4602      	mov	r2, r0
 8008aee:	f013 0007 	ands.w	r0, r3, #7
 8008af2:	d00b      	beq.n	8008b0c <__lo0bits+0x22>
 8008af4:	07d9      	lsls	r1, r3, #31
 8008af6:	d421      	bmi.n	8008b3c <__lo0bits+0x52>
 8008af8:	0798      	lsls	r0, r3, #30
 8008afa:	bf49      	itett	mi
 8008afc:	085b      	lsrmi	r3, r3, #1
 8008afe:	089b      	lsrpl	r3, r3, #2
 8008b00:	2001      	movmi	r0, #1
 8008b02:	6013      	strmi	r3, [r2, #0]
 8008b04:	bf5c      	itt	pl
 8008b06:	6013      	strpl	r3, [r2, #0]
 8008b08:	2002      	movpl	r0, #2
 8008b0a:	4770      	bx	lr
 8008b0c:	b299      	uxth	r1, r3
 8008b0e:	b909      	cbnz	r1, 8008b14 <__lo0bits+0x2a>
 8008b10:	0c1b      	lsrs	r3, r3, #16
 8008b12:	2010      	movs	r0, #16
 8008b14:	b2d9      	uxtb	r1, r3
 8008b16:	b909      	cbnz	r1, 8008b1c <__lo0bits+0x32>
 8008b18:	3008      	adds	r0, #8
 8008b1a:	0a1b      	lsrs	r3, r3, #8
 8008b1c:	0719      	lsls	r1, r3, #28
 8008b1e:	bf04      	itt	eq
 8008b20:	091b      	lsreq	r3, r3, #4
 8008b22:	3004      	addeq	r0, #4
 8008b24:	0799      	lsls	r1, r3, #30
 8008b26:	bf04      	itt	eq
 8008b28:	089b      	lsreq	r3, r3, #2
 8008b2a:	3002      	addeq	r0, #2
 8008b2c:	07d9      	lsls	r1, r3, #31
 8008b2e:	d403      	bmi.n	8008b38 <__lo0bits+0x4e>
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	f100 0001 	add.w	r0, r0, #1
 8008b36:	d003      	beq.n	8008b40 <__lo0bits+0x56>
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	4770      	bx	lr
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	4770      	bx	lr
 8008b40:	2020      	movs	r0, #32
 8008b42:	4770      	bx	lr

08008b44 <__i2b>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	460c      	mov	r4, r1
 8008b48:	2101      	movs	r1, #1
 8008b4a:	f7ff ff07 	bl	800895c <_Balloc>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	b928      	cbnz	r0, 8008b5e <__i2b+0x1a>
 8008b52:	4b05      	ldr	r3, [pc, #20]	@ (8008b68 <__i2b+0x24>)
 8008b54:	4805      	ldr	r0, [pc, #20]	@ (8008b6c <__i2b+0x28>)
 8008b56:	f240 1145 	movw	r1, #325	@ 0x145
 8008b5a:	f000 fb29 	bl	80091b0 <__assert_func>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	6144      	str	r4, [r0, #20]
 8008b62:	6103      	str	r3, [r0, #16]
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	bf00      	nop
 8008b68:	0800b860 	.word	0x0800b860
 8008b6c:	0800b871 	.word	0x0800b871

08008b70 <__multiply>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	4614      	mov	r4, r2
 8008b76:	690a      	ldr	r2, [r1, #16]
 8008b78:	6923      	ldr	r3, [r4, #16]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	bfa8      	it	ge
 8008b7e:	4623      	movge	r3, r4
 8008b80:	460f      	mov	r7, r1
 8008b82:	bfa4      	itt	ge
 8008b84:	460c      	movge	r4, r1
 8008b86:	461f      	movge	r7, r3
 8008b88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b90:	68a3      	ldr	r3, [r4, #8]
 8008b92:	6861      	ldr	r1, [r4, #4]
 8008b94:	eb0a 0609 	add.w	r6, sl, r9
 8008b98:	42b3      	cmp	r3, r6
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	bfb8      	it	lt
 8008b9e:	3101      	addlt	r1, #1
 8008ba0:	f7ff fedc 	bl	800895c <_Balloc>
 8008ba4:	b930      	cbnz	r0, 8008bb4 <__multiply+0x44>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b44      	ldr	r3, [pc, #272]	@ (8008cbc <__multiply+0x14c>)
 8008baa:	4845      	ldr	r0, [pc, #276]	@ (8008cc0 <__multiply+0x150>)
 8008bac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008bb0:	f000 fafe 	bl	80091b0 <__assert_func>
 8008bb4:	f100 0514 	add.w	r5, r0, #20
 8008bb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4543      	cmp	r3, r8
 8008bc2:	d321      	bcc.n	8008c08 <__multiply+0x98>
 8008bc4:	f107 0114 	add.w	r1, r7, #20
 8008bc8:	f104 0214 	add.w	r2, r4, #20
 8008bcc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008bd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	1b13      	subs	r3, r2, r4
 8008bd8:	3b15      	subs	r3, #21
 8008bda:	f023 0303 	bic.w	r3, r3, #3
 8008bde:	3304      	adds	r3, #4
 8008be0:	f104 0715 	add.w	r7, r4, #21
 8008be4:	42ba      	cmp	r2, r7
 8008be6:	bf38      	it	cc
 8008be8:	2304      	movcc	r3, #4
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	9103      	str	r1, [sp, #12]
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	d80c      	bhi.n	8008c0e <__multiply+0x9e>
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	dd03      	ble.n	8008c00 <__multiply+0x90>
 8008bf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d05b      	beq.n	8008cb8 <__multiply+0x148>
 8008c00:	6106      	str	r6, [r0, #16]
 8008c02:	b005      	add	sp, #20
 8008c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c08:	f843 2b04 	str.w	r2, [r3], #4
 8008c0c:	e7d8      	b.n	8008bc0 <__multiply+0x50>
 8008c0e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c12:	f1ba 0f00 	cmp.w	sl, #0
 8008c16:	d024      	beq.n	8008c62 <__multiply+0xf2>
 8008c18:	f104 0e14 	add.w	lr, r4, #20
 8008c1c:	46a9      	mov	r9, r5
 8008c1e:	f04f 0c00 	mov.w	ip, #0
 8008c22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c26:	f8d9 3000 	ldr.w	r3, [r9]
 8008c2a:	fa1f fb87 	uxth.w	fp, r7
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008c38:	f8d9 7000 	ldr.w	r7, [r9]
 8008c3c:	4463      	add	r3, ip
 8008c3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c42:	fb0a c70b 	mla	r7, sl, fp, ip
 8008c46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c50:	4572      	cmp	r2, lr
 8008c52:	f849 3b04 	str.w	r3, [r9], #4
 8008c56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c5a:	d8e2      	bhi.n	8008c22 <__multiply+0xb2>
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	f845 c003 	str.w	ip, [r5, r3]
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c68:	3104      	adds	r1, #4
 8008c6a:	f1b9 0f00 	cmp.w	r9, #0
 8008c6e:	d021      	beq.n	8008cb4 <__multiply+0x144>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	f104 0c14 	add.w	ip, r4, #20
 8008c76:	46ae      	mov	lr, r5
 8008c78:	f04f 0a00 	mov.w	sl, #0
 8008c7c:	f8bc b000 	ldrh.w	fp, [ip]
 8008c80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c84:	fb09 770b 	mla	r7, r9, fp, r7
 8008c88:	4457      	add	r7, sl
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c90:	f84e 3b04 	str.w	r3, [lr], #4
 8008c94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c9c:	f8be 3000 	ldrh.w	r3, [lr]
 8008ca0:	fb09 330a 	mla	r3, r9, sl, r3
 8008ca4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008ca8:	4562      	cmp	r2, ip
 8008caa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cae:	d8e5      	bhi.n	8008c7c <__multiply+0x10c>
 8008cb0:	9f01      	ldr	r7, [sp, #4]
 8008cb2:	51eb      	str	r3, [r5, r7]
 8008cb4:	3504      	adds	r5, #4
 8008cb6:	e799      	b.n	8008bec <__multiply+0x7c>
 8008cb8:	3e01      	subs	r6, #1
 8008cba:	e79b      	b.n	8008bf4 <__multiply+0x84>
 8008cbc:	0800b860 	.word	0x0800b860
 8008cc0:	0800b871 	.word	0x0800b871

08008cc4 <__pow5mult>:
 8008cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc8:	4615      	mov	r5, r2
 8008cca:	f012 0203 	ands.w	r2, r2, #3
 8008cce:	4607      	mov	r7, r0
 8008cd0:	460e      	mov	r6, r1
 8008cd2:	d007      	beq.n	8008ce4 <__pow5mult+0x20>
 8008cd4:	4c25      	ldr	r4, [pc, #148]	@ (8008d6c <__pow5mult+0xa8>)
 8008cd6:	3a01      	subs	r2, #1
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cde:	f7ff fe9f 	bl	8008a20 <__multadd>
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	10ad      	asrs	r5, r5, #2
 8008ce6:	d03d      	beq.n	8008d64 <__pow5mult+0xa0>
 8008ce8:	69fc      	ldr	r4, [r7, #28]
 8008cea:	b97c      	cbnz	r4, 8008d0c <__pow5mult+0x48>
 8008cec:	2010      	movs	r0, #16
 8008cee:	f7ff fcd3 	bl	8008698 <malloc>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	61f8      	str	r0, [r7, #28]
 8008cf6:	b928      	cbnz	r0, 8008d04 <__pow5mult+0x40>
 8008cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8008d70 <__pow5mult+0xac>)
 8008cfa:	481e      	ldr	r0, [pc, #120]	@ (8008d74 <__pow5mult+0xb0>)
 8008cfc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d00:	f000 fa56 	bl	80091b0 <__assert_func>
 8008d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d08:	6004      	str	r4, [r0, #0]
 8008d0a:	60c4      	str	r4, [r0, #12]
 8008d0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d14:	b94c      	cbnz	r4, 8008d2a <__pow5mult+0x66>
 8008d16:	f240 2171 	movw	r1, #625	@ 0x271
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f7ff ff12 	bl	8008b44 <__i2b>
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d26:	4604      	mov	r4, r0
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	f04f 0900 	mov.w	r9, #0
 8008d2e:	07eb      	lsls	r3, r5, #31
 8008d30:	d50a      	bpl.n	8008d48 <__pow5mult+0x84>
 8008d32:	4631      	mov	r1, r6
 8008d34:	4622      	mov	r2, r4
 8008d36:	4638      	mov	r0, r7
 8008d38:	f7ff ff1a 	bl	8008b70 <__multiply>
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4680      	mov	r8, r0
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff fe4b 	bl	80089dc <_Bfree>
 8008d46:	4646      	mov	r6, r8
 8008d48:	106d      	asrs	r5, r5, #1
 8008d4a:	d00b      	beq.n	8008d64 <__pow5mult+0xa0>
 8008d4c:	6820      	ldr	r0, [r4, #0]
 8008d4e:	b938      	cbnz	r0, 8008d60 <__pow5mult+0x9c>
 8008d50:	4622      	mov	r2, r4
 8008d52:	4621      	mov	r1, r4
 8008d54:	4638      	mov	r0, r7
 8008d56:	f7ff ff0b 	bl	8008b70 <__multiply>
 8008d5a:	6020      	str	r0, [r4, #0]
 8008d5c:	f8c0 9000 	str.w	r9, [r0]
 8008d60:	4604      	mov	r4, r0
 8008d62:	e7e4      	b.n	8008d2e <__pow5mult+0x6a>
 8008d64:	4630      	mov	r0, r6
 8008d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d6a:	bf00      	nop
 8008d6c:	0800b8cc 	.word	0x0800b8cc
 8008d70:	0800b7f1 	.word	0x0800b7f1
 8008d74:	0800b871 	.word	0x0800b871

08008d78 <__lshift>:
 8008d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	6849      	ldr	r1, [r1, #4]
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	4607      	mov	r7, r0
 8008d8a:	4691      	mov	r9, r2
 8008d8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d90:	f108 0601 	add.w	r6, r8, #1
 8008d94:	42b3      	cmp	r3, r6
 8008d96:	db0b      	blt.n	8008db0 <__lshift+0x38>
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff fddf 	bl	800895c <_Balloc>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	b948      	cbnz	r0, 8008db6 <__lshift+0x3e>
 8008da2:	4602      	mov	r2, r0
 8008da4:	4b28      	ldr	r3, [pc, #160]	@ (8008e48 <__lshift+0xd0>)
 8008da6:	4829      	ldr	r0, [pc, #164]	@ (8008e4c <__lshift+0xd4>)
 8008da8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008dac:	f000 fa00 	bl	80091b0 <__assert_func>
 8008db0:	3101      	adds	r1, #1
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	e7ee      	b.n	8008d94 <__lshift+0x1c>
 8008db6:	2300      	movs	r3, #0
 8008db8:	f100 0114 	add.w	r1, r0, #20
 8008dbc:	f100 0210 	add.w	r2, r0, #16
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	4553      	cmp	r3, sl
 8008dc4:	db33      	blt.n	8008e2e <__lshift+0xb6>
 8008dc6:	6920      	ldr	r0, [r4, #16]
 8008dc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dcc:	f104 0314 	add.w	r3, r4, #20
 8008dd0:	f019 091f 	ands.w	r9, r9, #31
 8008dd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ddc:	d02b      	beq.n	8008e36 <__lshift+0xbe>
 8008dde:	f1c9 0e20 	rsb	lr, r9, #32
 8008de2:	468a      	mov	sl, r1
 8008de4:	2200      	movs	r2, #0
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	fa00 f009 	lsl.w	r0, r0, r9
 8008dec:	4310      	orrs	r0, r2
 8008dee:	f84a 0b04 	str.w	r0, [sl], #4
 8008df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df6:	459c      	cmp	ip, r3
 8008df8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dfc:	d8f3      	bhi.n	8008de6 <__lshift+0x6e>
 8008dfe:	ebac 0304 	sub.w	r3, ip, r4
 8008e02:	3b15      	subs	r3, #21
 8008e04:	f023 0303 	bic.w	r3, r3, #3
 8008e08:	3304      	adds	r3, #4
 8008e0a:	f104 0015 	add.w	r0, r4, #21
 8008e0e:	4584      	cmp	ip, r0
 8008e10:	bf38      	it	cc
 8008e12:	2304      	movcc	r3, #4
 8008e14:	50ca      	str	r2, [r1, r3]
 8008e16:	b10a      	cbz	r2, 8008e1c <__lshift+0xa4>
 8008e18:	f108 0602 	add.w	r6, r8, #2
 8008e1c:	3e01      	subs	r6, #1
 8008e1e:	4638      	mov	r0, r7
 8008e20:	612e      	str	r6, [r5, #16]
 8008e22:	4621      	mov	r1, r4
 8008e24:	f7ff fdda 	bl	80089dc <_Bfree>
 8008e28:	4628      	mov	r0, r5
 8008e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e32:	3301      	adds	r3, #1
 8008e34:	e7c5      	b.n	8008dc2 <__lshift+0x4a>
 8008e36:	3904      	subs	r1, #4
 8008e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e40:	459c      	cmp	ip, r3
 8008e42:	d8f9      	bhi.n	8008e38 <__lshift+0xc0>
 8008e44:	e7ea      	b.n	8008e1c <__lshift+0xa4>
 8008e46:	bf00      	nop
 8008e48:	0800b860 	.word	0x0800b860
 8008e4c:	0800b871 	.word	0x0800b871

08008e50 <__mcmp>:
 8008e50:	690a      	ldr	r2, [r1, #16]
 8008e52:	4603      	mov	r3, r0
 8008e54:	6900      	ldr	r0, [r0, #16]
 8008e56:	1a80      	subs	r0, r0, r2
 8008e58:	b530      	push	{r4, r5, lr}
 8008e5a:	d10e      	bne.n	8008e7a <__mcmp+0x2a>
 8008e5c:	3314      	adds	r3, #20
 8008e5e:	3114      	adds	r1, #20
 8008e60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e70:	4295      	cmp	r5, r2
 8008e72:	d003      	beq.n	8008e7c <__mcmp+0x2c>
 8008e74:	d205      	bcs.n	8008e82 <__mcmp+0x32>
 8008e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e7a:	bd30      	pop	{r4, r5, pc}
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d3f3      	bcc.n	8008e68 <__mcmp+0x18>
 8008e80:	e7fb      	b.n	8008e7a <__mcmp+0x2a>
 8008e82:	2001      	movs	r0, #1
 8008e84:	e7f9      	b.n	8008e7a <__mcmp+0x2a>
	...

08008e88 <__mdiff>:
 8008e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	4689      	mov	r9, r1
 8008e8e:	4606      	mov	r6, r0
 8008e90:	4611      	mov	r1, r2
 8008e92:	4648      	mov	r0, r9
 8008e94:	4614      	mov	r4, r2
 8008e96:	f7ff ffdb 	bl	8008e50 <__mcmp>
 8008e9a:	1e05      	subs	r5, r0, #0
 8008e9c:	d112      	bne.n	8008ec4 <__mdiff+0x3c>
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f7ff fd5b 	bl	800895c <_Balloc>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	b928      	cbnz	r0, 8008eb6 <__mdiff+0x2e>
 8008eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa8 <__mdiff+0x120>)
 8008eac:	f240 2137 	movw	r1, #567	@ 0x237
 8008eb0:	483e      	ldr	r0, [pc, #248]	@ (8008fac <__mdiff+0x124>)
 8008eb2:	f000 f97d 	bl	80091b0 <__assert_func>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	b003      	add	sp, #12
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	bfbc      	itt	lt
 8008ec6:	464b      	movlt	r3, r9
 8008ec8:	46a1      	movlt	r9, r4
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ed0:	bfba      	itte	lt
 8008ed2:	461c      	movlt	r4, r3
 8008ed4:	2501      	movlt	r5, #1
 8008ed6:	2500      	movge	r5, #0
 8008ed8:	f7ff fd40 	bl	800895c <_Balloc>
 8008edc:	4602      	mov	r2, r0
 8008ede:	b918      	cbnz	r0, 8008ee8 <__mdiff+0x60>
 8008ee0:	4b31      	ldr	r3, [pc, #196]	@ (8008fa8 <__mdiff+0x120>)
 8008ee2:	f240 2145 	movw	r1, #581	@ 0x245
 8008ee6:	e7e3      	b.n	8008eb0 <__mdiff+0x28>
 8008ee8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008eec:	6926      	ldr	r6, [r4, #16]
 8008eee:	60c5      	str	r5, [r0, #12]
 8008ef0:	f109 0310 	add.w	r3, r9, #16
 8008ef4:	f109 0514 	add.w	r5, r9, #20
 8008ef8:	f104 0e14 	add.w	lr, r4, #20
 8008efc:	f100 0b14 	add.w	fp, r0, #20
 8008f00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	46d9      	mov	r9, fp
 8008f0c:	f04f 0c00 	mov.w	ip, #0
 8008f10:	9b01      	ldr	r3, [sp, #4]
 8008f12:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f16:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	fa1f f38a 	uxth.w	r3, sl
 8008f20:	4619      	mov	r1, r3
 8008f22:	b283      	uxth	r3, r0
 8008f24:	1acb      	subs	r3, r1, r3
 8008f26:	0c00      	lsrs	r0, r0, #16
 8008f28:	4463      	add	r3, ip
 8008f2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f38:	4576      	cmp	r6, lr
 8008f3a:	f849 3b04 	str.w	r3, [r9], #4
 8008f3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f42:	d8e5      	bhi.n	8008f10 <__mdiff+0x88>
 8008f44:	1b33      	subs	r3, r6, r4
 8008f46:	3b15      	subs	r3, #21
 8008f48:	f023 0303 	bic.w	r3, r3, #3
 8008f4c:	3415      	adds	r4, #21
 8008f4e:	3304      	adds	r3, #4
 8008f50:	42a6      	cmp	r6, r4
 8008f52:	bf38      	it	cc
 8008f54:	2304      	movcc	r3, #4
 8008f56:	441d      	add	r5, r3
 8008f58:	445b      	add	r3, fp
 8008f5a:	461e      	mov	r6, r3
 8008f5c:	462c      	mov	r4, r5
 8008f5e:	4544      	cmp	r4, r8
 8008f60:	d30e      	bcc.n	8008f80 <__mdiff+0xf8>
 8008f62:	f108 0103 	add.w	r1, r8, #3
 8008f66:	1b49      	subs	r1, r1, r5
 8008f68:	f021 0103 	bic.w	r1, r1, #3
 8008f6c:	3d03      	subs	r5, #3
 8008f6e:	45a8      	cmp	r8, r5
 8008f70:	bf38      	it	cc
 8008f72:	2100      	movcc	r1, #0
 8008f74:	440b      	add	r3, r1
 8008f76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f7a:	b191      	cbz	r1, 8008fa2 <__mdiff+0x11a>
 8008f7c:	6117      	str	r7, [r2, #16]
 8008f7e:	e79d      	b.n	8008ebc <__mdiff+0x34>
 8008f80:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f84:	46e6      	mov	lr, ip
 8008f86:	0c08      	lsrs	r0, r1, #16
 8008f88:	fa1c fc81 	uxtah	ip, ip, r1
 8008f8c:	4471      	add	r1, lr
 8008f8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f92:	b289      	uxth	r1, r1
 8008f94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f98:	f846 1b04 	str.w	r1, [r6], #4
 8008f9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fa0:	e7dd      	b.n	8008f5e <__mdiff+0xd6>
 8008fa2:	3f01      	subs	r7, #1
 8008fa4:	e7e7      	b.n	8008f76 <__mdiff+0xee>
 8008fa6:	bf00      	nop
 8008fa8:	0800b860 	.word	0x0800b860
 8008fac:	0800b871 	.word	0x0800b871

08008fb0 <__d2b>:
 8008fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	ec59 8b10 	vmov	r8, r9, d0
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	f7ff fccd 	bl	800895c <_Balloc>
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	b930      	cbnz	r0, 8008fd4 <__d2b+0x24>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	4b23      	ldr	r3, [pc, #140]	@ (8009058 <__d2b+0xa8>)
 8008fca:	4824      	ldr	r0, [pc, #144]	@ (800905c <__d2b+0xac>)
 8008fcc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fd0:	f000 f8ee 	bl	80091b0 <__assert_func>
 8008fd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fdc:	b10d      	cbz	r5, 8008fe2 <__d2b+0x32>
 8008fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	f1b8 0300 	subs.w	r3, r8, #0
 8008fe8:	d023      	beq.n	8009032 <__d2b+0x82>
 8008fea:	4668      	mov	r0, sp
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	f7ff fd7c 	bl	8008aea <__lo0bits>
 8008ff2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ff6:	b1d0      	cbz	r0, 800902e <__d2b+0x7e>
 8008ff8:	f1c0 0320 	rsb	r3, r0, #32
 8008ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8009000:	430b      	orrs	r3, r1
 8009002:	40c2      	lsrs	r2, r0
 8009004:	6163      	str	r3, [r4, #20]
 8009006:	9201      	str	r2, [sp, #4]
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	61a3      	str	r3, [r4, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	bf0c      	ite	eq
 8009010:	2201      	moveq	r2, #1
 8009012:	2202      	movne	r2, #2
 8009014:	6122      	str	r2, [r4, #16]
 8009016:	b1a5      	cbz	r5, 8009042 <__d2b+0x92>
 8009018:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800901c:	4405      	add	r5, r0
 800901e:	603d      	str	r5, [r7, #0]
 8009020:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009024:	6030      	str	r0, [r6, #0]
 8009026:	4620      	mov	r0, r4
 8009028:	b003      	add	sp, #12
 800902a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800902e:	6161      	str	r1, [r4, #20]
 8009030:	e7ea      	b.n	8009008 <__d2b+0x58>
 8009032:	a801      	add	r0, sp, #4
 8009034:	f7ff fd59 	bl	8008aea <__lo0bits>
 8009038:	9b01      	ldr	r3, [sp, #4]
 800903a:	6163      	str	r3, [r4, #20]
 800903c:	3020      	adds	r0, #32
 800903e:	2201      	movs	r2, #1
 8009040:	e7e8      	b.n	8009014 <__d2b+0x64>
 8009042:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009046:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800904a:	6038      	str	r0, [r7, #0]
 800904c:	6918      	ldr	r0, [r3, #16]
 800904e:	f7ff fd2d 	bl	8008aac <__hi0bits>
 8009052:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009056:	e7e5      	b.n	8009024 <__d2b+0x74>
 8009058:	0800b860 	.word	0x0800b860
 800905c:	0800b871 	.word	0x0800b871

08009060 <__sread>:
 8009060:	b510      	push	{r4, lr}
 8009062:	460c      	mov	r4, r1
 8009064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009068:	f000 f860 	bl	800912c <_read_r>
 800906c:	2800      	cmp	r0, #0
 800906e:	bfab      	itete	ge
 8009070:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009072:	89a3      	ldrhlt	r3, [r4, #12]
 8009074:	181b      	addge	r3, r3, r0
 8009076:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800907a:	bfac      	ite	ge
 800907c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800907e:	81a3      	strhlt	r3, [r4, #12]
 8009080:	bd10      	pop	{r4, pc}

08009082 <__swrite>:
 8009082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009086:	461f      	mov	r7, r3
 8009088:	898b      	ldrh	r3, [r1, #12]
 800908a:	05db      	lsls	r3, r3, #23
 800908c:	4605      	mov	r5, r0
 800908e:	460c      	mov	r4, r1
 8009090:	4616      	mov	r6, r2
 8009092:	d505      	bpl.n	80090a0 <__swrite+0x1e>
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	2302      	movs	r3, #2
 800909a:	2200      	movs	r2, #0
 800909c:	f000 f834 	bl	8009108 <_lseek_r>
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090aa:	81a3      	strh	r3, [r4, #12]
 80090ac:	4632      	mov	r2, r6
 80090ae:	463b      	mov	r3, r7
 80090b0:	4628      	mov	r0, r5
 80090b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090b6:	f000 b85b 	b.w	8009170 <_write_r>

080090ba <__sseek>:
 80090ba:	b510      	push	{r4, lr}
 80090bc:	460c      	mov	r4, r1
 80090be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c2:	f000 f821 	bl	8009108 <_lseek_r>
 80090c6:	1c43      	adds	r3, r0, #1
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	bf15      	itete	ne
 80090cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090d6:	81a3      	strheq	r3, [r4, #12]
 80090d8:	bf18      	it	ne
 80090da:	81a3      	strhne	r3, [r4, #12]
 80090dc:	bd10      	pop	{r4, pc}

080090de <__sclose>:
 80090de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e2:	f000 b801 	b.w	80090e8 <_close_r>
	...

080090e8 <_close_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4d06      	ldr	r5, [pc, #24]	@ (8009104 <_close_r+0x1c>)
 80090ec:	2300      	movs	r3, #0
 80090ee:	4604      	mov	r4, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	602b      	str	r3, [r5, #0]
 80090f4:	f7f9 fa48 	bl	8002588 <_close>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_close_r+0x1a>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_close_r+0x1a>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	2000053c 	.word	0x2000053c

08009108 <_lseek_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d07      	ldr	r5, [pc, #28]	@ (8009128 <_lseek_r+0x20>)
 800910c:	4604      	mov	r4, r0
 800910e:	4608      	mov	r0, r1
 8009110:	4611      	mov	r1, r2
 8009112:	2200      	movs	r2, #0
 8009114:	602a      	str	r2, [r5, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	f7f9 fa5d 	bl	80025d6 <_lseek>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_lseek_r+0x1e>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b103      	cbz	r3, 8009126 <_lseek_r+0x1e>
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	2000053c 	.word	0x2000053c

0800912c <_read_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	@ (800914c <_read_r+0x20>)
 8009130:	4604      	mov	r4, r0
 8009132:	4608      	mov	r0, r1
 8009134:	4611      	mov	r1, r2
 8009136:	2200      	movs	r2, #0
 8009138:	602a      	str	r2, [r5, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	f7f9 f9eb 	bl	8002516 <_read>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_read_r+0x1e>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_read_r+0x1e>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	2000053c 	.word	0x2000053c

08009150 <_sbrk_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d06      	ldr	r5, [pc, #24]	@ (800916c <_sbrk_r+0x1c>)
 8009154:	2300      	movs	r3, #0
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	f7f9 fa48 	bl	80025f0 <_sbrk>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_sbrk_r+0x1a>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_sbrk_r+0x1a>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	2000053c 	.word	0x2000053c

08009170 <_write_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d07      	ldr	r5, [pc, #28]	@ (8009190 <_write_r+0x20>)
 8009174:	4604      	mov	r4, r0
 8009176:	4608      	mov	r0, r1
 8009178:	4611      	mov	r1, r2
 800917a:	2200      	movs	r2, #0
 800917c:	602a      	str	r2, [r5, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	f7f9 f9e6 	bl	8002550 <_write>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_write_r+0x1e>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_write_r+0x1e>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	2000053c 	.word	0x2000053c

08009194 <memcpy>:
 8009194:	440a      	add	r2, r1
 8009196:	4291      	cmp	r1, r2
 8009198:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800919c:	d100      	bne.n	80091a0 <memcpy+0xc>
 800919e:	4770      	bx	lr
 80091a0:	b510      	push	{r4, lr}
 80091a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091aa:	4291      	cmp	r1, r2
 80091ac:	d1f9      	bne.n	80091a2 <memcpy+0xe>
 80091ae:	bd10      	pop	{r4, pc}

080091b0 <__assert_func>:
 80091b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091b2:	4614      	mov	r4, r2
 80091b4:	461a      	mov	r2, r3
 80091b6:	4b09      	ldr	r3, [pc, #36]	@ (80091dc <__assert_func+0x2c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4605      	mov	r5, r0
 80091bc:	68d8      	ldr	r0, [r3, #12]
 80091be:	b954      	cbnz	r4, 80091d6 <__assert_func+0x26>
 80091c0:	4b07      	ldr	r3, [pc, #28]	@ (80091e0 <__assert_func+0x30>)
 80091c2:	461c      	mov	r4, r3
 80091c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091c8:	9100      	str	r1, [sp, #0]
 80091ca:	462b      	mov	r3, r5
 80091cc:	4905      	ldr	r1, [pc, #20]	@ (80091e4 <__assert_func+0x34>)
 80091ce:	f000 f87d 	bl	80092cc <fiprintf>
 80091d2:	f000 f89a 	bl	800930a <abort>
 80091d6:	4b04      	ldr	r3, [pc, #16]	@ (80091e8 <__assert_func+0x38>)
 80091d8:	e7f4      	b.n	80091c4 <__assert_func+0x14>
 80091da:	bf00      	nop
 80091dc:	20000020 	.word	0x20000020
 80091e0:	0800bb0e 	.word	0x0800bb0e
 80091e4:	0800bae0 	.word	0x0800bae0
 80091e8:	0800bad3 	.word	0x0800bad3

080091ec <_calloc_r>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	fba1 5402 	umull	r5, r4, r1, r2
 80091f2:	b93c      	cbnz	r4, 8009204 <_calloc_r+0x18>
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7ff fa79 	bl	80086ec <_malloc_r>
 80091fa:	4606      	mov	r6, r0
 80091fc:	b928      	cbnz	r0, 800920a <_calloc_r+0x1e>
 80091fe:	2600      	movs	r6, #0
 8009200:	4630      	mov	r0, r6
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	220c      	movs	r2, #12
 8009206:	6002      	str	r2, [r0, #0]
 8009208:	e7f9      	b.n	80091fe <_calloc_r+0x12>
 800920a:	462a      	mov	r2, r5
 800920c:	4621      	mov	r1, r4
 800920e:	f7fe fbbb 	bl	8007988 <memset>
 8009212:	e7f5      	b.n	8009200 <_calloc_r+0x14>

08009214 <_free_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4605      	mov	r5, r0
 8009218:	2900      	cmp	r1, #0
 800921a:	d041      	beq.n	80092a0 <_free_r+0x8c>
 800921c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009220:	1f0c      	subs	r4, r1, #4
 8009222:	2b00      	cmp	r3, #0
 8009224:	bfb8      	it	lt
 8009226:	18e4      	addlt	r4, r4, r3
 8009228:	f7ff fb8c 	bl	8008944 <__malloc_lock>
 800922c:	4a1d      	ldr	r2, [pc, #116]	@ (80092a4 <_free_r+0x90>)
 800922e:	6813      	ldr	r3, [r2, #0]
 8009230:	b933      	cbnz	r3, 8009240 <_free_r+0x2c>
 8009232:	6063      	str	r3, [r4, #4]
 8009234:	6014      	str	r4, [r2, #0]
 8009236:	4628      	mov	r0, r5
 8009238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800923c:	f7ff bb88 	b.w	8008950 <__malloc_unlock>
 8009240:	42a3      	cmp	r3, r4
 8009242:	d908      	bls.n	8009256 <_free_r+0x42>
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	1821      	adds	r1, r4, r0
 8009248:	428b      	cmp	r3, r1
 800924a:	bf01      	itttt	eq
 800924c:	6819      	ldreq	r1, [r3, #0]
 800924e:	685b      	ldreq	r3, [r3, #4]
 8009250:	1809      	addeq	r1, r1, r0
 8009252:	6021      	streq	r1, [r4, #0]
 8009254:	e7ed      	b.n	8009232 <_free_r+0x1e>
 8009256:	461a      	mov	r2, r3
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	b10b      	cbz	r3, 8009260 <_free_r+0x4c>
 800925c:	42a3      	cmp	r3, r4
 800925e:	d9fa      	bls.n	8009256 <_free_r+0x42>
 8009260:	6811      	ldr	r1, [r2, #0]
 8009262:	1850      	adds	r0, r2, r1
 8009264:	42a0      	cmp	r0, r4
 8009266:	d10b      	bne.n	8009280 <_free_r+0x6c>
 8009268:	6820      	ldr	r0, [r4, #0]
 800926a:	4401      	add	r1, r0
 800926c:	1850      	adds	r0, r2, r1
 800926e:	4283      	cmp	r3, r0
 8009270:	6011      	str	r1, [r2, #0]
 8009272:	d1e0      	bne.n	8009236 <_free_r+0x22>
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	6053      	str	r3, [r2, #4]
 800927a:	4408      	add	r0, r1
 800927c:	6010      	str	r0, [r2, #0]
 800927e:	e7da      	b.n	8009236 <_free_r+0x22>
 8009280:	d902      	bls.n	8009288 <_free_r+0x74>
 8009282:	230c      	movs	r3, #12
 8009284:	602b      	str	r3, [r5, #0]
 8009286:	e7d6      	b.n	8009236 <_free_r+0x22>
 8009288:	6820      	ldr	r0, [r4, #0]
 800928a:	1821      	adds	r1, r4, r0
 800928c:	428b      	cmp	r3, r1
 800928e:	bf04      	itt	eq
 8009290:	6819      	ldreq	r1, [r3, #0]
 8009292:	685b      	ldreq	r3, [r3, #4]
 8009294:	6063      	str	r3, [r4, #4]
 8009296:	bf04      	itt	eq
 8009298:	1809      	addeq	r1, r1, r0
 800929a:	6021      	streq	r1, [r4, #0]
 800929c:	6054      	str	r4, [r2, #4]
 800929e:	e7ca      	b.n	8009236 <_free_r+0x22>
 80092a0:	bd38      	pop	{r3, r4, r5, pc}
 80092a2:	bf00      	nop
 80092a4:	20000538 	.word	0x20000538

080092a8 <__ascii_mbtowc>:
 80092a8:	b082      	sub	sp, #8
 80092aa:	b901      	cbnz	r1, 80092ae <__ascii_mbtowc+0x6>
 80092ac:	a901      	add	r1, sp, #4
 80092ae:	b142      	cbz	r2, 80092c2 <__ascii_mbtowc+0x1a>
 80092b0:	b14b      	cbz	r3, 80092c6 <__ascii_mbtowc+0x1e>
 80092b2:	7813      	ldrb	r3, [r2, #0]
 80092b4:	600b      	str	r3, [r1, #0]
 80092b6:	7812      	ldrb	r2, [r2, #0]
 80092b8:	1e10      	subs	r0, r2, #0
 80092ba:	bf18      	it	ne
 80092bc:	2001      	movne	r0, #1
 80092be:	b002      	add	sp, #8
 80092c0:	4770      	bx	lr
 80092c2:	4610      	mov	r0, r2
 80092c4:	e7fb      	b.n	80092be <__ascii_mbtowc+0x16>
 80092c6:	f06f 0001 	mvn.w	r0, #1
 80092ca:	e7f8      	b.n	80092be <__ascii_mbtowc+0x16>

080092cc <fiprintf>:
 80092cc:	b40e      	push	{r1, r2, r3}
 80092ce:	b503      	push	{r0, r1, lr}
 80092d0:	4601      	mov	r1, r0
 80092d2:	ab03      	add	r3, sp, #12
 80092d4:	4805      	ldr	r0, [pc, #20]	@ (80092ec <fiprintf+0x20>)
 80092d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	f000 f845 	bl	800936c <_vfiprintf_r>
 80092e2:	b002      	add	sp, #8
 80092e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092e8:	b003      	add	sp, #12
 80092ea:	4770      	bx	lr
 80092ec:	20000020 	.word	0x20000020

080092f0 <__ascii_wctomb>:
 80092f0:	4603      	mov	r3, r0
 80092f2:	4608      	mov	r0, r1
 80092f4:	b141      	cbz	r1, 8009308 <__ascii_wctomb+0x18>
 80092f6:	2aff      	cmp	r2, #255	@ 0xff
 80092f8:	d904      	bls.n	8009304 <__ascii_wctomb+0x14>
 80092fa:	228a      	movs	r2, #138	@ 0x8a
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009302:	4770      	bx	lr
 8009304:	700a      	strb	r2, [r1, #0]
 8009306:	2001      	movs	r0, #1
 8009308:	4770      	bx	lr

0800930a <abort>:
 800930a:	b508      	push	{r3, lr}
 800930c:	2006      	movs	r0, #6
 800930e:	f000 fa85 	bl	800981c <raise>
 8009312:	2001      	movs	r0, #1
 8009314:	f7f9 f8f4 	bl	8002500 <_exit>

08009318 <__sfputc_r>:
 8009318:	6893      	ldr	r3, [r2, #8]
 800931a:	3b01      	subs	r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	b410      	push	{r4}
 8009320:	6093      	str	r3, [r2, #8]
 8009322:	da08      	bge.n	8009336 <__sfputc_r+0x1e>
 8009324:	6994      	ldr	r4, [r2, #24]
 8009326:	42a3      	cmp	r3, r4
 8009328:	db01      	blt.n	800932e <__sfputc_r+0x16>
 800932a:	290a      	cmp	r1, #10
 800932c:	d103      	bne.n	8009336 <__sfputc_r+0x1e>
 800932e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009332:	f000 b933 	b.w	800959c <__swbuf_r>
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	1c58      	adds	r0, r3, #1
 800933a:	6010      	str	r0, [r2, #0]
 800933c:	7019      	strb	r1, [r3, #0]
 800933e:	4608      	mov	r0, r1
 8009340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009344:	4770      	bx	lr

08009346 <__sfputs_r>:
 8009346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009348:	4606      	mov	r6, r0
 800934a:	460f      	mov	r7, r1
 800934c:	4614      	mov	r4, r2
 800934e:	18d5      	adds	r5, r2, r3
 8009350:	42ac      	cmp	r4, r5
 8009352:	d101      	bne.n	8009358 <__sfputs_r+0x12>
 8009354:	2000      	movs	r0, #0
 8009356:	e007      	b.n	8009368 <__sfputs_r+0x22>
 8009358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935c:	463a      	mov	r2, r7
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff ffda 	bl	8009318 <__sfputc_r>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d1f3      	bne.n	8009350 <__sfputs_r+0xa>
 8009368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800936c <_vfiprintf_r>:
 800936c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009370:	460d      	mov	r5, r1
 8009372:	b09d      	sub	sp, #116	@ 0x74
 8009374:	4614      	mov	r4, r2
 8009376:	4698      	mov	r8, r3
 8009378:	4606      	mov	r6, r0
 800937a:	b118      	cbz	r0, 8009384 <_vfiprintf_r+0x18>
 800937c:	6a03      	ldr	r3, [r0, #32]
 800937e:	b90b      	cbnz	r3, 8009384 <_vfiprintf_r+0x18>
 8009380:	f7fe facc 	bl	800791c <__sinit>
 8009384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009386:	07d9      	lsls	r1, r3, #31
 8009388:	d405      	bmi.n	8009396 <_vfiprintf_r+0x2a>
 800938a:	89ab      	ldrh	r3, [r5, #12]
 800938c:	059a      	lsls	r2, r3, #22
 800938e:	d402      	bmi.n	8009396 <_vfiprintf_r+0x2a>
 8009390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009392:	f7fe fb30 	bl	80079f6 <__retarget_lock_acquire_recursive>
 8009396:	89ab      	ldrh	r3, [r5, #12]
 8009398:	071b      	lsls	r3, r3, #28
 800939a:	d501      	bpl.n	80093a0 <_vfiprintf_r+0x34>
 800939c:	692b      	ldr	r3, [r5, #16]
 800939e:	b99b      	cbnz	r3, 80093c8 <_vfiprintf_r+0x5c>
 80093a0:	4629      	mov	r1, r5
 80093a2:	4630      	mov	r0, r6
 80093a4:	f000 f938 	bl	8009618 <__swsetup_r>
 80093a8:	b170      	cbz	r0, 80093c8 <_vfiprintf_r+0x5c>
 80093aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093ac:	07dc      	lsls	r4, r3, #31
 80093ae:	d504      	bpl.n	80093ba <_vfiprintf_r+0x4e>
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093b4:	b01d      	add	sp, #116	@ 0x74
 80093b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	0598      	lsls	r0, r3, #22
 80093be:	d4f7      	bmi.n	80093b0 <_vfiprintf_r+0x44>
 80093c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093c2:	f7fe fb19 	bl	80079f8 <__retarget_lock_release_recursive>
 80093c6:	e7f3      	b.n	80093b0 <_vfiprintf_r+0x44>
 80093c8:	2300      	movs	r3, #0
 80093ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80093cc:	2320      	movs	r3, #32
 80093ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093d6:	2330      	movs	r3, #48	@ 0x30
 80093d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009588 <_vfiprintf_r+0x21c>
 80093dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093e0:	f04f 0901 	mov.w	r9, #1
 80093e4:	4623      	mov	r3, r4
 80093e6:	469a      	mov	sl, r3
 80093e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ec:	b10a      	cbz	r2, 80093f2 <_vfiprintf_r+0x86>
 80093ee:	2a25      	cmp	r2, #37	@ 0x25
 80093f0:	d1f9      	bne.n	80093e6 <_vfiprintf_r+0x7a>
 80093f2:	ebba 0b04 	subs.w	fp, sl, r4
 80093f6:	d00b      	beq.n	8009410 <_vfiprintf_r+0xa4>
 80093f8:	465b      	mov	r3, fp
 80093fa:	4622      	mov	r2, r4
 80093fc:	4629      	mov	r1, r5
 80093fe:	4630      	mov	r0, r6
 8009400:	f7ff ffa1 	bl	8009346 <__sfputs_r>
 8009404:	3001      	adds	r0, #1
 8009406:	f000 80a7 	beq.w	8009558 <_vfiprintf_r+0x1ec>
 800940a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800940c:	445a      	add	r2, fp
 800940e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009410:	f89a 3000 	ldrb.w	r3, [sl]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 809f 	beq.w	8009558 <_vfiprintf_r+0x1ec>
 800941a:	2300      	movs	r3, #0
 800941c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009424:	f10a 0a01 	add.w	sl, sl, #1
 8009428:	9304      	str	r3, [sp, #16]
 800942a:	9307      	str	r3, [sp, #28]
 800942c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009430:	931a      	str	r3, [sp, #104]	@ 0x68
 8009432:	4654      	mov	r4, sl
 8009434:	2205      	movs	r2, #5
 8009436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943a:	4853      	ldr	r0, [pc, #332]	@ (8009588 <_vfiprintf_r+0x21c>)
 800943c:	f7f6 fee8 	bl	8000210 <memchr>
 8009440:	9a04      	ldr	r2, [sp, #16]
 8009442:	b9d8      	cbnz	r0, 800947c <_vfiprintf_r+0x110>
 8009444:	06d1      	lsls	r1, r2, #27
 8009446:	bf44      	itt	mi
 8009448:	2320      	movmi	r3, #32
 800944a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800944e:	0713      	lsls	r3, r2, #28
 8009450:	bf44      	itt	mi
 8009452:	232b      	movmi	r3, #43	@ 0x2b
 8009454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009458:	f89a 3000 	ldrb.w	r3, [sl]
 800945c:	2b2a      	cmp	r3, #42	@ 0x2a
 800945e:	d015      	beq.n	800948c <_vfiprintf_r+0x120>
 8009460:	9a07      	ldr	r2, [sp, #28]
 8009462:	4654      	mov	r4, sl
 8009464:	2000      	movs	r0, #0
 8009466:	f04f 0c0a 	mov.w	ip, #10
 800946a:	4621      	mov	r1, r4
 800946c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009470:	3b30      	subs	r3, #48	@ 0x30
 8009472:	2b09      	cmp	r3, #9
 8009474:	d94b      	bls.n	800950e <_vfiprintf_r+0x1a2>
 8009476:	b1b0      	cbz	r0, 80094a6 <_vfiprintf_r+0x13a>
 8009478:	9207      	str	r2, [sp, #28]
 800947a:	e014      	b.n	80094a6 <_vfiprintf_r+0x13a>
 800947c:	eba0 0308 	sub.w	r3, r0, r8
 8009480:	fa09 f303 	lsl.w	r3, r9, r3
 8009484:	4313      	orrs	r3, r2
 8009486:	9304      	str	r3, [sp, #16]
 8009488:	46a2      	mov	sl, r4
 800948a:	e7d2      	b.n	8009432 <_vfiprintf_r+0xc6>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	1d19      	adds	r1, r3, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	9103      	str	r1, [sp, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	bfbb      	ittet	lt
 8009498:	425b      	neglt	r3, r3
 800949a:	f042 0202 	orrlt.w	r2, r2, #2
 800949e:	9307      	strge	r3, [sp, #28]
 80094a0:	9307      	strlt	r3, [sp, #28]
 80094a2:	bfb8      	it	lt
 80094a4:	9204      	strlt	r2, [sp, #16]
 80094a6:	7823      	ldrb	r3, [r4, #0]
 80094a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80094aa:	d10a      	bne.n	80094c2 <_vfiprintf_r+0x156>
 80094ac:	7863      	ldrb	r3, [r4, #1]
 80094ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80094b0:	d132      	bne.n	8009518 <_vfiprintf_r+0x1ac>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	1d1a      	adds	r2, r3, #4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	9203      	str	r2, [sp, #12]
 80094ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094be:	3402      	adds	r4, #2
 80094c0:	9305      	str	r3, [sp, #20]
 80094c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009598 <_vfiprintf_r+0x22c>
 80094c6:	7821      	ldrb	r1, [r4, #0]
 80094c8:	2203      	movs	r2, #3
 80094ca:	4650      	mov	r0, sl
 80094cc:	f7f6 fea0 	bl	8000210 <memchr>
 80094d0:	b138      	cbz	r0, 80094e2 <_vfiprintf_r+0x176>
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	eba0 000a 	sub.w	r0, r0, sl
 80094d8:	2240      	movs	r2, #64	@ 0x40
 80094da:	4082      	lsls	r2, r0
 80094dc:	4313      	orrs	r3, r2
 80094de:	3401      	adds	r4, #1
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e6:	4829      	ldr	r0, [pc, #164]	@ (800958c <_vfiprintf_r+0x220>)
 80094e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094ec:	2206      	movs	r2, #6
 80094ee:	f7f6 fe8f 	bl	8000210 <memchr>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d03f      	beq.n	8009576 <_vfiprintf_r+0x20a>
 80094f6:	4b26      	ldr	r3, [pc, #152]	@ (8009590 <_vfiprintf_r+0x224>)
 80094f8:	bb1b      	cbnz	r3, 8009542 <_vfiprintf_r+0x1d6>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	3307      	adds	r3, #7
 80094fe:	f023 0307 	bic.w	r3, r3, #7
 8009502:	3308      	adds	r3, #8
 8009504:	9303      	str	r3, [sp, #12]
 8009506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009508:	443b      	add	r3, r7
 800950a:	9309      	str	r3, [sp, #36]	@ 0x24
 800950c:	e76a      	b.n	80093e4 <_vfiprintf_r+0x78>
 800950e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009512:	460c      	mov	r4, r1
 8009514:	2001      	movs	r0, #1
 8009516:	e7a8      	b.n	800946a <_vfiprintf_r+0xfe>
 8009518:	2300      	movs	r3, #0
 800951a:	3401      	adds	r4, #1
 800951c:	9305      	str	r3, [sp, #20]
 800951e:	4619      	mov	r1, r3
 8009520:	f04f 0c0a 	mov.w	ip, #10
 8009524:	4620      	mov	r0, r4
 8009526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952a:	3a30      	subs	r2, #48	@ 0x30
 800952c:	2a09      	cmp	r2, #9
 800952e:	d903      	bls.n	8009538 <_vfiprintf_r+0x1cc>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0c6      	beq.n	80094c2 <_vfiprintf_r+0x156>
 8009534:	9105      	str	r1, [sp, #20]
 8009536:	e7c4      	b.n	80094c2 <_vfiprintf_r+0x156>
 8009538:	fb0c 2101 	mla	r1, ip, r1, r2
 800953c:	4604      	mov	r4, r0
 800953e:	2301      	movs	r3, #1
 8009540:	e7f0      	b.n	8009524 <_vfiprintf_r+0x1b8>
 8009542:	ab03      	add	r3, sp, #12
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	462a      	mov	r2, r5
 8009548:	4b12      	ldr	r3, [pc, #72]	@ (8009594 <_vfiprintf_r+0x228>)
 800954a:	a904      	add	r1, sp, #16
 800954c:	4630      	mov	r0, r6
 800954e:	f7fd fda1 	bl	8007094 <_printf_float>
 8009552:	4607      	mov	r7, r0
 8009554:	1c78      	adds	r0, r7, #1
 8009556:	d1d6      	bne.n	8009506 <_vfiprintf_r+0x19a>
 8009558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800955a:	07d9      	lsls	r1, r3, #31
 800955c:	d405      	bmi.n	800956a <_vfiprintf_r+0x1fe>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	059a      	lsls	r2, r3, #22
 8009562:	d402      	bmi.n	800956a <_vfiprintf_r+0x1fe>
 8009564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009566:	f7fe fa47 	bl	80079f8 <__retarget_lock_release_recursive>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	065b      	lsls	r3, r3, #25
 800956e:	f53f af1f 	bmi.w	80093b0 <_vfiprintf_r+0x44>
 8009572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009574:	e71e      	b.n	80093b4 <_vfiprintf_r+0x48>
 8009576:	ab03      	add	r3, sp, #12
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	462a      	mov	r2, r5
 800957c:	4b05      	ldr	r3, [pc, #20]	@ (8009594 <_vfiprintf_r+0x228>)
 800957e:	a904      	add	r1, sp, #16
 8009580:	4630      	mov	r0, r6
 8009582:	f7fe f81f 	bl	80075c4 <_printf_i>
 8009586:	e7e4      	b.n	8009552 <_vfiprintf_r+0x1e6>
 8009588:	0800bb0f 	.word	0x0800bb0f
 800958c:	0800bb19 	.word	0x0800bb19
 8009590:	08007095 	.word	0x08007095
 8009594:	08009347 	.word	0x08009347
 8009598:	0800bb15 	.word	0x0800bb15

0800959c <__swbuf_r>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	460e      	mov	r6, r1
 80095a0:	4614      	mov	r4, r2
 80095a2:	4605      	mov	r5, r0
 80095a4:	b118      	cbz	r0, 80095ae <__swbuf_r+0x12>
 80095a6:	6a03      	ldr	r3, [r0, #32]
 80095a8:	b90b      	cbnz	r3, 80095ae <__swbuf_r+0x12>
 80095aa:	f7fe f9b7 	bl	800791c <__sinit>
 80095ae:	69a3      	ldr	r3, [r4, #24]
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	071a      	lsls	r2, r3, #28
 80095b6:	d501      	bpl.n	80095bc <__swbuf_r+0x20>
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	b943      	cbnz	r3, 80095ce <__swbuf_r+0x32>
 80095bc:	4621      	mov	r1, r4
 80095be:	4628      	mov	r0, r5
 80095c0:	f000 f82a 	bl	8009618 <__swsetup_r>
 80095c4:	b118      	cbz	r0, 80095ce <__swbuf_r+0x32>
 80095c6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80095ca:	4638      	mov	r0, r7
 80095cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	6922      	ldr	r2, [r4, #16]
 80095d2:	1a98      	subs	r0, r3, r2
 80095d4:	6963      	ldr	r3, [r4, #20]
 80095d6:	b2f6      	uxtb	r6, r6
 80095d8:	4283      	cmp	r3, r0
 80095da:	4637      	mov	r7, r6
 80095dc:	dc05      	bgt.n	80095ea <__swbuf_r+0x4e>
 80095de:	4621      	mov	r1, r4
 80095e0:	4628      	mov	r0, r5
 80095e2:	f7ff f987 	bl	80088f4 <_fflush_r>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d1ed      	bne.n	80095c6 <__swbuf_r+0x2a>
 80095ea:	68a3      	ldr	r3, [r4, #8]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	60a3      	str	r3, [r4, #8]
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	6022      	str	r2, [r4, #0]
 80095f6:	701e      	strb	r6, [r3, #0]
 80095f8:	6962      	ldr	r2, [r4, #20]
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d004      	beq.n	800960a <__swbuf_r+0x6e>
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	07db      	lsls	r3, r3, #31
 8009604:	d5e1      	bpl.n	80095ca <__swbuf_r+0x2e>
 8009606:	2e0a      	cmp	r6, #10
 8009608:	d1df      	bne.n	80095ca <__swbuf_r+0x2e>
 800960a:	4621      	mov	r1, r4
 800960c:	4628      	mov	r0, r5
 800960e:	f7ff f971 	bl	80088f4 <_fflush_r>
 8009612:	2800      	cmp	r0, #0
 8009614:	d0d9      	beq.n	80095ca <__swbuf_r+0x2e>
 8009616:	e7d6      	b.n	80095c6 <__swbuf_r+0x2a>

08009618 <__swsetup_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4b29      	ldr	r3, [pc, #164]	@ (80096c0 <__swsetup_r+0xa8>)
 800961c:	4605      	mov	r5, r0
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	460c      	mov	r4, r1
 8009622:	b118      	cbz	r0, 800962c <__swsetup_r+0x14>
 8009624:	6a03      	ldr	r3, [r0, #32]
 8009626:	b90b      	cbnz	r3, 800962c <__swsetup_r+0x14>
 8009628:	f7fe f978 	bl	800791c <__sinit>
 800962c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009630:	0719      	lsls	r1, r3, #28
 8009632:	d422      	bmi.n	800967a <__swsetup_r+0x62>
 8009634:	06da      	lsls	r2, r3, #27
 8009636:	d407      	bmi.n	8009648 <__swsetup_r+0x30>
 8009638:	2209      	movs	r2, #9
 800963a:	602a      	str	r2, [r5, #0]
 800963c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009646:	e033      	b.n	80096b0 <__swsetup_r+0x98>
 8009648:	0758      	lsls	r0, r3, #29
 800964a:	d512      	bpl.n	8009672 <__swsetup_r+0x5a>
 800964c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800964e:	b141      	cbz	r1, 8009662 <__swsetup_r+0x4a>
 8009650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009654:	4299      	cmp	r1, r3
 8009656:	d002      	beq.n	800965e <__swsetup_r+0x46>
 8009658:	4628      	mov	r0, r5
 800965a:	f7ff fddb 	bl	8009214 <_free_r>
 800965e:	2300      	movs	r3, #0
 8009660:	6363      	str	r3, [r4, #52]	@ 0x34
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	2300      	movs	r3, #0
 800966c:	6063      	str	r3, [r4, #4]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f043 0308 	orr.w	r3, r3, #8
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	b94b      	cbnz	r3, 8009692 <__swsetup_r+0x7a>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009688:	d003      	beq.n	8009692 <__swsetup_r+0x7a>
 800968a:	4621      	mov	r1, r4
 800968c:	4628      	mov	r0, r5
 800968e:	f000 f83f 	bl	8009710 <__smakebuf_r>
 8009692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009696:	f013 0201 	ands.w	r2, r3, #1
 800969a:	d00a      	beq.n	80096b2 <__swsetup_r+0x9a>
 800969c:	2200      	movs	r2, #0
 800969e:	60a2      	str	r2, [r4, #8]
 80096a0:	6962      	ldr	r2, [r4, #20]
 80096a2:	4252      	negs	r2, r2
 80096a4:	61a2      	str	r2, [r4, #24]
 80096a6:	6922      	ldr	r2, [r4, #16]
 80096a8:	b942      	cbnz	r2, 80096bc <__swsetup_r+0xa4>
 80096aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096ae:	d1c5      	bne.n	800963c <__swsetup_r+0x24>
 80096b0:	bd38      	pop	{r3, r4, r5, pc}
 80096b2:	0799      	lsls	r1, r3, #30
 80096b4:	bf58      	it	pl
 80096b6:	6962      	ldrpl	r2, [r4, #20]
 80096b8:	60a2      	str	r2, [r4, #8]
 80096ba:	e7f4      	b.n	80096a6 <__swsetup_r+0x8e>
 80096bc:	2000      	movs	r0, #0
 80096be:	e7f7      	b.n	80096b0 <__swsetup_r+0x98>
 80096c0:	20000020 	.word	0x20000020

080096c4 <__swhatbuf_r>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	460c      	mov	r4, r1
 80096c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096cc:	2900      	cmp	r1, #0
 80096ce:	b096      	sub	sp, #88	@ 0x58
 80096d0:	4615      	mov	r5, r2
 80096d2:	461e      	mov	r6, r3
 80096d4:	da0d      	bge.n	80096f2 <__swhatbuf_r+0x2e>
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096dc:	f04f 0100 	mov.w	r1, #0
 80096e0:	bf14      	ite	ne
 80096e2:	2340      	movne	r3, #64	@ 0x40
 80096e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096e8:	2000      	movs	r0, #0
 80096ea:	6031      	str	r1, [r6, #0]
 80096ec:	602b      	str	r3, [r5, #0]
 80096ee:	b016      	add	sp, #88	@ 0x58
 80096f0:	bd70      	pop	{r4, r5, r6, pc}
 80096f2:	466a      	mov	r2, sp
 80096f4:	f000 f848 	bl	8009788 <_fstat_r>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	dbec      	blt.n	80096d6 <__swhatbuf_r+0x12>
 80096fc:	9901      	ldr	r1, [sp, #4]
 80096fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009702:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009706:	4259      	negs	r1, r3
 8009708:	4159      	adcs	r1, r3
 800970a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800970e:	e7eb      	b.n	80096e8 <__swhatbuf_r+0x24>

08009710 <__smakebuf_r>:
 8009710:	898b      	ldrh	r3, [r1, #12]
 8009712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009714:	079d      	lsls	r5, r3, #30
 8009716:	4606      	mov	r6, r0
 8009718:	460c      	mov	r4, r1
 800971a:	d507      	bpl.n	800972c <__smakebuf_r+0x1c>
 800971c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	6123      	str	r3, [r4, #16]
 8009724:	2301      	movs	r3, #1
 8009726:	6163      	str	r3, [r4, #20]
 8009728:	b003      	add	sp, #12
 800972a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800972c:	ab01      	add	r3, sp, #4
 800972e:	466a      	mov	r2, sp
 8009730:	f7ff ffc8 	bl	80096c4 <__swhatbuf_r>
 8009734:	9f00      	ldr	r7, [sp, #0]
 8009736:	4605      	mov	r5, r0
 8009738:	4639      	mov	r1, r7
 800973a:	4630      	mov	r0, r6
 800973c:	f7fe ffd6 	bl	80086ec <_malloc_r>
 8009740:	b948      	cbnz	r0, 8009756 <__smakebuf_r+0x46>
 8009742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009746:	059a      	lsls	r2, r3, #22
 8009748:	d4ee      	bmi.n	8009728 <__smakebuf_r+0x18>
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	f043 0302 	orr.w	r3, r3, #2
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	e7e2      	b.n	800971c <__smakebuf_r+0xc>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	6020      	str	r0, [r4, #0]
 800975a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	9b01      	ldr	r3, [sp, #4]
 8009762:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009766:	b15b      	cbz	r3, 8009780 <__smakebuf_r+0x70>
 8009768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800976c:	4630      	mov	r0, r6
 800976e:	f000 f81d 	bl	80097ac <_isatty_r>
 8009772:	b128      	cbz	r0, 8009780 <__smakebuf_r+0x70>
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	f023 0303 	bic.w	r3, r3, #3
 800977a:	f043 0301 	orr.w	r3, r3, #1
 800977e:	81a3      	strh	r3, [r4, #12]
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	431d      	orrs	r5, r3
 8009784:	81a5      	strh	r5, [r4, #12]
 8009786:	e7cf      	b.n	8009728 <__smakebuf_r+0x18>

08009788 <_fstat_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d07      	ldr	r5, [pc, #28]	@ (80097a8 <_fstat_r+0x20>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	4611      	mov	r1, r2
 8009794:	602b      	str	r3, [r5, #0]
 8009796:	f7f8 ff03 	bl	80025a0 <_fstat>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	d102      	bne.n	80097a4 <_fstat_r+0x1c>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	b103      	cbz	r3, 80097a4 <_fstat_r+0x1c>
 80097a2:	6023      	str	r3, [r4, #0]
 80097a4:	bd38      	pop	{r3, r4, r5, pc}
 80097a6:	bf00      	nop
 80097a8:	2000053c 	.word	0x2000053c

080097ac <_isatty_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d06      	ldr	r5, [pc, #24]	@ (80097c8 <_isatty_r+0x1c>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f8 ff02 	bl	80025c0 <_isatty>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_isatty_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_isatty_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	2000053c 	.word	0x2000053c

080097cc <_raise_r>:
 80097cc:	291f      	cmp	r1, #31
 80097ce:	b538      	push	{r3, r4, r5, lr}
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	d904      	bls.n	80097e0 <_raise_r+0x14>
 80097d6:	2316      	movs	r3, #22
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097e2:	b112      	cbz	r2, 80097ea <_raise_r+0x1e>
 80097e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097e8:	b94b      	cbnz	r3, 80097fe <_raise_r+0x32>
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 f830 	bl	8009850 <_getpid_r>
 80097f0:	4622      	mov	r2, r4
 80097f2:	4601      	mov	r1, r0
 80097f4:	4628      	mov	r0, r5
 80097f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097fa:	f000 b817 	b.w	800982c <_kill_r>
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d00a      	beq.n	8009818 <_raise_r+0x4c>
 8009802:	1c59      	adds	r1, r3, #1
 8009804:	d103      	bne.n	800980e <_raise_r+0x42>
 8009806:	2316      	movs	r3, #22
 8009808:	6003      	str	r3, [r0, #0]
 800980a:	2001      	movs	r0, #1
 800980c:	e7e7      	b.n	80097de <_raise_r+0x12>
 800980e:	2100      	movs	r1, #0
 8009810:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009814:	4620      	mov	r0, r4
 8009816:	4798      	blx	r3
 8009818:	2000      	movs	r0, #0
 800981a:	e7e0      	b.n	80097de <_raise_r+0x12>

0800981c <raise>:
 800981c:	4b02      	ldr	r3, [pc, #8]	@ (8009828 <raise+0xc>)
 800981e:	4601      	mov	r1, r0
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f7ff bfd3 	b.w	80097cc <_raise_r>
 8009826:	bf00      	nop
 8009828:	20000020 	.word	0x20000020

0800982c <_kill_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	@ (800984c <_kill_r+0x20>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f7f8 fe51 	bl	80024e0 <_kill>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d102      	bne.n	8009848 <_kill_r+0x1c>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	b103      	cbz	r3, 8009848 <_kill_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	2000053c 	.word	0x2000053c

08009850 <_getpid_r>:
 8009850:	f7f8 be3e 	b.w	80024d0 <_getpid>

08009854 <pow>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	ed2d 8b02 	vpush	{d8}
 800985a:	eeb0 8a40 	vmov.f32	s16, s0
 800985e:	eef0 8a60 	vmov.f32	s17, s1
 8009862:	ec55 4b11 	vmov	r4, r5, d1
 8009866:	f000 fa23 	bl	8009cb0 <__ieee754_pow>
 800986a:	4622      	mov	r2, r4
 800986c:	462b      	mov	r3, r5
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	ec57 6b10 	vmov	r6, r7, d0
 8009876:	f7f7 f979 	bl	8000b6c <__aeabi_dcmpun>
 800987a:	2800      	cmp	r0, #0
 800987c:	d13b      	bne.n	80098f6 <pow+0xa2>
 800987e:	ec51 0b18 	vmov	r0, r1, d8
 8009882:	2200      	movs	r2, #0
 8009884:	2300      	movs	r3, #0
 8009886:	f7f7 f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800988a:	b1b8      	cbz	r0, 80098bc <pow+0x68>
 800988c:	2200      	movs	r2, #0
 800988e:	2300      	movs	r3, #0
 8009890:	4620      	mov	r0, r4
 8009892:	4629      	mov	r1, r5
 8009894:	f7f7 f938 	bl	8000b08 <__aeabi_dcmpeq>
 8009898:	2800      	cmp	r0, #0
 800989a:	d146      	bne.n	800992a <pow+0xd6>
 800989c:	ec45 4b10 	vmov	d0, r4, r5
 80098a0:	f000 f8ca 	bl	8009a38 <finite>
 80098a4:	b338      	cbz	r0, 80098f6 <pow+0xa2>
 80098a6:	2200      	movs	r2, #0
 80098a8:	2300      	movs	r3, #0
 80098aa:	4620      	mov	r0, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	f7f7 f935 	bl	8000b1c <__aeabi_dcmplt>
 80098b2:	b300      	cbz	r0, 80098f6 <pow+0xa2>
 80098b4:	f7fe f874 	bl	80079a0 <__errno>
 80098b8:	2322      	movs	r3, #34	@ 0x22
 80098ba:	e01b      	b.n	80098f4 <pow+0xa0>
 80098bc:	ec47 6b10 	vmov	d0, r6, r7
 80098c0:	f000 f8ba 	bl	8009a38 <finite>
 80098c4:	b9e0      	cbnz	r0, 8009900 <pow+0xac>
 80098c6:	eeb0 0a48 	vmov.f32	s0, s16
 80098ca:	eef0 0a68 	vmov.f32	s1, s17
 80098ce:	f000 f8b3 	bl	8009a38 <finite>
 80098d2:	b1a8      	cbz	r0, 8009900 <pow+0xac>
 80098d4:	ec45 4b10 	vmov	d0, r4, r5
 80098d8:	f000 f8ae 	bl	8009a38 <finite>
 80098dc:	b180      	cbz	r0, 8009900 <pow+0xac>
 80098de:	4632      	mov	r2, r6
 80098e0:	463b      	mov	r3, r7
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f7 f941 	bl	8000b6c <__aeabi_dcmpun>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d0e2      	beq.n	80098b4 <pow+0x60>
 80098ee:	f7fe f857 	bl	80079a0 <__errno>
 80098f2:	2321      	movs	r3, #33	@ 0x21
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	ecbd 8b02 	vpop	{d8}
 80098fa:	ec47 6b10 	vmov	d0, r6, r7
 80098fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009900:	2200      	movs	r2, #0
 8009902:	2300      	movs	r3, #0
 8009904:	4630      	mov	r0, r6
 8009906:	4639      	mov	r1, r7
 8009908:	f7f7 f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 800990c:	2800      	cmp	r0, #0
 800990e:	d0f2      	beq.n	80098f6 <pow+0xa2>
 8009910:	eeb0 0a48 	vmov.f32	s0, s16
 8009914:	eef0 0a68 	vmov.f32	s1, s17
 8009918:	f000 f88e 	bl	8009a38 <finite>
 800991c:	2800      	cmp	r0, #0
 800991e:	d0ea      	beq.n	80098f6 <pow+0xa2>
 8009920:	ec45 4b10 	vmov	d0, r4, r5
 8009924:	f000 f888 	bl	8009a38 <finite>
 8009928:	e7c3      	b.n	80098b2 <pow+0x5e>
 800992a:	4f01      	ldr	r7, [pc, #4]	@ (8009930 <pow+0xdc>)
 800992c:	2600      	movs	r6, #0
 800992e:	e7e2      	b.n	80098f6 <pow+0xa2>
 8009930:	3ff00000 	.word	0x3ff00000

08009934 <sqrt>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	ed2d 8b02 	vpush	{d8}
 800993a:	ec55 4b10 	vmov	r4, r5, d0
 800993e:	f000 f8db 	bl	8009af8 <__ieee754_sqrt>
 8009942:	4622      	mov	r2, r4
 8009944:	462b      	mov	r3, r5
 8009946:	4620      	mov	r0, r4
 8009948:	4629      	mov	r1, r5
 800994a:	eeb0 8a40 	vmov.f32	s16, s0
 800994e:	eef0 8a60 	vmov.f32	s17, s1
 8009952:	f7f7 f90b 	bl	8000b6c <__aeabi_dcmpun>
 8009956:	b990      	cbnz	r0, 800997e <sqrt+0x4a>
 8009958:	2200      	movs	r2, #0
 800995a:	2300      	movs	r3, #0
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f7 f8dc 	bl	8000b1c <__aeabi_dcmplt>
 8009964:	b158      	cbz	r0, 800997e <sqrt+0x4a>
 8009966:	f7fe f81b 	bl	80079a0 <__errno>
 800996a:	2321      	movs	r3, #33	@ 0x21
 800996c:	6003      	str	r3, [r0, #0]
 800996e:	2200      	movs	r2, #0
 8009970:	2300      	movs	r3, #0
 8009972:	4610      	mov	r0, r2
 8009974:	4619      	mov	r1, r3
 8009976:	f7f6 ff89 	bl	800088c <__aeabi_ddiv>
 800997a:	ec41 0b18 	vmov	d8, r0, r1
 800997e:	eeb0 0a48 	vmov.f32	s0, s16
 8009982:	eef0 0a68 	vmov.f32	s1, s17
 8009986:	ecbd 8b02 	vpop	{d8}
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	0000      	movs	r0, r0
	...

08009990 <cos>:
 8009990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009992:	ec53 2b10 	vmov	r2, r3, d0
 8009996:	4826      	ldr	r0, [pc, #152]	@ (8009a30 <cos+0xa0>)
 8009998:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800999c:	4281      	cmp	r1, r0
 800999e:	d806      	bhi.n	80099ae <cos+0x1e>
 80099a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009a28 <cos+0x98>
 80099a4:	b005      	add	sp, #20
 80099a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80099aa:	f001 bc55 	b.w	800b258 <__kernel_cos>
 80099ae:	4821      	ldr	r0, [pc, #132]	@ (8009a34 <cos+0xa4>)
 80099b0:	4281      	cmp	r1, r0
 80099b2:	d908      	bls.n	80099c6 <cos+0x36>
 80099b4:	4610      	mov	r0, r2
 80099b6:	4619      	mov	r1, r3
 80099b8:	f7f6 fc86 	bl	80002c8 <__aeabi_dsub>
 80099bc:	ec41 0b10 	vmov	d0, r0, r1
 80099c0:	b005      	add	sp, #20
 80099c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80099c6:	4668      	mov	r0, sp
 80099c8:	f000 feb6 	bl	800a738 <__ieee754_rem_pio2>
 80099cc:	f000 0003 	and.w	r0, r0, #3
 80099d0:	2801      	cmp	r0, #1
 80099d2:	d00b      	beq.n	80099ec <cos+0x5c>
 80099d4:	2802      	cmp	r0, #2
 80099d6:	d015      	beq.n	8009a04 <cos+0x74>
 80099d8:	b9d8      	cbnz	r0, 8009a12 <cos+0x82>
 80099da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099de:	ed9d 0b00 	vldr	d0, [sp]
 80099e2:	f001 fc39 	bl	800b258 <__kernel_cos>
 80099e6:	ec51 0b10 	vmov	r0, r1, d0
 80099ea:	e7e7      	b.n	80099bc <cos+0x2c>
 80099ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099f0:	ed9d 0b00 	vldr	d0, [sp]
 80099f4:	f001 fcf8 	bl	800b3e8 <__kernel_sin>
 80099f8:	ec53 2b10 	vmov	r2, r3, d0
 80099fc:	4610      	mov	r0, r2
 80099fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009a02:	e7db      	b.n	80099bc <cos+0x2c>
 8009a04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a08:	ed9d 0b00 	vldr	d0, [sp]
 8009a0c:	f001 fc24 	bl	800b258 <__kernel_cos>
 8009a10:	e7f2      	b.n	80099f8 <cos+0x68>
 8009a12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a16:	ed9d 0b00 	vldr	d0, [sp]
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	f001 fce4 	bl	800b3e8 <__kernel_sin>
 8009a20:	e7e1      	b.n	80099e6 <cos+0x56>
 8009a22:	bf00      	nop
 8009a24:	f3af 8000 	nop.w
	...
 8009a30:	3fe921fb 	.word	0x3fe921fb
 8009a34:	7fefffff 	.word	0x7fefffff

08009a38 <finite>:
 8009a38:	b082      	sub	sp, #8
 8009a3a:	ed8d 0b00 	vstr	d0, [sp]
 8009a3e:	9801      	ldr	r0, [sp, #4]
 8009a40:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009a44:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009a48:	0fc0      	lsrs	r0, r0, #31
 8009a4a:	b002      	add	sp, #8
 8009a4c:	4770      	bx	lr
	...

08009a50 <sin>:
 8009a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a52:	ec53 2b10 	vmov	r2, r3, d0
 8009a56:	4826      	ldr	r0, [pc, #152]	@ (8009af0 <sin+0xa0>)
 8009a58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009a5c:	4281      	cmp	r1, r0
 8009a5e:	d807      	bhi.n	8009a70 <sin+0x20>
 8009a60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009ae8 <sin+0x98>
 8009a64:	2000      	movs	r0, #0
 8009a66:	b005      	add	sp, #20
 8009a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a6c:	f001 bcbc 	b.w	800b3e8 <__kernel_sin>
 8009a70:	4820      	ldr	r0, [pc, #128]	@ (8009af4 <sin+0xa4>)
 8009a72:	4281      	cmp	r1, r0
 8009a74:	d908      	bls.n	8009a88 <sin+0x38>
 8009a76:	4610      	mov	r0, r2
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f7f6 fc25 	bl	80002c8 <__aeabi_dsub>
 8009a7e:	ec41 0b10 	vmov	d0, r0, r1
 8009a82:	b005      	add	sp, #20
 8009a84:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a88:	4668      	mov	r0, sp
 8009a8a:	f000 fe55 	bl	800a738 <__ieee754_rem_pio2>
 8009a8e:	f000 0003 	and.w	r0, r0, #3
 8009a92:	2801      	cmp	r0, #1
 8009a94:	d00c      	beq.n	8009ab0 <sin+0x60>
 8009a96:	2802      	cmp	r0, #2
 8009a98:	d011      	beq.n	8009abe <sin+0x6e>
 8009a9a:	b9e8      	cbnz	r0, 8009ad8 <sin+0x88>
 8009a9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aa0:	ed9d 0b00 	vldr	d0, [sp]
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	f001 fc9f 	bl	800b3e8 <__kernel_sin>
 8009aaa:	ec51 0b10 	vmov	r0, r1, d0
 8009aae:	e7e6      	b.n	8009a7e <sin+0x2e>
 8009ab0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ab4:	ed9d 0b00 	vldr	d0, [sp]
 8009ab8:	f001 fbce 	bl	800b258 <__kernel_cos>
 8009abc:	e7f5      	b.n	8009aaa <sin+0x5a>
 8009abe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ac2:	ed9d 0b00 	vldr	d0, [sp]
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	f001 fc8e 	bl	800b3e8 <__kernel_sin>
 8009acc:	ec53 2b10 	vmov	r2, r3, d0
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009ad6:	e7d2      	b.n	8009a7e <sin+0x2e>
 8009ad8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009adc:	ed9d 0b00 	vldr	d0, [sp]
 8009ae0:	f001 fbba 	bl	800b258 <__kernel_cos>
 8009ae4:	e7f2      	b.n	8009acc <sin+0x7c>
 8009ae6:	bf00      	nop
	...
 8009af0:	3fe921fb 	.word	0x3fe921fb
 8009af4:	7fefffff 	.word	0x7fefffff

08009af8 <__ieee754_sqrt>:
 8009af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	4a68      	ldr	r2, [pc, #416]	@ (8009ca0 <__ieee754_sqrt+0x1a8>)
 8009afe:	ec55 4b10 	vmov	r4, r5, d0
 8009b02:	43aa      	bics	r2, r5
 8009b04:	462b      	mov	r3, r5
 8009b06:	4621      	mov	r1, r4
 8009b08:	d110      	bne.n	8009b2c <__ieee754_sqrt+0x34>
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f7f6 fd92 	bl	8000638 <__aeabi_dmul>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 fbd6 	bl	80002cc <__adddf3>
 8009b20:	4604      	mov	r4, r0
 8009b22:	460d      	mov	r5, r1
 8009b24:	ec45 4b10 	vmov	d0, r4, r5
 8009b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	dc0e      	bgt.n	8009b4e <__ieee754_sqrt+0x56>
 8009b30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009b34:	4322      	orrs	r2, r4
 8009b36:	d0f5      	beq.n	8009b24 <__ieee754_sqrt+0x2c>
 8009b38:	b19d      	cbz	r5, 8009b62 <__ieee754_sqrt+0x6a>
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	4629      	mov	r1, r5
 8009b40:	f7f6 fbc2 	bl	80002c8 <__aeabi_dsub>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	f7f6 fea0 	bl	800088c <__aeabi_ddiv>
 8009b4c:	e7e8      	b.n	8009b20 <__ieee754_sqrt+0x28>
 8009b4e:	152a      	asrs	r2, r5, #20
 8009b50:	d115      	bne.n	8009b7e <__ieee754_sqrt+0x86>
 8009b52:	2000      	movs	r0, #0
 8009b54:	e009      	b.n	8009b6a <__ieee754_sqrt+0x72>
 8009b56:	0acb      	lsrs	r3, r1, #11
 8009b58:	3a15      	subs	r2, #21
 8009b5a:	0549      	lsls	r1, r1, #21
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0fa      	beq.n	8009b56 <__ieee754_sqrt+0x5e>
 8009b60:	e7f7      	b.n	8009b52 <__ieee754_sqrt+0x5a>
 8009b62:	462a      	mov	r2, r5
 8009b64:	e7fa      	b.n	8009b5c <__ieee754_sqrt+0x64>
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	3001      	adds	r0, #1
 8009b6a:	02dc      	lsls	r4, r3, #11
 8009b6c:	d5fb      	bpl.n	8009b66 <__ieee754_sqrt+0x6e>
 8009b6e:	1e44      	subs	r4, r0, #1
 8009b70:	1b12      	subs	r2, r2, r4
 8009b72:	f1c0 0420 	rsb	r4, r0, #32
 8009b76:	fa21 f404 	lsr.w	r4, r1, r4
 8009b7a:	4323      	orrs	r3, r4
 8009b7c:	4081      	lsls	r1, r0
 8009b7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b8a:	07d2      	lsls	r2, r2, #31
 8009b8c:	bf5c      	itt	pl
 8009b8e:	005b      	lslpl	r3, r3, #1
 8009b90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b98:	bf58      	it	pl
 8009b9a:	0049      	lslpl	r1, r1, #1
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009ba2:	106d      	asrs	r5, r5, #1
 8009ba4:	0049      	lsls	r1, r1, #1
 8009ba6:	2016      	movs	r0, #22
 8009ba8:	4632      	mov	r2, r6
 8009baa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009bae:	1917      	adds	r7, r2, r4
 8009bb0:	429f      	cmp	r7, r3
 8009bb2:	bfde      	ittt	le
 8009bb4:	193a      	addle	r2, r7, r4
 8009bb6:	1bdb      	suble	r3, r3, r7
 8009bb8:	1936      	addle	r6, r6, r4
 8009bba:	0fcf      	lsrs	r7, r1, #31
 8009bbc:	3801      	subs	r0, #1
 8009bbe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009bc2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009bc6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009bca:	d1f0      	bne.n	8009bae <__ieee754_sqrt+0xb6>
 8009bcc:	4604      	mov	r4, r0
 8009bce:	2720      	movs	r7, #32
 8009bd0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	eb00 0e0c 	add.w	lr, r0, ip
 8009bda:	db02      	blt.n	8009be2 <__ieee754_sqrt+0xea>
 8009bdc:	d113      	bne.n	8009c06 <__ieee754_sqrt+0x10e>
 8009bde:	458e      	cmp	lr, r1
 8009be0:	d811      	bhi.n	8009c06 <__ieee754_sqrt+0x10e>
 8009be2:	f1be 0f00 	cmp.w	lr, #0
 8009be6:	eb0e 000c 	add.w	r0, lr, ip
 8009bea:	da42      	bge.n	8009c72 <__ieee754_sqrt+0x17a>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	db40      	blt.n	8009c72 <__ieee754_sqrt+0x17a>
 8009bf0:	f102 0801 	add.w	r8, r2, #1
 8009bf4:	1a9b      	subs	r3, r3, r2
 8009bf6:	458e      	cmp	lr, r1
 8009bf8:	bf88      	it	hi
 8009bfa:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8009bfe:	eba1 010e 	sub.w	r1, r1, lr
 8009c02:	4464      	add	r4, ip
 8009c04:	4642      	mov	r2, r8
 8009c06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009c0a:	3f01      	subs	r7, #1
 8009c0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009c10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009c18:	d1dc      	bne.n	8009bd4 <__ieee754_sqrt+0xdc>
 8009c1a:	4319      	orrs	r1, r3
 8009c1c:	d01b      	beq.n	8009c56 <__ieee754_sqrt+0x15e>
 8009c1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009ca4 <__ieee754_sqrt+0x1ac>
 8009c22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009ca8 <__ieee754_sqrt+0x1b0>
 8009c26:	e9da 0100 	ldrd	r0, r1, [sl]
 8009c2a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009c2e:	f7f6 fb4b 	bl	80002c8 <__aeabi_dsub>
 8009c32:	e9da 8900 	ldrd	r8, r9, [sl]
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	f7f6 ff77 	bl	8000b30 <__aeabi_dcmple>
 8009c42:	b140      	cbz	r0, 8009c56 <__ieee754_sqrt+0x15e>
 8009c44:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8009c48:	e9da 0100 	ldrd	r0, r1, [sl]
 8009c4c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009c50:	d111      	bne.n	8009c76 <__ieee754_sqrt+0x17e>
 8009c52:	3601      	adds	r6, #1
 8009c54:	463c      	mov	r4, r7
 8009c56:	1072      	asrs	r2, r6, #1
 8009c58:	0863      	lsrs	r3, r4, #1
 8009c5a:	07f1      	lsls	r1, r6, #31
 8009c5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009c60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009c64:	bf48      	it	mi
 8009c66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009c6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009c6e:	4618      	mov	r0, r3
 8009c70:	e756      	b.n	8009b20 <__ieee754_sqrt+0x28>
 8009c72:	4690      	mov	r8, r2
 8009c74:	e7be      	b.n	8009bf4 <__ieee754_sqrt+0xfc>
 8009c76:	f7f6 fb29 	bl	80002cc <__adddf3>
 8009c7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	4640      	mov	r0, r8
 8009c84:	4649      	mov	r1, r9
 8009c86:	f7f6 ff49 	bl	8000b1c <__aeabi_dcmplt>
 8009c8a:	b120      	cbz	r0, 8009c96 <__ieee754_sqrt+0x19e>
 8009c8c:	1ca0      	adds	r0, r4, #2
 8009c8e:	bf08      	it	eq
 8009c90:	3601      	addeq	r6, #1
 8009c92:	3402      	adds	r4, #2
 8009c94:	e7df      	b.n	8009c56 <__ieee754_sqrt+0x15e>
 8009c96:	1c63      	adds	r3, r4, #1
 8009c98:	f023 0401 	bic.w	r4, r3, #1
 8009c9c:	e7db      	b.n	8009c56 <__ieee754_sqrt+0x15e>
 8009c9e:	bf00      	nop
 8009ca0:	7ff00000 	.word	0x7ff00000
 8009ca4:	200001e8 	.word	0x200001e8
 8009ca8:	200001e0 	.word	0x200001e0
 8009cac:	00000000 	.word	0x00000000

08009cb0 <__ieee754_pow>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	b091      	sub	sp, #68	@ 0x44
 8009cb6:	ed8d 1b00 	vstr	d1, [sp]
 8009cba:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009cbe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009cc2:	ea5a 0001 	orrs.w	r0, sl, r1
 8009cc6:	ec57 6b10 	vmov	r6, r7, d0
 8009cca:	d113      	bne.n	8009cf4 <__ieee754_pow+0x44>
 8009ccc:	19b3      	adds	r3, r6, r6
 8009cce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009cd2:	4152      	adcs	r2, r2
 8009cd4:	4298      	cmp	r0, r3
 8009cd6:	4b98      	ldr	r3, [pc, #608]	@ (8009f38 <__ieee754_pow+0x288>)
 8009cd8:	4193      	sbcs	r3, r2
 8009cda:	f080 84ea 	bcs.w	800a6b2 <__ieee754_pow+0xa02>
 8009cde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 faf1 	bl	80002cc <__adddf3>
 8009cea:	ec41 0b10 	vmov	d0, r0, r1
 8009cee:	b011      	add	sp, #68	@ 0x44
 8009cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf4:	4a91      	ldr	r2, [pc, #580]	@ (8009f3c <__ieee754_pow+0x28c>)
 8009cf6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009cfa:	4590      	cmp	r8, r2
 8009cfc:	463d      	mov	r5, r7
 8009cfe:	4633      	mov	r3, r6
 8009d00:	d806      	bhi.n	8009d10 <__ieee754_pow+0x60>
 8009d02:	d101      	bne.n	8009d08 <__ieee754_pow+0x58>
 8009d04:	2e00      	cmp	r6, #0
 8009d06:	d1ea      	bne.n	8009cde <__ieee754_pow+0x2e>
 8009d08:	4592      	cmp	sl, r2
 8009d0a:	d801      	bhi.n	8009d10 <__ieee754_pow+0x60>
 8009d0c:	d10e      	bne.n	8009d2c <__ieee754_pow+0x7c>
 8009d0e:	b169      	cbz	r1, 8009d2c <__ieee754_pow+0x7c>
 8009d10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009d14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009d18:	431d      	orrs	r5, r3
 8009d1a:	d1e0      	bne.n	8009cde <__ieee754_pow+0x2e>
 8009d1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d20:	18db      	adds	r3, r3, r3
 8009d22:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009d26:	4152      	adcs	r2, r2
 8009d28:	429d      	cmp	r5, r3
 8009d2a:	e7d4      	b.n	8009cd6 <__ieee754_pow+0x26>
 8009d2c:	2d00      	cmp	r5, #0
 8009d2e:	46c3      	mov	fp, r8
 8009d30:	da3a      	bge.n	8009da8 <__ieee754_pow+0xf8>
 8009d32:	4a83      	ldr	r2, [pc, #524]	@ (8009f40 <__ieee754_pow+0x290>)
 8009d34:	4592      	cmp	sl, r2
 8009d36:	d84d      	bhi.n	8009dd4 <__ieee754_pow+0x124>
 8009d38:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009d3c:	4592      	cmp	sl, r2
 8009d3e:	f240 84c7 	bls.w	800a6d0 <__ieee754_pow+0xa20>
 8009d42:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009d46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009d4a:	2a14      	cmp	r2, #20
 8009d4c:	dd0f      	ble.n	8009d6e <__ieee754_pow+0xbe>
 8009d4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009d52:	fa21 f402 	lsr.w	r4, r1, r2
 8009d56:	fa04 f202 	lsl.w	r2, r4, r2
 8009d5a:	428a      	cmp	r2, r1
 8009d5c:	f040 84b8 	bne.w	800a6d0 <__ieee754_pow+0xa20>
 8009d60:	f004 0401 	and.w	r4, r4, #1
 8009d64:	f1c4 0402 	rsb	r4, r4, #2
 8009d68:	2900      	cmp	r1, #0
 8009d6a:	d158      	bne.n	8009e1e <__ieee754_pow+0x16e>
 8009d6c:	e00e      	b.n	8009d8c <__ieee754_pow+0xdc>
 8009d6e:	2900      	cmp	r1, #0
 8009d70:	d154      	bne.n	8009e1c <__ieee754_pow+0x16c>
 8009d72:	f1c2 0214 	rsb	r2, r2, #20
 8009d76:	fa4a f402 	asr.w	r4, sl, r2
 8009d7a:	fa04 f202 	lsl.w	r2, r4, r2
 8009d7e:	4552      	cmp	r2, sl
 8009d80:	f040 84a3 	bne.w	800a6ca <__ieee754_pow+0xa1a>
 8009d84:	f004 0401 	and.w	r4, r4, #1
 8009d88:	f1c4 0402 	rsb	r4, r4, #2
 8009d8c:	4a6d      	ldr	r2, [pc, #436]	@ (8009f44 <__ieee754_pow+0x294>)
 8009d8e:	4592      	cmp	sl, r2
 8009d90:	d12e      	bne.n	8009df0 <__ieee754_pow+0x140>
 8009d92:	f1b9 0f00 	cmp.w	r9, #0
 8009d96:	f280 8494 	bge.w	800a6c2 <__ieee754_pow+0xa12>
 8009d9a:	496a      	ldr	r1, [pc, #424]	@ (8009f44 <__ieee754_pow+0x294>)
 8009d9c:	4632      	mov	r2, r6
 8009d9e:	463b      	mov	r3, r7
 8009da0:	2000      	movs	r0, #0
 8009da2:	f7f6 fd73 	bl	800088c <__aeabi_ddiv>
 8009da6:	e7a0      	b.n	8009cea <__ieee754_pow+0x3a>
 8009da8:	2400      	movs	r4, #0
 8009daa:	bbc1      	cbnz	r1, 8009e1e <__ieee754_pow+0x16e>
 8009dac:	4a63      	ldr	r2, [pc, #396]	@ (8009f3c <__ieee754_pow+0x28c>)
 8009dae:	4592      	cmp	sl, r2
 8009db0:	d1ec      	bne.n	8009d8c <__ieee754_pow+0xdc>
 8009db2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009db6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	f000 8479 	beq.w	800a6b2 <__ieee754_pow+0xa02>
 8009dc0:	4b61      	ldr	r3, [pc, #388]	@ (8009f48 <__ieee754_pow+0x298>)
 8009dc2:	4598      	cmp	r8, r3
 8009dc4:	d908      	bls.n	8009dd8 <__ieee754_pow+0x128>
 8009dc6:	f1b9 0f00 	cmp.w	r9, #0
 8009dca:	f2c0 8476 	blt.w	800a6ba <__ieee754_pow+0xa0a>
 8009dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dd2:	e78a      	b.n	8009cea <__ieee754_pow+0x3a>
 8009dd4:	2402      	movs	r4, #2
 8009dd6:	e7e8      	b.n	8009daa <__ieee754_pow+0xfa>
 8009dd8:	f1b9 0f00 	cmp.w	r9, #0
 8009ddc:	f04f 0000 	mov.w	r0, #0
 8009de0:	f04f 0100 	mov.w	r1, #0
 8009de4:	da81      	bge.n	8009cea <__ieee754_pow+0x3a>
 8009de6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009dea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009dee:	e77c      	b.n	8009cea <__ieee754_pow+0x3a>
 8009df0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009df4:	d106      	bne.n	8009e04 <__ieee754_pow+0x154>
 8009df6:	4632      	mov	r2, r6
 8009df8:	463b      	mov	r3, r7
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	f7f6 fc1b 	bl	8000638 <__aeabi_dmul>
 8009e02:	e772      	b.n	8009cea <__ieee754_pow+0x3a>
 8009e04:	4a51      	ldr	r2, [pc, #324]	@ (8009f4c <__ieee754_pow+0x29c>)
 8009e06:	4591      	cmp	r9, r2
 8009e08:	d109      	bne.n	8009e1e <__ieee754_pow+0x16e>
 8009e0a:	2d00      	cmp	r5, #0
 8009e0c:	db07      	blt.n	8009e1e <__ieee754_pow+0x16e>
 8009e0e:	ec47 6b10 	vmov	d0, r6, r7
 8009e12:	b011      	add	sp, #68	@ 0x44
 8009e14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	f7ff be6e 	b.w	8009af8 <__ieee754_sqrt>
 8009e1c:	2400      	movs	r4, #0
 8009e1e:	ec47 6b10 	vmov	d0, r6, r7
 8009e22:	9302      	str	r3, [sp, #8]
 8009e24:	f001 fb9a 	bl	800b55c <fabs>
 8009e28:	9b02      	ldr	r3, [sp, #8]
 8009e2a:	ec51 0b10 	vmov	r0, r1, d0
 8009e2e:	bb53      	cbnz	r3, 8009e86 <__ieee754_pow+0x1d6>
 8009e30:	4b44      	ldr	r3, [pc, #272]	@ (8009f44 <__ieee754_pow+0x294>)
 8009e32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d002      	beq.n	8009e40 <__ieee754_pow+0x190>
 8009e3a:	f1b8 0f00 	cmp.w	r8, #0
 8009e3e:	d122      	bne.n	8009e86 <__ieee754_pow+0x1d6>
 8009e40:	f1b9 0f00 	cmp.w	r9, #0
 8009e44:	da05      	bge.n	8009e52 <__ieee754_pow+0x1a2>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	493d      	ldr	r1, [pc, #244]	@ (8009f44 <__ieee754_pow+0x294>)
 8009e4e:	f7f6 fd1d 	bl	800088c <__aeabi_ddiv>
 8009e52:	2d00      	cmp	r5, #0
 8009e54:	f6bf af49 	bge.w	8009cea <__ieee754_pow+0x3a>
 8009e58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009e5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009e60:	ea58 0804 	orrs.w	r8, r8, r4
 8009e64:	d108      	bne.n	8009e78 <__ieee754_pow+0x1c8>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f7f6 fa2b 	bl	80002c8 <__aeabi_dsub>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	e794      	b.n	8009da2 <__ieee754_pow+0xf2>
 8009e78:	2c01      	cmp	r4, #1
 8009e7a:	f47f af36 	bne.w	8009cea <__ieee754_pow+0x3a>
 8009e7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e82:	4619      	mov	r1, r3
 8009e84:	e731      	b.n	8009cea <__ieee754_pow+0x3a>
 8009e86:	0feb      	lsrs	r3, r5, #31
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	ea53 0204 	orrs.w	r2, r3, r4
 8009e8e:	d102      	bne.n	8009e96 <__ieee754_pow+0x1e6>
 8009e90:	4632      	mov	r2, r6
 8009e92:	463b      	mov	r3, r7
 8009e94:	e7e9      	b.n	8009e6a <__ieee754_pow+0x1ba>
 8009e96:	3c01      	subs	r4, #1
 8009e98:	431c      	orrs	r4, r3
 8009e9a:	d016      	beq.n	8009eca <__ieee754_pow+0x21a>
 8009e9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009f28 <__ieee754_pow+0x278>
 8009ea0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009ea4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ea8:	f240 8112 	bls.w	800a0d0 <__ieee754_pow+0x420>
 8009eac:	4b28      	ldr	r3, [pc, #160]	@ (8009f50 <__ieee754_pow+0x2a0>)
 8009eae:	459a      	cmp	sl, r3
 8009eb0:	4b25      	ldr	r3, [pc, #148]	@ (8009f48 <__ieee754_pow+0x298>)
 8009eb2:	d916      	bls.n	8009ee2 <__ieee754_pow+0x232>
 8009eb4:	4598      	cmp	r8, r3
 8009eb6:	d80b      	bhi.n	8009ed0 <__ieee754_pow+0x220>
 8009eb8:	f1b9 0f00 	cmp.w	r9, #0
 8009ebc:	da0b      	bge.n	8009ed6 <__ieee754_pow+0x226>
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	b011      	add	sp, #68	@ 0x44
 8009ec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	f000 be67 	b.w	800ab98 <__math_oflow>
 8009eca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009f30 <__ieee754_pow+0x280>
 8009ece:	e7e7      	b.n	8009ea0 <__ieee754_pow+0x1f0>
 8009ed0:	f1b9 0f00 	cmp.w	r9, #0
 8009ed4:	dcf3      	bgt.n	8009ebe <__ieee754_pow+0x20e>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	b011      	add	sp, #68	@ 0x44
 8009eda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ede:	f000 be53 	b.w	800ab88 <__math_uflow>
 8009ee2:	4598      	cmp	r8, r3
 8009ee4:	d20c      	bcs.n	8009f00 <__ieee754_pow+0x250>
 8009ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eea:	2200      	movs	r2, #0
 8009eec:	2300      	movs	r3, #0
 8009eee:	f7f6 fe15 	bl	8000b1c <__aeabi_dcmplt>
 8009ef2:	3800      	subs	r0, #0
 8009ef4:	bf18      	it	ne
 8009ef6:	2001      	movne	r0, #1
 8009ef8:	f1b9 0f00 	cmp.w	r9, #0
 8009efc:	daec      	bge.n	8009ed8 <__ieee754_pow+0x228>
 8009efe:	e7df      	b.n	8009ec0 <__ieee754_pow+0x210>
 8009f00:	4b10      	ldr	r3, [pc, #64]	@ (8009f44 <__ieee754_pow+0x294>)
 8009f02:	4598      	cmp	r8, r3
 8009f04:	f04f 0200 	mov.w	r2, #0
 8009f08:	d924      	bls.n	8009f54 <__ieee754_pow+0x2a4>
 8009f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f7f6 fe04 	bl	8000b1c <__aeabi_dcmplt>
 8009f14:	3800      	subs	r0, #0
 8009f16:	bf18      	it	ne
 8009f18:	2001      	movne	r0, #1
 8009f1a:	f1b9 0f00 	cmp.w	r9, #0
 8009f1e:	dccf      	bgt.n	8009ec0 <__ieee754_pow+0x210>
 8009f20:	e7da      	b.n	8009ed8 <__ieee754_pow+0x228>
 8009f22:	bf00      	nop
 8009f24:	f3af 8000 	nop.w
 8009f28:	00000000 	.word	0x00000000
 8009f2c:	3ff00000 	.word	0x3ff00000
 8009f30:	00000000 	.word	0x00000000
 8009f34:	bff00000 	.word	0xbff00000
 8009f38:	fff00000 	.word	0xfff00000
 8009f3c:	7ff00000 	.word	0x7ff00000
 8009f40:	433fffff 	.word	0x433fffff
 8009f44:	3ff00000 	.word	0x3ff00000
 8009f48:	3fefffff 	.word	0x3fefffff
 8009f4c:	3fe00000 	.word	0x3fe00000
 8009f50:	43f00000 	.word	0x43f00000
 8009f54:	4b5a      	ldr	r3, [pc, #360]	@ (800a0c0 <__ieee754_pow+0x410>)
 8009f56:	f7f6 f9b7 	bl	80002c8 <__aeabi_dsub>
 8009f5a:	a351      	add	r3, pc, #324	@ (adr r3, 800a0a0 <__ieee754_pow+0x3f0>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	4604      	mov	r4, r0
 8009f62:	460d      	mov	r5, r1
 8009f64:	f7f6 fb68 	bl	8000638 <__aeabi_dmul>
 8009f68:	a34f      	add	r3, pc, #316	@ (adr r3, 800a0a8 <__ieee754_pow+0x3f8>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	4620      	mov	r0, r4
 8009f74:	4629      	mov	r1, r5
 8009f76:	f7f6 fb5f 	bl	8000638 <__aeabi_dmul>
 8009f7a:	4b52      	ldr	r3, [pc, #328]	@ (800a0c4 <__ieee754_pow+0x414>)
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	468b      	mov	fp, r1
 8009f80:	2200      	movs	r2, #0
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7f6 fb57 	bl	8000638 <__aeabi_dmul>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	a148      	add	r1, pc, #288	@ (adr r1, 800a0b0 <__ieee754_pow+0x400>)
 8009f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f94:	f7f6 f998 	bl	80002c8 <__aeabi_dsub>
 8009f98:	4622      	mov	r2, r4
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	f7f6 fb4c 	bl	8000638 <__aeabi_dmul>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	4948      	ldr	r1, [pc, #288]	@ (800a0c8 <__ieee754_pow+0x418>)
 8009fa8:	f7f6 f98e 	bl	80002c8 <__aeabi_dsub>
 8009fac:	4622      	mov	r2, r4
 8009fae:	4680      	mov	r8, r0
 8009fb0:	4689      	mov	r9, r1
 8009fb2:	462b      	mov	r3, r5
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f7f6 fb3e 	bl	8000638 <__aeabi_dmul>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	f7f6 fb38 	bl	8000638 <__aeabi_dmul>
 8009fc8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a0b8 <__ieee754_pow+0x408>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 fb33 	bl	8000638 <__aeabi_dmul>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4650      	mov	r0, sl
 8009fd8:	4659      	mov	r1, fp
 8009fda:	f7f6 f975 	bl	80002c8 <__aeabi_dsub>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	4689      	mov	r9, r1
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	4639      	mov	r1, r7
 8009fea:	f7f6 f96f 	bl	80002cc <__adddf3>
 8009fee:	2400      	movs	r4, #0
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	463b      	mov	r3, r7
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	460d      	mov	r5, r1
 8009ff8:	f7f6 f966 	bl	80002c8 <__aeabi_dsub>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4640      	mov	r0, r8
 800a002:	4649      	mov	r1, r9
 800a004:	f7f6 f960 	bl	80002c8 <__aeabi_dsub>
 800a008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a00c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a010:	2300      	movs	r3, #0
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a018:	4606      	mov	r6, r0
 800a01a:	460f      	mov	r7, r1
 800a01c:	4652      	mov	r2, sl
 800a01e:	465b      	mov	r3, fp
 800a020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a024:	f7f6 f950 	bl	80002c8 <__aeabi_dsub>
 800a028:	4622      	mov	r2, r4
 800a02a:	462b      	mov	r3, r5
 800a02c:	f7f6 fb04 	bl	8000638 <__aeabi_dmul>
 800a030:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a034:	4680      	mov	r8, r0
 800a036:	4689      	mov	r9, r1
 800a038:	4630      	mov	r0, r6
 800a03a:	4639      	mov	r1, r7
 800a03c:	f7f6 fafc 	bl	8000638 <__aeabi_dmul>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4640      	mov	r0, r8
 800a046:	4649      	mov	r1, r9
 800a048:	f7f6 f940 	bl	80002cc <__adddf3>
 800a04c:	4652      	mov	r2, sl
 800a04e:	465b      	mov	r3, fp
 800a050:	4606      	mov	r6, r0
 800a052:	460f      	mov	r7, r1
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 faee 	bl	8000638 <__aeabi_dmul>
 800a05c:	460b      	mov	r3, r1
 800a05e:	4602      	mov	r2, r0
 800a060:	4680      	mov	r8, r0
 800a062:	4689      	mov	r9, r1
 800a064:	4630      	mov	r0, r6
 800a066:	4639      	mov	r1, r7
 800a068:	f7f6 f930 	bl	80002cc <__adddf3>
 800a06c:	4b17      	ldr	r3, [pc, #92]	@ (800a0cc <__ieee754_pow+0x41c>)
 800a06e:	4299      	cmp	r1, r3
 800a070:	4604      	mov	r4, r0
 800a072:	460d      	mov	r5, r1
 800a074:	468a      	mov	sl, r1
 800a076:	468b      	mov	fp, r1
 800a078:	f340 82ef 	ble.w	800a65a <__ieee754_pow+0x9aa>
 800a07c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a080:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a084:	4303      	orrs	r3, r0
 800a086:	f000 81e8 	beq.w	800a45a <__ieee754_pow+0x7aa>
 800a08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08e:	2200      	movs	r2, #0
 800a090:	2300      	movs	r3, #0
 800a092:	f7f6 fd43 	bl	8000b1c <__aeabi_dcmplt>
 800a096:	3800      	subs	r0, #0
 800a098:	bf18      	it	ne
 800a09a:	2001      	movne	r0, #1
 800a09c:	e710      	b.n	8009ec0 <__ieee754_pow+0x210>
 800a09e:	bf00      	nop
 800a0a0:	60000000 	.word	0x60000000
 800a0a4:	3ff71547 	.word	0x3ff71547
 800a0a8:	f85ddf44 	.word	0xf85ddf44
 800a0ac:	3e54ae0b 	.word	0x3e54ae0b
 800a0b0:	55555555 	.word	0x55555555
 800a0b4:	3fd55555 	.word	0x3fd55555
 800a0b8:	652b82fe 	.word	0x652b82fe
 800a0bc:	3ff71547 	.word	0x3ff71547
 800a0c0:	3ff00000 	.word	0x3ff00000
 800a0c4:	3fd00000 	.word	0x3fd00000
 800a0c8:	3fe00000 	.word	0x3fe00000
 800a0cc:	408fffff 	.word	0x408fffff
 800a0d0:	4bd5      	ldr	r3, [pc, #852]	@ (800a428 <__ieee754_pow+0x778>)
 800a0d2:	402b      	ands	r3, r5
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	b92b      	cbnz	r3, 800a0e4 <__ieee754_pow+0x434>
 800a0d8:	4bd4      	ldr	r3, [pc, #848]	@ (800a42c <__ieee754_pow+0x77c>)
 800a0da:	f7f6 faad 	bl	8000638 <__aeabi_dmul>
 800a0de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a0e2:	468b      	mov	fp, r1
 800a0e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a0e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a0ec:	4413      	add	r3, r2
 800a0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0f0:	4bcf      	ldr	r3, [pc, #828]	@ (800a430 <__ieee754_pow+0x780>)
 800a0f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a0f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a0fa:	459b      	cmp	fp, r3
 800a0fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a100:	dd08      	ble.n	800a114 <__ieee754_pow+0x464>
 800a102:	4bcc      	ldr	r3, [pc, #816]	@ (800a434 <__ieee754_pow+0x784>)
 800a104:	459b      	cmp	fp, r3
 800a106:	f340 81a5 	ble.w	800a454 <__ieee754_pow+0x7a4>
 800a10a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a10c:	3301      	adds	r3, #1
 800a10e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a110:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a114:	f04f 0a00 	mov.w	sl, #0
 800a118:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a11c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a11e:	4bc6      	ldr	r3, [pc, #792]	@ (800a438 <__ieee754_pow+0x788>)
 800a120:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a124:	ed93 7b00 	vldr	d7, [r3]
 800a128:	4629      	mov	r1, r5
 800a12a:	ec53 2b17 	vmov	r2, r3, d7
 800a12e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a132:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a136:	f7f6 f8c7 	bl	80002c8 <__aeabi_dsub>
 800a13a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a13e:	4606      	mov	r6, r0
 800a140:	460f      	mov	r7, r1
 800a142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a146:	f7f6 f8c1 	bl	80002cc <__adddf3>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	2000      	movs	r0, #0
 800a150:	49ba      	ldr	r1, [pc, #744]	@ (800a43c <__ieee754_pow+0x78c>)
 800a152:	f7f6 fb9b 	bl	800088c <__aeabi_ddiv>
 800a156:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4630      	mov	r0, r6
 800a160:	4639      	mov	r1, r7
 800a162:	f7f6 fa69 	bl	8000638 <__aeabi_dmul>
 800a166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a16a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a16e:	106d      	asrs	r5, r5, #1
 800a170:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a174:	f04f 0b00 	mov.w	fp, #0
 800a178:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a17c:	4661      	mov	r1, ip
 800a17e:	2200      	movs	r2, #0
 800a180:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a184:	4658      	mov	r0, fp
 800a186:	46e1      	mov	r9, ip
 800a188:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a18c:	4614      	mov	r4, r2
 800a18e:	461d      	mov	r5, r3
 800a190:	f7f6 fa52 	bl	8000638 <__aeabi_dmul>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f6 f894 	bl	80002c8 <__aeabi_dsub>
 800a1a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	f7f6 f88c 	bl	80002c8 <__aeabi_dsub>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1b8:	f7f6 f886 	bl	80002c8 <__aeabi_dsub>
 800a1bc:	465a      	mov	r2, fp
 800a1be:	464b      	mov	r3, r9
 800a1c0:	f7f6 fa3a 	bl	8000638 <__aeabi_dmul>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 f87c 	bl	80002c8 <__aeabi_dsub>
 800a1d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a1d4:	f7f6 fa30 	bl	8000638 <__aeabi_dmul>
 800a1d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	f7f6 fa28 	bl	8000638 <__aeabi_dmul>
 800a1e8:	a37d      	add	r3, pc, #500	@ (adr r3, 800a3e0 <__ieee754_pow+0x730>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	460d      	mov	r5, r1
 800a1f2:	f7f6 fa21 	bl	8000638 <__aeabi_dmul>
 800a1f6:	a37c      	add	r3, pc, #496	@ (adr r3, 800a3e8 <__ieee754_pow+0x738>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f6 f866 	bl	80002cc <__adddf3>
 800a200:	4622      	mov	r2, r4
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 fa18 	bl	8000638 <__aeabi_dmul>
 800a208:	a379      	add	r3, pc, #484	@ (adr r3, 800a3f0 <__ieee754_pow+0x740>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f6 f85d 	bl	80002cc <__adddf3>
 800a212:	4622      	mov	r2, r4
 800a214:	462b      	mov	r3, r5
 800a216:	f7f6 fa0f 	bl	8000638 <__aeabi_dmul>
 800a21a:	a377      	add	r3, pc, #476	@ (adr r3, 800a3f8 <__ieee754_pow+0x748>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f6 f854 	bl	80002cc <__adddf3>
 800a224:	4622      	mov	r2, r4
 800a226:	462b      	mov	r3, r5
 800a228:	f7f6 fa06 	bl	8000638 <__aeabi_dmul>
 800a22c:	a374      	add	r3, pc, #464	@ (adr r3, 800a400 <__ieee754_pow+0x750>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 f84b 	bl	80002cc <__adddf3>
 800a236:	4622      	mov	r2, r4
 800a238:	462b      	mov	r3, r5
 800a23a:	f7f6 f9fd 	bl	8000638 <__aeabi_dmul>
 800a23e:	a372      	add	r3, pc, #456	@ (adr r3, 800a408 <__ieee754_pow+0x758>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f6 f842 	bl	80002cc <__adddf3>
 800a248:	4622      	mov	r2, r4
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	462b      	mov	r3, r5
 800a250:	4620      	mov	r0, r4
 800a252:	4629      	mov	r1, r5
 800a254:	f7f6 f9f0 	bl	8000638 <__aeabi_dmul>
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	4630      	mov	r0, r6
 800a25e:	4639      	mov	r1, r7
 800a260:	f7f6 f9ea 	bl	8000638 <__aeabi_dmul>
 800a264:	465a      	mov	r2, fp
 800a266:	4604      	mov	r4, r0
 800a268:	460d      	mov	r5, r1
 800a26a:	464b      	mov	r3, r9
 800a26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a270:	f7f6 f82c 	bl	80002cc <__adddf3>
 800a274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a278:	f7f6 f9de 	bl	8000638 <__aeabi_dmul>
 800a27c:	4622      	mov	r2, r4
 800a27e:	462b      	mov	r3, r5
 800a280:	f7f6 f824 	bl	80002cc <__adddf3>
 800a284:	465a      	mov	r2, fp
 800a286:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a28a:	464b      	mov	r3, r9
 800a28c:	4658      	mov	r0, fp
 800a28e:	4649      	mov	r1, r9
 800a290:	f7f6 f9d2 	bl	8000638 <__aeabi_dmul>
 800a294:	4b6a      	ldr	r3, [pc, #424]	@ (800a440 <__ieee754_pow+0x790>)
 800a296:	2200      	movs	r2, #0
 800a298:	4606      	mov	r6, r0
 800a29a:	460f      	mov	r7, r1
 800a29c:	f7f6 f816 	bl	80002cc <__adddf3>
 800a2a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2a4:	f7f6 f812 	bl	80002cc <__adddf3>
 800a2a8:	46d8      	mov	r8, fp
 800a2aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	465a      	mov	r2, fp
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a2bc:	f7f6 f9bc 	bl	8000638 <__aeabi_dmul>
 800a2c0:	465c      	mov	r4, fp
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	4689      	mov	r9, r1
 800a2c6:	4b5e      	ldr	r3, [pc, #376]	@ (800a440 <__ieee754_pow+0x790>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7f5 fffb 	bl	80002c8 <__aeabi_dsub>
 800a2d2:	4632      	mov	r2, r6
 800a2d4:	463b      	mov	r3, r7
 800a2d6:	f7f5 fff7 	bl	80002c8 <__aeabi_dsub>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2e2:	f7f5 fff1 	bl	80002c8 <__aeabi_dsub>
 800a2e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ea:	f7f6 f9a5 	bl	8000638 <__aeabi_dmul>
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	462b      	mov	r3, r5
 800a2f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2fa:	f7f6 f99d 	bl	8000638 <__aeabi_dmul>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f5 ffe1 	bl	80002cc <__adddf3>
 800a30a:	4606      	mov	r6, r0
 800a30c:	460f      	mov	r7, r1
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f5 ffd9 	bl	80002cc <__adddf3>
 800a31a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a31e:	a33c      	add	r3, pc, #240	@ (adr r3, 800a410 <__ieee754_pow+0x760>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	4658      	mov	r0, fp
 800a326:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a32a:	460d      	mov	r5, r1
 800a32c:	f7f6 f984 	bl	8000638 <__aeabi_dmul>
 800a330:	465c      	mov	r4, fp
 800a332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a336:	4642      	mov	r2, r8
 800a338:	464b      	mov	r3, r9
 800a33a:	4620      	mov	r0, r4
 800a33c:	4629      	mov	r1, r5
 800a33e:	f7f5 ffc3 	bl	80002c8 <__aeabi_dsub>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4630      	mov	r0, r6
 800a348:	4639      	mov	r1, r7
 800a34a:	f7f5 ffbd 	bl	80002c8 <__aeabi_dsub>
 800a34e:	a332      	add	r3, pc, #200	@ (adr r3, 800a418 <__ieee754_pow+0x768>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f6 f970 	bl	8000638 <__aeabi_dmul>
 800a358:	a331      	add	r3, pc, #196	@ (adr r3, 800a420 <__ieee754_pow+0x770>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	4606      	mov	r6, r0
 800a360:	460f      	mov	r7, r1
 800a362:	4620      	mov	r0, r4
 800a364:	4629      	mov	r1, r5
 800a366:	f7f6 f967 	bl	8000638 <__aeabi_dmul>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4630      	mov	r0, r6
 800a370:	4639      	mov	r1, r7
 800a372:	f7f5 ffab 	bl	80002cc <__adddf3>
 800a376:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a378:	4b32      	ldr	r3, [pc, #200]	@ (800a444 <__ieee754_pow+0x794>)
 800a37a:	4413      	add	r3, r2
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	f7f5 ffa4 	bl	80002cc <__adddf3>
 800a384:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a388:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a38a:	f7f6 f8eb 	bl	8000564 <__aeabi_i2d>
 800a38e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a390:	4b2d      	ldr	r3, [pc, #180]	@ (800a448 <__ieee754_pow+0x798>)
 800a392:	4413      	add	r3, r2
 800a394:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a398:	4606      	mov	r6, r0
 800a39a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a39e:	460f      	mov	r7, r1
 800a3a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3a4:	f7f5 ff92 	bl	80002cc <__adddf3>
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	f7f5 ff8e 	bl	80002cc <__adddf3>
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	f7f5 ff8a 	bl	80002cc <__adddf3>
 800a3b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a3bc:	4632      	mov	r2, r6
 800a3be:	463b      	mov	r3, r7
 800a3c0:	4658      	mov	r0, fp
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	f7f5 ff80 	bl	80002c8 <__aeabi_dsub>
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	f7f5 ff7c 	bl	80002c8 <__aeabi_dsub>
 800a3d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3d4:	f7f5 ff78 	bl	80002c8 <__aeabi_dsub>
 800a3d8:	465c      	mov	r4, fp
 800a3da:	4602      	mov	r2, r0
 800a3dc:	e036      	b.n	800a44c <__ieee754_pow+0x79c>
 800a3de:	bf00      	nop
 800a3e0:	4a454eef 	.word	0x4a454eef
 800a3e4:	3fca7e28 	.word	0x3fca7e28
 800a3e8:	93c9db65 	.word	0x93c9db65
 800a3ec:	3fcd864a 	.word	0x3fcd864a
 800a3f0:	a91d4101 	.word	0xa91d4101
 800a3f4:	3fd17460 	.word	0x3fd17460
 800a3f8:	518f264d 	.word	0x518f264d
 800a3fc:	3fd55555 	.word	0x3fd55555
 800a400:	db6fabff 	.word	0xdb6fabff
 800a404:	3fdb6db6 	.word	0x3fdb6db6
 800a408:	33333303 	.word	0x33333303
 800a40c:	3fe33333 	.word	0x3fe33333
 800a410:	e0000000 	.word	0xe0000000
 800a414:	3feec709 	.word	0x3feec709
 800a418:	dc3a03fd 	.word	0xdc3a03fd
 800a41c:	3feec709 	.word	0x3feec709
 800a420:	145b01f5 	.word	0x145b01f5
 800a424:	be3e2fe0 	.word	0xbe3e2fe0
 800a428:	7ff00000 	.word	0x7ff00000
 800a42c:	43400000 	.word	0x43400000
 800a430:	0003988e 	.word	0x0003988e
 800a434:	000bb679 	.word	0x000bb679
 800a438:	0800bb40 	.word	0x0800bb40
 800a43c:	3ff00000 	.word	0x3ff00000
 800a440:	40080000 	.word	0x40080000
 800a444:	0800bb20 	.word	0x0800bb20
 800a448:	0800bb30 	.word	0x0800bb30
 800a44c:	460b      	mov	r3, r1
 800a44e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a452:	e5d7      	b.n	800a004 <__ieee754_pow+0x354>
 800a454:	f04f 0a01 	mov.w	sl, #1
 800a458:	e65e      	b.n	800a118 <__ieee754_pow+0x468>
 800a45a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a72c <__ieee754_pow+0xa7c>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f5 ff32 	bl	80002cc <__adddf3>
 800a468:	4642      	mov	r2, r8
 800a46a:	e9cd 0100 	strd	r0, r1, [sp]
 800a46e:	464b      	mov	r3, r9
 800a470:	4620      	mov	r0, r4
 800a472:	4629      	mov	r1, r5
 800a474:	f7f5 ff28 	bl	80002c8 <__aeabi_dsub>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a480:	f7f6 fb6a 	bl	8000b58 <__aeabi_dcmpgt>
 800a484:	2800      	cmp	r0, #0
 800a486:	f47f ae00 	bne.w	800a08a <__ieee754_pow+0x3da>
 800a48a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a48e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a492:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a496:	fa43 fa0a 	asr.w	sl, r3, sl
 800a49a:	44da      	add	sl, fp
 800a49c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a4a0:	489d      	ldr	r0, [pc, #628]	@ (800a718 <__ieee754_pow+0xa68>)
 800a4a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a4a6:	4108      	asrs	r0, r1
 800a4a8:	ea00 030a 	and.w	r3, r0, sl
 800a4ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a4b0:	f1c1 0114 	rsb	r1, r1, #20
 800a4b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a4b8:	fa4a fa01 	asr.w	sl, sl, r1
 800a4bc:	f1bb 0f00 	cmp.w	fp, #0
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	f04f 0200 	mov.w	r2, #0
 800a4c8:	bfb8      	it	lt
 800a4ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800a4ce:	f7f5 fefb 	bl	80002c8 <__aeabi_dsub>
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	4689      	mov	r9, r1
 800a4d6:	4632      	mov	r2, r6
 800a4d8:	463b      	mov	r3, r7
 800a4da:	4640      	mov	r0, r8
 800a4dc:	4649      	mov	r1, r9
 800a4de:	f7f5 fef5 	bl	80002cc <__adddf3>
 800a4e2:	2400      	movs	r4, #0
 800a4e4:	a37c      	add	r3, pc, #496	@ (adr r3, 800a6d8 <__ieee754_pow+0xa28>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	460d      	mov	r5, r1
 800a4ee:	f7f6 f8a3 	bl	8000638 <__aeabi_dmul>
 800a4f2:	4642      	mov	r2, r8
 800a4f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	f7f5 fee3 	bl	80002c8 <__aeabi_dsub>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	4630      	mov	r0, r6
 800a508:	4639      	mov	r1, r7
 800a50a:	f7f5 fedd 	bl	80002c8 <__aeabi_dsub>
 800a50e:	a374      	add	r3, pc, #464	@ (adr r3, 800a6e0 <__ieee754_pow+0xa30>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f6 f890 	bl	8000638 <__aeabi_dmul>
 800a518:	a373      	add	r3, pc, #460	@ (adr r3, 800a6e8 <__ieee754_pow+0xa38>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	4680      	mov	r8, r0
 800a520:	4689      	mov	r9, r1
 800a522:	4620      	mov	r0, r4
 800a524:	4629      	mov	r1, r5
 800a526:	f7f6 f887 	bl	8000638 <__aeabi_dmul>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4640      	mov	r0, r8
 800a530:	4649      	mov	r1, r9
 800a532:	f7f5 fecb 	bl	80002cc <__adddf3>
 800a536:	4604      	mov	r4, r0
 800a538:	460d      	mov	r5, r1
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a542:	f7f5 fec3 	bl	80002cc <__adddf3>
 800a546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a54a:	4680      	mov	r8, r0
 800a54c:	4689      	mov	r9, r1
 800a54e:	f7f5 febb 	bl	80002c8 <__aeabi_dsub>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4620      	mov	r0, r4
 800a558:	4629      	mov	r1, r5
 800a55a:	f7f5 feb5 	bl	80002c8 <__aeabi_dsub>
 800a55e:	4642      	mov	r2, r8
 800a560:	4606      	mov	r6, r0
 800a562:	460f      	mov	r7, r1
 800a564:	464b      	mov	r3, r9
 800a566:	4640      	mov	r0, r8
 800a568:	4649      	mov	r1, r9
 800a56a:	f7f6 f865 	bl	8000638 <__aeabi_dmul>
 800a56e:	a360      	add	r3, pc, #384	@ (adr r3, 800a6f0 <__ieee754_pow+0xa40>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	4604      	mov	r4, r0
 800a576:	460d      	mov	r5, r1
 800a578:	f7f6 f85e 	bl	8000638 <__aeabi_dmul>
 800a57c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a6f8 <__ieee754_pow+0xa48>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	f7f5 fea1 	bl	80002c8 <__aeabi_dsub>
 800a586:	4622      	mov	r2, r4
 800a588:	462b      	mov	r3, r5
 800a58a:	f7f6 f855 	bl	8000638 <__aeabi_dmul>
 800a58e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a700 <__ieee754_pow+0xa50>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f7f5 fe9a 	bl	80002cc <__adddf3>
 800a598:	4622      	mov	r2, r4
 800a59a:	462b      	mov	r3, r5
 800a59c:	f7f6 f84c 	bl	8000638 <__aeabi_dmul>
 800a5a0:	a359      	add	r3, pc, #356	@ (adr r3, 800a708 <__ieee754_pow+0xa58>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f5 fe8f 	bl	80002c8 <__aeabi_dsub>
 800a5aa:	4622      	mov	r2, r4
 800a5ac:	462b      	mov	r3, r5
 800a5ae:	f7f6 f843 	bl	8000638 <__aeabi_dmul>
 800a5b2:	a357      	add	r3, pc, #348	@ (adr r3, 800a710 <__ieee754_pow+0xa60>)
 800a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b8:	f7f5 fe88 	bl	80002cc <__adddf3>
 800a5bc:	4622      	mov	r2, r4
 800a5be:	462b      	mov	r3, r5
 800a5c0:	f7f6 f83a 	bl	8000638 <__aeabi_dmul>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	f7f5 fe7c 	bl	80002c8 <__aeabi_dsub>
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4640      	mov	r0, r8
 800a5da:	4649      	mov	r1, r9
 800a5dc:	f7f6 f82c 	bl	8000638 <__aeabi_dmul>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	e9cd 0100 	strd	r0, r1, [sp]
 800a5e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	f7f5 fe6b 	bl	80002c8 <__aeabi_dsub>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5fa:	f7f6 f947 	bl	800088c <__aeabi_ddiv>
 800a5fe:	4632      	mov	r2, r6
 800a600:	4604      	mov	r4, r0
 800a602:	460d      	mov	r5, r1
 800a604:	463b      	mov	r3, r7
 800a606:	4640      	mov	r0, r8
 800a608:	4649      	mov	r1, r9
 800a60a:	f7f6 f815 	bl	8000638 <__aeabi_dmul>
 800a60e:	4632      	mov	r2, r6
 800a610:	463b      	mov	r3, r7
 800a612:	f7f5 fe5b 	bl	80002cc <__adddf3>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4620      	mov	r0, r4
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7f5 fe53 	bl	80002c8 <__aeabi_dsub>
 800a622:	4642      	mov	r2, r8
 800a624:	464b      	mov	r3, r9
 800a626:	f7f5 fe4f 	bl	80002c8 <__aeabi_dsub>
 800a62a:	460b      	mov	r3, r1
 800a62c:	4602      	mov	r2, r0
 800a62e:	493b      	ldr	r1, [pc, #236]	@ (800a71c <__ieee754_pow+0xa6c>)
 800a630:	2000      	movs	r0, #0
 800a632:	f7f5 fe49 	bl	80002c8 <__aeabi_dsub>
 800a636:	ec41 0b10 	vmov	d0, r0, r1
 800a63a:	ee10 3a90 	vmov	r3, s1
 800a63e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a646:	da30      	bge.n	800a6aa <__ieee754_pow+0x9fa>
 800a648:	4650      	mov	r0, sl
 800a64a:	f000 ff91 	bl	800b570 <scalbn>
 800a64e:	ec51 0b10 	vmov	r0, r1, d0
 800a652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a656:	f7ff bbd2 	b.w	8009dfe <__ieee754_pow+0x14e>
 800a65a:	4c31      	ldr	r4, [pc, #196]	@ (800a720 <__ieee754_pow+0xa70>)
 800a65c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a660:	42a3      	cmp	r3, r4
 800a662:	d91a      	bls.n	800a69a <__ieee754_pow+0x9ea>
 800a664:	4b2f      	ldr	r3, [pc, #188]	@ (800a724 <__ieee754_pow+0xa74>)
 800a666:	440b      	add	r3, r1
 800a668:	4303      	orrs	r3, r0
 800a66a:	d009      	beq.n	800a680 <__ieee754_pow+0x9d0>
 800a66c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a670:	2200      	movs	r2, #0
 800a672:	2300      	movs	r3, #0
 800a674:	f7f6 fa52 	bl	8000b1c <__aeabi_dcmplt>
 800a678:	3800      	subs	r0, #0
 800a67a:	bf18      	it	ne
 800a67c:	2001      	movne	r0, #1
 800a67e:	e42b      	b.n	8009ed8 <__ieee754_pow+0x228>
 800a680:	4642      	mov	r2, r8
 800a682:	464b      	mov	r3, r9
 800a684:	f7f5 fe20 	bl	80002c8 <__aeabi_dsub>
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	f7f6 fa5a 	bl	8000b44 <__aeabi_dcmpge>
 800a690:	2800      	cmp	r0, #0
 800a692:	d1eb      	bne.n	800a66c <__ieee754_pow+0x9bc>
 800a694:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a734 <__ieee754_pow+0xa84>
 800a698:	e6f7      	b.n	800a48a <__ieee754_pow+0x7da>
 800a69a:	469a      	mov	sl, r3
 800a69c:	4b22      	ldr	r3, [pc, #136]	@ (800a728 <__ieee754_pow+0xa78>)
 800a69e:	459a      	cmp	sl, r3
 800a6a0:	f63f aef3 	bhi.w	800a48a <__ieee754_pow+0x7da>
 800a6a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a6a8:	e715      	b.n	800a4d6 <__ieee754_pow+0x826>
 800a6aa:	ec51 0b10 	vmov	r0, r1, d0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	e7cf      	b.n	800a652 <__ieee754_pow+0x9a2>
 800a6b2:	491a      	ldr	r1, [pc, #104]	@ (800a71c <__ieee754_pow+0xa6c>)
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	f7ff bb18 	b.w	8009cea <__ieee754_pow+0x3a>
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	2100      	movs	r1, #0
 800a6be:	f7ff bb14 	b.w	8009cea <__ieee754_pow+0x3a>
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	f7ff bb10 	b.w	8009cea <__ieee754_pow+0x3a>
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	f7ff bb5e 	b.w	8009d8c <__ieee754_pow+0xdc>
 800a6d0:	2400      	movs	r4, #0
 800a6d2:	f7ff bb49 	b.w	8009d68 <__ieee754_pow+0xb8>
 800a6d6:	bf00      	nop
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	3fe62e43 	.word	0x3fe62e43
 800a6e0:	fefa39ef 	.word	0xfefa39ef
 800a6e4:	3fe62e42 	.word	0x3fe62e42
 800a6e8:	0ca86c39 	.word	0x0ca86c39
 800a6ec:	be205c61 	.word	0xbe205c61
 800a6f0:	72bea4d0 	.word	0x72bea4d0
 800a6f4:	3e663769 	.word	0x3e663769
 800a6f8:	c5d26bf1 	.word	0xc5d26bf1
 800a6fc:	3ebbbd41 	.word	0x3ebbbd41
 800a700:	af25de2c 	.word	0xaf25de2c
 800a704:	3f11566a 	.word	0x3f11566a
 800a708:	16bebd93 	.word	0x16bebd93
 800a70c:	3f66c16c 	.word	0x3f66c16c
 800a710:	5555553e 	.word	0x5555553e
 800a714:	3fc55555 	.word	0x3fc55555
 800a718:	fff00000 	.word	0xfff00000
 800a71c:	3ff00000 	.word	0x3ff00000
 800a720:	4090cbff 	.word	0x4090cbff
 800a724:	3f6f3400 	.word	0x3f6f3400
 800a728:	3fe00000 	.word	0x3fe00000
 800a72c:	652b82fe 	.word	0x652b82fe
 800a730:	3c971547 	.word	0x3c971547
 800a734:	4090cc00 	.word	0x4090cc00

0800a738 <__ieee754_rem_pio2>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	ec57 6b10 	vmov	r6, r7, d0
 800a740:	4bc5      	ldr	r3, [pc, #788]	@ (800aa58 <__ieee754_rem_pio2+0x320>)
 800a742:	b08d      	sub	sp, #52	@ 0x34
 800a744:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a748:	4598      	cmp	r8, r3
 800a74a:	4604      	mov	r4, r0
 800a74c:	9704      	str	r7, [sp, #16]
 800a74e:	d807      	bhi.n	800a760 <__ieee754_rem_pio2+0x28>
 800a750:	2200      	movs	r2, #0
 800a752:	2300      	movs	r3, #0
 800a754:	ed80 0b00 	vstr	d0, [r0]
 800a758:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a75c:	2500      	movs	r5, #0
 800a75e:	e028      	b.n	800a7b2 <__ieee754_rem_pio2+0x7a>
 800a760:	4bbe      	ldr	r3, [pc, #760]	@ (800aa5c <__ieee754_rem_pio2+0x324>)
 800a762:	4598      	cmp	r8, r3
 800a764:	d878      	bhi.n	800a858 <__ieee754_rem_pio2+0x120>
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	4dbd      	ldr	r5, [pc, #756]	@ (800aa60 <__ieee754_rem_pio2+0x328>)
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	4630      	mov	r0, r6
 800a76e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800aa20 <__ieee754_rem_pio2+0x2e8>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	4639      	mov	r1, r7
 800a776:	dd38      	ble.n	800a7ea <__ieee754_rem_pio2+0xb2>
 800a778:	f7f5 fda6 	bl	80002c8 <__aeabi_dsub>
 800a77c:	45a8      	cmp	r8, r5
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	d01a      	beq.n	800a7ba <__ieee754_rem_pio2+0x82>
 800a784:	a3a8      	add	r3, pc, #672	@ (adr r3, 800aa28 <__ieee754_rem_pio2+0x2f0>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd9d 	bl	80002c8 <__aeabi_dsub>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4680      	mov	r8, r0
 800a794:	4689      	mov	r9, r1
 800a796:	4630      	mov	r0, r6
 800a798:	4639      	mov	r1, r7
 800a79a:	f7f5 fd95 	bl	80002c8 <__aeabi_dsub>
 800a79e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800aa28 <__ieee754_rem_pio2+0x2f0>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 fd90 	bl	80002c8 <__aeabi_dsub>
 800a7a8:	e9c4 8900 	strd	r8, r9, [r4]
 800a7ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7b0:	2501      	movs	r5, #1
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	b00d      	add	sp, #52	@ 0x34
 800a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ba:	a39d      	add	r3, pc, #628	@ (adr r3, 800aa30 <__ieee754_rem_pio2+0x2f8>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 fd82 	bl	80002c8 <__aeabi_dsub>
 800a7c4:	a39c      	add	r3, pc, #624	@ (adr r3, 800aa38 <__ieee754_rem_pio2+0x300>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460f      	mov	r7, r1
 800a7ce:	f7f5 fd7b 	bl	80002c8 <__aeabi_dsub>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4680      	mov	r8, r0
 800a7d8:	4689      	mov	r9, r1
 800a7da:	4630      	mov	r0, r6
 800a7dc:	4639      	mov	r1, r7
 800a7de:	f7f5 fd73 	bl	80002c8 <__aeabi_dsub>
 800a7e2:	a395      	add	r3, pc, #596	@ (adr r3, 800aa38 <__ieee754_rem_pio2+0x300>)
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	e7dc      	b.n	800a7a4 <__ieee754_rem_pio2+0x6c>
 800a7ea:	f7f5 fd6f 	bl	80002cc <__adddf3>
 800a7ee:	45a8      	cmp	r8, r5
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	460f      	mov	r7, r1
 800a7f4:	d018      	beq.n	800a828 <__ieee754_rem_pio2+0xf0>
 800a7f6:	a38c      	add	r3, pc, #560	@ (adr r3, 800aa28 <__ieee754_rem_pio2+0x2f0>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 fd66 	bl	80002cc <__adddf3>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4680      	mov	r8, r0
 800a806:	4689      	mov	r9, r1
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f5 fd5c 	bl	80002c8 <__aeabi_dsub>
 800a810:	a385      	add	r3, pc, #532	@ (adr r3, 800aa28 <__ieee754_rem_pio2+0x2f0>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f7f5 fd59 	bl	80002cc <__adddf3>
 800a81a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a81e:	e9c4 8900 	strd	r8, r9, [r4]
 800a822:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a826:	e7c4      	b.n	800a7b2 <__ieee754_rem_pio2+0x7a>
 800a828:	a381      	add	r3, pc, #516	@ (adr r3, 800aa30 <__ieee754_rem_pio2+0x2f8>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f5 fd4d 	bl	80002cc <__adddf3>
 800a832:	a381      	add	r3, pc, #516	@ (adr r3, 800aa38 <__ieee754_rem_pio2+0x300>)
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	4606      	mov	r6, r0
 800a83a:	460f      	mov	r7, r1
 800a83c:	f7f5 fd46 	bl	80002cc <__adddf3>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4680      	mov	r8, r0
 800a846:	4689      	mov	r9, r1
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f5 fd3c 	bl	80002c8 <__aeabi_dsub>
 800a850:	a379      	add	r3, pc, #484	@ (adr r3, 800aa38 <__ieee754_rem_pio2+0x300>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	e7de      	b.n	800a816 <__ieee754_rem_pio2+0xde>
 800a858:	4b82      	ldr	r3, [pc, #520]	@ (800aa64 <__ieee754_rem_pio2+0x32c>)
 800a85a:	4598      	cmp	r8, r3
 800a85c:	f200 80d1 	bhi.w	800aa02 <__ieee754_rem_pio2+0x2ca>
 800a860:	f000 fe7c 	bl	800b55c <fabs>
 800a864:	ec57 6b10 	vmov	r6, r7, d0
 800a868:	a375      	add	r3, pc, #468	@ (adr r3, 800aa40 <__ieee754_rem_pio2+0x308>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f5 fee1 	bl	8000638 <__aeabi_dmul>
 800a876:	4b7c      	ldr	r3, [pc, #496]	@ (800aa68 <__ieee754_rem_pio2+0x330>)
 800a878:	2200      	movs	r2, #0
 800a87a:	f7f5 fd27 	bl	80002cc <__adddf3>
 800a87e:	f7f6 f98b 	bl	8000b98 <__aeabi_d2iz>
 800a882:	4605      	mov	r5, r0
 800a884:	f7f5 fe6e 	bl	8000564 <__aeabi_i2d>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a890:	a363      	add	r3, pc, #396	@ (adr r3, 800aa20 <__ieee754_rem_pio2+0x2e8>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 fecf 	bl	8000638 <__aeabi_dmul>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4630      	mov	r0, r6
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	f7f5 fd11 	bl	80002c8 <__aeabi_dsub>
 800a8a6:	a360      	add	r3, pc, #384	@ (adr r3, 800aa28 <__ieee754_rem_pio2+0x2f0>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	4682      	mov	sl, r0
 800a8ae:	468b      	mov	fp, r1
 800a8b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8b4:	f7f5 fec0 	bl	8000638 <__aeabi_dmul>
 800a8b8:	2d1f      	cmp	r5, #31
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	460f      	mov	r7, r1
 800a8be:	dc0c      	bgt.n	800a8da <__ieee754_rem_pio2+0x1a2>
 800a8c0:	4b6a      	ldr	r3, [pc, #424]	@ (800aa6c <__ieee754_rem_pio2+0x334>)
 800a8c2:	1e6a      	subs	r2, r5, #1
 800a8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c8:	4543      	cmp	r3, r8
 800a8ca:	d006      	beq.n	800a8da <__ieee754_rem_pio2+0x1a2>
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	463b      	mov	r3, r7
 800a8d0:	4650      	mov	r0, sl
 800a8d2:	4659      	mov	r1, fp
 800a8d4:	f7f5 fcf8 	bl	80002c8 <__aeabi_dsub>
 800a8d8:	e00e      	b.n	800a8f8 <__ieee754_rem_pio2+0x1c0>
 800a8da:	463b      	mov	r3, r7
 800a8dc:	4632      	mov	r2, r6
 800a8de:	4650      	mov	r0, sl
 800a8e0:	4659      	mov	r1, fp
 800a8e2:	f7f5 fcf1 	bl	80002c8 <__aeabi_dsub>
 800a8e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a8ea:	9305      	str	r3, [sp, #20]
 800a8ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a8f0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a8f4:	2b10      	cmp	r3, #16
 800a8f6:	dc02      	bgt.n	800a8fe <__ieee754_rem_pio2+0x1c6>
 800a8f8:	e9c4 0100 	strd	r0, r1, [r4]
 800a8fc:	e039      	b.n	800a972 <__ieee754_rem_pio2+0x23a>
 800a8fe:	a34c      	add	r3, pc, #304	@ (adr r3, 800aa30 <__ieee754_rem_pio2+0x2f8>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a908:	f7f5 fe96 	bl	8000638 <__aeabi_dmul>
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4650      	mov	r0, sl
 800a916:	4659      	mov	r1, fp
 800a918:	f7f5 fcd6 	bl	80002c8 <__aeabi_dsub>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4680      	mov	r8, r0
 800a922:	4689      	mov	r9, r1
 800a924:	4650      	mov	r0, sl
 800a926:	4659      	mov	r1, fp
 800a928:	f7f5 fcce 	bl	80002c8 <__aeabi_dsub>
 800a92c:	4632      	mov	r2, r6
 800a92e:	463b      	mov	r3, r7
 800a930:	f7f5 fcca 	bl	80002c8 <__aeabi_dsub>
 800a934:	a340      	add	r3, pc, #256	@ (adr r3, 800aa38 <__ieee754_rem_pio2+0x300>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	4606      	mov	r6, r0
 800a93c:	460f      	mov	r7, r1
 800a93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a942:	f7f5 fe79 	bl	8000638 <__aeabi_dmul>
 800a946:	4632      	mov	r2, r6
 800a948:	463b      	mov	r3, r7
 800a94a:	f7f5 fcbd 	bl	80002c8 <__aeabi_dsub>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	4640      	mov	r0, r8
 800a958:	4649      	mov	r1, r9
 800a95a:	f7f5 fcb5 	bl	80002c8 <__aeabi_dsub>
 800a95e:	9a05      	ldr	r2, [sp, #20]
 800a960:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	2b31      	cmp	r3, #49	@ 0x31
 800a968:	dc20      	bgt.n	800a9ac <__ieee754_rem_pio2+0x274>
 800a96a:	e9c4 0100 	strd	r0, r1, [r4]
 800a96e:	46c2      	mov	sl, r8
 800a970:	46cb      	mov	fp, r9
 800a972:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a976:	4650      	mov	r0, sl
 800a978:	4642      	mov	r2, r8
 800a97a:	464b      	mov	r3, r9
 800a97c:	4659      	mov	r1, fp
 800a97e:	f7f5 fca3 	bl	80002c8 <__aeabi_dsub>
 800a982:	463b      	mov	r3, r7
 800a984:	4632      	mov	r2, r6
 800a986:	f7f5 fc9f 	bl	80002c8 <__aeabi_dsub>
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a992:	f6bf af0e 	bge.w	800a7b2 <__ieee754_rem_pio2+0x7a>
 800a996:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a99a:	6063      	str	r3, [r4, #4]
 800a99c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9a0:	f8c4 8000 	str.w	r8, [r4]
 800a9a4:	60a0      	str	r0, [r4, #8]
 800a9a6:	60e3      	str	r3, [r4, #12]
 800a9a8:	426d      	negs	r5, r5
 800a9aa:	e702      	b.n	800a7b2 <__ieee754_rem_pio2+0x7a>
 800a9ac:	a326      	add	r3, pc, #152	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x310>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9b6:	f7f5 fe3f 	bl	8000638 <__aeabi_dmul>
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	460f      	mov	r7, r1
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	f7f5 fc7f 	bl	80002c8 <__aeabi_dsub>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4682      	mov	sl, r0
 800a9d0:	468b      	mov	fp, r1
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	f7f5 fc77 	bl	80002c8 <__aeabi_dsub>
 800a9da:	4632      	mov	r2, r6
 800a9dc:	463b      	mov	r3, r7
 800a9de:	f7f5 fc73 	bl	80002c8 <__aeabi_dsub>
 800a9e2:	a31b      	add	r3, pc, #108	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x318>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	460f      	mov	r7, r1
 800a9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9f0:	f7f5 fe22 	bl	8000638 <__aeabi_dmul>
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	f7f5 fc66 	bl	80002c8 <__aeabi_dsub>
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	e764      	b.n	800a8cc <__ieee754_rem_pio2+0x194>
 800aa02:	4b1b      	ldr	r3, [pc, #108]	@ (800aa70 <__ieee754_rem_pio2+0x338>)
 800aa04:	4598      	cmp	r8, r3
 800aa06:	d935      	bls.n	800aa74 <__ieee754_rem_pio2+0x33c>
 800aa08:	4632      	mov	r2, r6
 800aa0a:	463b      	mov	r3, r7
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f5 fc5a 	bl	80002c8 <__aeabi_dsub>
 800aa14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa18:	e9c4 0100 	strd	r0, r1, [r4]
 800aa1c:	e69e      	b.n	800a75c <__ieee754_rem_pio2+0x24>
 800aa1e:	bf00      	nop
 800aa20:	54400000 	.word	0x54400000
 800aa24:	3ff921fb 	.word	0x3ff921fb
 800aa28:	1a626331 	.word	0x1a626331
 800aa2c:	3dd0b461 	.word	0x3dd0b461
 800aa30:	1a600000 	.word	0x1a600000
 800aa34:	3dd0b461 	.word	0x3dd0b461
 800aa38:	2e037073 	.word	0x2e037073
 800aa3c:	3ba3198a 	.word	0x3ba3198a
 800aa40:	6dc9c883 	.word	0x6dc9c883
 800aa44:	3fe45f30 	.word	0x3fe45f30
 800aa48:	2e000000 	.word	0x2e000000
 800aa4c:	3ba3198a 	.word	0x3ba3198a
 800aa50:	252049c1 	.word	0x252049c1
 800aa54:	397b839a 	.word	0x397b839a
 800aa58:	3fe921fb 	.word	0x3fe921fb
 800aa5c:	4002d97b 	.word	0x4002d97b
 800aa60:	3ff921fb 	.word	0x3ff921fb
 800aa64:	413921fb 	.word	0x413921fb
 800aa68:	3fe00000 	.word	0x3fe00000
 800aa6c:	0800bb50 	.word	0x0800bb50
 800aa70:	7fefffff 	.word	0x7fefffff
 800aa74:	ea4f 5528 	mov.w	r5, r8, asr #20
 800aa78:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800aa7c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800aa80:	4630      	mov	r0, r6
 800aa82:	460f      	mov	r7, r1
 800aa84:	f7f6 f888 	bl	8000b98 <__aeabi_d2iz>
 800aa88:	f7f5 fd6c 	bl	8000564 <__aeabi_i2d>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4630      	mov	r0, r6
 800aa92:	4639      	mov	r1, r7
 800aa94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa98:	f7f5 fc16 	bl	80002c8 <__aeabi_dsub>
 800aa9c:	4b22      	ldr	r3, [pc, #136]	@ (800ab28 <__ieee754_rem_pio2+0x3f0>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f7f5 fdca 	bl	8000638 <__aeabi_dmul>
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	f7f6 f876 	bl	8000b98 <__aeabi_d2iz>
 800aaac:	f7f5 fd5a 	bl	8000564 <__aeabi_i2d>
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	4630      	mov	r0, r6
 800aab6:	4639      	mov	r1, r7
 800aab8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aabc:	f7f5 fc04 	bl	80002c8 <__aeabi_dsub>
 800aac0:	4b19      	ldr	r3, [pc, #100]	@ (800ab28 <__ieee754_rem_pio2+0x3f0>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	f7f5 fdb8 	bl	8000638 <__aeabi_dmul>
 800aac8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800aacc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800aad0:	f04f 0803 	mov.w	r8, #3
 800aad4:	2600      	movs	r6, #0
 800aad6:	2700      	movs	r7, #0
 800aad8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800aadc:	4632      	mov	r2, r6
 800aade:	463b      	mov	r3, r7
 800aae0:	46c2      	mov	sl, r8
 800aae2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aae6:	f7f6 f80f 	bl	8000b08 <__aeabi_dcmpeq>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d1f4      	bne.n	800aad8 <__ieee754_rem_pio2+0x3a0>
 800aaee:	4b0f      	ldr	r3, [pc, #60]	@ (800ab2c <__ieee754_rem_pio2+0x3f4>)
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	462a      	mov	r2, r5
 800aaf8:	4653      	mov	r3, sl
 800aafa:	4621      	mov	r1, r4
 800aafc:	a806      	add	r0, sp, #24
 800aafe:	f000 f853 	bl	800aba8 <__kernel_rem_pio2>
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	4605      	mov	r5, r0
 800ab08:	f6bf ae53 	bge.w	800a7b2 <__ieee754_rem_pio2+0x7a>
 800ab0c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ab10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab14:	e9c4 2300 	strd	r2, r3, [r4]
 800ab18:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ab1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab20:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ab24:	e740      	b.n	800a9a8 <__ieee754_rem_pio2+0x270>
 800ab26:	bf00      	nop
 800ab28:	41700000 	.word	0x41700000
 800ab2c:	0800bbd0 	.word	0x0800bbd0

0800ab30 <with_errno>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	ed2d 8b02 	vpush	{d8}
 800ab36:	eeb0 8a40 	vmov.f32	s16, s0
 800ab3a:	eef0 8a60 	vmov.f32	s17, s1
 800ab3e:	4604      	mov	r4, r0
 800ab40:	f7fc ff2e 	bl	80079a0 <__errno>
 800ab44:	eeb0 0a48 	vmov.f32	s0, s16
 800ab48:	eef0 0a68 	vmov.f32	s1, s17
 800ab4c:	ecbd 8b02 	vpop	{d8}
 800ab50:	6004      	str	r4, [r0, #0]
 800ab52:	bd10      	pop	{r4, pc}

0800ab54 <xflow>:
 800ab54:	4603      	mov	r3, r0
 800ab56:	b507      	push	{r0, r1, r2, lr}
 800ab58:	ec51 0b10 	vmov	r0, r1, d0
 800ab5c:	b183      	cbz	r3, 800ab80 <xflow+0x2c>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab64:	e9cd 2300 	strd	r2, r3, [sp]
 800ab68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab6c:	f7f5 fd64 	bl	8000638 <__aeabi_dmul>
 800ab70:	ec41 0b10 	vmov	d0, r0, r1
 800ab74:	2022      	movs	r0, #34	@ 0x22
 800ab76:	b003      	add	sp, #12
 800ab78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab7c:	f7ff bfd8 	b.w	800ab30 <with_errno>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	e7ee      	b.n	800ab64 <xflow+0x10>
	...

0800ab88 <__math_uflow>:
 800ab88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab90 <__math_uflow+0x8>
 800ab8c:	f7ff bfe2 	b.w	800ab54 <xflow>
 800ab90:	00000000 	.word	0x00000000
 800ab94:	10000000 	.word	0x10000000

0800ab98 <__math_oflow>:
 800ab98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aba0 <__math_oflow+0x8>
 800ab9c:	f7ff bfda 	b.w	800ab54 <xflow>
 800aba0:	00000000 	.word	0x00000000
 800aba4:	70000000 	.word	0x70000000

0800aba8 <__kernel_rem_pio2>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	ed2d 8b02 	vpush	{d8}
 800abb0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800abb4:	f112 0f14 	cmn.w	r2, #20
 800abb8:	9306      	str	r3, [sp, #24]
 800abba:	9104      	str	r1, [sp, #16]
 800abbc:	4bbe      	ldr	r3, [pc, #760]	@ (800aeb8 <__kernel_rem_pio2+0x310>)
 800abbe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800abc0:	9008      	str	r0, [sp, #32]
 800abc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	9b06      	ldr	r3, [sp, #24]
 800abca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800abce:	bfa8      	it	ge
 800abd0:	1ed4      	subge	r4, r2, #3
 800abd2:	9305      	str	r3, [sp, #20]
 800abd4:	bfb2      	itee	lt
 800abd6:	2400      	movlt	r4, #0
 800abd8:	2318      	movge	r3, #24
 800abda:	fb94 f4f3 	sdivge	r4, r4, r3
 800abde:	f06f 0317 	mvn.w	r3, #23
 800abe2:	fb04 3303 	mla	r3, r4, r3, r3
 800abe6:	eb03 0b02 	add.w	fp, r3, r2
 800abea:	9b00      	ldr	r3, [sp, #0]
 800abec:	9a05      	ldr	r2, [sp, #20]
 800abee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800aea8 <__kernel_rem_pio2+0x300>
 800abf2:	eb03 0802 	add.w	r8, r3, r2
 800abf6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800abf8:	1aa7      	subs	r7, r4, r2
 800abfa:	ae20      	add	r6, sp, #128	@ 0x80
 800abfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ac00:	2500      	movs	r5, #0
 800ac02:	4545      	cmp	r5, r8
 800ac04:	dd13      	ble.n	800ac2e <__kernel_rem_pio2+0x86>
 800ac06:	9b06      	ldr	r3, [sp, #24]
 800ac08:	aa20      	add	r2, sp, #128	@ 0x80
 800ac0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ac0e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ac12:	f04f 0800 	mov.w	r8, #0
 800ac16:	9b00      	ldr	r3, [sp, #0]
 800ac18:	4598      	cmp	r8, r3
 800ac1a:	dc31      	bgt.n	800ac80 <__kernel_rem_pio2+0xd8>
 800ac1c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800aea8 <__kernel_rem_pio2+0x300>
 800ac20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac28:	462f      	mov	r7, r5
 800ac2a:	2600      	movs	r6, #0
 800ac2c:	e01b      	b.n	800ac66 <__kernel_rem_pio2+0xbe>
 800ac2e:	42ef      	cmn	r7, r5
 800ac30:	d407      	bmi.n	800ac42 <__kernel_rem_pio2+0x9a>
 800ac32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac36:	f7f5 fc95 	bl	8000564 <__aeabi_i2d>
 800ac3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac3e:	3501      	adds	r5, #1
 800ac40:	e7df      	b.n	800ac02 <__kernel_rem_pio2+0x5a>
 800ac42:	ec51 0b18 	vmov	r0, r1, d8
 800ac46:	e7f8      	b.n	800ac3a <__kernel_rem_pio2+0x92>
 800ac48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ac50:	f7f5 fcf2 	bl	8000638 <__aeabi_dmul>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac5c:	f7f5 fb36 	bl	80002cc <__adddf3>
 800ac60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac64:	3601      	adds	r6, #1
 800ac66:	9b05      	ldr	r3, [sp, #20]
 800ac68:	429e      	cmp	r6, r3
 800ac6a:	f1a7 0708 	sub.w	r7, r7, #8
 800ac6e:	ddeb      	ble.n	800ac48 <__kernel_rem_pio2+0xa0>
 800ac70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac74:	f108 0801 	add.w	r8, r8, #1
 800ac78:	ecaa 7b02 	vstmia	sl!, {d7}
 800ac7c:	3508      	adds	r5, #8
 800ac7e:	e7ca      	b.n	800ac16 <__kernel_rem_pio2+0x6e>
 800ac80:	9b00      	ldr	r3, [sp, #0]
 800ac82:	f8dd 8000 	ldr.w	r8, [sp]
 800ac86:	aa0c      	add	r2, sp, #48	@ 0x30
 800ac88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ac90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac96:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ac9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac9c:	ab98      	add	r3, sp, #608	@ 0x260
 800ac9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aca2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800aca6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acaa:	ac0c      	add	r4, sp, #48	@ 0x30
 800acac:	ab70      	add	r3, sp, #448	@ 0x1c0
 800acae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800acb2:	46a1      	mov	r9, r4
 800acb4:	46c2      	mov	sl, r8
 800acb6:	f1ba 0f00 	cmp.w	sl, #0
 800acba:	f1a5 0508 	sub.w	r5, r5, #8
 800acbe:	dc77      	bgt.n	800adb0 <__kernel_rem_pio2+0x208>
 800acc0:	4658      	mov	r0, fp
 800acc2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800acc6:	f000 fc53 	bl	800b570 <scalbn>
 800acca:	ec57 6b10 	vmov	r6, r7, d0
 800acce:	2200      	movs	r2, #0
 800acd0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800acd4:	4630      	mov	r0, r6
 800acd6:	4639      	mov	r1, r7
 800acd8:	f7f5 fcae 	bl	8000638 <__aeabi_dmul>
 800acdc:	ec41 0b10 	vmov	d0, r0, r1
 800ace0:	f000 fcc6 	bl	800b670 <floor>
 800ace4:	4b75      	ldr	r3, [pc, #468]	@ (800aebc <__kernel_rem_pio2+0x314>)
 800ace6:	ec51 0b10 	vmov	r0, r1, d0
 800acea:	2200      	movs	r2, #0
 800acec:	f7f5 fca4 	bl	8000638 <__aeabi_dmul>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4630      	mov	r0, r6
 800acf6:	4639      	mov	r1, r7
 800acf8:	f7f5 fae6 	bl	80002c8 <__aeabi_dsub>
 800acfc:	460f      	mov	r7, r1
 800acfe:	4606      	mov	r6, r0
 800ad00:	f7f5 ff4a 	bl	8000b98 <__aeabi_d2iz>
 800ad04:	9002      	str	r0, [sp, #8]
 800ad06:	f7f5 fc2d 	bl	8000564 <__aeabi_i2d>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4630      	mov	r0, r6
 800ad10:	4639      	mov	r1, r7
 800ad12:	f7f5 fad9 	bl	80002c8 <__aeabi_dsub>
 800ad16:	f1bb 0f00 	cmp.w	fp, #0
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	460f      	mov	r7, r1
 800ad1e:	dd6c      	ble.n	800adfa <__kernel_rem_pio2+0x252>
 800ad20:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800ad24:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad26:	9d02      	ldr	r5, [sp, #8]
 800ad28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad2c:	f1cb 0018 	rsb	r0, fp, #24
 800ad30:	fa43 f200 	asr.w	r2, r3, r0
 800ad34:	4415      	add	r5, r2
 800ad36:	4082      	lsls	r2, r0
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	aa0c      	add	r2, sp, #48	@ 0x30
 800ad3c:	9502      	str	r5, [sp, #8]
 800ad3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ad42:	f1cb 0217 	rsb	r2, fp, #23
 800ad46:	fa43 f902 	asr.w	r9, r3, r2
 800ad4a:	f1b9 0f00 	cmp.w	r9, #0
 800ad4e:	dd64      	ble.n	800ae1a <__kernel_rem_pio2+0x272>
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	2200      	movs	r2, #0
 800ad54:	3301      	adds	r3, #1
 800ad56:	9302      	str	r3, [sp, #8]
 800ad58:	4615      	mov	r5, r2
 800ad5a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ad5e:	4590      	cmp	r8, r2
 800ad60:	f300 80b8 	bgt.w	800aed4 <__kernel_rem_pio2+0x32c>
 800ad64:	f1bb 0f00 	cmp.w	fp, #0
 800ad68:	dd07      	ble.n	800ad7a <__kernel_rem_pio2+0x1d2>
 800ad6a:	f1bb 0f01 	cmp.w	fp, #1
 800ad6e:	f000 80bf 	beq.w	800aef0 <__kernel_rem_pio2+0x348>
 800ad72:	f1bb 0f02 	cmp.w	fp, #2
 800ad76:	f000 80c6 	beq.w	800af06 <__kernel_rem_pio2+0x35e>
 800ad7a:	f1b9 0f02 	cmp.w	r9, #2
 800ad7e:	d14c      	bne.n	800ae1a <__kernel_rem_pio2+0x272>
 800ad80:	4632      	mov	r2, r6
 800ad82:	463b      	mov	r3, r7
 800ad84:	494e      	ldr	r1, [pc, #312]	@ (800aec0 <__kernel_rem_pio2+0x318>)
 800ad86:	2000      	movs	r0, #0
 800ad88:	f7f5 fa9e 	bl	80002c8 <__aeabi_dsub>
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	460f      	mov	r7, r1
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	d042      	beq.n	800ae1a <__kernel_rem_pio2+0x272>
 800ad94:	4658      	mov	r0, fp
 800ad96:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800aeb0 <__kernel_rem_pio2+0x308>
 800ad9a:	f000 fbe9 	bl	800b570 <scalbn>
 800ad9e:	4630      	mov	r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	ec53 2b10 	vmov	r2, r3, d0
 800ada6:	f7f5 fa8f 	bl	80002c8 <__aeabi_dsub>
 800adaa:	4606      	mov	r6, r0
 800adac:	460f      	mov	r7, r1
 800adae:	e034      	b.n	800ae1a <__kernel_rem_pio2+0x272>
 800adb0:	4b44      	ldr	r3, [pc, #272]	@ (800aec4 <__kernel_rem_pio2+0x31c>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adb8:	f7f5 fc3e 	bl	8000638 <__aeabi_dmul>
 800adbc:	f7f5 feec 	bl	8000b98 <__aeabi_d2iz>
 800adc0:	f7f5 fbd0 	bl	8000564 <__aeabi_i2d>
 800adc4:	4b40      	ldr	r3, [pc, #256]	@ (800aec8 <__kernel_rem_pio2+0x320>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	4606      	mov	r6, r0
 800adca:	460f      	mov	r7, r1
 800adcc:	f7f5 fc34 	bl	8000638 <__aeabi_dmul>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800add8:	f7f5 fa76 	bl	80002c8 <__aeabi_dsub>
 800addc:	f7f5 fedc 	bl	8000b98 <__aeabi_d2iz>
 800ade0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ade4:	f849 0b04 	str.w	r0, [r9], #4
 800ade8:	4639      	mov	r1, r7
 800adea:	4630      	mov	r0, r6
 800adec:	f7f5 fa6e 	bl	80002cc <__adddf3>
 800adf0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800adf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adf8:	e75d      	b.n	800acb6 <__kernel_rem_pio2+0x10e>
 800adfa:	d107      	bne.n	800ae0c <__kernel_rem_pio2+0x264>
 800adfc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800ae00:	aa0c      	add	r2, sp, #48	@ 0x30
 800ae02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae06:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ae0a:	e79e      	b.n	800ad4a <__kernel_rem_pio2+0x1a2>
 800ae0c:	4b2f      	ldr	r3, [pc, #188]	@ (800aecc <__kernel_rem_pio2+0x324>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f7f5 fe98 	bl	8000b44 <__aeabi_dcmpge>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d143      	bne.n	800aea0 <__kernel_rem_pio2+0x2f8>
 800ae18:	4681      	mov	r9, r0
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4630      	mov	r0, r6
 800ae20:	4639      	mov	r1, r7
 800ae22:	f7f5 fe71 	bl	8000b08 <__aeabi_dcmpeq>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f000 80bf 	beq.w	800afaa <__kernel_rem_pio2+0x402>
 800ae2c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800ae30:	2200      	movs	r2, #0
 800ae32:	9900      	ldr	r1, [sp, #0]
 800ae34:	428b      	cmp	r3, r1
 800ae36:	da6e      	bge.n	800af16 <__kernel_rem_pio2+0x36e>
 800ae38:	2a00      	cmp	r2, #0
 800ae3a:	f000 8089 	beq.w	800af50 <__kernel_rem_pio2+0x3a8>
 800ae3e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ae42:	ab0c      	add	r3, sp, #48	@ 0x30
 800ae44:	f1ab 0b18 	sub.w	fp, fp, #24
 800ae48:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0f6      	beq.n	800ae3e <__kernel_rem_pio2+0x296>
 800ae50:	4658      	mov	r0, fp
 800ae52:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800aeb0 <__kernel_rem_pio2+0x308>
 800ae56:	f000 fb8b 	bl	800b570 <scalbn>
 800ae5a:	f108 0301 	add.w	r3, r8, #1
 800ae5e:	00da      	lsls	r2, r3, #3
 800ae60:	9205      	str	r2, [sp, #20]
 800ae62:	ec55 4b10 	vmov	r4, r5, d0
 800ae66:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ae68:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800aec4 <__kernel_rem_pio2+0x31c>
 800ae6c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ae70:	4646      	mov	r6, r8
 800ae72:	f04f 0a00 	mov.w	sl, #0
 800ae76:	2e00      	cmp	r6, #0
 800ae78:	f280 80cf 	bge.w	800b01a <__kernel_rem_pio2+0x472>
 800ae7c:	4644      	mov	r4, r8
 800ae7e:	2c00      	cmp	r4, #0
 800ae80:	f2c0 80fd 	blt.w	800b07e <__kernel_rem_pio2+0x4d6>
 800ae84:	4b12      	ldr	r3, [pc, #72]	@ (800aed0 <__kernel_rem_pio2+0x328>)
 800ae86:	461f      	mov	r7, r3
 800ae88:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ae8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae8e:	9306      	str	r3, [sp, #24]
 800ae90:	f04f 0a00 	mov.w	sl, #0
 800ae94:	f04f 0b00 	mov.w	fp, #0
 800ae98:	2600      	movs	r6, #0
 800ae9a:	eba8 0504 	sub.w	r5, r8, r4
 800ae9e:	e0e2      	b.n	800b066 <__kernel_rem_pio2+0x4be>
 800aea0:	f04f 0902 	mov.w	r9, #2
 800aea4:	e754      	b.n	800ad50 <__kernel_rem_pio2+0x1a8>
 800aea6:	bf00      	nop
	...
 800aeb4:	3ff00000 	.word	0x3ff00000
 800aeb8:	0800bd18 	.word	0x0800bd18
 800aebc:	40200000 	.word	0x40200000
 800aec0:	3ff00000 	.word	0x3ff00000
 800aec4:	3e700000 	.word	0x3e700000
 800aec8:	41700000 	.word	0x41700000
 800aecc:	3fe00000 	.word	0x3fe00000
 800aed0:	0800bcd8 	.word	0x0800bcd8
 800aed4:	f854 3b04 	ldr.w	r3, [r4], #4
 800aed8:	b945      	cbnz	r5, 800aeec <__kernel_rem_pio2+0x344>
 800aeda:	b123      	cbz	r3, 800aee6 <__kernel_rem_pio2+0x33e>
 800aedc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800aee0:	f844 3c04 	str.w	r3, [r4, #-4]
 800aee4:	2301      	movs	r3, #1
 800aee6:	3201      	adds	r2, #1
 800aee8:	461d      	mov	r5, r3
 800aeea:	e738      	b.n	800ad5e <__kernel_rem_pio2+0x1b6>
 800aeec:	1acb      	subs	r3, r1, r3
 800aeee:	e7f7      	b.n	800aee0 <__kernel_rem_pio2+0x338>
 800aef0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800aef4:	ab0c      	add	r3, sp, #48	@ 0x30
 800aef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aefe:	a90c      	add	r1, sp, #48	@ 0x30
 800af00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800af04:	e739      	b.n	800ad7a <__kernel_rem_pio2+0x1d2>
 800af06:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800af0a:	ab0c      	add	r3, sp, #48	@ 0x30
 800af0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800af14:	e7f3      	b.n	800aefe <__kernel_rem_pio2+0x356>
 800af16:	a90c      	add	r1, sp, #48	@ 0x30
 800af18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	430a      	orrs	r2, r1
 800af20:	e787      	b.n	800ae32 <__kernel_rem_pio2+0x28a>
 800af22:	3401      	adds	r4, #1
 800af24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800af28:	2a00      	cmp	r2, #0
 800af2a:	d0fa      	beq.n	800af22 <__kernel_rem_pio2+0x37a>
 800af2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800af32:	eb0d 0503 	add.w	r5, sp, r3
 800af36:	9b06      	ldr	r3, [sp, #24]
 800af38:	aa20      	add	r2, sp, #128	@ 0x80
 800af3a:	4443      	add	r3, r8
 800af3c:	f108 0701 	add.w	r7, r8, #1
 800af40:	3d98      	subs	r5, #152	@ 0x98
 800af42:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800af46:	4444      	add	r4, r8
 800af48:	42bc      	cmp	r4, r7
 800af4a:	da04      	bge.n	800af56 <__kernel_rem_pio2+0x3ae>
 800af4c:	46a0      	mov	r8, r4
 800af4e:	e6a2      	b.n	800ac96 <__kernel_rem_pio2+0xee>
 800af50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af52:	2401      	movs	r4, #1
 800af54:	e7e6      	b.n	800af24 <__kernel_rem_pio2+0x37c>
 800af56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af58:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800af5c:	f7f5 fb02 	bl	8000564 <__aeabi_i2d>
 800af60:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b228 <__kernel_rem_pio2+0x680>
 800af64:	e8e6 0102 	strd	r0, r1, [r6], #8
 800af68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af70:	46b2      	mov	sl, r6
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	9b05      	ldr	r3, [sp, #20]
 800af78:	4598      	cmp	r8, r3
 800af7a:	dd05      	ble.n	800af88 <__kernel_rem_pio2+0x3e0>
 800af7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af80:	3701      	adds	r7, #1
 800af82:	eca5 7b02 	vstmia	r5!, {d7}
 800af86:	e7df      	b.n	800af48 <__kernel_rem_pio2+0x3a0>
 800af88:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800af8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af90:	f7f5 fb52 	bl	8000638 <__aeabi_dmul>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af9c:	f7f5 f996 	bl	80002cc <__adddf3>
 800afa0:	f108 0801 	add.w	r8, r8, #1
 800afa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afa8:	e7e5      	b.n	800af76 <__kernel_rem_pio2+0x3ce>
 800afaa:	f1cb 0000 	rsb	r0, fp, #0
 800afae:	ec47 6b10 	vmov	d0, r6, r7
 800afb2:	f000 fadd 	bl	800b570 <scalbn>
 800afb6:	ec55 4b10 	vmov	r4, r5, d0
 800afba:	4b9d      	ldr	r3, [pc, #628]	@ (800b230 <__kernel_rem_pio2+0x688>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 fdbf 	bl	8000b44 <__aeabi_dcmpge>
 800afc6:	b300      	cbz	r0, 800b00a <__kernel_rem_pio2+0x462>
 800afc8:	4b9a      	ldr	r3, [pc, #616]	@ (800b234 <__kernel_rem_pio2+0x68c>)
 800afca:	2200      	movs	r2, #0
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 fb32 	bl	8000638 <__aeabi_dmul>
 800afd4:	f7f5 fde0 	bl	8000b98 <__aeabi_d2iz>
 800afd8:	4606      	mov	r6, r0
 800afda:	f7f5 fac3 	bl	8000564 <__aeabi_i2d>
 800afde:	4b94      	ldr	r3, [pc, #592]	@ (800b230 <__kernel_rem_pio2+0x688>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	f7f5 fb29 	bl	8000638 <__aeabi_dmul>
 800afe6:	460b      	mov	r3, r1
 800afe8:	4602      	mov	r2, r0
 800afea:	4629      	mov	r1, r5
 800afec:	4620      	mov	r0, r4
 800afee:	f7f5 f96b 	bl	80002c8 <__aeabi_dsub>
 800aff2:	f7f5 fdd1 	bl	8000b98 <__aeabi_d2iz>
 800aff6:	ab0c      	add	r3, sp, #48	@ 0x30
 800aff8:	f10b 0b18 	add.w	fp, fp, #24
 800affc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b000:	f108 0801 	add.w	r8, r8, #1
 800b004:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b008:	e722      	b.n	800ae50 <__kernel_rem_pio2+0x2a8>
 800b00a:	4620      	mov	r0, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	f7f5 fdc3 	bl	8000b98 <__aeabi_d2iz>
 800b012:	ab0c      	add	r3, sp, #48	@ 0x30
 800b014:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b018:	e71a      	b.n	800ae50 <__kernel_rem_pio2+0x2a8>
 800b01a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b01c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b020:	f7f5 faa0 	bl	8000564 <__aeabi_i2d>
 800b024:	4622      	mov	r2, r4
 800b026:	462b      	mov	r3, r5
 800b028:	f7f5 fb06 	bl	8000638 <__aeabi_dmul>
 800b02c:	4652      	mov	r2, sl
 800b02e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b032:	465b      	mov	r3, fp
 800b034:	4620      	mov	r0, r4
 800b036:	4629      	mov	r1, r5
 800b038:	f7f5 fafe 	bl	8000638 <__aeabi_dmul>
 800b03c:	3e01      	subs	r6, #1
 800b03e:	4604      	mov	r4, r0
 800b040:	460d      	mov	r5, r1
 800b042:	e718      	b.n	800ae76 <__kernel_rem_pio2+0x2ce>
 800b044:	9906      	ldr	r1, [sp, #24]
 800b046:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b04a:	9106      	str	r1, [sp, #24]
 800b04c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b050:	f7f5 faf2 	bl	8000638 <__aeabi_dmul>
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	4650      	mov	r0, sl
 800b05a:	4659      	mov	r1, fp
 800b05c:	f7f5 f936 	bl	80002cc <__adddf3>
 800b060:	3601      	adds	r6, #1
 800b062:	4682      	mov	sl, r0
 800b064:	468b      	mov	fp, r1
 800b066:	9b00      	ldr	r3, [sp, #0]
 800b068:	429e      	cmp	r6, r3
 800b06a:	dc01      	bgt.n	800b070 <__kernel_rem_pio2+0x4c8>
 800b06c:	42b5      	cmp	r5, r6
 800b06e:	dae9      	bge.n	800b044 <__kernel_rem_pio2+0x49c>
 800b070:	ab48      	add	r3, sp, #288	@ 0x120
 800b072:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b076:	e9c5 ab00 	strd	sl, fp, [r5]
 800b07a:	3c01      	subs	r4, #1
 800b07c:	e6ff      	b.n	800ae7e <__kernel_rem_pio2+0x2d6>
 800b07e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b080:	2b02      	cmp	r3, #2
 800b082:	dc0b      	bgt.n	800b09c <__kernel_rem_pio2+0x4f4>
 800b084:	2b00      	cmp	r3, #0
 800b086:	dc39      	bgt.n	800b0fc <__kernel_rem_pio2+0x554>
 800b088:	d05d      	beq.n	800b146 <__kernel_rem_pio2+0x59e>
 800b08a:	9b02      	ldr	r3, [sp, #8]
 800b08c:	f003 0007 	and.w	r0, r3, #7
 800b090:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b094:	ecbd 8b02 	vpop	{d8}
 800b098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d1f3      	bne.n	800b08a <__kernel_rem_pio2+0x4e2>
 800b0a2:	9b05      	ldr	r3, [sp, #20]
 800b0a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b0a8:	eb0d 0403 	add.w	r4, sp, r3
 800b0ac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b0b0:	4625      	mov	r5, r4
 800b0b2:	46c2      	mov	sl, r8
 800b0b4:	f1ba 0f00 	cmp.w	sl, #0
 800b0b8:	f1a5 0508 	sub.w	r5, r5, #8
 800b0bc:	dc6b      	bgt.n	800b196 <__kernel_rem_pio2+0x5ee>
 800b0be:	4645      	mov	r5, r8
 800b0c0:	2d01      	cmp	r5, #1
 800b0c2:	f1a4 0408 	sub.w	r4, r4, #8
 800b0c6:	f300 8087 	bgt.w	800b1d8 <__kernel_rem_pio2+0x630>
 800b0ca:	9c05      	ldr	r4, [sp, #20]
 800b0cc:	ab48      	add	r3, sp, #288	@ 0x120
 800b0ce:	441c      	add	r4, r3
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	f1b8 0f01 	cmp.w	r8, #1
 800b0d8:	f300 809c 	bgt.w	800b214 <__kernel_rem_pio2+0x66c>
 800b0dc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b0e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b0e4:	f1b9 0f00 	cmp.w	r9, #0
 800b0e8:	f040 80a6 	bne.w	800b238 <__kernel_rem_pio2+0x690>
 800b0ec:	9b04      	ldr	r3, [sp, #16]
 800b0ee:	e9c3 7800 	strd	r7, r8, [r3]
 800b0f2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b0f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b0fa:	e7c6      	b.n	800b08a <__kernel_rem_pio2+0x4e2>
 800b0fc:	9d05      	ldr	r5, [sp, #20]
 800b0fe:	ab48      	add	r3, sp, #288	@ 0x120
 800b100:	441d      	add	r5, r3
 800b102:	4644      	mov	r4, r8
 800b104:	2000      	movs	r0, #0
 800b106:	2100      	movs	r1, #0
 800b108:	2c00      	cmp	r4, #0
 800b10a:	da35      	bge.n	800b178 <__kernel_rem_pio2+0x5d0>
 800b10c:	f1b9 0f00 	cmp.w	r9, #0
 800b110:	d038      	beq.n	800b184 <__kernel_rem_pio2+0x5dc>
 800b112:	4602      	mov	r2, r0
 800b114:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b118:	9c04      	ldr	r4, [sp, #16]
 800b11a:	e9c4 2300 	strd	r2, r3, [r4]
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b126:	f7f5 f8cf 	bl	80002c8 <__aeabi_dsub>
 800b12a:	ad4a      	add	r5, sp, #296	@ 0x128
 800b12c:	2401      	movs	r4, #1
 800b12e:	45a0      	cmp	r8, r4
 800b130:	da2b      	bge.n	800b18a <__kernel_rem_pio2+0x5e2>
 800b132:	f1b9 0f00 	cmp.w	r9, #0
 800b136:	d002      	beq.n	800b13e <__kernel_rem_pio2+0x596>
 800b138:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b13c:	4619      	mov	r1, r3
 800b13e:	9b04      	ldr	r3, [sp, #16]
 800b140:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b144:	e7a1      	b.n	800b08a <__kernel_rem_pio2+0x4e2>
 800b146:	9c05      	ldr	r4, [sp, #20]
 800b148:	ab48      	add	r3, sp, #288	@ 0x120
 800b14a:	441c      	add	r4, r3
 800b14c:	2000      	movs	r0, #0
 800b14e:	2100      	movs	r1, #0
 800b150:	f1b8 0f00 	cmp.w	r8, #0
 800b154:	da09      	bge.n	800b16a <__kernel_rem_pio2+0x5c2>
 800b156:	f1b9 0f00 	cmp.w	r9, #0
 800b15a:	d002      	beq.n	800b162 <__kernel_rem_pio2+0x5ba>
 800b15c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b160:	4619      	mov	r1, r3
 800b162:	9b04      	ldr	r3, [sp, #16]
 800b164:	e9c3 0100 	strd	r0, r1, [r3]
 800b168:	e78f      	b.n	800b08a <__kernel_rem_pio2+0x4e2>
 800b16a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b16e:	f7f5 f8ad 	bl	80002cc <__adddf3>
 800b172:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b176:	e7eb      	b.n	800b150 <__kernel_rem_pio2+0x5a8>
 800b178:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b17c:	f7f5 f8a6 	bl	80002cc <__adddf3>
 800b180:	3c01      	subs	r4, #1
 800b182:	e7c1      	b.n	800b108 <__kernel_rem_pio2+0x560>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	e7c6      	b.n	800b118 <__kernel_rem_pio2+0x570>
 800b18a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b18e:	f7f5 f89d 	bl	80002cc <__adddf3>
 800b192:	3401      	adds	r4, #1
 800b194:	e7cb      	b.n	800b12e <__kernel_rem_pio2+0x586>
 800b196:	ed95 7b00 	vldr	d7, [r5]
 800b19a:	ed8d 7b00 	vstr	d7, [sp]
 800b19e:	ed95 7b02 	vldr	d7, [r5, #8]
 800b1a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1a6:	ec53 2b17 	vmov	r2, r3, d7
 800b1aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1ae:	f7f5 f88d 	bl	80002cc <__adddf3>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1be:	f7f5 f883 	bl	80002c8 <__aeabi_dsub>
 800b1c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1c6:	f7f5 f881 	bl	80002cc <__adddf3>
 800b1ca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b1ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b1d2:	e9c5 6700 	strd	r6, r7, [r5]
 800b1d6:	e76d      	b.n	800b0b4 <__kernel_rem_pio2+0x50c>
 800b1d8:	ed94 7b00 	vldr	d7, [r4]
 800b1dc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b1e0:	ec51 0b17 	vmov	r0, r1, d7
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	465b      	mov	r3, fp
 800b1e8:	ed8d 7b00 	vstr	d7, [sp]
 800b1ec:	f7f5 f86e 	bl	80002cc <__adddf3>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	460f      	mov	r7, r1
 800b1f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1fc:	f7f5 f864 	bl	80002c8 <__aeabi_dsub>
 800b200:	4652      	mov	r2, sl
 800b202:	465b      	mov	r3, fp
 800b204:	f7f5 f862 	bl	80002cc <__adddf3>
 800b208:	3d01      	subs	r5, #1
 800b20a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b20e:	e9c4 6700 	strd	r6, r7, [r4]
 800b212:	e755      	b.n	800b0c0 <__kernel_rem_pio2+0x518>
 800b214:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b218:	f7f5 f858 	bl	80002cc <__adddf3>
 800b21c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b220:	e758      	b.n	800b0d4 <__kernel_rem_pio2+0x52c>
 800b222:	bf00      	nop
 800b224:	f3af 8000 	nop.w
	...
 800b230:	41700000 	.word	0x41700000
 800b234:	3e700000 	.word	0x3e700000
 800b238:	9b04      	ldr	r3, [sp, #16]
 800b23a:	9a04      	ldr	r2, [sp, #16]
 800b23c:	601f      	str	r7, [r3, #0]
 800b23e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b242:	605c      	str	r4, [r3, #4]
 800b244:	609d      	str	r5, [r3, #8]
 800b246:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b24a:	60d3      	str	r3, [r2, #12]
 800b24c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b250:	6110      	str	r0, [r2, #16]
 800b252:	6153      	str	r3, [r2, #20]
 800b254:	e719      	b.n	800b08a <__kernel_rem_pio2+0x4e2>
 800b256:	bf00      	nop

0800b258 <__kernel_cos>:
 800b258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	ec57 6b10 	vmov	r6, r7, d0
 800b260:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b264:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b268:	ed8d 1b00 	vstr	d1, [sp]
 800b26c:	d206      	bcs.n	800b27c <__kernel_cos+0x24>
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 fc91 	bl	8000b98 <__aeabi_d2iz>
 800b276:	2800      	cmp	r0, #0
 800b278:	f000 8088 	beq.w	800b38c <__kernel_cos+0x134>
 800b27c:	4632      	mov	r2, r6
 800b27e:	463b      	mov	r3, r7
 800b280:	4630      	mov	r0, r6
 800b282:	4639      	mov	r1, r7
 800b284:	f7f5 f9d8 	bl	8000638 <__aeabi_dmul>
 800b288:	4b51      	ldr	r3, [pc, #324]	@ (800b3d0 <__kernel_cos+0x178>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	4604      	mov	r4, r0
 800b28e:	460d      	mov	r5, r1
 800b290:	f7f5 f9d2 	bl	8000638 <__aeabi_dmul>
 800b294:	a340      	add	r3, pc, #256	@ (adr r3, 800b398 <__kernel_cos+0x140>)
 800b296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29a:	4682      	mov	sl, r0
 800b29c:	468b      	mov	fp, r1
 800b29e:	4620      	mov	r0, r4
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7f5 f9c9 	bl	8000638 <__aeabi_dmul>
 800b2a6:	a33e      	add	r3, pc, #248	@ (adr r3, 800b3a0 <__kernel_cos+0x148>)
 800b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ac:	f7f5 f80e 	bl	80002cc <__adddf3>
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	462b      	mov	r3, r5
 800b2b4:	f7f5 f9c0 	bl	8000638 <__aeabi_dmul>
 800b2b8:	a33b      	add	r3, pc, #236	@ (adr r3, 800b3a8 <__kernel_cos+0x150>)
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	f7f5 f803 	bl	80002c8 <__aeabi_dsub>
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	462b      	mov	r3, r5
 800b2c6:	f7f5 f9b7 	bl	8000638 <__aeabi_dmul>
 800b2ca:	a339      	add	r3, pc, #228	@ (adr r3, 800b3b0 <__kernel_cos+0x158>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f7f4 fffc 	bl	80002cc <__adddf3>
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	f7f5 f9ae 	bl	8000638 <__aeabi_dmul>
 800b2dc:	a336      	add	r3, pc, #216	@ (adr r3, 800b3b8 <__kernel_cos+0x160>)
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	f7f4 fff1 	bl	80002c8 <__aeabi_dsub>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	f7f5 f9a5 	bl	8000638 <__aeabi_dmul>
 800b2ee:	a334      	add	r3, pc, #208	@ (adr r3, 800b3c0 <__kernel_cos+0x168>)
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	f7f4 ffea 	bl	80002cc <__adddf3>
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	462b      	mov	r3, r5
 800b2fc:	f7f5 f99c 	bl	8000638 <__aeabi_dmul>
 800b300:	4622      	mov	r2, r4
 800b302:	462b      	mov	r3, r5
 800b304:	f7f5 f998 	bl	8000638 <__aeabi_dmul>
 800b308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b30c:	4604      	mov	r4, r0
 800b30e:	460d      	mov	r5, r1
 800b310:	4630      	mov	r0, r6
 800b312:	4639      	mov	r1, r7
 800b314:	f7f5 f990 	bl	8000638 <__aeabi_dmul>
 800b318:	460b      	mov	r3, r1
 800b31a:	4602      	mov	r2, r0
 800b31c:	4629      	mov	r1, r5
 800b31e:	4620      	mov	r0, r4
 800b320:	f7f4 ffd2 	bl	80002c8 <__aeabi_dsub>
 800b324:	4b2b      	ldr	r3, [pc, #172]	@ (800b3d4 <__kernel_cos+0x17c>)
 800b326:	4598      	cmp	r8, r3
 800b328:	4606      	mov	r6, r0
 800b32a:	460f      	mov	r7, r1
 800b32c:	d810      	bhi.n	800b350 <__kernel_cos+0xf8>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	4650      	mov	r0, sl
 800b334:	4659      	mov	r1, fp
 800b336:	f7f4 ffc7 	bl	80002c8 <__aeabi_dsub>
 800b33a:	460b      	mov	r3, r1
 800b33c:	4926      	ldr	r1, [pc, #152]	@ (800b3d8 <__kernel_cos+0x180>)
 800b33e:	4602      	mov	r2, r0
 800b340:	2000      	movs	r0, #0
 800b342:	f7f4 ffc1 	bl	80002c8 <__aeabi_dsub>
 800b346:	ec41 0b10 	vmov	d0, r0, r1
 800b34a:	b003      	add	sp, #12
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	4b22      	ldr	r3, [pc, #136]	@ (800b3dc <__kernel_cos+0x184>)
 800b352:	4921      	ldr	r1, [pc, #132]	@ (800b3d8 <__kernel_cos+0x180>)
 800b354:	4598      	cmp	r8, r3
 800b356:	bf8c      	ite	hi
 800b358:	4d21      	ldrhi	r5, [pc, #132]	@ (800b3e0 <__kernel_cos+0x188>)
 800b35a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b35e:	2400      	movs	r4, #0
 800b360:	4622      	mov	r2, r4
 800b362:	462b      	mov	r3, r5
 800b364:	2000      	movs	r0, #0
 800b366:	f7f4 ffaf 	bl	80002c8 <__aeabi_dsub>
 800b36a:	4622      	mov	r2, r4
 800b36c:	4680      	mov	r8, r0
 800b36e:	4689      	mov	r9, r1
 800b370:	462b      	mov	r3, r5
 800b372:	4650      	mov	r0, sl
 800b374:	4659      	mov	r1, fp
 800b376:	f7f4 ffa7 	bl	80002c8 <__aeabi_dsub>
 800b37a:	4632      	mov	r2, r6
 800b37c:	463b      	mov	r3, r7
 800b37e:	f7f4 ffa3 	bl	80002c8 <__aeabi_dsub>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4640      	mov	r0, r8
 800b388:	4649      	mov	r1, r9
 800b38a:	e7da      	b.n	800b342 <__kernel_cos+0xea>
 800b38c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b3c8 <__kernel_cos+0x170>
 800b390:	e7db      	b.n	800b34a <__kernel_cos+0xf2>
 800b392:	bf00      	nop
 800b394:	f3af 8000 	nop.w
 800b398:	be8838d4 	.word	0xbe8838d4
 800b39c:	bda8fae9 	.word	0xbda8fae9
 800b3a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b3a4:	3e21ee9e 	.word	0x3e21ee9e
 800b3a8:	809c52ad 	.word	0x809c52ad
 800b3ac:	3e927e4f 	.word	0x3e927e4f
 800b3b0:	19cb1590 	.word	0x19cb1590
 800b3b4:	3efa01a0 	.word	0x3efa01a0
 800b3b8:	16c15177 	.word	0x16c15177
 800b3bc:	3f56c16c 	.word	0x3f56c16c
 800b3c0:	5555554c 	.word	0x5555554c
 800b3c4:	3fa55555 	.word	0x3fa55555
 800b3c8:	00000000 	.word	0x00000000
 800b3cc:	3ff00000 	.word	0x3ff00000
 800b3d0:	3fe00000 	.word	0x3fe00000
 800b3d4:	3fd33332 	.word	0x3fd33332
 800b3d8:	3ff00000 	.word	0x3ff00000
 800b3dc:	3fe90000 	.word	0x3fe90000
 800b3e0:	3fd20000 	.word	0x3fd20000
 800b3e4:	00000000 	.word	0x00000000

0800b3e8 <__kernel_sin>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	ec55 4b10 	vmov	r4, r5, d0
 800b3f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b3f4:	b085      	sub	sp, #20
 800b3f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b3fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b3fe:	4680      	mov	r8, r0
 800b400:	d205      	bcs.n	800b40e <__kernel_sin+0x26>
 800b402:	4620      	mov	r0, r4
 800b404:	4629      	mov	r1, r5
 800b406:	f7f5 fbc7 	bl	8000b98 <__aeabi_d2iz>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d052      	beq.n	800b4b4 <__kernel_sin+0xcc>
 800b40e:	4622      	mov	r2, r4
 800b410:	462b      	mov	r3, r5
 800b412:	4620      	mov	r0, r4
 800b414:	4629      	mov	r1, r5
 800b416:	f7f5 f90f 	bl	8000638 <__aeabi_dmul>
 800b41a:	4682      	mov	sl, r0
 800b41c:	468b      	mov	fp, r1
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4620      	mov	r0, r4
 800b424:	4629      	mov	r1, r5
 800b426:	f7f5 f907 	bl	8000638 <__aeabi_dmul>
 800b42a:	a342      	add	r3, pc, #264	@ (adr r3, 800b534 <__kernel_sin+0x14c>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	e9cd 0100 	strd	r0, r1, [sp]
 800b434:	4650      	mov	r0, sl
 800b436:	4659      	mov	r1, fp
 800b438:	f7f5 f8fe 	bl	8000638 <__aeabi_dmul>
 800b43c:	a33f      	add	r3, pc, #252	@ (adr r3, 800b53c <__kernel_sin+0x154>)
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	f7f4 ff41 	bl	80002c8 <__aeabi_dsub>
 800b446:	4652      	mov	r2, sl
 800b448:	465b      	mov	r3, fp
 800b44a:	f7f5 f8f5 	bl	8000638 <__aeabi_dmul>
 800b44e:	a33d      	add	r3, pc, #244	@ (adr r3, 800b544 <__kernel_sin+0x15c>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f7f4 ff3a 	bl	80002cc <__adddf3>
 800b458:	4652      	mov	r2, sl
 800b45a:	465b      	mov	r3, fp
 800b45c:	f7f5 f8ec 	bl	8000638 <__aeabi_dmul>
 800b460:	a33a      	add	r3, pc, #232	@ (adr r3, 800b54c <__kernel_sin+0x164>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	f7f4 ff2f 	bl	80002c8 <__aeabi_dsub>
 800b46a:	4652      	mov	r2, sl
 800b46c:	465b      	mov	r3, fp
 800b46e:	f7f5 f8e3 	bl	8000638 <__aeabi_dmul>
 800b472:	a338      	add	r3, pc, #224	@ (adr r3, 800b554 <__kernel_sin+0x16c>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	f7f4 ff28 	bl	80002cc <__adddf3>
 800b47c:	4606      	mov	r6, r0
 800b47e:	460f      	mov	r7, r1
 800b480:	f1b8 0f00 	cmp.w	r8, #0
 800b484:	d11b      	bne.n	800b4be <__kernel_sin+0xd6>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4650      	mov	r0, sl
 800b48c:	4659      	mov	r1, fp
 800b48e:	f7f5 f8d3 	bl	8000638 <__aeabi_dmul>
 800b492:	a325      	add	r3, pc, #148	@ (adr r3, 800b528 <__kernel_sin+0x140>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f4 ff16 	bl	80002c8 <__aeabi_dsub>
 800b49c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4a0:	f7f5 f8ca 	bl	8000638 <__aeabi_dmul>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	f7f4 ff0e 	bl	80002cc <__adddf3>
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	ec45 4b10 	vmov	d0, r4, r5
 800b4b8:	b005      	add	sp, #20
 800b4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b530 <__kernel_sin+0x148>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f7f5 f8b7 	bl	8000638 <__aeabi_dmul>
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	4689      	mov	r9, r1
 800b4d0:	463b      	mov	r3, r7
 800b4d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4d6:	f7f5 f8af 	bl	8000638 <__aeabi_dmul>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4640      	mov	r0, r8
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	f7f4 fef1 	bl	80002c8 <__aeabi_dsub>
 800b4e6:	4652      	mov	r2, sl
 800b4e8:	465b      	mov	r3, fp
 800b4ea:	f7f5 f8a5 	bl	8000638 <__aeabi_dmul>
 800b4ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4f2:	f7f4 fee9 	bl	80002c8 <__aeabi_dsub>
 800b4f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b528 <__kernel_sin+0x140>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b504:	f7f5 f898 	bl	8000638 <__aeabi_dmul>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4630      	mov	r0, r6
 800b50e:	4639      	mov	r1, r7
 800b510:	f7f4 fedc 	bl	80002cc <__adddf3>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4620      	mov	r0, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7f4 fed4 	bl	80002c8 <__aeabi_dsub>
 800b520:	e7c6      	b.n	800b4b0 <__kernel_sin+0xc8>
 800b522:	bf00      	nop
 800b524:	f3af 8000 	nop.w
 800b528:	55555549 	.word	0x55555549
 800b52c:	3fc55555 	.word	0x3fc55555
 800b530:	3fe00000 	.word	0x3fe00000
 800b534:	5acfd57c 	.word	0x5acfd57c
 800b538:	3de5d93a 	.word	0x3de5d93a
 800b53c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b540:	3e5ae5e6 	.word	0x3e5ae5e6
 800b544:	57b1fe7d 	.word	0x57b1fe7d
 800b548:	3ec71de3 	.word	0x3ec71de3
 800b54c:	19c161d5 	.word	0x19c161d5
 800b550:	3f2a01a0 	.word	0x3f2a01a0
 800b554:	1110f8a6 	.word	0x1110f8a6
 800b558:	3f811111 	.word	0x3f811111

0800b55c <fabs>:
 800b55c:	ec51 0b10 	vmov	r0, r1, d0
 800b560:	4602      	mov	r2, r0
 800b562:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b566:	ec43 2b10 	vmov	d0, r2, r3
 800b56a:	4770      	bx	lr
 800b56c:	0000      	movs	r0, r0
	...

0800b570 <scalbn>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	ec55 4b10 	vmov	r4, r5, d0
 800b576:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b57a:	4606      	mov	r6, r0
 800b57c:	462b      	mov	r3, r5
 800b57e:	b991      	cbnz	r1, 800b5a6 <scalbn+0x36>
 800b580:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b584:	4323      	orrs	r3, r4
 800b586:	d03d      	beq.n	800b604 <scalbn+0x94>
 800b588:	4b35      	ldr	r3, [pc, #212]	@ (800b660 <scalbn+0xf0>)
 800b58a:	4620      	mov	r0, r4
 800b58c:	4629      	mov	r1, r5
 800b58e:	2200      	movs	r2, #0
 800b590:	f7f5 f852 	bl	8000638 <__aeabi_dmul>
 800b594:	4b33      	ldr	r3, [pc, #204]	@ (800b664 <scalbn+0xf4>)
 800b596:	429e      	cmp	r6, r3
 800b598:	4604      	mov	r4, r0
 800b59a:	460d      	mov	r5, r1
 800b59c:	da0f      	bge.n	800b5be <scalbn+0x4e>
 800b59e:	a328      	add	r3, pc, #160	@ (adr r3, 800b640 <scalbn+0xd0>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	e01e      	b.n	800b5e4 <scalbn+0x74>
 800b5a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b5aa:	4291      	cmp	r1, r2
 800b5ac:	d10b      	bne.n	800b5c6 <scalbn+0x56>
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	f7f4 fe8a 	bl	80002cc <__adddf3>
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	e022      	b.n	800b604 <scalbn+0x94>
 800b5be:	460b      	mov	r3, r1
 800b5c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b5c4:	3936      	subs	r1, #54	@ 0x36
 800b5c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b5ca:	4296      	cmp	r6, r2
 800b5cc:	dd0d      	ble.n	800b5ea <scalbn+0x7a>
 800b5ce:	2d00      	cmp	r5, #0
 800b5d0:	a11d      	add	r1, pc, #116	@ (adr r1, 800b648 <scalbn+0xd8>)
 800b5d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5d6:	da02      	bge.n	800b5de <scalbn+0x6e>
 800b5d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800b650 <scalbn+0xe0>)
 800b5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5de:	a31a      	add	r3, pc, #104	@ (adr r3, 800b648 <scalbn+0xd8>)
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	f7f5 f828 	bl	8000638 <__aeabi_dmul>
 800b5e8:	e7e6      	b.n	800b5b8 <scalbn+0x48>
 800b5ea:	1872      	adds	r2, r6, r1
 800b5ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b5f0:	428a      	cmp	r2, r1
 800b5f2:	dcec      	bgt.n	800b5ce <scalbn+0x5e>
 800b5f4:	2a00      	cmp	r2, #0
 800b5f6:	dd08      	ble.n	800b60a <scalbn+0x9a>
 800b5f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b5fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b600:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b604:	ec45 4b10 	vmov	d0, r4, r5
 800b608:	bd70      	pop	{r4, r5, r6, pc}
 800b60a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b60e:	da08      	bge.n	800b622 <scalbn+0xb2>
 800b610:	2d00      	cmp	r5, #0
 800b612:	a10b      	add	r1, pc, #44	@ (adr r1, 800b640 <scalbn+0xd0>)
 800b614:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b618:	dac1      	bge.n	800b59e <scalbn+0x2e>
 800b61a:	a10f      	add	r1, pc, #60	@ (adr r1, 800b658 <scalbn+0xe8>)
 800b61c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b620:	e7bd      	b.n	800b59e <scalbn+0x2e>
 800b622:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b626:	3236      	adds	r2, #54	@ 0x36
 800b628:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b62c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b630:	4620      	mov	r0, r4
 800b632:	4b0d      	ldr	r3, [pc, #52]	@ (800b668 <scalbn+0xf8>)
 800b634:	4629      	mov	r1, r5
 800b636:	2200      	movs	r2, #0
 800b638:	e7d4      	b.n	800b5e4 <scalbn+0x74>
 800b63a:	bf00      	nop
 800b63c:	f3af 8000 	nop.w
 800b640:	c2f8f359 	.word	0xc2f8f359
 800b644:	01a56e1f 	.word	0x01a56e1f
 800b648:	8800759c 	.word	0x8800759c
 800b64c:	7e37e43c 	.word	0x7e37e43c
 800b650:	8800759c 	.word	0x8800759c
 800b654:	fe37e43c 	.word	0xfe37e43c
 800b658:	c2f8f359 	.word	0xc2f8f359
 800b65c:	81a56e1f 	.word	0x81a56e1f
 800b660:	43500000 	.word	0x43500000
 800b664:	ffff3cb0 	.word	0xffff3cb0
 800b668:	3c900000 	.word	0x3c900000
 800b66c:	00000000 	.word	0x00000000

0800b670 <floor>:
 800b670:	ec51 0b10 	vmov	r0, r1, d0
 800b674:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b680:	2e13      	cmp	r6, #19
 800b682:	460c      	mov	r4, r1
 800b684:	4605      	mov	r5, r0
 800b686:	4680      	mov	r8, r0
 800b688:	dc34      	bgt.n	800b6f4 <floor+0x84>
 800b68a:	2e00      	cmp	r6, #0
 800b68c:	da17      	bge.n	800b6be <floor+0x4e>
 800b68e:	a332      	add	r3, pc, #200	@ (adr r3, 800b758 <floor+0xe8>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f4 fe1a 	bl	80002cc <__adddf3>
 800b698:	2200      	movs	r2, #0
 800b69a:	2300      	movs	r3, #0
 800b69c:	f7f5 fa5c 	bl	8000b58 <__aeabi_dcmpgt>
 800b6a0:	b150      	cbz	r0, 800b6b8 <floor+0x48>
 800b6a2:	2c00      	cmp	r4, #0
 800b6a4:	da55      	bge.n	800b752 <floor+0xe2>
 800b6a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b6aa:	432c      	orrs	r4, r5
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	42ac      	cmp	r4, r5
 800b6b0:	4c2b      	ldr	r4, [pc, #172]	@ (800b760 <floor+0xf0>)
 800b6b2:	bf08      	it	eq
 800b6b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	e023      	b.n	800b706 <floor+0x96>
 800b6be:	4f29      	ldr	r7, [pc, #164]	@ (800b764 <floor+0xf4>)
 800b6c0:	4137      	asrs	r7, r6
 800b6c2:	ea01 0307 	and.w	r3, r1, r7
 800b6c6:	4303      	orrs	r3, r0
 800b6c8:	d01d      	beq.n	800b706 <floor+0x96>
 800b6ca:	a323      	add	r3, pc, #140	@ (adr r3, 800b758 <floor+0xe8>)
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f7f4 fdfc 	bl	80002cc <__adddf3>
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f7f5 fa3e 	bl	8000b58 <__aeabi_dcmpgt>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d0eb      	beq.n	800b6b8 <floor+0x48>
 800b6e0:	2c00      	cmp	r4, #0
 800b6e2:	bfbe      	ittt	lt
 800b6e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b6e8:	4133      	asrlt	r3, r6
 800b6ea:	18e4      	addlt	r4, r4, r3
 800b6ec:	ea24 0407 	bic.w	r4, r4, r7
 800b6f0:	2500      	movs	r5, #0
 800b6f2:	e7e1      	b.n	800b6b8 <floor+0x48>
 800b6f4:	2e33      	cmp	r6, #51	@ 0x33
 800b6f6:	dd0a      	ble.n	800b70e <floor+0x9e>
 800b6f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b6fc:	d103      	bne.n	800b706 <floor+0x96>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	f7f4 fde3 	bl	80002cc <__adddf3>
 800b706:	ec41 0b10 	vmov	d0, r0, r1
 800b70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b712:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b716:	40df      	lsrs	r7, r3
 800b718:	4207      	tst	r7, r0
 800b71a:	d0f4      	beq.n	800b706 <floor+0x96>
 800b71c:	a30e      	add	r3, pc, #56	@ (adr r3, 800b758 <floor+0xe8>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f7f4 fdd3 	bl	80002cc <__adddf3>
 800b726:	2200      	movs	r2, #0
 800b728:	2300      	movs	r3, #0
 800b72a:	f7f5 fa15 	bl	8000b58 <__aeabi_dcmpgt>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d0c2      	beq.n	800b6b8 <floor+0x48>
 800b732:	2c00      	cmp	r4, #0
 800b734:	da0a      	bge.n	800b74c <floor+0xdc>
 800b736:	2e14      	cmp	r6, #20
 800b738:	d101      	bne.n	800b73e <floor+0xce>
 800b73a:	3401      	adds	r4, #1
 800b73c:	e006      	b.n	800b74c <floor+0xdc>
 800b73e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b742:	2301      	movs	r3, #1
 800b744:	40b3      	lsls	r3, r6
 800b746:	441d      	add	r5, r3
 800b748:	4545      	cmp	r5, r8
 800b74a:	d3f6      	bcc.n	800b73a <floor+0xca>
 800b74c:	ea25 0507 	bic.w	r5, r5, r7
 800b750:	e7b2      	b.n	800b6b8 <floor+0x48>
 800b752:	2500      	movs	r5, #0
 800b754:	462c      	mov	r4, r5
 800b756:	e7af      	b.n	800b6b8 <floor+0x48>
 800b758:	8800759c 	.word	0x8800759c
 800b75c:	7e37e43c 	.word	0x7e37e43c
 800b760:	bff00000 	.word	0xbff00000
 800b764:	000fffff 	.word	0x000fffff

0800b768 <_init>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	bf00      	nop
 800b76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76e:	bc08      	pop	{r3}
 800b770:	469e      	mov	lr, r3
 800b772:	4770      	bx	lr

0800b774 <_fini>:
 800b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b776:	bf00      	nop
 800b778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b77a:	bc08      	pop	{r3}
 800b77c:	469e      	mov	lr, r3
 800b77e:	4770      	bx	lr
