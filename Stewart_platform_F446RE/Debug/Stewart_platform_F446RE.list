
Stewart_platform_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b720  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800b8f0  0800b8f0  0000c8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfa0  0800bfa0  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfa0  0800bfa0  0000cfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfa8  0800bfa8  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfa8  0800bfa8  0000cfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfac  0800bfac  0000cfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800bfb0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001e8  0800c198  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800c198  0000d59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010add  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ef  00000000  00000000  0001dcf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  000205e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdd  00000000  00000000  00021518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003eaf  00000000  00000000  000220f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014201  00000000  00000000  00025fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc651  00000000  00000000  0003a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001167f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  0011683c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0011bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b8d8 	.word	0x0800b8d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b8d8 	.word	0x0800b8d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0bc      	sub	sp, #240	@ 0xf0
 8000fbc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	stewart platform;

	platform_init(&platform);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 faed 	bl	80025a0 <platform_init>

	// set position limits
	platform.xyz_limit = 50.0;	// [mm]
 8000fc6:	4b88      	ldr	r3, [pc, #544]	@ (80011e8 <main+0x230>)
 8000fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	platform.tilt_limit = 10;	// deg
 8000fcc:	4b87      	ldr	r3, [pc, #540]	@ (80011ec <main+0x234>)
 8000fce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	platform.rot_limit = 10;	// deg
 8000fd2:	4b86      	ldr	r3, [pc, #536]	@ (80011ec <main+0x234>)
 8000fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f002 fb94 	bl	8003704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f928 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 fade 	bl	80015a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe4:	f000 fabc 	bl	8001560 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fe8:	f000 f994 	bl	8001314 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000fec:	f000 fa58 	bl	80014a0 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000ff0:	f000 fa28 	bl	8001444 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 fa8a 	bl	800150c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  adc_ready = 0;
 8000ff8:	4b7d      	ldr	r3, [pc, #500]	@ (80011f0 <main+0x238>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
#ifdef OLED
  	  disp_init();
#endif


  	  move_platform_home(&platform);
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f000 ff57 	bl	8001eb4 <move_platform_home>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, 6);
 8001006:	2206      	movs	r2, #6
 8001008:	497a      	ldr	r1, [pc, #488]	@ (80011f4 <main+0x23c>)
 800100a:	487b      	ldr	r0, [pc, #492]	@ (80011f8 <main+0x240>)
 800100c:	f002 fd64 	bl	8003ad8 <HAL_ADC_Start_DMA>

	  if (adc_ready) {
 8001010:	4b77      	ldr	r3, [pc, #476]	@ (80011f0 <main+0x238>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d03e      	beq.n	8001096 <main+0xde>

		  joyx = adc_raw_to_joystick(adc_raw[0]);
 8001018:	4b76      	ldr	r3, [pc, #472]	@ (80011f4 <main+0x23c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fd39 	bl	8001a94 <adc_raw_to_joystick>
 8001022:	eef0 7a40 	vmov.f32	s15, s0
 8001026:	4b75      	ldr	r3, [pc, #468]	@ (80011fc <main+0x244>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
		  joyy = adc_raw_to_joystick(adc_raw[1]);
 800102c:	4b71      	ldr	r3, [pc, #452]	@ (80011f4 <main+0x23c>)
 800102e:	885b      	ldrh	r3, [r3, #2]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fd2f 	bl	8001a94 <adc_raw_to_joystick>
 8001036:	eef0 7a40 	vmov.f32	s15, s0
 800103a:	4b71      	ldr	r3, [pc, #452]	@ (8001200 <main+0x248>)
 800103c:	edc3 7a00 	vstr	s15, [r3]
		  joyz = adc_raw_to_joystick(adc_raw[2]);
 8001040:	4b6c      	ldr	r3, [pc, #432]	@ (80011f4 <main+0x23c>)
 8001042:	889b      	ldrh	r3, [r3, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fd25 	bl	8001a94 <adc_raw_to_joystick>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	4b6d      	ldr	r3, [pc, #436]	@ (8001204 <main+0x24c>)
 8001050:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_x = adc_raw_to_joystick(adc_raw[3]);
 8001054:	4b67      	ldr	r3, [pc, #412]	@ (80011f4 <main+0x23c>)
 8001056:	88db      	ldrh	r3, [r3, #6]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fd1b 	bl	8001a94 <adc_raw_to_joystick>
 800105e:	eef0 7a40 	vmov.f32	s15, s0
 8001062:	4b69      	ldr	r3, [pc, #420]	@ (8001208 <main+0x250>)
 8001064:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_y = adc_raw_to_joystick(adc_raw[4]);
 8001068:	4b62      	ldr	r3, [pc, #392]	@ (80011f4 <main+0x23c>)
 800106a:	891b      	ldrh	r3, [r3, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fd11 	bl	8001a94 <adc_raw_to_joystick>
 8001072:	eef0 7a40 	vmov.f32	s15, s0
 8001076:	4b65      	ldr	r3, [pc, #404]	@ (800120c <main+0x254>)
 8001078:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_z = adc_raw_to_joystick(adc_raw[5]);
 800107c:	4b5d      	ldr	r3, [pc, #372]	@ (80011f4 <main+0x23c>)
 800107e:	895b      	ldrh	r3, [r3, #10]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fd07 	bl	8001a94 <adc_raw_to_joystick>
 8001086:	eef0 7a40 	vmov.f32	s15, s0
 800108a:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <main+0x258>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		  adc_ready = 0;
 8001090:	4b57      	ldr	r3, [pc, #348]	@ (80011f0 <main+0x238>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]

	  }

	  home_btn = HAL_GPIO_ReadPin(Home_Button_GPIO_Port, Home_Button_Pin);
 8001096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109a:	485e      	ldr	r0, [pc, #376]	@ (8001214 <main+0x25c>)
 800109c:	f003 ff1a 	bl	8004ed4 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001218 <main+0x260>)
 80010a6:	701a      	strb	r2, [r3, #0]
	  suction_btn = HAL_GPIO_ReadPin(suction_enable_btn_GPIO_Port, suction_enable_btn_Pin);
 80010a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ac:	4859      	ldr	r0, [pc, #356]	@ (8001214 <main+0x25c>)
 80010ae:	f003 ff11 	bl	8004ed4 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b59      	ldr	r3, [pc, #356]	@ (800121c <main+0x264>)
 80010b8:	701a      	strb	r2, [r3, #0]



	  if (home_btn == 0) {
 80010ba:	4b57      	ldr	r3, [pc, #348]	@ (8001218 <main+0x260>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <main+0x112>
	 		  move_platform_home(&platform);
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fef5 	bl	8001eb4 <move_platform_home>
	 	  }
	  move_target_position(&platform);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fb07 	bl	80016e0 <move_target_position>


	  rotate_platform(&platform, platform.a1);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 feb2 	bl	8002e46 <rotate_platform>
	  rotate_platform(&platform, platform.a2);
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 feaa 	bl	8002e46 <rotate_platform>
	  rotate_platform(&platform, platform.a3);
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fea2 	bl	8002e46 <rotate_platform>
	  rotate_platform(&platform, platform.a4);
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fe9a 	bl	8002e46 <rotate_platform>
	  rotate_platform(&platform, platform.a5);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fe92 	bl	8002e46 <rotate_platform>
	  rotate_platform(&platform, platform.a6);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fe8a 	bl	8002e46 <rotate_platform>

	  run_platform(&platform);
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fecf 	bl	8002ed8 <run_platform>


	  target_pot[0] = c_length_to_pot_value(platform.c_target[0]);
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	f000 fe19 	bl	8001d78 <c_length_to_pot_value>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <main+0x268>)
 800114c:	801a      	strh	r2, [r3, #0]
	  target_pot[1] = c_length_to_pot_value(platform.c_target[1]);
 800114e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	f000 fe0f 	bl	8001d78 <c_length_to_pot_value>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b30      	ldr	r3, [pc, #192]	@ (8001220 <main+0x268>)
 8001160:	805a      	strh	r2, [r3, #2]
	  target_pot[2] = c_length_to_pot_value(platform.c_target[2]);
 8001162:	edd7 7a03 	vldr	s15, [r7, #12]
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	f000 fe05 	bl	8001d78 <c_length_to_pot_value>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <main+0x268>)
 8001174:	809a      	strh	r2, [r3, #4]
	  target_pot[3] = c_length_to_pot_value(platform.c_target[3]);
 8001176:	edd7 7a04 	vldr	s15, [r7, #16]
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	f000 fdfb 	bl	8001d78 <c_length_to_pot_value>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <main+0x268>)
 8001188:	80da      	strh	r2, [r3, #6]
	  target_pot[4] = c_length_to_pot_value(platform.c_target[4]);
 800118a:	edd7 7a05 	vldr	s15, [r7, #20]
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	f000 fdf1 	bl	8001d78 <c_length_to_pot_value>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <main+0x268>)
 800119c:	811a      	strh	r2, [r3, #8]
	  target_pot[5] = c_length_to_pot_value(platform.c_target[5]);
 800119e:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	f000 fde7 	bl	8001d78 <c_length_to_pot_value>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <main+0x268>)
 80011b0:	815a      	strh	r2, [r3, #10]

	  pack_data();
 80011b2:	f000 fe13 	bl	8001ddc <pack_data>


#ifdef I2C

	  // sending commands via I2C
	  if (HAL_I2C_Master_Transmit(&hi2c2, 0x00, TxData, sizeof(TxData), 200) == HAL_OK) {
 80011b6:	23c8      	movs	r3, #200	@ 0xc8
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	230d      	movs	r3, #13
 80011bc:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <main+0x26c>)
 80011be:	2100      	movs	r1, #0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <main+0x270>)
 80011c2:	f004 f817 	bl	80051f4 <HAL_I2C_Master_Transmit>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d103      	bne.n	80011d4 <main+0x21c>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011cc:	2120      	movs	r1, #32
 80011ce:	4817      	ldr	r0, [pc, #92]	@ (800122c <main+0x274>)
 80011d0:	f003 feb1 	bl	8004f36 <HAL_GPIO_TogglePin>
	  disp_data();
#endif


#ifdef S_DEBUG
	  debug_platform(&platform, target_pot_val);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2102      	movs	r1, #2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fc9f 	bl	8001b1c <debug_platform>
	  }

#endif


	  HAL_Delay(100);
 80011de:	2064      	movs	r0, #100	@ 0x64
 80011e0:	f002 fb02 	bl	80037e8 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, 6);
 80011e4:	e70f      	b.n	8001006 <main+0x4e>
 80011e6:	bf00      	nop
 80011e8:	42480000 	.word	0x42480000
 80011ec:	41200000 	.word	0x41200000
 80011f0:	200003c4 	.word	0x200003c4
 80011f4:	200003a0 	.word	0x200003a0
 80011f8:	20000204 	.word	0x20000204
 80011fc:	200003ac 	.word	0x200003ac
 8001200:	200003b0 	.word	0x200003b0
 8001204:	200003b4 	.word	0x200003b4
 8001208:	200003b8 	.word	0x200003b8
 800120c:	200003bc 	.word	0x200003bc
 8001210:	200003c0 	.word	0x200003c0
 8001214:	40020800 	.word	0x40020800
 8001218:	200003e1 	.word	0x200003e1
 800121c:	200003e2 	.word	0x200003e2
 8001220:	200003c8 	.word	0x200003c8
 8001224:	200003d4 	.word	0x200003d4
 8001228:	200002ac 	.word	0x200002ac
 800122c:	40020000 	.word	0x40020000

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2234      	movs	r2, #52	@ 0x34
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f006 fab2 	bl	80077a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <SystemClock_Config+0xdc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	4a2b      	ldr	r2, [pc, #172]	@ (800130c <SystemClock_Config+0xdc>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	@ 0x40
 8001264:	4b29      	ldr	r3, [pc, #164]	@ (800130c <SystemClock_Config+0xdc>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <SystemClock_Config+0xe0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a25      	ldr	r2, [pc, #148]	@ (8001310 <SystemClock_Config+0xe0>)
 800127a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <SystemClock_Config+0xe0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001298:	2302      	movs	r3, #2
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a0:	2308      	movs	r3, #8
 80012a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012a4:	23b4      	movs	r3, #180	@ 0xb4
 80012a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 fe09 	bl	8005ed0 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012c4:	f000 fe1e 	bl	8001f04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c8:	f004 faee 	bl	80058a8 <HAL_PWREx_EnableOverDrive>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012d2:	f000 fe17 	bl	8001f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d6:	230f      	movs	r3, #15
 80012d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012da:	2302      	movs	r3, #2
 80012dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	2105      	movs	r1, #5
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fb27 	bl	8005948 <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001300:	f000 fe00 	bl	8001f04 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	3750      	adds	r7, #80	@ 0x50
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001326:	4b44      	ldr	r3, [pc, #272]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001328:	4a44      	ldr	r2, [pc, #272]	@ (800143c <MX_ADC1_Init+0x128>)
 800132a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800132c:	4b42      	ldr	r3, [pc, #264]	@ (8001438 <MX_ADC1_Init+0x124>)
 800132e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001332:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001334:	4b40      	ldr	r3, [pc, #256]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800133a:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <MX_ADC1_Init+0x124>)
 800133c:	2201      	movs	r2, #1
 800133e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001340:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001342:	2200      	movs	r2, #0
 8001344:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001346:	4b3c      	ldr	r3, [pc, #240]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134e:	4b3a      	ldr	r3, [pc, #232]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001350:	2200      	movs	r2, #0
 8001352:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001354:	4b38      	ldr	r3, [pc, #224]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001356:	4a3a      	ldr	r2, [pc, #232]	@ (8001440 <MX_ADC1_Init+0x12c>)
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <MX_ADC1_Init+0x124>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001360:	4b35      	ldr	r3, [pc, #212]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001362:	2206      	movs	r2, #6
 8001364:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001366:	4b34      	ldr	r3, [pc, #208]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136e:	4b32      	ldr	r3, [pc, #200]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001370:	2201      	movs	r2, #1
 8001372:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001374:	4830      	ldr	r0, [pc, #192]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001376:	f002 fa5b 	bl	8003830 <HAL_ADC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001380:	f000 fdc0 	bl	8001f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800138c:	2305      	movs	r3, #5
 800138e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4828      	ldr	r0, [pc, #160]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001396:	f002 fccd 	bl	8003d34 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013a0:	f000 fdb0 	bl	8001f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4821      	ldr	r0, [pc, #132]	@ (8001438 <MX_ADC1_Init+0x124>)
 80013b2:	f002 fcbf 	bl	8003d34 <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013bc:	f000 fda2 	bl	8001f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013c4:	2303      	movs	r3, #3
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	481a      	ldr	r0, [pc, #104]	@ (8001438 <MX_ADC1_Init+0x124>)
 80013ce:	f002 fcb1 	bl	8003d34 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013d8:	f000 fd94 	bl	8001f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013dc:	2308      	movs	r3, #8
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4813      	ldr	r0, [pc, #76]	@ (8001438 <MX_ADC1_Init+0x124>)
 80013ea:	f002 fca3 	bl	8003d34 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80013f4:	f000 fd86 	bl	8001f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013f8:	2309      	movs	r3, #9
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80013fc:	2305      	movs	r3, #5
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001406:	f002 fc95 	bl	8003d34 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001410:	f000 fd78 	bl	8001f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001414:	230a      	movs	r3, #10
 8001416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001418:	2306      	movs	r3, #6
 800141a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_ADC1_Init+0x124>)
 8001422:	f002 fc87 	bl	8003d34 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800142c:	f000 fd6a 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000204 	.word	0x20000204
 800143c:	40012000 	.word	0x40012000
 8001440:	0f000001 	.word	0x0f000001

08001444 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_I2C2_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <MX_I2C2_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_I2C2_Init+0x50>)
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <MX_I2C2_Init+0x58>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_I2C2_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_I2C2_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_I2C2_Init+0x50>)
 8001462:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001466:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <MX_I2C2_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_I2C2_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <MX_I2C2_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_I2C2_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_I2C2_Init+0x50>)
 8001482:	f003 fd73 	bl	8004f6c <HAL_I2C_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800148c:	f000 fd3a 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200002ac 	.word	0x200002ac
 8001498:	40005800 	.word	0x40005800
 800149c:	000186a0 	.word	0x000186a0

080014a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a4:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014a6:	4a18      	ldr	r2, [pc, #96]	@ (8001508 <MX_SPI1_Init+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014d4:	2228      	movs	r2, #40	@ 0x28
 80014d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014ec:	220a      	movs	r2, #10
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	@ (8001504 <MX_SPI1_Init+0x64>)
 80014f2:	f004 ff8b 	bl	800640c <HAL_SPI_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014fc:	f000 fd02 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000300 	.word	0x20000300
 8001508:	40013000 	.word	0x40013000

0800150c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <MX_USART2_UART_Init+0x50>)
 8001514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_USART2_UART_Init+0x4c>)
 8001544:	f004 ffeb 	bl	800651e <HAL_UART_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800154e:	f000 fcd9 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000358 	.word	0x20000358
 800155c:	40004400 	.word	0x40004400

08001560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_DMA_Init+0x3c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <MX_DMA_Init+0x3c>)
 8001570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_DMA_Init+0x3c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2038      	movs	r0, #56	@ 0x38
 8001588:	f002 ff69 	bl	800445e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800158c:	2038      	movs	r0, #56	@ 0x38
 800158e:	f002 ff82 	bl	8004496 <HAL_NVIC_EnableIRQ>

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b3d      	ldr	r3, [pc, #244]	@ (80016b0 <MX_GPIO_Init+0x110>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a3c      	ldr	r2, [pc, #240]	@ (80016b0 <MX_GPIO_Init+0x110>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <MX_GPIO_Init+0x110>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <MX_GPIO_Init+0x110>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a35      	ldr	r2, [pc, #212]	@ (80016b0 <MX_GPIO_Init+0x110>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <MX_GPIO_Init+0x110>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <MX_GPIO_Init+0x110>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a2e      	ldr	r2, [pc, #184]	@ (80016b0 <MX_GPIO_Init+0x110>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <MX_GPIO_Init+0x110>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <MX_GPIO_Init+0x110>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a27      	ldr	r2, [pc, #156]	@ (80016b0 <MX_GPIO_Init+0x110>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <MX_GPIO_Init+0x110>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2120      	movs	r1, #32
 800162a:	4822      	ldr	r0, [pc, #136]	@ (80016b4 <MX_GPIO_Init+0x114>)
 800162c:	f003 fc6a 	bl	8004f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2130      	movs	r1, #48	@ 0x30
 8001634:	4820      	ldr	r0, [pc, #128]	@ (80016b8 <MX_GPIO_Init+0x118>)
 8001636:	f003 fc65 	bl	8004f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800163a:	2320      	movs	r3, #32
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4818      	ldr	r0, [pc, #96]	@ (80016b4 <MX_GPIO_Init+0x114>)
 8001652:	f003 faab 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Button_Pin */
  GPIO_InitStruct.Pin = Home_Button_Pin;
 8001656:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_Button_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4814      	ldr	r0, [pc, #80]	@ (80016bc <MX_GPIO_Init+0x11c>)
 800166c:	f003 fa9e 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pin : suction_enable_btn_Pin */
  GPIO_InitStruct.Pin = suction_enable_btn_Pin;
 8001670:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800167a:	2302      	movs	r3, #2
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(suction_enable_btn_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_GPIO_Init+0x11c>)
 8001686:	f003 fa91 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 800168a:	2330      	movs	r3, #48	@ 0x30
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_GPIO_Init+0x118>)
 80016a2:	f003 fa83 	bl	8004bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	@ 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800

080016c0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

	adc_ready = 1;
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <HAL_ADC_ConvCpltCallback+0x1c>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]


}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	200003c4 	.word	0x200003c4

080016e0 <move_target_position>:


void move_target_position(stewart* stewart) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]


	if (stewart->tp_target_pos[0] > stewart->xyz_limit) stewart->tp_target_pos[0] = stewart->xyz_limit;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80016f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	dd06      	ble.n	800170c <move_target_position+0x2c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800170a:	e038      	b.n	800177e <move_target_position+0x9e>
	else if (stewart->tp_target_pos[0] < -stewart->xyz_limit) stewart->tp_target_pos[0] = -stewart->xyz_limit;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001718:	eef1 7a67 	vneg.f32	s15, s15
 800171c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	d508      	bpl.n	8001738 <move_target_position+0x58>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800172c:	eef1 7a67 	vneg.f32	s15, s15
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
 8001736:	e022      	b.n	800177e <move_target_position+0x9e>
	else if (stewart->tp_target_pos[0] >= -stewart->xyz_limit || stewart->tp_target_pos[0] <= stewart->xyz_limit )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001744:	eef1 7a67 	vneg.f32	s15, s15
 8001748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	da0a      	bge.n	8001768 <move_target_position+0x88>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800175e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d80a      	bhi.n	800177e <move_target_position+0x9e>
	{
		stewart->tp_target_pos[0] += joyx;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 800176e:	4bba      	ldr	r3, [pc, #744]	@ (8001a58 <move_target_position+0x378>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	}

	if (stewart->tp_target_pos[1] > stewart->xyz_limit) stewart->tp_target_pos[1] = stewart->xyz_limit;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800178a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	dd06      	ble.n	80017a2 <move_target_position+0xc2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 80017a0:	e038      	b.n	8001814 <move_target_position+0x134>
	else if (stewart->tp_target_pos[1] < -stewart->xyz_limit) stewart->tp_target_pos[1] = -stewart->xyz_limit;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017ae:	eef1 7a67 	vneg.f32	s15, s15
 80017b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	d508      	bpl.n	80017ce <move_target_position+0xee>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017c2:	eef1 7a67 	vneg.f32	s15, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
 80017cc:	e022      	b.n	8001814 <move_target_position+0x134>
	else if (stewart->tp_target_pos[1] >= -stewart->xyz_limit || stewart->tp_target_pos[1] <= stewart->xyz_limit )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017da:	eef1 7a67 	vneg.f32	s15, s15
 80017de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	da0a      	bge.n	80017fe <move_target_position+0x11e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	d80a      	bhi.n	8001814 <move_target_position+0x134>
	{
		stewart->tp_target_pos[1] += joyy;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001804:	4b95      	ldr	r3, [pc, #596]	@ (8001a5c <move_target_position+0x37c>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
	}

	if (stewart->tp_target_pos[2] > 0) stewart->tp_target_pos[2] = 0;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 800181a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	dd05      	ble.n	8001830 <move_target_position+0x150>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800182e:	e03b      	b.n	80018a8 <move_target_position+0x1c8>
	else if (stewart->tp_target_pos[2] < -2*stewart->xyz_limit) stewart->tp_target_pos[2] = -2*stewart->xyz_limit;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800183c:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8001840:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184c:	d50a      	bpl.n	8001864 <move_target_position+0x184>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001854:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
 8001862:	e021      	b.n	80018a8 <move_target_position+0x1c8>
	else if (stewart->tp_target_pos[2] >= -2*stewart->xyz_limit || stewart->tp_target_pos[2] <= 0 )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001870:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8001874:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	da07      	bge.n	8001892 <move_target_position+0x1b2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8001888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	d80a      	bhi.n	80018a8 <move_target_position+0x1c8>
	{
		stewart->tp_target_pos[2] += joyz;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001898:	4b71      	ldr	r3, [pc, #452]	@ (8001a60 <move_target_position+0x380>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
	}


	if (stewart->tp_target_pos[3] > stewart->tilt_limit) stewart->tp_target_pos[3] = stewart->tilt_limit;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80018b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	dd06      	ble.n	80018cc <move_target_position+0x1ec>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80018ca:	e038      	b.n	800193e <move_target_position+0x25e>
	else if (stewart->tp_target_pos[3] < -stewart->tilt_limit) stewart->tp_target_pos[3] = -stewart->tilt_limit;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80018d8:	eef1 7a67 	vneg.f32	s15, s15
 80018dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d508      	bpl.n	80018f8 <move_target_position+0x218>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80018ec:	eef1 7a67 	vneg.f32	s15, s15
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
 80018f6:	e022      	b.n	800193e <move_target_position+0x25e>
	else if (stewart->tp_target_pos[3] >= -stewart->tilt_limit || stewart->tp_target_pos[3] <= stewart->tilt_limit )
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001904:	eef1 7a67 	vneg.f32	s15, s15
 8001908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	da0a      	bge.n	8001928 <move_target_position+0x248>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 800191e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d80a      	bhi.n	800193e <move_target_position+0x25e>
	{
		stewart->tp_target_pos[3] += joyrot_x;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800192e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a64 <move_target_position+0x384>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
	}


	if (stewart->tp_target_pos[4] > stewart->tilt_limit) stewart->tp_target_pos[4] = stewart->tilt_limit;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 800194a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	dd06      	ble.n	8001962 <move_target_position+0x282>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8001960:	e038      	b.n	80019d4 <move_target_position+0x2f4>
	else if (stewart->tp_target_pos[4] < -stewart->tilt_limit) stewart->tp_target_pos[4] = -stewart->tilt_limit;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 800196e:	eef1 7a67 	vneg.f32	s15, s15
 8001972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d508      	bpl.n	800198e <move_target_position+0x2ae>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001982:	eef1 7a67 	vneg.f32	s15, s15
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
 800198c:	e022      	b.n	80019d4 <move_target_position+0x2f4>
	else if (stewart->tp_target_pos[4] >= -stewart->tilt_limit || stewart->tp_target_pos[4] <= stewart->tilt_limit )
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 800199a:	eef1 7a67 	vneg.f32	s15, s15
 800199e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	da0a      	bge.n	80019be <move_target_position+0x2de>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80019b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d80a      	bhi.n	80019d4 <move_target_position+0x2f4>
	{
		stewart->tp_target_pos[4] += joyrot_y;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 80019c4:	4b28      	ldr	r3, [pc, #160]	@ (8001a68 <move_target_position+0x388>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
	}


	if (stewart->tp_target_pos[5] > stewart->rot_limit) stewart->tp_target_pos[5] = stewart->rot_limit;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 80019e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e8:	dd06      	ble.n	80019f8 <move_target_position+0x318>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	{
		stewart->tp_target_pos[5] += joyrot_z;
	}


}
 80019f6:	e044      	b.n	8001a82 <move_target_position+0x3a2>
	else if (stewart->tp_target_pos[5] < -stewart->rot_limit) stewart->tp_target_pos[5] = -stewart->rot_limit;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001a04:	eef1 7a67 	vneg.f32	s15, s15
 8001a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d508      	bpl.n	8001a24 <move_target_position+0x344>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001a18:	eef1 7a67 	vneg.f32	s15, s15
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 8001a22:	e02e      	b.n	8001a82 <move_target_position+0x3a2>
	else if (stewart->tp_target_pos[5] >= -stewart->rot_limit || stewart->tp_target_pos[5] <= stewart->rot_limit )
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001a30:	eef1 7a67 	vneg.f32	s15, s15
 8001a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	da16      	bge.n	8001a6c <move_target_position+0x38c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	d90b      	bls.n	8001a6c <move_target_position+0x38c>
}
 8001a54:	e015      	b.n	8001a82 <move_target_position+0x3a2>
 8001a56:	bf00      	nop
 8001a58:	200003ac 	.word	0x200003ac
 8001a5c:	200003b0 	.word	0x200003b0
 8001a60:	200003b4 	.word	0x200003b4
 8001a64:	200003b8 	.word	0x200003b8
 8001a68:	200003bc 	.word	0x200003bc
		stewart->tp_target_pos[5] += joyrot_z;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001a72:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <move_target_position+0x3b0>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200003c0 	.word	0x200003c0

08001a94 <adc_raw_to_joystick>:


float adc_raw_to_joystick(uint16_t adc_raw) {
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]

	float joy_val;

	if (adc_raw >= 1900 && adc_raw <= 2100) {
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d907      	bls.n	8001ab8 <adc_raw_to_joystick+0x24>
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	f640 0234 	movw	r2, #2100	@ 0x834
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d802      	bhi.n	8001ab8 <adc_raw_to_joystick+0x24>
		return 0;
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e025      	b.n	8001b04 <adc_raw_to_joystick+0x70>
	}

	else if (adc_raw > 2100) {
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	f640 0234 	movw	r2, #2100	@ 0x834
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d90d      	bls.n	8001ade <adc_raw_to_joystick+0x4a>
		joy_val = (float) (adc_raw - 2100) / 1000;
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001b18 <adc_raw_to_joystick+0x84>
 8001ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad8:	edc7 7a03 	vstr	s15, [r7, #12]
 8001adc:	e011      	b.n	8001b02 <adc_raw_to_joystick+0x6e>

	}

	else if (adc_raw <1900) {
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d80c      	bhi.n	8001b02 <adc_raw_to_joystick+0x6e>
		joy_val = (float) (adc_raw - 1900)/ 1000;
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af6:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001b18 <adc_raw_to_joystick+0x84>
 8001afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afe:	edc7 7a03 	vstr	s15, [r7, #12]

	}
	return joy_val;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	447a0000 	.word	0x447a0000

08001b1c <debug_platform>:


#ifdef S_DEBUG

void debug_platform(stewart* stewart, uint8_t output_type) {
 8001b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b20:	b092      	sub	sp, #72	@ 0x48
 8001b22:	af0a      	add	r7, sp, #40	@ 0x28
 8001b24:	6178      	str	r0, [r7, #20]
 8001b26:	460b      	mov	r3, r1
 8001b28:	74fb      	strb	r3, [r7, #19]

	if (output_type == target_pos) {
 8001b2a:	7cfb      	ldrb	r3, [r7, #19]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d14b      	bne.n	8001bc8 <debug_platform+0xac>
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
				stewart->tp_target_pos[0], stewart->tp_target_pos[1], stewart->tp_target_pos[2],
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd26 	bl	8000588 <__aeabi_f2d>
 8001b3c:	e9c7 0102 	strd	r0, r1, [r7, #8]
				stewart->tp_target_pos[0], stewart->tp_target_pos[1], stewart->tp_target_pos[2],
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd1e 	bl	8000588 <__aeabi_f2d>
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	460d      	mov	r5, r1
				stewart->tp_target_pos[0], stewart->tp_target_pos[1], stewart->tp_target_pos[2],
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd16 	bl	8000588 <__aeabi_f2d>
 8001b5c:	4680      	mov	r8, r0
 8001b5e:	4689      	mov	r9, r1
				stewart->tp_target_pos[3], stewart->tp_target_pos[4], stewart->tp_target_pos[5]);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fd0e 	bl	8000588 <__aeabi_f2d>
 8001b6c:	4682      	mov	sl, r0
 8001b6e:	468b      	mov	fp, r1
				stewart->tp_target_pos[3], stewart->tp_target_pos[4], stewart->tp_target_pos[5]);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fd06 	bl	8000588 <__aeabi_f2d>
 8001b7c:	e9c7 0100 	strd	r0, r1, [r7]
				stewart->tp_target_pos[3], stewart->tp_target_pos[4], stewart->tp_target_pos[5]);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
		uint8_t buf_len = sprintf((char *) uart_buffer, "x: %.2f, y: %.2f, z: %.2f thetax: %.2f thetay: %.2f thetaz: %.2f \n\r",
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcfe 	bl	8000588 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001b94:	ed97 7b00 	vldr	d7, [r7]
 8001b98:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001b9c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001ba0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ba4:	e9cd 4500 	strd	r4, r5, [sp]
 8001ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bac:	4965      	ldr	r1, [pc, #404]	@ (8001d44 <debug_platform+0x228>)
 8001bae:	4866      	ldr	r0, [pc, #408]	@ (8001d48 <debug_platform+0x22c>)
 8001bb0:	f005 fd18 	bl	80075e4 <siprintf>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	773b      	strb	r3, [r7, #28]

		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);
 8001bb8:	7f3b      	ldrb	r3, [r7, #28]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2364      	movs	r3, #100	@ 0x64
 8001bbe:	4962      	ldr	r1, [pc, #392]	@ (8001d48 <debug_platform+0x22c>)
 8001bc0:	4862      	ldr	r0, [pc, #392]	@ (8001d4c <debug_platform+0x230>)
 8001bc2:	f004 fcfc 	bl	80065be <HAL_UART_Transmit>
							joyx, joyy, joyz, joyrot_x, joyrot_y, joyrot_z);
		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);

	}

}
 8001bc6:	e0b8      	b.n	8001d3a <debug_platform+0x21e>
	else if (output_type == target_c_length) {
 8001bc8:	7cfb      	ldrb	r3, [r7, #19]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d145      	bne.n	8001c5a <debug_platform+0x13e>
				stewart->c_target[0], stewart->c_target[1], stewart->c_target[2],
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	681b      	ldr	r3, [r3, #0]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcd8 	bl	8000588 <__aeabi_f2d>
 8001bd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
				stewart->c_target[0], stewart->c_target[1], stewart->c_target[2],
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	685b      	ldr	r3, [r3, #4]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcd1 	bl	8000588 <__aeabi_f2d>
 8001be6:	4604      	mov	r4, r0
 8001be8:	460d      	mov	r5, r1
				stewart->c_target[0], stewart->c_target[1], stewart->c_target[2],
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	689b      	ldr	r3, [r3, #8]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcca 	bl	8000588 <__aeabi_f2d>
 8001bf4:	4680      	mov	r8, r0
 8001bf6:	4689      	mov	r9, r1
				stewart->c_target[3], stewart->c_target[4], stewart->c_target[5]);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	68db      	ldr	r3, [r3, #12]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fcc3 	bl	8000588 <__aeabi_f2d>
 8001c02:	4682      	mov	sl, r0
 8001c04:	468b      	mov	fp, r1
				stewart->c_target[3], stewart->c_target[4], stewart->c_target[5]);
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	691b      	ldr	r3, [r3, #16]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fcbc 	bl	8000588 <__aeabi_f2d>
 8001c10:	e9c7 0100 	strd	r0, r1, [r7]
				stewart->c_target[3], stewart->c_target[4], stewart->c_target[5]);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	695b      	ldr	r3, [r3, #20]
		uint8_t buf_len = sprintf((char *) uart_buffer, "l1:%.2f, l2:%.2f, l3:%f, l4:%.2f, l5:%.2f l6:%.2f  \n\r",
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcb5 	bl	8000588 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001c26:	ed97 7b00 	vldr	d7, [r7]
 8001c2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001c2e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c32:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c36:	e9cd 4500 	strd	r4, r5, [sp]
 8001c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c3e:	4944      	ldr	r1, [pc, #272]	@ (8001d50 <debug_platform+0x234>)
 8001c40:	4841      	ldr	r0, [pc, #260]	@ (8001d48 <debug_platform+0x22c>)
 8001c42:	f005 fccf 	bl	80075e4 <siprintf>
 8001c46:	4603      	mov	r3, r0
 8001c48:	777b      	strb	r3, [r7, #29]
		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);
 8001c4a:	7f7b      	ldrb	r3, [r7, #29]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	2364      	movs	r3, #100	@ 0x64
 8001c50:	493d      	ldr	r1, [pc, #244]	@ (8001d48 <debug_platform+0x22c>)
 8001c52:	483e      	ldr	r0, [pc, #248]	@ (8001d4c <debug_platform+0x230>)
 8001c54:	f004 fcb3 	bl	80065be <HAL_UART_Transmit>
}
 8001c58:	e06f      	b.n	8001d3a <debug_platform+0x21e>
	else if (output_type == target_pot_val) {
 8001c5a:	7cfb      	ldrb	r3, [r7, #19]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d124      	bne.n	8001caa <debug_platform+0x18e>
					target_pot[0], target_pot[1], target_pot[2],
 8001c60:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <debug_platform+0x238>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001c64:	461c      	mov	r4, r3
					target_pot[0], target_pot[1], target_pot[2],
 8001c66:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <debug_platform+0x238>)
 8001c68:	885b      	ldrh	r3, [r3, #2]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001c6a:	461d      	mov	r5, r3
					target_pot[0], target_pot[1], target_pot[2],
 8001c6c:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <debug_platform+0x238>)
 8001c6e:	889b      	ldrh	r3, [r3, #4]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001c70:	461a      	mov	r2, r3
					target_pot[3], target_pot[4], target_pot[5]);
 8001c72:	4b38      	ldr	r3, [pc, #224]	@ (8001d54 <debug_platform+0x238>)
 8001c74:	88db      	ldrh	r3, [r3, #6]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001c76:	4619      	mov	r1, r3
					target_pot[3], target_pot[4], target_pot[5]);
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <debug_platform+0x238>)
 8001c7a:	891b      	ldrh	r3, [r3, #8]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001c7c:	4618      	mov	r0, r3
					target_pot[3], target_pot[4], target_pot[5]);
 8001c7e:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <debug_platform+0x238>)
 8001c80:	895b      	ldrh	r3, [r3, #10]
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001c82:	9303      	str	r3, [sp, #12]
 8001c84:	9002      	str	r0, [sp, #8]
 8001c86:	9101      	str	r1, [sp, #4]
 8001c88:	9200      	str	r2, [sp, #0]
 8001c8a:	462b      	mov	r3, r5
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	4932      	ldr	r1, [pc, #200]	@ (8001d58 <debug_platform+0x23c>)
 8001c90:	482d      	ldr	r0, [pc, #180]	@ (8001d48 <debug_platform+0x22c>)
 8001c92:	f005 fca7 	bl	80075e4 <siprintf>
 8001c96:	4603      	mov	r3, r0
 8001c98:	77bb      	strb	r3, [r7, #30]
		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);
 8001c9a:	7fbb      	ldrb	r3, [r7, #30]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	2364      	movs	r3, #100	@ 0x64
 8001ca0:	4929      	ldr	r1, [pc, #164]	@ (8001d48 <debug_platform+0x22c>)
 8001ca2:	482a      	ldr	r0, [pc, #168]	@ (8001d4c <debug_platform+0x230>)
 8001ca4:	f004 fc8b 	bl	80065be <HAL_UART_Transmit>
}
 8001ca8:	e047      	b.n	8001d3a <debug_platform+0x21e>
	else if (output_type == joystick_input) {
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d144      	bne.n	8001d3a <debug_platform+0x21e>
		uint8_t buf_len = sprintf((char *) uart_buffer,
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <debug_platform+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc67 	bl	8000588 <__aeabi_f2d>
 8001cba:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001cbe:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <debug_platform+0x244>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc60 	bl	8000588 <__aeabi_f2d>
 8001cc8:	4604      	mov	r4, r0
 8001cca:	460d      	mov	r5, r1
 8001ccc:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <debug_platform+0x248>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc59 	bl	8000588 <__aeabi_f2d>
 8001cd6:	4680      	mov	r8, r0
 8001cd8:	4689      	mov	r9, r1
 8001cda:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <debug_platform+0x24c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc52 	bl	8000588 <__aeabi_f2d>
 8001ce4:	4682      	mov	sl, r0
 8001ce6:	468b      	mov	fp, r1
 8001ce8:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <debug_platform+0x250>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc4b 	bl	8000588 <__aeabi_f2d>
 8001cf2:	e9c7 0100 	strd	r0, r1, [r7]
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <debug_platform+0x254>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc44 	bl	8000588 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d08:	ed97 7b00 	vldr	d7, [r7]
 8001d0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d10:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d14:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d18:	e9cd 4500 	strd	r4, r5, [sp]
 8001d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d20:	4914      	ldr	r1, [pc, #80]	@ (8001d74 <debug_platform+0x258>)
 8001d22:	4809      	ldr	r0, [pc, #36]	@ (8001d48 <debug_platform+0x22c>)
 8001d24:	f005 fc5e 	bl	80075e4 <siprintf>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	77fb      	strb	r3, [r7, #31]
		HAL_UART_Transmit(&huart2, uart_buffer, buf_len, 100);
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	2364      	movs	r3, #100	@ 0x64
 8001d32:	4905      	ldr	r1, [pc, #20]	@ (8001d48 <debug_platform+0x22c>)
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <debug_platform+0x230>)
 8001d36:	f004 fc42 	bl	80065be <HAL_UART_Transmit>
}
 8001d3a:	bf00      	nop
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d44:	0800b8f0 	.word	0x0800b8f0
 8001d48:	200003e4 	.word	0x200003e4
 8001d4c:	20000358 	.word	0x20000358
 8001d50:	0800b934 	.word	0x0800b934
 8001d54:	200003c8 	.word	0x200003c8
 8001d58:	0800b96c 	.word	0x0800b96c
 8001d5c:	200003ac 	.word	0x200003ac
 8001d60:	200003b0 	.word	0x200003b0
 8001d64:	200003b4 	.word	0x200003b4
 8001d68:	200003b8 	.word	0x200003b8
 8001d6c:	200003bc 	.word	0x200003bc
 8001d70:	200003c0 	.word	0x200003c0
 8001d74:	0800b9ac 	.word	0x0800b9ac

08001d78 <c_length_to_pot_value>:

#endif


uint16_t c_length_to_pot_value(float cylinder_length) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	ed87 0a01 	vstr	s0, [r7, #4]

	uint16_t pot_val;

	pot_val = (uint16_t) (cylinder_length - 400.00) * 13.6533;
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fc00 	bl	8000588 <__aeabi_f2d>
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <c_length_to_pot_value+0x60>)
 8001d8e:	f7fe fa9b 	bl	80002c8 <__aeabi_dsub>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe ff25 	bl	8000be8 <__aeabi_d2uiz>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbde 	bl	8000564 <__aeabi_i2d>
 8001da8:	a309      	add	r3, pc, #36	@ (adr r3, 8001dd0 <c_length_to_pot_value+0x58>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fc43 	bl	8000638 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe ff15 	bl	8000be8 <__aeabi_d2uiz>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	81fb      	strh	r3, [r7, #14]

	return pot_val;
 8001dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	566cf41f 	.word	0x566cf41f
 8001dd4:	402b4e7d 	.word	0x402b4e7d
 8001dd8:	40790000 	.word	0x40790000

08001ddc <pack_data>:


void pack_data(void) {
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

	TxData[0] = (uint8_t) (target_pot[0] & 0xFF);
 8001de0:	4b31      	ldr	r3, [pc, #196]	@ (8001ea8 <pack_data+0xcc>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <pack_data+0xd0>)
 8001de8:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t) (target_pot[0] >> 8) & 0x0F;
 8001dea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea8 <pack_data+0xcc>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001eac <pack_data+0xd0>)
 8001dfc:	705a      	strb	r2, [r3, #1]

	TxData[2] = (uint8_t) (target_pot[1] & 0xFF);
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <pack_data+0xcc>)
 8001e00:	885b      	ldrh	r3, [r3, #2]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b29      	ldr	r3, [pc, #164]	@ (8001eac <pack_data+0xd0>)
 8001e06:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) (target_pot[1] >> 8) & 0x0F;
 8001e08:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <pack_data+0xcc>)
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <pack_data+0xd0>)
 8001e1a:	70da      	strb	r2, [r3, #3]

	TxData[4] = (uint8_t) (target_pot[2] & 0xFF);
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <pack_data+0xcc>)
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <pack_data+0xd0>)
 8001e24:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) (target_pot[2] >> 8) & 0x0F;
 8001e26:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <pack_data+0xcc>)
 8001e28:	889b      	ldrh	r3, [r3, #4]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <pack_data+0xd0>)
 8001e38:	715a      	strb	r2, [r3, #5]

	TxData[6] = (uint8_t) (target_pot[3] & 0xFF);
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <pack_data+0xcc>)
 8001e3c:	88db      	ldrh	r3, [r3, #6]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <pack_data+0xd0>)
 8001e42:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t) (target_pot[3] >> 8) & 0x0F;
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <pack_data+0xcc>)
 8001e46:	88db      	ldrh	r3, [r3, #6]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <pack_data+0xd0>)
 8001e56:	71da      	strb	r2, [r3, #7]

	TxData[8] = (uint8_t) (target_pot[4] & 0xFF);
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <pack_data+0xcc>)
 8001e5a:	891b      	ldrh	r3, [r3, #8]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <pack_data+0xd0>)
 8001e60:	721a      	strb	r2, [r3, #8]
	TxData[9] = (uint8_t) (target_pot[4] >> 8) & 0x0F;
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <pack_data+0xcc>)
 8001e64:	891b      	ldrh	r3, [r3, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <pack_data+0xd0>)
 8001e74:	725a      	strb	r2, [r3, #9]

	TxData[10] = (uint8_t) (target_pot[5] & 0xFF);
 8001e76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <pack_data+0xcc>)
 8001e78:	895b      	ldrh	r3, [r3, #10]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <pack_data+0xd0>)
 8001e7e:	729a      	strb	r2, [r3, #10]
	TxData[11] = (uint8_t) (target_pot[5] >> 8) & 0x0F;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <pack_data+0xcc>)
 8001e82:	895b      	ldrh	r3, [r3, #10]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <pack_data+0xd0>)
 8001e92:	72da      	strb	r2, [r3, #11]

	TxData[12] = (uint8_t) suction_btn;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <pack_data+0xd4>)
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <pack_data+0xd0>)
 8001e9a:	731a      	strb	r2, [r3, #12]

}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	200003c8 	.word	0x200003c8
 8001eac:	200003d4 	.word	0x200003d4
 8001eb0:	200003e2 	.word	0x200003e2

08001eb4 <move_platform_home>:


void move_platform_home(stewart* st) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

	st->tp_target_pos[0] = 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	st->tp_target_pos[1] = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	st->tp_target_pos[2] = 0;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	st->tp_target_pos[3] = 0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	st->tp_target_pos[4] = 0;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	st->tp_target_pos[5] = 0;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f08:	2120      	movs	r1, #32
 8001f0a:	4804      	ldr	r0, [pc, #16]	@ (8001f1c <Error_Handler+0x18>)
 8001f0c:	f003 f813 	bl	8004f36 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001f10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f14:	f001 fc68 	bl	80037e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f18:	bf00      	nop
 8001f1a:	e7f5      	b.n	8001f08 <Error_Handler+0x4>
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f6c <HAL_MspInit+0x4c>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f36:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a08      	ldr	r2, [pc, #32]	@ (8001f6c <HAL_MspInit+0x4c>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	@ 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80020c4 <HAL_ADC_MspInit+0x154>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	f040 8094 	bne.w	80020bc <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa4:	4b48      	ldr	r3, [pc, #288]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	4b44      	ldr	r3, [pc, #272]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	4a43      	ldr	r2, [pc, #268]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc0:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	4a35      	ldr	r2, [pc, #212]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff8:	4b33      	ldr	r3, [pc, #204]	@ (80020c8 <HAL_ADC_MspInit+0x158>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = joy_rot_z_Pin;
 8002004:	2301      	movs	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(joy_rot_z_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	482d      	ldr	r0, [pc, #180]	@ (80020cc <HAL_ADC_MspInit+0x15c>)
 8002018:	f002 fdc8 	bl	8004bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joy_x_Pin|joy_y_Pin|joy_z_Pin;
 800201c:	2313      	movs	r3, #19
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002020:	2303      	movs	r3, #3
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	4828      	ldr	r0, [pc, #160]	@ (80020d0 <HAL_ADC_MspInit+0x160>)
 8002030:	f002 fdbc 	bl	8004bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joy_rot_x_Pin|joy_rot_y_Pin;
 8002034:	2303      	movs	r3, #3
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002038:	2303      	movs	r3, #3
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	4619      	mov	r1, r3
 8002046:	4823      	ldr	r0, [pc, #140]	@ (80020d4 <HAL_ADC_MspInit+0x164>)
 8002048:	f002 fdb0 	bl	8004bac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800204c:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 800204e:	4a23      	ldr	r2, [pc, #140]	@ (80020dc <HAL_ADC_MspInit+0x16c>)
 8002050:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002052:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 8002054:	2200      	movs	r2, #0
 8002056:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800205e:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002064:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 8002066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800206a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 800206e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002072:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 8002076:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800207a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 800207e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002082:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 800208c:	2200      	movs	r2, #0
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002090:	4811      	ldr	r0, [pc, #68]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 8002092:	f002 fa1b 	bl	80044cc <HAL_DMA_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800209c:	f7ff ff32 	bl	8001f04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 80020a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80020a6:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <HAL_ADC_MspInit+0x168>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	2012      	movs	r0, #18
 80020b2:	f002 f9d4 	bl	800445e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020b6:	2012      	movs	r0, #18
 80020b8:	f002 f9ed 	bl	8004496 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020bc:	bf00      	nop
 80020be:	3730      	adds	r7, #48	@ 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40012000 	.word	0x40012000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020400 	.word	0x40020400
 80020d8:	2000024c 	.word	0x2000024c
 80020dc:	40026410 	.word	0x40026410

080020e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a29      	ldr	r2, [pc, #164]	@ (80021a4 <HAL_I2C_MspInit+0xc4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d14b      	bne.n	800219a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b28      	ldr	r3, [pc, #160]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	4a27      	ldr	r2, [pc, #156]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	6313      	str	r3, [r2, #48]	@ 0x30
 8002112:	4b25      	ldr	r3, [pc, #148]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a20      	ldr	r2, [pc, #128]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800213a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002140:	2312      	movs	r3, #18
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002144:	2301      	movs	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800214c:	2304      	movs	r3, #4
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4815      	ldr	r0, [pc, #84]	@ (80021ac <HAL_I2C_MspInit+0xcc>)
 8002158:	f002 fd28 	bl	8004bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800215c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002162:	2312      	movs	r3, #18
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002166:	2301      	movs	r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800216e:	2304      	movs	r3, #4
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <HAL_I2C_MspInit+0xd0>)
 800217a:	f002 fd17 	bl	8004bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a08      	ldr	r2, [pc, #32]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002188:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	@ 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40005800 	.word	0x40005800
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800

080021b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a28      	ldr	r2, [pc, #160]	@ (8002274 <HAL_SPI_MspInit+0xc0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d149      	bne.n	800226a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	4a26      	ldr	r2, [pc, #152]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 80021e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e6:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a18      	ldr	r2, [pc, #96]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <HAL_SPI_MspInit+0xc4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800222a:	23c0      	movs	r3, #192	@ 0xc0
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800223a:	2305      	movs	r3, #5
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4619      	mov	r1, r3
 8002244:	480d      	ldr	r0, [pc, #52]	@ (800227c <HAL_SPI_MspInit+0xc8>)
 8002246:	f002 fcb1 	bl	8004bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800224a:	2308      	movs	r3, #8
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800225a:	2305      	movs	r3, #5
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4806      	ldr	r0, [pc, #24]	@ (8002280 <HAL_SPI_MspInit+0xcc>)
 8002266:	f002 fca1 	bl	8004bac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	@ 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40013000 	.word	0x40013000
 8002278:	40023800 	.word	0x40023800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <HAL_UART_MspInit+0x84>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d12b      	bne.n	80022fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	4b18      	ldr	r3, [pc, #96]	@ (800230c <HAL_UART_MspInit+0x88>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	4a17      	ldr	r2, [pc, #92]	@ (800230c <HAL_UART_MspInit+0x88>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <HAL_UART_MspInit+0x88>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_UART_MspInit+0x88>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a10      	ldr	r2, [pc, #64]	@ (800230c <HAL_UART_MspInit+0x88>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_UART_MspInit+0x88>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022de:	230c      	movs	r3, #12
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ee:	2307      	movs	r3, #7
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	@ (8002310 <HAL_UART_MspInit+0x8c>)
 80022fa:	f002 fc57 	bl	8004bac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	@ 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40004400 	.word	0x40004400
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000

08002314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <NMI_Handler+0x4>

0800231c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <MemManage_Handler+0x4>

0800232c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <BusFault_Handler+0x4>

08002334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <UsageFault_Handler+0x4>

0800233c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800236a:	f001 fa1d 	bl	80037a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <ADC_IRQHandler+0x10>)
 800237a:	f001 fa9c 	bl	80038b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000204 	.word	0x20000204

08002388 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <DMA2_Stream0_IRQHandler+0x10>)
 800238e:	f002 f9a3 	bl	80046d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	2000024c 	.word	0x2000024c

0800239c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return 1;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_kill>:

int _kill(int pid, int sig)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023b6:	f005 fa03 	bl	80077c0 <__errno>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2216      	movs	r2, #22
 80023be:	601a      	str	r2, [r3, #0]
  return -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_exit>:

void _exit (int status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ffe7 	bl	80023ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80023de:	bf00      	nop
 80023e0:	e7fd      	b.n	80023de <_exit+0x12>

080023e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e00a      	b.n	800240a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f4:	f3af 8000 	nop.w
 80023f8:	4601      	mov	r1, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	60ba      	str	r2, [r7, #8]
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf0      	blt.n	80023f4 <_read+0x12>
  }

  return len;
 8002412:	687b      	ldr	r3, [r7, #4]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e009      	b.n	8002442 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbf1      	blt.n	800242e <_write+0x12>
  }
  return len;
 800244a:	687b      	ldr	r3, [r7, #4]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_close>:

int _close(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247c:	605a      	str	r2, [r3, #4]
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_isatty>:

int _isatty(int file)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <_sbrk+0x5c>)
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <_sbrk+0x60>)
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <_sbrk+0x64>)
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <_sbrk+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d207      	bcs.n	80024fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ec:	f005 f968 	bl	80077c0 <__errno>
 80024f0:	4603      	mov	r3, r0
 80024f2:	220c      	movs	r2, #12
 80024f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024fa:	e009      	b.n	8002510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <_sbrk+0x64>)
 800250c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20020000 	.word	0x20020000
 800251c:	00000400 	.word	0x00000400
 8002520:	20000448 	.word	0x20000448
 8002524:	200005a0 	.word	0x200005a0

08002528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <SystemInit+0x20>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <SystemInit+0x20>)
 8002534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002584 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002550:	f7ff ffea 	bl	8002528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002556:	490d      	ldr	r1, [pc, #52]	@ (800258c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800256c:	4c0a      	ldr	r4, [pc, #40]	@ (8002598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800257a:	f005 f927 	bl	80077cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257e:	f7fe fd1b 	bl	8000fb8 <main>
  bx  lr    
 8002582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002590:	0800bfb0 	.word	0x0800bfb0
  ldr r2, =_sbss
 8002594:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002598:	2000059c 	.word	0x2000059c

0800259c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <CAN1_RX0_IRQHandler>
	...

080025a0 <platform_init>:
#include "stewart.h"




void platform_init(stewart* stewart) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

    // base plate joints positions 
    stewart->b1[0]=R*cos(deg_to_rad(60-beta/2)),  stewart->b1[1]=R*sin(deg_to_rad(60-beta/2)),  stewart->b1[2]=h;
 80025a8:	ed9f 0adb 	vldr	s0, [pc, #876]	@ 8002918 <platform_init+0x378>
 80025ac:	f000 f9c8 	bl	8002940 <deg_to_rad>
 80025b0:	ee10 3a10 	vmov	r3, s0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffe7 	bl	8000588 <__aeabi_f2d>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	ec43 2b10 	vmov	d0, r2, r3
 80025c2:	f007 fa9d 	bl	8009b00 <cos>
 80025c6:	ec51 0b10 	vmov	r0, r1, d0
 80025ca:	a3d1      	add	r3, pc, #836	@ (adr r3, 8002910 <platform_init+0x370>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f832 	bl	8000638 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fb24 	bl	8000c28 <__aeabi_d2f>
 80025e0:	4602      	mov	r2, r0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	679a      	str	r2, [r3, #120]	@ 0x78
 80025e6:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 8002918 <platform_init+0x378>
 80025ea:	f000 f9a9 	bl	8002940 <deg_to_rad>
 80025ee:	ee10 3a10 	vmov	r3, s0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ffc8 	bl	8000588 <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f007 fade 	bl	8009bc0 <sin>
 8002604:	ec51 0b10 	vmov	r0, r1, d0
 8002608:	a3c1      	add	r3, pc, #772	@ (adr r3, 8002910 <platform_init+0x370>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fe f813 	bl	8000638 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f7fe fb05 	bl	8000c28 <__aeabi_d2f>
 800261e:	4602      	mov	r2, r0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4abd      	ldr	r2, [pc, #756]	@ (800291c <platform_init+0x37c>)
 8002628:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    stewart->b2[0]=R*cos(deg_to_rad(60+beta/2)),  stewart->b2[1]=R*sin(deg_to_rad(60+beta/2)),  stewart->b2[2]=h;
 800262c:	ed9f 0abc 	vldr	s0, [pc, #752]	@ 8002920 <platform_init+0x380>
 8002630:	f000 f986 	bl	8002940 <deg_to_rad>
 8002634:	ee10 3a10 	vmov	r3, s0
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd ffa5 	bl	8000588 <__aeabi_f2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	ec43 2b10 	vmov	d0, r2, r3
 8002646:	f007 fa5b 	bl	8009b00 <cos>
 800264a:	ec51 0b10 	vmov	r0, r1, d0
 800264e:	a3b0      	add	r3, pc, #704	@ (adr r3, 8002910 <platform_init+0x370>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd fff0 	bl	8000638 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fae2 	bl	8000c28 <__aeabi_d2f>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800266c:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8002920 <platform_init+0x380>
 8002670:	f000 f966 	bl	8002940 <deg_to_rad>
 8002674:	ee10 3a10 	vmov	r3, s0
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff85 	bl	8000588 <__aeabi_f2d>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	ec43 2b10 	vmov	d0, r2, r3
 8002686:	f007 fa9b 	bl	8009bc0 <sin>
 800268a:	ec51 0b10 	vmov	r0, r1, d0
 800268e:	a3a0      	add	r3, pc, #640	@ (adr r3, 8002910 <platform_init+0x370>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fd ffd0 	bl	8000638 <__aeabi_dmul>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fe fac2 	bl	8000c28 <__aeabi_d2f>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a9b      	ldr	r2, [pc, #620]	@ (800291c <platform_init+0x37c>)
 80026b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    stewart->b3[0]=R*cos(deg_to_rad(180-beta/2)), stewart->b3[1]=R*sin(deg_to_rad(180-beta/2)), stewart->b3[2]=h;
 80026b4:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 8002924 <platform_init+0x384>
 80026b8:	f000 f942 	bl	8002940 <deg_to_rad>
 80026bc:	ee10 3a10 	vmov	r3, s0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff61 	bl	8000588 <__aeabi_f2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	ec43 2b10 	vmov	d0, r2, r3
 80026ce:	f007 fa17 	bl	8009b00 <cos>
 80026d2:	ec51 0b10 	vmov	r0, r1, d0
 80026d6:	a38e      	add	r3, pc, #568	@ (adr r3, 8002910 <platform_init+0x370>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ffac 	bl	8000638 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fa9e 	bl	8000c28 <__aeabi_d2f>
 80026ec:	4602      	mov	r2, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80026f4:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8002924 <platform_init+0x384>
 80026f8:	f000 f922 	bl	8002940 <deg_to_rad>
 80026fc:	ee10 3a10 	vmov	r3, s0
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd ff41 	bl	8000588 <__aeabi_f2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	ec43 2b10 	vmov	d0, r2, r3
 800270e:	f007 fa57 	bl	8009bc0 <sin>
 8002712:	ec51 0b10 	vmov	r0, r1, d0
 8002716:	a37e      	add	r3, pc, #504	@ (adr r3, 8002910 <platform_init+0x370>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fd ff8c 	bl	8000638 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe fa7e 	bl	8000c28 <__aeabi_d2f>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a79      	ldr	r2, [pc, #484]	@ (800291c <platform_init+0x37c>)
 8002738:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    stewart->b4[0]=R*cos(deg_to_rad(180+beta/2)), stewart->b4[1]=R*sin(deg_to_rad(180+beta/2)), stewart->b4[2]=h;
 800273c:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8002928 <platform_init+0x388>
 8002740:	f000 f8fe 	bl	8002940 <deg_to_rad>
 8002744:	ee10 3a10 	vmov	r3, s0
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd ff1d 	bl	8000588 <__aeabi_f2d>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	ec43 2b10 	vmov	d0, r2, r3
 8002756:	f007 f9d3 	bl	8009b00 <cos>
 800275a:	ec51 0b10 	vmov	r0, r1, d0
 800275e:	a36c      	add	r3, pc, #432	@ (adr r3, 8002910 <platform_init+0x370>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	f7fd ff68 	bl	8000638 <__aeabi_dmul>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f7fe fa5a 	bl	8000c28 <__aeabi_d2f>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800277c:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 8002928 <platform_init+0x388>
 8002780:	f000 f8de 	bl	8002940 <deg_to_rad>
 8002784:	ee10 3a10 	vmov	r3, s0
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fefd 	bl	8000588 <__aeabi_f2d>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	ec43 2b10 	vmov	d0, r2, r3
 8002796:	f007 fa13 	bl	8009bc0 <sin>
 800279a:	ec51 0b10 	vmov	r0, r1, d0
 800279e:	a35c      	add	r3, pc, #368	@ (adr r3, 8002910 <platform_init+0x370>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd ff48 	bl	8000638 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe fa3a 	bl	8000c28 <__aeabi_d2f>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a57      	ldr	r2, [pc, #348]	@ (800291c <platform_init+0x37c>)
 80027c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    stewart->b5[0]=R*cos(deg_to_rad(300-beta/2)), stewart->b5[1]=R*sin(deg_to_rad(300-beta/2)), stewart->b5[2]=h;
 80027c4:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 800292c <platform_init+0x38c>
 80027c8:	f000 f8ba 	bl	8002940 <deg_to_rad>
 80027cc:	ee10 3a10 	vmov	r3, s0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fed9 	bl	8000588 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	ec43 2b10 	vmov	d0, r2, r3
 80027de:	f007 f98f 	bl	8009b00 <cos>
 80027e2:	ec51 0b10 	vmov	r0, r1, d0
 80027e6:	a34a      	add	r3, pc, #296	@ (adr r3, 8002910 <platform_init+0x370>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd ff24 	bl	8000638 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe fa16 	bl	8000c28 <__aeabi_d2f>
 80027fc:	4602      	mov	r2, r0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8002804:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 800292c <platform_init+0x38c>
 8002808:	f000 f89a 	bl	8002940 <deg_to_rad>
 800280c:	ee10 3a10 	vmov	r3, s0
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd feb9 	bl	8000588 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	ec43 2b10 	vmov	d0, r2, r3
 800281e:	f007 f9cf 	bl	8009bc0 <sin>
 8002822:	ec51 0b10 	vmov	r0, r1, d0
 8002826:	a33a      	add	r3, pc, #232	@ (adr r3, 8002910 <platform_init+0x370>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd ff04 	bl	8000638 <__aeabi_dmul>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	f7fe f9f6 	bl	8000c28 <__aeabi_d2f>
 800283c:	4602      	mov	r2, r0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a35      	ldr	r2, [pc, #212]	@ (800291c <platform_init+0x37c>)
 8002848:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    stewart->b6[0]=R*cos(deg_to_rad(300+beta/2)), stewart->b6[1]=R*sin(deg_to_rad(300+beta/2)), stewart->b6[2]=h;
 800284c:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002930 <platform_init+0x390>
 8002850:	f000 f876 	bl	8002940 <deg_to_rad>
 8002854:	ee10 3a10 	vmov	r3, s0
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe95 	bl	8000588 <__aeabi_f2d>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	ec43 2b10 	vmov	d0, r2, r3
 8002866:	f007 f94b 	bl	8009b00 <cos>
 800286a:	ec51 0b10 	vmov	r0, r1, d0
 800286e:	a328      	add	r3, pc, #160	@ (adr r3, 8002910 <platform_init+0x370>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fd fee0 	bl	8000638 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f9d2 	bl	8000c28 <__aeabi_d2f>
 8002884:	4602      	mov	r2, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800288c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002930 <platform_init+0x390>
 8002890:	f000 f856 	bl	8002940 <deg_to_rad>
 8002894:	ee10 3a10 	vmov	r3, s0
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fe75 	bl	8000588 <__aeabi_f2d>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	ec43 2b10 	vmov	d0, r2, r3
 80028a6:	f007 f98b 	bl	8009bc0 <sin>
 80028aa:	ec51 0b10 	vmov	r0, r1, d0
 80028ae:	a318      	add	r3, pc, #96	@ (adr r3, 8002910 <platform_init+0x370>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fec0 	bl	8000638 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f9b2 	bl	8000c28 <__aeabi_d2f>
 80028c4:	4602      	mov	r2, r0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a13      	ldr	r2, [pc, #76]	@ (800291c <platform_init+0x37c>)
 80028d0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

    stewart->tp_target_pos[0] = 0;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    stewart->tp_target_pos[1] = 0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    stewart->tp_target_pos[2] = 0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    stewart->tp_target_pos[3] = 0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    stewart->tp_target_pos[4] = 0;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    stewart->tp_target_pos[5] = 0;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	e012      	b.n	8002934 <platform_init+0x394>
 800290e:	bf00      	nop
 8002910:	00000000 	.word	0x00000000
 8002914:	4072c000 	.word	0x4072c000
 8002918:	425c0000 	.word	0x425c0000
 800291c:	43c80000 	.word	0x43c80000
 8002920:	42820000 	.word	0x42820000
 8002924:	432f0000 	.word	0x432f0000
 8002928:	43390000 	.word	0x43390000
 800292c:	43938000 	.word	0x43938000
 8002930:	43988000 	.word	0x43988000
 8002934:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <deg_to_rad>:


/*convert degrees to radians */
float deg_to_rad(float deg) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	ed87 0a01 	vstr	s0, [r7, #4]
    float rad = deg * PI / 180;
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fd fe1c 	bl	8000588 <__aeabi_f2d>
 8002950:	a310      	add	r3, pc, #64	@ (adr r3, 8002994 <deg_to_rad+0x54>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fe6f 	bl	8000638 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <deg_to_rad+0x50>)
 8002968:	f7fd ff90 	bl	800088c <__aeabi_ddiv>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f958 	bl	8000c28 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]
    return rad;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	ee07 3a90 	vmov	s15, r3
}
 8002982:	eeb0 0a67 	vmov.f32	s0, s15
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	f3af 8000 	nop.w
 8002990:	40668000 	.word	0x40668000
 8002994:	54442d18 	.word	0x54442d18
 8002998:	400921fb 	.word	0x400921fb

0800299c <rot_x>:


void rot_x(float theta_x, float vector[3]) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b090      	sub	sp, #64	@ 0x40
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80029a6:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_x[3][3] = {
 80029ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
        {1, 0, 0},
        {0, cos(deg_to_rad(theta_x)), -sin(deg_to_rad(theta_x))},
 80029d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80029d6:	f7ff ffb3 	bl	8002940 <deg_to_rad>
 80029da:	ee10 3a10 	vmov	r3, s0
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fdd2 	bl	8000588 <__aeabi_f2d>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	ec43 2b10 	vmov	d0, r2, r3
 80029ec:	f007 f888 	bl	8009b00 <cos>
 80029f0:	ec53 2b10 	vmov	r2, r3, d0
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7fe f916 	bl	8000c28 <__aeabi_d2f>
 80029fc:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 80029fe:	61bb      	str	r3, [r7, #24]
        {0, cos(deg_to_rad(theta_x)), -sin(deg_to_rad(theta_x))},
 8002a00:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a04:	f7ff ff9c 	bl	8002940 <deg_to_rad>
 8002a08:	ee10 3a10 	vmov	r3, s0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdbb 	bl	8000588 <__aeabi_f2d>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	ec43 2b10 	vmov	d0, r2, r3
 8002a1a:	f007 f8d1 	bl	8009bc0 <sin>
 8002a1e:	ec53 2b10 	vmov	r2, r3, d0
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f7fe f8ff 	bl	8000c28 <__aeabi_d2f>
 8002a2a:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eef1 7a67 	vneg.f32	s15, s15
 8002a34:	edc7 7a07 	vstr	s15, [r7, #28]
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
        {0, sin(deg_to_rad(theta_x)), cos(deg_to_rad(theta_x))}
 8002a3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a42:	f7ff ff7d 	bl	8002940 <deg_to_rad>
 8002a46:	ee10 3a10 	vmov	r3, s0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd9c 	bl	8000588 <__aeabi_f2d>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	ec43 2b10 	vmov	d0, r2, r3
 8002a58:	f007 f8b2 	bl	8009bc0 <sin>
 8002a5c:	ec53 2b10 	vmov	r2, r3, d0
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f8e0 	bl	8000c28 <__aeabi_d2f>
 8002a68:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        {0, sin(deg_to_rad(theta_x)), cos(deg_to_rad(theta_x))}
 8002a6c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a70:	f7ff ff66 	bl	8002940 <deg_to_rad>
 8002a74:	ee10 3a10 	vmov	r3, s0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd85 	bl	8000588 <__aeabi_f2d>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	ec43 2b10 	vmov	d0, r2, r3
 8002a86:	f007 f83b 	bl	8009b00 <cos>
 8002a8a:	ec53 2b10 	vmov	r2, r3, d0
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fe f8c9 	bl	8000c28 <__aeabi_d2f>
 8002a96:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 8002a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aba:	e02e      	b.n	8002b1a <rot_x+0x17e>
        
        for (int column=0;column<3;column++) {
 8002abc:	2300      	movs	r3, #0
 8002abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ac0:	e025      	b.n	8002b0e <rot_x+0x172>
            vector[row] += rot_x[row][column] * vector_copy[column];  
 8002ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	3340      	adds	r3, #64	@ 0x40
 8002ade:	443b      	add	r3, r7
 8002ae0:	3b38      	subs	r3, #56	@ 0x38
 8002ae2:	edd3 6a00 	vldr	s13, [r3]
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	3340      	adds	r3, #64	@ 0x40
 8002aec:	443b      	add	r3, r7
 8002aee:	3b14      	subs	r3, #20
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b04:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	ddd6      	ble.n	8002ac2 <rot_x+0x126>
    for (int row=0;row<3;row++) {
 8002b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b16:	3301      	adds	r3, #1
 8002b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	ddcd      	ble.n	8002abc <rot_x+0x120>
            
        }
    }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3740      	adds	r7, #64	@ 0x40
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <rot_y>:



void rot_y(float theta_y, float vector[3]) {
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b090      	sub	sp, #64	@ 0x40
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b34:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_y[3][3] = {
        {cos(deg_to_rad(theta_y)), 0, sin(deg_to_rad(theta_y))},
 8002b48:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b4c:	f7ff fef8 	bl	8002940 <deg_to_rad>
 8002b50:	ee10 3a10 	vmov	r3, s0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fd17 	bl	8000588 <__aeabi_f2d>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	ec43 2b10 	vmov	d0, r2, r3
 8002b62:	f006 ffcd 	bl	8009b00 <cos>
 8002b66:	ec53 2b10 	vmov	r2, r3, d0
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fe f85b 	bl	8000c28 <__aeabi_d2f>
 8002b72:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
        {cos(deg_to_rad(theta_y)), 0, sin(deg_to_rad(theta_y))},
 8002b7c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b80:	f7ff fede 	bl	8002940 <deg_to_rad>
 8002b84:	ee10 3a10 	vmov	r3, s0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fcfd 	bl	8000588 <__aeabi_f2d>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	ec43 2b10 	vmov	d0, r2, r3
 8002b96:	f007 f813 	bl	8009bc0 <sin>
 8002b9a:	ec53 2b10 	vmov	r2, r3, d0
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fe f841 	bl	8000c28 <__aeabi_d2f>
 8002ba6:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
        {0, 1, 0},
        {-sin(deg_to_rad(theta_y)), 0, cos(deg_to_rad(theta_y))}
 8002bbc:	ed97 0a01 	vldr	s0, [r7, #4]
 8002bc0:	f7ff febe 	bl	8002940 <deg_to_rad>
 8002bc4:	ee10 3a10 	vmov	r3, s0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fcdd 	bl	8000588 <__aeabi_f2d>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	ec43 2b10 	vmov	d0, r2, r3
 8002bd6:	f006 fff3 	bl	8009bc0 <sin>
 8002bda:	ec53 2b10 	vmov	r2, r3, d0
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fe f821 	bl	8000c28 <__aeabi_d2f>
 8002be6:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eef1 7a67 	vneg.f32	s15, s15
 8002bf0:	edc7 7a08 	vstr	s15, [r7, #32]
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        {-sin(deg_to_rad(theta_y)), 0, cos(deg_to_rad(theta_y))}
 8002bfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8002bfe:	f7ff fe9f 	bl	8002940 <deg_to_rad>
 8002c02:	ee10 3a10 	vmov	r3, s0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fcbe 	bl	8000588 <__aeabi_f2d>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	ec43 2b10 	vmov	d0, r2, r3
 8002c14:	f006 ff74 	bl	8009b00 <cos>
 8002c18:	ec53 2b10 	vmov	r2, r3, d0
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7fe f802 	bl	8000c28 <__aeabi_d2f>
 8002c24:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3304      	adds	r3, #4
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002c44:	2300      	movs	r3, #0
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c48:	e02e      	b.n	8002ca8 <rot_y+0x17e>
        
        for (int column=0;column<3;column++) {
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c4e:	e025      	b.n	8002c9c <rot_y+0x172>
            vector[row] += rot_y[row][column] * vector_copy[column];  
 8002c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	ed93 7a00 	vldr	s14, [r3]
 8002c5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	3340      	adds	r3, #64	@ 0x40
 8002c6c:	443b      	add	r3, r7
 8002c6e:	3b38      	subs	r3, #56	@ 0x38
 8002c70:	edd3 6a00 	vldr	s13, [r3]
 8002c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3340      	adds	r3, #64	@ 0x40
 8002c7a:	443b      	add	r3, r7
 8002c7c:	3b14      	subs	r3, #20
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c92:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	3301      	adds	r3, #1
 8002c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	ddd6      	ble.n	8002c50 <rot_y+0x126>
    for (int row=0;row<3;row++) {
 8002ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	ddcd      	ble.n	8002c4a <rot_y+0x120>
            
        }
    }
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	3740      	adds	r7, #64	@ 0x40
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <rot_z>:


void rot_z(float theta_z, float vector[3]) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b090      	sub	sp, #64	@ 0x40
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cc2:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_z[3][3] = {
        {cos(deg_to_rad(theta_z)), -sin(deg_to_rad(theta_z)), 0},
 8002cd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cda:	f7ff fe31 	bl	8002940 <deg_to_rad>
 8002cde:	ee10 3a10 	vmov	r3, s0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fc50 	bl	8000588 <__aeabi_f2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	ec43 2b10 	vmov	d0, r2, r3
 8002cf0:	f006 ff06 	bl	8009b00 <cos>
 8002cf4:	ec53 2b10 	vmov	r2, r3, d0
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7fd ff94 	bl	8000c28 <__aeabi_d2f>
 8002d00:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002d02:	60bb      	str	r3, [r7, #8]
        {cos(deg_to_rad(theta_z)), -sin(deg_to_rad(theta_z)), 0},
 8002d04:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d08:	f7ff fe1a 	bl	8002940 <deg_to_rad>
 8002d0c:	ee10 3a10 	vmov	r3, s0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc39 	bl	8000588 <__aeabi_f2d>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	ec43 2b10 	vmov	d0, r2, r3
 8002d1e:	f006 ff4f 	bl	8009bc0 <sin>
 8002d22:	ec53 2b10 	vmov	r2, r3, d0
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd ff7d 	bl	8000c28 <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002d30:	ee07 3a90 	vmov	s15, r3
 8002d34:	eef1 7a67 	vneg.f32	s15, s15
 8002d38:	edc7 7a03 	vstr	s15, [r7, #12]
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
        {sin(deg_to_rad(theta_z)), cos(deg_to_rad(theta_z)), 0},
 8002d42:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d46:	f7ff fdfb 	bl	8002940 <deg_to_rad>
 8002d4a:	ee10 3a10 	vmov	r3, s0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fc1a 	bl	8000588 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	ec43 2b10 	vmov	d0, r2, r3
 8002d5c:	f006 ff30 	bl	8009bc0 <sin>
 8002d60:	ec53 2b10 	vmov	r2, r3, d0
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff5e 	bl	8000c28 <__aeabi_d2f>
 8002d6c:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002d6e:	617b      	str	r3, [r7, #20]
        {sin(deg_to_rad(theta_z)), cos(deg_to_rad(theta_z)), 0},
 8002d70:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d74:	f7ff fde4 	bl	8002940 <deg_to_rad>
 8002d78:	ee10 3a10 	vmov	r3, s0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fc03 	bl	8000588 <__aeabi_f2d>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	ec43 2b10 	vmov	d0, r2, r3
 8002d8a:	f006 feb9 	bl	8009b00 <cos>
 8002d8e:	ec53 2b10 	vmov	r2, r3, d0
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	f7fd ff47 	bl	8000c28 <__aeabi_d2f>
 8002d9a:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
        {0, 0, 1},
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dd6:	e02e      	b.n	8002e36 <rot_z+0x17e>
        
        for (int column=0;column<3;column++) {
 8002dd8:	2300      	movs	r3, #0
 8002dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ddc:	e025      	b.n	8002e2a <rot_z+0x172>
            vector[row] += rot_z[row][column] * vector_copy[column];  
 8002dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	ed93 7a00 	vldr	s14, [r3]
 8002dea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	3340      	adds	r3, #64	@ 0x40
 8002dfa:	443b      	add	r3, r7
 8002dfc:	3b38      	subs	r3, #56	@ 0x38
 8002dfe:	edd3 6a00 	vldr	s13, [r3]
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	3340      	adds	r3, #64	@ 0x40
 8002e08:	443b      	add	r3, r7
 8002e0a:	3b14      	subs	r3, #20
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e20:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e26:	3301      	adds	r3, #1
 8002e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	ddd6      	ble.n	8002dde <rot_z+0x126>
    for (int row=0;row<3;row++) {
 8002e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e32:	3301      	adds	r3, #1
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	ddcd      	ble.n	8002dd8 <rot_z+0x120>
            
        }
    }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3740      	adds	r7, #64	@ 0x40
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <rotate_platform>:


void rotate_platform(stewart* stewart, float vector[3]) {
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]

    rot_z(stewart->tp_target_pos[5], vector);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8002e56:	6838      	ldr	r0, [r7, #0]
 8002e58:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5c:	f7ff ff2c 	bl	8002cb8 <rot_z>
    rot_y(stewart->tp_target_pos[4], vector);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6c:	f7ff fe5d 	bl	8002b2a <rot_y>
    rot_x(stewart->tp_target_pos[3], vector);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8002e76:	6838      	ldr	r0, [r7, #0]
 8002e78:	eeb0 0a67 	vmov.f32	s0, s15
 8002e7c:	f7ff fd8e 	bl	800299c <rot_x>

    vector[0] = vector[0] + stewart->tp_target_pos[0];
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	ed93 7a00 	vldr	s14, [r3]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	edc3 7a00 	vstr	s15, [r3]
    vector[1] = vector[1] + stewart->tp_target_pos[1];
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	ed93 7a00 	vldr	s14, [r3]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	edc3 7a00 	vstr	s15, [r3]
    vector[2] = vector[2] + stewart->tp_target_pos[2];
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	ed93 7a00 	vldr	s14, [r3]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec6:	edc3 7a00 	vstr	s15, [r3]

}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	0000      	movs	r0, r0
 8002ed4:	0000      	movs	r0, r0
	...

08002ed8 <run_platform>:





void run_platform(stewart* stewart)  {
 8002ed8:	b5b0      	push	{r4, r5, r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

    stewart->a1[0]=r*cos(deg_to_rad(0+beta/2)),   stewart->a1[1]=r*sin(deg_to_rad(0+beta/2)),    stewart->a1[2] = 0;
 8002ee0:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002ee4:	f7ff fd2c 	bl	8002940 <deg_to_rad>
 8002ee8:	ee10 3a10 	vmov	r3, s0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd fb4b 	bl	8000588 <__aeabi_f2d>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	ec43 2b10 	vmov	d0, r2, r3
 8002efa:	f006 fe01 	bl	8009b00 <cos>
 8002efe:	ec51 0b10 	vmov	r0, r1, d0
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	4bd3      	ldr	r3, [pc, #844]	@ (8003254 <run_platform+0x37c>)
 8002f08:	f7fd fb96 	bl	8000638 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f7fd fe88 	bl	8000c28 <__aeabi_d2f>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f1e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002f22:	f7ff fd0d 	bl	8002940 <deg_to_rad>
 8002f26:	ee10 3a10 	vmov	r3, s0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fb2c 	bl	8000588 <__aeabi_f2d>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	ec43 2b10 	vmov	d0, r2, r3
 8002f38:	f006 fe42 	bl	8009bc0 <sin>
 8002f3c:	ec51 0b10 	vmov	r0, r1, d0
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	4bc3      	ldr	r3, [pc, #780]	@ (8003254 <run_platform+0x37c>)
 8002f46:	f7fd fb77 	bl	8000638 <__aeabi_dmul>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fe69 	bl	8000c28 <__aeabi_d2f>
 8002f56:	4602      	mov	r2, r0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	639a      	str	r2, [r3, #56]	@ 0x38
    stewart->a2[0]=r*cos(deg_to_rad(120-beta/2)), stewart->a2[1]=r*sin(deg_to_rad(120-beta/2)),  stewart->a2[2] = 0;
 8002f64:	ed9f 0abc 	vldr	s0, [pc, #752]	@ 8003258 <run_platform+0x380>
 8002f68:	f7ff fcea 	bl	8002940 <deg_to_rad>
 8002f6c:	ee10 3a10 	vmov	r3, s0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fb09 	bl	8000588 <__aeabi_f2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	ec43 2b10 	vmov	d0, r2, r3
 8002f7e:	f006 fdbf 	bl	8009b00 <cos>
 8002f82:	ec51 0b10 	vmov	r0, r1, d0
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	4bb2      	ldr	r3, [pc, #712]	@ (8003254 <run_platform+0x37c>)
 8002f8c:	f7fd fb54 	bl	8000638 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	f7fd fe46 	bl	8000c28 <__aeabi_d2f>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fa2:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8003258 <run_platform+0x380>
 8002fa6:	f7ff fccb 	bl	8002940 <deg_to_rad>
 8002faa:	ee10 3a10 	vmov	r3, s0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd faea 	bl	8000588 <__aeabi_f2d>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	ec43 2b10 	vmov	d0, r2, r3
 8002fbc:	f006 fe00 	bl	8009bc0 <sin>
 8002fc0:	ec51 0b10 	vmov	r0, r1, d0
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	4ba2      	ldr	r3, [pc, #648]	@ (8003254 <run_platform+0x37c>)
 8002fca:	f7fd fb35 	bl	8000638 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f7fd fe27 	bl	8000c28 <__aeabi_d2f>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	@ 0x44
    stewart->a3[0]=r*cos(deg_to_rad(120+beta/2)), stewart->a3[1]=r*sin(deg_to_rad(120+beta/2)),  stewart->a3[2] = 0;
 8002fe8:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 800325c <run_platform+0x384>
 8002fec:	f7ff fca8 	bl	8002940 <deg_to_rad>
 8002ff0:	ee10 3a10 	vmov	r3, s0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fac7 	bl	8000588 <__aeabi_f2d>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	ec43 2b10 	vmov	d0, r2, r3
 8003002:	f006 fd7d 	bl	8009b00 <cos>
 8003006:	ec51 0b10 	vmov	r0, r1, d0
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4b91      	ldr	r3, [pc, #580]	@ (8003254 <run_platform+0x37c>)
 8003010:	f7fd fb12 	bl	8000638 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fe04 	bl	8000c28 <__aeabi_d2f>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	649a      	str	r2, [r3, #72]	@ 0x48
 8003026:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 800325c <run_platform+0x384>
 800302a:	f7ff fc89 	bl	8002940 <deg_to_rad>
 800302e:	ee10 3a10 	vmov	r3, s0
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd faa8 	bl	8000588 <__aeabi_f2d>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	ec43 2b10 	vmov	d0, r2, r3
 8003040:	f006 fdbe 	bl	8009bc0 <sin>
 8003044:	ec51 0b10 	vmov	r0, r1, d0
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	4b81      	ldr	r3, [pc, #516]	@ (8003254 <run_platform+0x37c>)
 800304e:	f7fd faf3 	bl	8000638 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fde5 	bl	8000c28 <__aeabi_d2f>
 800305e:	4602      	mov	r2, r0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	651a      	str	r2, [r3, #80]	@ 0x50
    stewart->a4[0]=r*cos(deg_to_rad(240-beta/2)), stewart->a4[1]=r*sin(deg_to_rad(240-beta/2)),  stewart->a4[2] = 0;
 800306c:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8003260 <run_platform+0x388>
 8003070:	f7ff fc66 	bl	8002940 <deg_to_rad>
 8003074:	ee10 3a10 	vmov	r3, s0
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa85 	bl	8000588 <__aeabi_f2d>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	ec43 2b10 	vmov	d0, r2, r3
 8003086:	f006 fd3b 	bl	8009b00 <cos>
 800308a:	ec51 0b10 	vmov	r0, r1, d0
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b70      	ldr	r3, [pc, #448]	@ (8003254 <run_platform+0x37c>)
 8003094:	f7fd fad0 	bl	8000638 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fdc2 	bl	8000c28 <__aeabi_d2f>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80030aa:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8003260 <run_platform+0x388>
 80030ae:	f7ff fc47 	bl	8002940 <deg_to_rad>
 80030b2:	ee10 3a10 	vmov	r3, s0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fa66 	bl	8000588 <__aeabi_f2d>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	ec43 2b10 	vmov	d0, r2, r3
 80030c4:	f006 fd7c 	bl	8009bc0 <sin>
 80030c8:	ec51 0b10 	vmov	r0, r1, d0
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	4b60      	ldr	r3, [pc, #384]	@ (8003254 <run_platform+0x37c>)
 80030d2:	f7fd fab1 	bl	8000638 <__aeabi_dmul>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	f7fd fda3 	bl	8000c28 <__aeabi_d2f>
 80030e2:	4602      	mov	r2, r0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    stewart->a5[0]=r*cos(deg_to_rad(240+beta/2)), stewart->a5[1]=r*sin(deg_to_rad(240+beta/2)),  stewart->a5[2] = 0;
 80030f0:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8003264 <run_platform+0x38c>
 80030f4:	f7ff fc24 	bl	8002940 <deg_to_rad>
 80030f8:	ee10 3a10 	vmov	r3, s0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fa43 	bl	8000588 <__aeabi_f2d>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	ec43 2b10 	vmov	d0, r2, r3
 800310a:	f006 fcf9 	bl	8009b00 <cos>
 800310e:	ec51 0b10 	vmov	r0, r1, d0
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	4b4f      	ldr	r3, [pc, #316]	@ (8003254 <run_platform+0x37c>)
 8003118:	f7fd fa8e 	bl	8000638 <__aeabi_dmul>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f7fd fd80 	bl	8000c28 <__aeabi_d2f>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	661a      	str	r2, [r3, #96]	@ 0x60
 800312e:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8003264 <run_platform+0x38c>
 8003132:	f7ff fc05 	bl	8002940 <deg_to_rad>
 8003136:	ee10 3a10 	vmov	r3, s0
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fa24 	bl	8000588 <__aeabi_f2d>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	ec43 2b10 	vmov	d0, r2, r3
 8003148:	f006 fd3a 	bl	8009bc0 <sin>
 800314c:	ec51 0b10 	vmov	r0, r1, d0
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	4b3f      	ldr	r3, [pc, #252]	@ (8003254 <run_platform+0x37c>)
 8003156:	f7fd fa6f 	bl	8000638 <__aeabi_dmul>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	f7fd fd61 	bl	8000c28 <__aeabi_d2f>
 8003166:	4602      	mov	r2, r0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	665a      	str	r2, [r3, #100]	@ 0x64
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	669a      	str	r2, [r3, #104]	@ 0x68
    stewart->a6[0]=r*cos(deg_to_rad(360-beta/2)), stewart->a6[1]=r*sin(deg_to_rad(360-beta/2)),  stewart->a6[2] = 0;
 8003174:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8003268 <run_platform+0x390>
 8003178:	f7ff fbe2 	bl	8002940 <deg_to_rad>
 800317c:	ee10 3a10 	vmov	r3, s0
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd fa01 	bl	8000588 <__aeabi_f2d>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	ec43 2b10 	vmov	d0, r2, r3
 800318e:	f006 fcb7 	bl	8009b00 <cos>
 8003192:	ec51 0b10 	vmov	r0, r1, d0
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	4b2e      	ldr	r3, [pc, #184]	@ (8003254 <run_platform+0x37c>)
 800319c:	f7fd fa4c 	bl	8000638 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fd fd3e 	bl	8000c28 <__aeabi_d2f>
 80031ac:	4602      	mov	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80031b2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8003268 <run_platform+0x390>
 80031b6:	f7ff fbc3 	bl	8002940 <deg_to_rad>
 80031ba:	ee10 3a10 	vmov	r3, s0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f9e2 	bl	8000588 <__aeabi_f2d>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	ec43 2b10 	vmov	d0, r2, r3
 80031cc:	f006 fcf8 	bl	8009bc0 <sin>
 80031d0:	ec51 0b10 	vmov	r0, r1, d0
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003254 <run_platform+0x37c>)
 80031da:	f7fd fa2d 	bl	8000638 <__aeabi_dmul>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	f7fd fd1f 	bl	8000c28 <__aeabi_d2f>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	675a      	str	r2, [r3, #116]	@ 0x74


    rotate_platform(stewart, stewart->a1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3330      	adds	r3, #48	@ 0x30
 80031fc:	4619      	mov	r1, r3
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fe21 	bl	8002e46 <rotate_platform>
    rotate_platform(stewart, stewart->a2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	333c      	adds	r3, #60	@ 0x3c
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe1b 	bl	8002e46 <rotate_platform>
    rotate_platform(stewart, stewart->a3);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3348      	adds	r3, #72	@ 0x48
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fe15 	bl	8002e46 <rotate_platform>
    rotate_platform(stewart, stewart->a4);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3354      	adds	r3, #84	@ 0x54
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fe0f 	bl	8002e46 <rotate_platform>
    rotate_platform(stewart, stewart->a5);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3360      	adds	r3, #96	@ 0x60
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fe09 	bl	8002e46 <rotate_platform>
    rotate_platform(stewart, stewart->a6);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	336c      	adds	r3, #108	@ 0x6c
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fe03 	bl	8002e46 <rotate_platform>


    // calculate the length of each arm 
    stewart->c_target[0]=sqrt(pow(stewart->a1[0]-stewart->b1[0],2)+pow(stewart->a1[1]-stewart->b1[1],2) + pow(stewart->a1[2]-stewart->b1[2],2));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800324c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003250:	e00c      	b.n	800326c <run_platform+0x394>
 8003252:	bf00      	nop
 8003254:	40590000 	.word	0x40590000
 8003258:	42e60000 	.word	0x42e60000
 800325c:	42fa0000 	.word	0x42fa0000
 8003260:	436b0000 	.word	0x436b0000
 8003264:	43750000 	.word	0x43750000
 8003268:	43b18000 	.word	0x43b18000
 800326c:	ee17 0a90 	vmov	r0, s15
 8003270:	f7fd f98a 	bl	8000588 <__aeabi_f2d>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	ed9f 1be9 	vldr	d1, [pc, #932]	@ 8003620 <run_platform+0x748>
 800327c:	ec43 2b10 	vmov	d0, r2, r3
 8003280:	f006 fba0 	bl	80099c4 <pow>
 8003284:	ec55 4b10 	vmov	r4, r5, d0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8003294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003298:	ee17 0a90 	vmov	r0, s15
 800329c:	f7fd f974 	bl	8000588 <__aeabi_f2d>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	ed9f 1bde 	vldr	d1, [pc, #888]	@ 8003620 <run_platform+0x748>
 80032a8:	ec43 2b10 	vmov	d0, r2, r3
 80032ac:	f006 fb8a 	bl	80099c4 <pow>
 80032b0:	ec53 2b10 	vmov	r2, r3, d0
 80032b4:	4620      	mov	r0, r4
 80032b6:	4629      	mov	r1, r5
 80032b8:	f7fd f808 	bl	80002cc <__adddf3>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80032d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d4:	ee17 0a90 	vmov	r0, s15
 80032d8:	f7fd f956 	bl	8000588 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	ed9f 1bcf 	vldr	d1, [pc, #828]	@ 8003620 <run_platform+0x748>
 80032e4:	ec43 2b10 	vmov	d0, r2, r3
 80032e8:	f006 fb6c 	bl	80099c4 <pow>
 80032ec:	ec53 2b10 	vmov	r2, r3, d0
 80032f0:	4620      	mov	r0, r4
 80032f2:	4629      	mov	r1, r5
 80032f4:	f7fc ffea 	bl	80002cc <__adddf3>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	ec43 2b17 	vmov	d7, r2, r3
 8003300:	eeb0 0a47 	vmov.f32	s0, s14
 8003304:	eef0 0a67 	vmov.f32	s1, s15
 8003308:	f006 fbcc 	bl	8009aa4 <sqrt>
 800330c:	ec53 2b10 	vmov	r2, r3, d0
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f7fd fc88 	bl	8000c28 <__aeabi_d2f>
 8003318:	4602      	mov	r2, r0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
    stewart->c_target[1]=sqrt(pow(stewart->a2[0]-stewart->b2[0],2)+pow(stewart->a2[1]-stewart->b2[1],2) + pow(stewart->a2[2]-stewart->b2[2],2));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800332a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332e:	ee17 0a90 	vmov	r0, s15
 8003332:	f7fd f929 	bl	8000588 <__aeabi_f2d>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	ed9f 1bb9 	vldr	d1, [pc, #740]	@ 8003620 <run_platform+0x748>
 800333e:	ec43 2b10 	vmov	d0, r2, r3
 8003342:	f006 fb3f 	bl	80099c4 <pow>
 8003346:	ec55 4b10 	vmov	r4, r5, d0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8003356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335a:	ee17 0a90 	vmov	r0, s15
 800335e:	f7fd f913 	bl	8000588 <__aeabi_f2d>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	ed9f 1bae 	vldr	d1, [pc, #696]	@ 8003620 <run_platform+0x748>
 800336a:	ec43 2b10 	vmov	d0, r2, r3
 800336e:	f006 fb29 	bl	80099c4 <pow>
 8003372:	ec53 2b10 	vmov	r2, r3, d0
 8003376:	4620      	mov	r0, r4
 8003378:	4629      	mov	r1, r5
 800337a:	f7fc ffa7 	bl	80002cc <__adddf3>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4614      	mov	r4, r2
 8003384:	461d      	mov	r5, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8003392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003396:	ee17 0a90 	vmov	r0, s15
 800339a:	f7fd f8f5 	bl	8000588 <__aeabi_f2d>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8003620 <run_platform+0x748>
 80033a6:	ec43 2b10 	vmov	d0, r2, r3
 80033aa:	f006 fb0b 	bl	80099c4 <pow>
 80033ae:	ec53 2b10 	vmov	r2, r3, d0
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fc ff89 	bl	80002cc <__adddf3>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	ec43 2b17 	vmov	d7, r2, r3
 80033c2:	eeb0 0a47 	vmov.f32	s0, s14
 80033c6:	eef0 0a67 	vmov.f32	s1, s15
 80033ca:	f006 fb6b 	bl	8009aa4 <sqrt>
 80033ce:	ec53 2b10 	vmov	r2, r3, d0
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7fd fc27 	bl	8000c28 <__aeabi_d2f>
 80033da:	4602      	mov	r2, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	605a      	str	r2, [r3, #4]
    stewart->c_target[2]=sqrt(pow(stewart->a3[0]-stewart->b3[0],2)+pow(stewart->a3[1]-stewart->b3[1],2) + pow(stewart->a3[2]-stewart->b3[2],2));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80033ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f0:	ee17 0a90 	vmov	r0, s15
 80033f4:	f7fd f8c8 	bl	8000588 <__aeabi_f2d>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 8003620 <run_platform+0x748>
 8003400:	ec43 2b10 	vmov	d0, r2, r3
 8003404:	f006 fade 	bl	80099c4 <pow>
 8003408:	ec55 4b10 	vmov	r4, r5, d0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341c:	ee17 0a90 	vmov	r0, s15
 8003420:	f7fd f8b2 	bl	8000588 <__aeabi_f2d>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8003620 <run_platform+0x748>
 800342c:	ec43 2b10 	vmov	d0, r2, r3
 8003430:	f006 fac8 	bl	80099c4 <pow>
 8003434:	ec53 2b10 	vmov	r2, r3, d0
 8003438:	4620      	mov	r0, r4
 800343a:	4629      	mov	r1, r5
 800343c:	f7fc ff46 	bl	80002cc <__adddf3>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4614      	mov	r4, r2
 8003446:	461d      	mov	r5, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003458:	ee17 0a90 	vmov	r0, s15
 800345c:	f7fd f894 	bl	8000588 <__aeabi_f2d>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 8003620 <run_platform+0x748>
 8003468:	ec43 2b10 	vmov	d0, r2, r3
 800346c:	f006 faaa 	bl	80099c4 <pow>
 8003470:	ec53 2b10 	vmov	r2, r3, d0
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fc ff28 	bl	80002cc <__adddf3>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	ec43 2b17 	vmov	d7, r2, r3
 8003484:	eeb0 0a47 	vmov.f32	s0, s14
 8003488:	eef0 0a67 	vmov.f32	s1, s15
 800348c:	f006 fb0a 	bl	8009aa4 <sqrt>
 8003490:	ec53 2b10 	vmov	r2, r3, d0
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	f7fd fbc6 	bl	8000c28 <__aeabi_d2f>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]
    stewart->c_target[3]=sqrt(pow(stewart->a4[0]-stewart->b4[0],2)+pow(stewart->a4[1]-stewart->b4[1],2) + pow(stewart->a4[2]-stewart->b4[2],2));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 80034ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b2:	ee17 0a90 	vmov	r0, s15
 80034b6:	f7fd f867 	bl	8000588 <__aeabi_f2d>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8003620 <run_platform+0x748>
 80034c2:	ec43 2b10 	vmov	d0, r2, r3
 80034c6:	f006 fa7d 	bl	80099c4 <pow>
 80034ca:	ec55 4b10 	vmov	r4, r5, d0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 80034da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034de:	ee17 0a90 	vmov	r0, s15
 80034e2:	f7fd f851 	bl	8000588 <__aeabi_f2d>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8003620 <run_platform+0x748>
 80034ee:	ec43 2b10 	vmov	d0, r2, r3
 80034f2:	f006 fa67 	bl	80099c4 <pow>
 80034f6:	ec53 2b10 	vmov	r2, r3, d0
 80034fa:	4620      	mov	r0, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7fc fee5 	bl	80002cc <__adddf3>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4614      	mov	r4, r2
 8003508:	461d      	mov	r5, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8003516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351a:	ee17 0a90 	vmov	r0, s15
 800351e:	f7fd f833 	bl	8000588 <__aeabi_f2d>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8003620 <run_platform+0x748>
 800352a:	ec43 2b10 	vmov	d0, r2, r3
 800352e:	f006 fa49 	bl	80099c4 <pow>
 8003532:	ec53 2b10 	vmov	r2, r3, d0
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f7fc fec7 	bl	80002cc <__adddf3>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	ec43 2b17 	vmov	d7, r2, r3
 8003546:	eeb0 0a47 	vmov.f32	s0, s14
 800354a:	eef0 0a67 	vmov.f32	s1, s15
 800354e:	f006 faa9 	bl	8009aa4 <sqrt>
 8003552:	ec53 2b10 	vmov	r2, r3, d0
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f7fd fb65 	bl	8000c28 <__aeabi_d2f>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
    stewart->c_target[4]=sqrt(pow(stewart->a5[0]-stewart->b5[0],2)+pow(stewart->a5[1]-stewart->b5[1],2) + pow(stewart->a5[2]-stewart->b5[2],2));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 8003570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003574:	ee17 0a90 	vmov	r0, s15
 8003578:	f7fd f806 	bl	8000588 <__aeabi_f2d>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003620 <run_platform+0x748>
 8003584:	ec43 2b10 	vmov	d0, r2, r3
 8003588:	f006 fa1c 	bl	80099c4 <pow>
 800358c:	ec55 4b10 	vmov	r4, r5, d0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 800359c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a0:	ee17 0a90 	vmov	r0, s15
 80035a4:	f7fc fff0 	bl	8000588 <__aeabi_f2d>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8003620 <run_platform+0x748>
 80035b0:	ec43 2b10 	vmov	d0, r2, r3
 80035b4:	f006 fa06 	bl	80099c4 <pow>
 80035b8:	ec53 2b10 	vmov	r2, r3, d0
 80035bc:	4620      	mov	r0, r4
 80035be:	4629      	mov	r1, r5
 80035c0:	f7fc fe84 	bl	80002cc <__adddf3>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4614      	mov	r4, r2
 80035ca:	461d      	mov	r5, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80035d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035dc:	ee17 0a90 	vmov	r0, s15
 80035e0:	f7fc ffd2 	bl	8000588 <__aeabi_f2d>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8003620 <run_platform+0x748>
 80035ec:	ec43 2b10 	vmov	d0, r2, r3
 80035f0:	f006 f9e8 	bl	80099c4 <pow>
 80035f4:	ec53 2b10 	vmov	r2, r3, d0
 80035f8:	4620      	mov	r0, r4
 80035fa:	4629      	mov	r1, r5
 80035fc:	f7fc fe66 	bl	80002cc <__adddf3>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	ec43 2b17 	vmov	d7, r2, r3
 8003608:	eeb0 0a47 	vmov.f32	s0, s14
 800360c:	eef0 0a67 	vmov.f32	s1, s15
 8003610:	f006 fa48 	bl	8009aa4 <sqrt>
 8003614:	ec53 2b10 	vmov	r2, r3, d0
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	e008      	b.n	8003630 <run_platform+0x758>
 800361e:	bf00      	nop
 8003620:	00000000 	.word	0x00000000
 8003624:	40000000 	.word	0x40000000
 8003628:	00000000 	.word	0x00000000
 800362c:	40000000 	.word	0x40000000
 8003630:	f7fd fafa 	bl	8000c28 <__aeabi_d2f>
 8003634:	4602      	mov	r2, r0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]
    stewart->c_target[5]=sqrt(pow(stewart->a6[0]-stewart->b6[0],2)+pow(stewart->a6[1]-stewart->b6[1],2) + pow(stewart->a6[2]-stewart->b6[2],2));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8003646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364a:	ee17 0a90 	vmov	r0, s15
 800364e:	f7fc ff9b 	bl	8000588 <__aeabi_f2d>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	ed1f 1b0c 	vldr	d1, [pc, #-48]	@ 8003628 <run_platform+0x750>
 800365a:	ec43 2b10 	vmov	d0, r2, r3
 800365e:	f006 f9b1 	bl	80099c4 <pow>
 8003662:	ec55 4b10 	vmov	r4, r5, d0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 8003672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003676:	ee17 0a90 	vmov	r0, s15
 800367a:	f7fc ff85 	bl	8000588 <__aeabi_f2d>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	ed1f 1b17 	vldr	d1, [pc, #-92]	@ 8003628 <run_platform+0x750>
 8003686:	ec43 2b10 	vmov	d0, r2, r3
 800368a:	f006 f99b 	bl	80099c4 <pow>
 800368e:	ec53 2b10 	vmov	r2, r3, d0
 8003692:	4620      	mov	r0, r4
 8003694:	4629      	mov	r1, r5
 8003696:	f7fc fe19 	bl	80002cc <__adddf3>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4614      	mov	r4, r2
 80036a0:	461d      	mov	r5, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80036ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b2:	ee17 0a90 	vmov	r0, s15
 80036b6:	f7fc ff67 	bl	8000588 <__aeabi_f2d>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	ed1f 1b26 	vldr	d1, [pc, #-152]	@ 8003628 <run_platform+0x750>
 80036c2:	ec43 2b10 	vmov	d0, r2, r3
 80036c6:	f006 f97d 	bl	80099c4 <pow>
 80036ca:	ec53 2b10 	vmov	r2, r3, d0
 80036ce:	4620      	mov	r0, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	f7fc fdfb 	bl	80002cc <__adddf3>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	ec43 2b17 	vmov	d7, r2, r3
 80036de:	eeb0 0a47 	vmov.f32	s0, s14
 80036e2:	eef0 0a67 	vmov.f32	s1, s15
 80036e6:	f006 f9dd 	bl	8009aa4 <sqrt>
 80036ea:	ec53 2b10 	vmov	r2, r3, d0
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	f7fd fa99 	bl	8000c28 <__aeabi_d2f>
 80036f6:	4602      	mov	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	615a      	str	r2, [r3, #20]

}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bdb0      	pop	{r4, r5, r7, pc}

08003704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003708:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_Init+0x40>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0d      	ldr	r2, [pc, #52]	@ (8003744 <HAL_Init+0x40>)
 800370e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_Init+0x40>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0a      	ldr	r2, [pc, #40]	@ (8003744 <HAL_Init+0x40>)
 800371a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800371e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003720:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <HAL_Init+0x40>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a07      	ldr	r2, [pc, #28]	@ (8003744 <HAL_Init+0x40>)
 8003726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800372a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800372c:	2003      	movs	r0, #3
 800372e:	f000 fe8b 	bl	8004448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003732:	200f      	movs	r0, #15
 8003734:	f000 f808 	bl	8003748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003738:	f7fe fbf2 	bl	8001f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00

08003748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003750:	4b12      	ldr	r3, [pc, #72]	@ (800379c <HAL_InitTick+0x54>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <HAL_InitTick+0x58>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800375e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fea3 	bl	80044b2 <HAL_SYSTICK_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e00e      	b.n	8003794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d80a      	bhi.n	8003792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800377c:	2200      	movs	r2, #0
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003784:	f000 fe6b 	bl	800445e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003788:	4a06      	ldr	r2, [pc, #24]	@ (80037a4 <HAL_InitTick+0x5c>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000000 	.word	0x20000000
 80037a0:	20000008 	.word	0x20000008
 80037a4:	20000004 	.word	0x20000004

080037a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037ac:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_IncTick+0x20>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_IncTick+0x24>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <HAL_IncTick+0x24>)
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000008 	.word	0x20000008
 80037cc:	2000044c 	.word	0x2000044c

080037d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return uwTick;
 80037d4:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <HAL_GetTick+0x14>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	2000044c 	.word	0x2000044c

080037e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037f0:	f7ff ffee 	bl	80037d0 <HAL_GetTick>
 80037f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003800:	d005      	beq.n	800380e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003802:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <HAL_Delay+0x44>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800380e:	bf00      	nop
 8003810:	f7ff ffde 	bl	80037d0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	429a      	cmp	r2, r3
 800381e:	d8f7      	bhi.n	8003810 <HAL_Delay+0x28>
  {
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000008 	.word	0x20000008

08003830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e033      	b.n	80038ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe fb8e 	bl	8001f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003876:	f023 0302 	bic.w	r3, r3, #2
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fb88 	bl	8003f98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40
 800389e:	e001      	b.n	80038a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d049      	beq.n	8003980 <HAL_ADC_IRQHandler+0xca>
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d046      	beq.n	8003980 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d12b      	bne.n	8003970 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d127      	bne.n	8003970 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003926:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800392a:	2b00      	cmp	r3, #0
 800392c:	d006      	beq.n	800393c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003938:	2b00      	cmp	r3, #0
 800393a:	d119      	bne.n	8003970 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0220 	bic.w	r2, r2, #32
 800394a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd fea5 	bl	80016c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0212 	mvn.w	r2, #18
 800397e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d057      	beq.n	8003a46 <HAL_ADC_IRQHandler+0x190>
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d054      	beq.n	8003a46 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d139      	bne.n	8003a36 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d12b      	bne.n	8003a36 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d124      	bne.n	8003a36 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11d      	bne.n	8003a36 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d119      	bne.n	8003a36 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a10:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fc2c 	bl	8004294 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 020c 	mvn.w	r2, #12
 8003a44:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a54:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x1d6>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d014      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10d      	bne.n	8003a8c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f945 	bl	8003d0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f06f 0201 	mvn.w	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a9a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d015      	beq.n	8003ace <HAL_ADC_IRQHandler+0x218>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aac:	f043 0202 	orr.w	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0220 	mvn.w	r2, #32
 8003abc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f92e 	bl	8003d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0220 	mvn.w	r2, #32
 8003acc:	601a      	str	r2, [r3, #0]
  }
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_Start_DMA+0x1e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e0e9      	b.n	8003cca <HAL_ADC_Start_DMA+0x1f2>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d018      	beq.n	8003b3e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b1c:	4b6d      	ldr	r3, [pc, #436]	@ (8003cd4 <HAL_ADC_Start_DMA+0x1fc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd8 <HAL_ADC_Start_DMA+0x200>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0c9a      	lsrs	r2, r3, #18
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b30:	e002      	b.n	8003b38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f9      	bne.n	8003b32 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4c:	d107      	bne.n	8003b5e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b5c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 80a1 	bne.w	8003cb0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bac:	d106      	bne.n	8003bbc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f023 0206 	bic.w	r2, r3, #6
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bba:	e002      	b.n	8003bc2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bca:	4b44      	ldr	r3, [pc, #272]	@ (8003cdc <HAL_ADC_Start_DMA+0x204>)
 8003bcc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	4a43      	ldr	r2, [pc, #268]	@ (8003ce0 <HAL_ADC_Start_DMA+0x208>)
 8003bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bda:	4a42      	ldr	r2, [pc, #264]	@ (8003ce4 <HAL_ADC_Start_DMA+0x20c>)
 8003bdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	4a41      	ldr	r2, [pc, #260]	@ (8003ce8 <HAL_ADC_Start_DMA+0x210>)
 8003be4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003bee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003bfe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c0e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	334c      	adds	r3, #76	@ 0x4c
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f000 fd02 	bl	8004628 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d12a      	bne.n	8003c86 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2d      	ldr	r2, [pc, #180]	@ (8003cec <HAL_ADC_Start_DMA+0x214>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d015      	beq.n	8003c66 <HAL_ADC_Start_DMA+0x18e>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf0 <HAL_ADC_Start_DMA+0x218>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d105      	bne.n	8003c50 <HAL_ADC_Start_DMA+0x178>
 8003c44:	4b25      	ldr	r3, [pc, #148]	@ (8003cdc <HAL_ADC_Start_DMA+0x204>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a27      	ldr	r2, [pc, #156]	@ (8003cf4 <HAL_ADC_Start_DMA+0x21c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d136      	bne.n	8003cc8 <HAL_ADC_Start_DMA+0x1f0>
 8003c5a:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <HAL_ADC_Start_DMA+0x204>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d130      	bne.n	8003cc8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d129      	bne.n	8003cc8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	e020      	b.n	8003cc8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a18      	ldr	r2, [pc, #96]	@ (8003cec <HAL_ADC_Start_DMA+0x214>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_ADC_Start_DMA+0x1f0>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d114      	bne.n	8003cc8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	e00b      	b.n	8003cc8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	f043 0210 	orr.w	r2, r3, #16
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000000 	.word	0x20000000
 8003cd8:	431bde83 	.word	0x431bde83
 8003cdc:	40012300 	.word	0x40012300
 8003ce0:	08004191 	.word	0x08004191
 8003ce4:	0800424b 	.word	0x0800424b
 8003ce8:	08004267 	.word	0x08004267
 8003cec:	40012000 	.word	0x40012000
 8003cf0:	40012100 	.word	0x40012100
 8003cf4:	40012200 	.word	0x40012200

08003cf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x1c>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e113      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x244>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d925      	bls.n	8003dac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68d9      	ldr	r1, [r3, #12]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	3b1e      	subs	r3, #30
 8003d76:	2207      	movs	r2, #7
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43da      	mvns	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	400a      	ands	r2, r1
 8003d84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68d9      	ldr	r1, [r3, #12]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4618      	mov	r0, r3
 8003d98:	4603      	mov	r3, r0
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4403      	add	r3, r0
 8003d9e:	3b1e      	subs	r3, #30
 8003da0:	409a      	lsls	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	e022      	b.n	8003df2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6919      	ldr	r1, [r3, #16]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	400a      	ands	r2, r1
 8003dce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6919      	ldr	r1, [r3, #16]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4618      	mov	r0, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4403      	add	r3, r0
 8003de8:	409a      	lsls	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d824      	bhi.n	8003e44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	3b05      	subs	r3, #5
 8003e0c:	221f      	movs	r2, #31
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43da      	mvns	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	400a      	ands	r2, r1
 8003e1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	4618      	mov	r0, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	3b05      	subs	r3, #5
 8003e36:	fa00 f203 	lsl.w	r2, r0, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e42:	e04c      	b.n	8003ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d824      	bhi.n	8003e96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3b23      	subs	r3, #35	@ 0x23
 8003e5e:	221f      	movs	r2, #31
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43da      	mvns	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	3b23      	subs	r3, #35	@ 0x23
 8003e88:	fa00 f203 	lsl.w	r2, r0, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e94:	e023      	b.n	8003ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3b41      	subs	r3, #65	@ 0x41
 8003ea8:	221f      	movs	r2, #31
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	3b41      	subs	r3, #65	@ 0x41
 8003ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ede:	4b29      	ldr	r3, [pc, #164]	@ (8003f84 <HAL_ADC_ConfigChannel+0x250>)
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a28      	ldr	r2, [pc, #160]	@ (8003f88 <HAL_ADC_ConfigChannel+0x254>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d10f      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x1d8>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b12      	cmp	r3, #18
 8003ef2:	d10b      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	@ (8003f88 <HAL_ADC_ConfigChannel+0x254>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d12b      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x23a>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f8c <HAL_ADC_ConfigChannel+0x258>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <HAL_ADC_ConfigChannel+0x1f4>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b11      	cmp	r3, #17
 8003f26:	d122      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a11      	ldr	r2, [pc, #68]	@ (8003f8c <HAL_ADC_ConfigChannel+0x258>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d111      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f4a:	4b11      	ldr	r3, [pc, #68]	@ (8003f90 <HAL_ADC_ConfigChannel+0x25c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a11      	ldr	r2, [pc, #68]	@ (8003f94 <HAL_ADC_ConfigChannel+0x260>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	0c9a      	lsrs	r2, r3, #18
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f60:	e002      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f9      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40012300 	.word	0x40012300
 8003f88:	40012000 	.word	0x40012000
 8003f8c:	10000012 	.word	0x10000012
 8003f90:	20000000 	.word	0x20000000
 8003f94:	431bde83 	.word	0x431bde83

08003f98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fa0:	4b79      	ldr	r3, [pc, #484]	@ (8004188 <ADC_Init+0x1f0>)
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	021a      	lsls	r2, r3, #8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6899      	ldr	r1, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	4a58      	ldr	r2, [pc, #352]	@ (800418c <ADC_Init+0x1f4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800403e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	e00f      	b.n	8004096 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004094:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0202 	bic.w	r2, r2, #2
 80040a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7e1b      	ldrb	r3, [r3, #24]
 80040b0:	005a      	lsls	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80040e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	3b01      	subs	r3, #1
 80040f0:	035a      	lsls	r2, r3, #13
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	e007      	b.n	800410c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800411a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	3b01      	subs	r3, #1
 8004128:	051a      	lsls	r2, r3, #20
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6899      	ldr	r1, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800414e:	025a      	lsls	r2, r3, #9
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6899      	ldr	r1, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	029a      	lsls	r2, r3, #10
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40012300 	.word	0x40012300
 800418c:	0f000001 	.word	0x0f000001

08004190 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d13c      	bne.n	8004224 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d12b      	bne.n	800421c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d127      	bne.n	800421c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d119      	bne.n	800421c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0220 	bic.w	r2, r2, #32
 80041f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	f043 0201 	orr.w	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7fd fa4f 	bl	80016c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004222:	e00e      	b.n	8004242 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff fd75 	bl	8003d20 <HAL_ADC_ErrorCallback>
}
 8004236:	e004      	b.n	8004242 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff fd4d 	bl	8003cf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2240      	movs	r2, #64	@ 0x40
 8004278:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	f043 0204 	orr.w	r2, r3, #4
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fd4a 	bl	8003d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b8:	4b0c      	ldr	r3, [pc, #48]	@ (80042ec <__NVIC_SetPriorityGrouping+0x44>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042c4:	4013      	ands	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042da:	4a04      	ldr	r2, [pc, #16]	@ (80042ec <__NVIC_SetPriorityGrouping+0x44>)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	60d3      	str	r3, [r2, #12]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f4:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <__NVIC_GetPriorityGrouping+0x18>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	f003 0307 	and.w	r3, r3, #7
}
 80042fe:	4618      	mov	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	2b00      	cmp	r3, #0
 800431c:	db0b      	blt.n	8004336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	f003 021f 	and.w	r2, r3, #31
 8004324:	4907      	ldr	r1, [pc, #28]	@ (8004344 <__NVIC_EnableIRQ+0x38>)
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2001      	movs	r0, #1
 800432e:	fa00 f202 	lsl.w	r2, r0, r2
 8004332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	e000e100 	.word	0xe000e100

08004348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004358:	2b00      	cmp	r3, #0
 800435a:	db0a      	blt.n	8004372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	490c      	ldr	r1, [pc, #48]	@ (8004394 <__NVIC_SetPriority+0x4c>)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	440b      	add	r3, r1
 800436c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004370:	e00a      	b.n	8004388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4908      	ldr	r1, [pc, #32]	@ (8004398 <__NVIC_SetPriority+0x50>)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	3b04      	subs	r3, #4
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	440b      	add	r3, r1
 8004386:	761a      	strb	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000e100 	.word	0xe000e100
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	@ 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f1c3 0307 	rsb	r3, r3, #7
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	bf28      	it	cs
 80043ba:	2304      	movcs	r3, #4
 80043bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3304      	adds	r3, #4
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d902      	bls.n	80043cc <NVIC_EncodePriority+0x30>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3b03      	subs	r3, #3
 80043ca:	e000      	b.n	80043ce <NVIC_EncodePriority+0x32>
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	401a      	ands	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	43d9      	mvns	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f4:	4313      	orrs	r3, r2
         );
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3724      	adds	r7, #36	@ 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004414:	d301      	bcc.n	800441a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004416:	2301      	movs	r3, #1
 8004418:	e00f      	b.n	800443a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441a:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <SysTick_Config+0x40>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004422:	210f      	movs	r1, #15
 8004424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004428:	f7ff ff8e 	bl	8004348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <SysTick_Config+0x40>)
 800442e:	2200      	movs	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004432:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <SysTick_Config+0x40>)
 8004434:	2207      	movs	r2, #7
 8004436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	e000e010 	.word	0xe000e010

08004448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ff29 	bl	80042a8 <__NVIC_SetPriorityGrouping>
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800445e:	b580      	push	{r7, lr}
 8004460:	b086      	sub	sp, #24
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004470:	f7ff ff3e 	bl	80042f0 <__NVIC_GetPriorityGrouping>
 8004474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f7ff ff8e 	bl	800439c <NVIC_EncodePriority>
 8004480:	4602      	mov	r2, r0
 8004482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ff5d 	bl	8004348 <__NVIC_SetPriority>
}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	4603      	mov	r3, r0
 800449e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ff31 	bl	800430c <__NVIC_EnableIRQ>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ffa2 	bl	8004404 <SysTick_Config>
 80044c0:	4603      	mov	r3, r0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7ff f97a 	bl	80037d0 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e099      	b.n	800461c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004508:	e00f      	b.n	800452a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800450a:	f7ff f961 	bl	80037d0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b05      	cmp	r3, #5
 8004516:	d908      	bls.n	800452a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2203      	movs	r2, #3
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e078      	b.n	800461c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e8      	bne.n	800450a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <HAL_DMA_Init+0x158>)
 8004544:	4013      	ands	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004556:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	2b04      	cmp	r3, #4
 8004582:	d107      	bne.n	8004594 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	4313      	orrs	r3, r2
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0307 	bic.w	r3, r3, #7
 80045aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d117      	bne.n	80045ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa6f 	bl	8004ab4 <DMA_CheckFifoParam>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2240      	movs	r2, #64	@ 0x40
 80045e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80045ea:	2301      	movs	r3, #1
 80045ec:	e016      	b.n	800461c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa26 	bl	8004a48 <DMA_CalcBaseAndBitshift>
 80045fc:	4603      	mov	r3, r0
 80045fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	223f      	movs	r2, #63	@ 0x3f
 8004606:	409a      	lsls	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	f010803f 	.word	0xf010803f

08004628 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_DMA_Start_IT+0x26>
 800464a:	2302      	movs	r3, #2
 800464c:	e040      	b.n	80046d0 <HAL_DMA_Start_IT+0xa8>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	d12f      	bne.n	80046c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f9b8 	bl	80049ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004680:	223f      	movs	r2, #63	@ 0x3f
 8004682:	409a      	lsls	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0216 	orr.w	r2, r2, #22
 8004696:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e005      	b.n	80046ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
 80046cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004920 <HAL_DMA_IRQHandler+0x248>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a8e      	ldr	r2, [pc, #568]	@ (8004924 <HAL_DMA_IRQHandler+0x24c>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	0a9b      	lsrs	r3, r3, #10
 80046f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004702:	2208      	movs	r2, #8
 8004704:	409a      	lsls	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01a      	beq.n	8004744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d013      	beq.n	8004744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004730:	2208      	movs	r2, #8
 8004732:	409a      	lsls	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d012      	beq.n	800477a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004766:	2201      	movs	r2, #1
 8004768:	409a      	lsls	r2, r3
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477e:	2204      	movs	r2, #4
 8004780:	409a      	lsls	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d012      	beq.n	80047b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479c:	2204      	movs	r2, #4
 800479e:	409a      	lsls	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a8:	f043 0204 	orr.w	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b4:	2210      	movs	r2, #16
 80047b6:	409a      	lsls	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d043      	beq.n	8004848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d03c      	beq.n	8004848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d2:	2210      	movs	r2, #16
 80047d4:	409a      	lsls	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d018      	beq.n	800481a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d108      	bne.n	8004808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d024      	beq.n	8004848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
 8004806:	e01f      	b.n	8004848 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01b      	beq.n	8004848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
 8004818:	e016      	b.n	8004848 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d107      	bne.n	8004838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0208 	bic.w	r2, r2, #8
 8004836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484c:	2220      	movs	r2, #32
 800484e:	409a      	lsls	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 808f 	beq.w	8004978 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8087 	beq.w	8004978 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486e:	2220      	movs	r2, #32
 8004870:	409a      	lsls	r2, r3
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b05      	cmp	r3, #5
 8004880:	d136      	bne.n	80048f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0216 	bic.w	r2, r2, #22
 8004890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <HAL_DMA_IRQHandler+0x1da>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0208 	bic.w	r2, r2, #8
 80048c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c6:	223f      	movs	r2, #63	@ 0x3f
 80048c8:	409a      	lsls	r2, r3
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d07e      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	4798      	blx	r3
        }
        return;
 80048ee:	e079      	b.n	80049e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01d      	beq.n	800493a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10d      	bne.n	8004928 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004910:	2b00      	cmp	r3, #0
 8004912:	d031      	beq.n	8004978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
 800491c:	e02c      	b.n	8004978 <HAL_DMA_IRQHandler+0x2a0>
 800491e:	bf00      	nop
 8004920:	20000000 	.word	0x20000000
 8004924:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d023      	beq.n	8004978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
 8004938:	e01e      	b.n	8004978 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0210 	bic.w	r2, r2, #16
 8004956:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497c:	2b00      	cmp	r3, #0
 800497e:	d032      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d022      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2205      	movs	r2, #5
 8004990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d307      	bcc.n	80049c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f2      	bne.n	80049a4 <HAL_DMA_IRQHandler+0x2cc>
 80049be:	e000      	b.n	80049c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
 80049e2:	e000      	b.n	80049e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80049e4:	bf00      	nop
    }
  }
}
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b40      	cmp	r3, #64	@ 0x40
 8004a18:	d108      	bne.n	8004a2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a2a:	e007      	b.n	8004a3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	3b10      	subs	r3, #16
 8004a58:	4a14      	ldr	r2, [pc, #80]	@ (8004aac <DMA_CalcBaseAndBitshift+0x64>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	091b      	lsrs	r3, r3, #4
 8004a60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a62:	4a13      	ldr	r2, [pc, #76]	@ (8004ab0 <DMA_CalcBaseAndBitshift+0x68>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d909      	bls.n	8004a8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a88:	e007      	b.n	8004a9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	aaaaaaab 	.word	0xaaaaaaab
 8004ab0:	0800ba20 	.word	0x0800ba20

08004ab4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d11f      	bne.n	8004b0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d856      	bhi.n	8004b82 <DMA_CheckFifoParam+0xce>
 8004ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8004adc <DMA_CheckFifoParam+0x28>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004aff 	.word	0x08004aff
 8004ae4:	08004aed 	.word	0x08004aed
 8004ae8:	08004b83 	.word	0x08004b83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d046      	beq.n	8004b86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004afc:	e043      	b.n	8004b86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b06:	d140      	bne.n	8004b8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0c:	e03d      	b.n	8004b8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b16:	d121      	bne.n	8004b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d837      	bhi.n	8004b8e <DMA_CheckFifoParam+0xda>
 8004b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <DMA_CheckFifoParam+0x70>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b3b 	.word	0x08004b3b
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004b4d 	.word	0x08004b4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e030      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d025      	beq.n	8004b92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4a:	e022      	b.n	8004b92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b54:	d11f      	bne.n	8004b96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b5a:	e01c      	b.n	8004b96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d903      	bls.n	8004b6a <DMA_CheckFifoParam+0xb6>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d003      	beq.n	8004b70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b68:	e018      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6e:	e015      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e00b      	b.n	8004b9a <DMA_CheckFifoParam+0xe6>
      break;
 8004b82:	bf00      	nop
 8004b84:	e00a      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b86:	bf00      	nop
 8004b88:	e008      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e006      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e004      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b9a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b089      	sub	sp, #36	@ 0x24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	e165      	b.n	8004e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bc8:	2201      	movs	r2, #1
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	f040 8154 	bne.w	8004e8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d005      	beq.n	8004bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d130      	bne.n	8004c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	2203      	movs	r2, #3
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4013      	ands	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c34:	2201      	movs	r2, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 0201 	and.w	r2, r3, #1
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d017      	beq.n	8004c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	2203      	movs	r2, #3
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d123      	bne.n	8004cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	08da      	lsrs	r2, r3, #3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3208      	adds	r2, #8
 8004cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	220f      	movs	r2, #15
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	08da      	lsrs	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3208      	adds	r2, #8
 8004cea:	69b9      	ldr	r1, [r7, #24]
 8004cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4013      	ands	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 0203 	and.w	r2, r3, #3
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80ae 	beq.w	8004e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	4b5d      	ldr	r3, [pc, #372]	@ (8004eac <HAL_GPIO_Init+0x300>)
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004eac <HAL_GPIO_Init+0x300>)
 8004d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d42:	4b5a      	ldr	r3, [pc, #360]	@ (8004eac <HAL_GPIO_Init+0x300>)
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d4e:	4a58      	ldr	r2, [pc, #352]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	3302      	adds	r3, #2
 8004d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	220f      	movs	r2, #15
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a4f      	ldr	r2, [pc, #316]	@ (8004eb4 <HAL_GPIO_Init+0x308>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d025      	beq.n	8004dc6 <HAL_GPIO_Init+0x21a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004eb8 <HAL_GPIO_Init+0x30c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01f      	beq.n	8004dc2 <HAL_GPIO_Init+0x216>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a4d      	ldr	r2, [pc, #308]	@ (8004ebc <HAL_GPIO_Init+0x310>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d019      	beq.n	8004dbe <HAL_GPIO_Init+0x212>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8004ec0 <HAL_GPIO_Init+0x314>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_GPIO_Init+0x20e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a4b      	ldr	r2, [pc, #300]	@ (8004ec4 <HAL_GPIO_Init+0x318>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00d      	beq.n	8004db6 <HAL_GPIO_Init+0x20a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec8 <HAL_GPIO_Init+0x31c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <HAL_GPIO_Init+0x206>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a49      	ldr	r2, [pc, #292]	@ (8004ecc <HAL_GPIO_Init+0x320>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_GPIO_Init+0x202>
 8004daa:	2306      	movs	r3, #6
 8004dac:	e00c      	b.n	8004dc8 <HAL_GPIO_Init+0x21c>
 8004dae:	2307      	movs	r3, #7
 8004db0:	e00a      	b.n	8004dc8 <HAL_GPIO_Init+0x21c>
 8004db2:	2305      	movs	r3, #5
 8004db4:	e008      	b.n	8004dc8 <HAL_GPIO_Init+0x21c>
 8004db6:	2304      	movs	r3, #4
 8004db8:	e006      	b.n	8004dc8 <HAL_GPIO_Init+0x21c>
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e004      	b.n	8004dc8 <HAL_GPIO_Init+0x21c>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e002      	b.n	8004dc8 <HAL_GPIO_Init+0x21c>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_GPIO_Init+0x21c>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	f002 0203 	and.w	r2, r2, #3
 8004dce:	0092      	lsls	r2, r2, #2
 8004dd0:	4093      	lsls	r3, r2
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dd8:	4935      	ldr	r1, [pc, #212]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	3302      	adds	r3, #2
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004de6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed0 <HAL_GPIO_Init+0x324>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e0a:	4a31      	ldr	r2, [pc, #196]	@ (8004ed0 <HAL_GPIO_Init+0x324>)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e10:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed0 <HAL_GPIO_Init+0x324>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e34:	4a26      	ldr	r2, [pc, #152]	@ (8004ed0 <HAL_GPIO_Init+0x324>)
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e3a:	4b25      	ldr	r3, [pc, #148]	@ (8004ed0 <HAL_GPIO_Init+0x324>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed0 <HAL_GPIO_Init+0x324>)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e64:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed0 <HAL_GPIO_Init+0x324>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e88:	4a11      	ldr	r2, [pc, #68]	@ (8004ed0 <HAL_GPIO_Init+0x324>)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3301      	adds	r3, #1
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	f67f ae96 	bls.w	8004bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	3724      	adds	r7, #36	@ 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40013800 	.word	0x40013800
 8004eb4:	40020000 	.word	0x40020000
 8004eb8:	40020400 	.word	0x40020400
 8004ebc:	40020800 	.word	0x40020800
 8004ec0:	40020c00 	.word	0x40020c00
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40021400 	.word	0x40021400
 8004ecc:	40021800 	.word	0x40021800
 8004ed0:	40013c00 	.word	0x40013c00

08004ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	887b      	ldrh	r3, [r7, #2]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
 8004ef0:	e001      	b.n	8004ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	807b      	strh	r3, [r7, #2]
 8004f10:	4613      	mov	r3, r2
 8004f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f14:	787b      	ldrb	r3, [r7, #1]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f1a:	887a      	ldrh	r2, [r7, #2]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f20:	e003      	b.n	8004f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f22:	887b      	ldrh	r3, [r7, #2]
 8004f24:	041a      	lsls	r2, r3, #16
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	619a      	str	r2, [r3, #24]
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f48:	887a      	ldrh	r2, [r7, #2]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	041a      	lsls	r2, r3, #16
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	43d9      	mvns	r1, r3
 8004f54:	887b      	ldrh	r3, [r7, #2]
 8004f56:	400b      	ands	r3, r1
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	619a      	str	r2, [r3, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e12b      	b.n	80051d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fd f8a4 	bl	80020e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	@ 0x24
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fd0:	f000 fdac 	bl	8005b2c <HAL_RCC_GetPCLK1Freq>
 8004fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4a81      	ldr	r2, [pc, #516]	@ (80051e0 <HAL_I2C_Init+0x274>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d807      	bhi.n	8004ff0 <HAL_I2C_Init+0x84>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a80      	ldr	r2, [pc, #512]	@ (80051e4 <HAL_I2C_Init+0x278>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	bf94      	ite	ls
 8004fe8:	2301      	movls	r3, #1
 8004fea:	2300      	movhi	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e006      	b.n	8004ffe <HAL_I2C_Init+0x92>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a7d      	ldr	r2, [pc, #500]	@ (80051e8 <HAL_I2C_Init+0x27c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	bf94      	ite	ls
 8004ff8:	2301      	movls	r3, #1
 8004ffa:	2300      	movhi	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0e7      	b.n	80051d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a78      	ldr	r2, [pc, #480]	@ (80051ec <HAL_I2C_Init+0x280>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0c9b      	lsrs	r3, r3, #18
 8005010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a6a      	ldr	r2, [pc, #424]	@ (80051e0 <HAL_I2C_Init+0x274>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d802      	bhi.n	8005040 <HAL_I2C_Init+0xd4>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3301      	adds	r3, #1
 800503e:	e009      	b.n	8005054 <HAL_I2C_Init+0xe8>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	4a69      	ldr	r2, [pc, #420]	@ (80051f0 <HAL_I2C_Init+0x284>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	099b      	lsrs	r3, r3, #6
 8005052:	3301      	adds	r3, #1
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	430b      	orrs	r3, r1
 800505a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005066:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	495c      	ldr	r1, [pc, #368]	@ (80051e0 <HAL_I2C_Init+0x274>)
 8005070:	428b      	cmp	r3, r1
 8005072:	d819      	bhi.n	80050a8 <HAL_I2C_Init+0x13c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1e59      	subs	r1, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005088:	400b      	ands	r3, r1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_I2C_Init+0x138>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1e59      	subs	r1, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	fbb1 f3f3 	udiv	r3, r1, r3
 800509c:	3301      	adds	r3, #1
 800509e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a2:	e051      	b.n	8005148 <HAL_I2C_Init+0x1dc>
 80050a4:	2304      	movs	r3, #4
 80050a6:	e04f      	b.n	8005148 <HAL_I2C_Init+0x1dc>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d111      	bne.n	80050d4 <HAL_I2C_Init+0x168>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1e58      	subs	r0, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	440b      	add	r3, r1
 80050be:	fbb0 f3f3 	udiv	r3, r0, r3
 80050c2:	3301      	adds	r3, #1
 80050c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e012      	b.n	80050fa <HAL_I2C_Init+0x18e>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1e58      	subs	r0, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	0099      	lsls	r1, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ea:	3301      	adds	r3, #1
 80050ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_I2C_Init+0x196>
 80050fe:	2301      	movs	r3, #1
 8005100:	e022      	b.n	8005148 <HAL_I2C_Init+0x1dc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10e      	bne.n	8005128 <HAL_I2C_Init+0x1bc>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1e58      	subs	r0, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	440b      	add	r3, r1
 8005118:	fbb0 f3f3 	udiv	r3, r0, r3
 800511c:	3301      	adds	r3, #1
 800511e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005126:	e00f      	b.n	8005148 <HAL_I2C_Init+0x1dc>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1e58      	subs	r0, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6859      	ldr	r1, [r3, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	0099      	lsls	r1, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	fbb0 f3f3 	udiv	r3, r0, r3
 800513e:	3301      	adds	r3, #1
 8005140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	6809      	ldr	r1, [r1, #0]
 800514c:	4313      	orrs	r3, r2
 800514e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69da      	ldr	r2, [r3, #28]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005176:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6911      	ldr	r1, [r2, #16]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	4311      	orrs	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	430b      	orrs	r3, r1
 800518a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	000186a0 	.word	0x000186a0
 80051e4:	001e847f 	.word	0x001e847f
 80051e8:	003d08ff 	.word	0x003d08ff
 80051ec:	431bde83 	.word	0x431bde83
 80051f0:	10624dd3 	.word	0x10624dd3

080051f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	461a      	mov	r2, r3
 8005200:	460b      	mov	r3, r1
 8005202:	817b      	strh	r3, [r7, #10]
 8005204:	4613      	mov	r3, r2
 8005206:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005208:	f7fe fae2 	bl	80037d0 <HAL_GetTick>
 800520c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b20      	cmp	r3, #32
 8005218:	f040 80e0 	bne.w	80053dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2319      	movs	r3, #25
 8005222:	2201      	movs	r2, #1
 8005224:	4970      	ldr	r1, [pc, #448]	@ (80053e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f964 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005232:	2302      	movs	r3, #2
 8005234:	e0d3      	b.n	80053de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_I2C_Master_Transmit+0x50>
 8005240:	2302      	movs	r3, #2
 8005242:	e0cc      	b.n	80053de <HAL_I2C_Master_Transmit+0x1ea>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b01      	cmp	r3, #1
 8005258:	d007      	beq.n	800526a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005278:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2221      	movs	r2, #33	@ 0x21
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2210      	movs	r2, #16
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	893a      	ldrh	r2, [r7, #8]
 800529a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a50      	ldr	r2, [pc, #320]	@ (80053ec <HAL_I2C_Master_Transmit+0x1f8>)
 80052aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052ac:	8979      	ldrh	r1, [r7, #10]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f89c 	bl	80053f0 <I2C_MasterRequestWrite>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e08d      	b.n	80053de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80052d8:	e066      	b.n	80053a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	6a39      	ldr	r1, [r7, #32]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fa22 	bl	8005728 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00d      	beq.n	8005306 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d107      	bne.n	8005302 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e06b      	b.n	80053de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b04      	cmp	r3, #4
 8005342:	d11b      	bne.n	800537c <HAL_I2C_Master_Transmit+0x188>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005348:	2b00      	cmp	r3, #0
 800534a:	d017      	beq.n	800537c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	781a      	ldrb	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	6a39      	ldr	r1, [r7, #32]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 fa19 	bl	80057b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00d      	beq.n	80053a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	2b04      	cmp	r3, #4
 8005392:	d107      	bne.n	80053a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e01a      	b.n	80053de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d194      	bne.n	80052da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e000      	b.n	80053de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	00100002 	.word	0x00100002
 80053ec:	ffff0000 	.word	0xffff0000

080053f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	460b      	mov	r3, r1
 80053fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d006      	beq.n	800541a <I2C_MasterRequestWrite+0x2a>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d003      	beq.n	800541a <I2C_MasterRequestWrite+0x2a>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005418:	d108      	bne.n	800542c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e00b      	b.n	8005444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	2b12      	cmp	r3, #18
 8005432:	d107      	bne.n	8005444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f84f 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800546a:	d103      	bne.n	8005474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005472:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e035      	b.n	80054e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005480:	d108      	bne.n	8005494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005490:	611a      	str	r2, [r3, #16]
 8005492:	e01b      	b.n	80054cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005494:	897b      	ldrh	r3, [r7, #10]
 8005496:	11db      	asrs	r3, r3, #7
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 0306 	and.w	r3, r3, #6
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f063 030f 	orn	r3, r3, #15
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	490e      	ldr	r1, [pc, #56]	@ (80054ec <I2C_MasterRequestWrite+0xfc>)
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f898 	bl	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e010      	b.n	80054e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4907      	ldr	r1, [pc, #28]	@ (80054f0 <I2C_MasterRequestWrite+0x100>)
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f888 	bl	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	00010008 	.word	0x00010008
 80054f0:	00010002 	.word	0x00010002

080054f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005504:	e048      	b.n	8005598 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800550c:	d044      	beq.n	8005598 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fe f95f 	bl	80037d0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d139      	bne.n	8005598 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	0c1b      	lsrs	r3, r3, #16
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10d      	bne.n	800554a <I2C_WaitOnFlagUntilTimeout+0x56>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	43da      	mvns	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	e00c      	b.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x70>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	43da      	mvns	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	429a      	cmp	r2, r3
 8005568:	d116      	bne.n	8005598 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e023      	b.n	80055e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d10d      	bne.n	80055be <I2C_WaitOnFlagUntilTimeout+0xca>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	43da      	mvns	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	e00c      	b.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	43da      	mvns	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d093      	beq.n	8005506 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f6:	e071      	b.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005606:	d123      	bne.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005616:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	f043 0204 	orr.w	r2, r3, #4
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e067      	b.n	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005656:	d041      	beq.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005658:	f7fe f8ba 	bl	80037d0 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d302      	bcc.n	800566e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d136      	bne.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	0c1b      	lsrs	r3, r3, #16
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	d10c      	bne.n	8005692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	43da      	mvns	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	e00b      	b.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	43da      	mvns	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4013      	ands	r3, r2
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e021      	b.n	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	0c1b      	lsrs	r3, r3, #16
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d10c      	bne.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	43da      	mvns	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4013      	ands	r3, r2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e00b      	b.n	8005718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	43da      	mvns	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	bf14      	ite	ne
 8005712:	2301      	movne	r3, #1
 8005714:	2300      	moveq	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	f47f af6d 	bne.w	80055f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005734:	e034      	b.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f886 	bl	8005848 <I2C_IsAcknowledgeFailed>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e034      	b.n	80057b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800574c:	d028      	beq.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fe f83f 	bl	80037d0 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11d      	bne.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576e:	2b80      	cmp	r3, #128	@ 0x80
 8005770:	d016      	beq.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	f043 0220 	orr.w	r2, r3, #32
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e007      	b.n	80057b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b80      	cmp	r3, #128	@ 0x80
 80057ac:	d1c3      	bne.n	8005736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057c4:	e034      	b.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f83e 	bl	8005848 <I2C_IsAcknowledgeFailed>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e034      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057dc:	d028      	beq.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fd fff7 	bl	80037d0 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11d      	bne.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d016      	beq.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	f043 0220 	orr.w	r2, r3, #32
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e007      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b04      	cmp	r3, #4
 800583c:	d1c3      	bne.n	80057c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800585a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800585e:	d11b      	bne.n	8005898 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005868:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005884:	f043 0204 	orr.w	r2, r3, #4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	4b20      	ldr	r3, [pc, #128]	@ (8005938 <HAL_PWREx_EnableOverDrive+0x90>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005938 <HAL_PWREx_EnableOverDrive+0x90>)
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <HAL_PWREx_EnableOverDrive+0x90>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80058ce:	4b1b      	ldr	r3, [pc, #108]	@ (800593c <HAL_PWREx_EnableOverDrive+0x94>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058d4:	f7fd ff7c 	bl	80037d0 <HAL_GetTick>
 80058d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80058da:	e009      	b.n	80058f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80058dc:	f7fd ff78 	bl	80037d0 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058ea:	d901      	bls.n	80058f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e01f      	b.n	8005930 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80058f0:	4b13      	ldr	r3, [pc, #76]	@ (8005940 <HAL_PWREx_EnableOverDrive+0x98>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058fc:	d1ee      	bne.n	80058dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80058fe:	4b11      	ldr	r3, [pc, #68]	@ (8005944 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005904:	f7fd ff64 	bl	80037d0 <HAL_GetTick>
 8005908:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800590a:	e009      	b.n	8005920 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800590c:	f7fd ff60 	bl	80037d0 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800591a:	d901      	bls.n	8005920 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e007      	b.n	8005930 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <HAL_PWREx_EnableOverDrive+0x98>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800592c:	d1ee      	bne.n	800590c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40023800 	.word	0x40023800
 800593c:	420e0040 	.word	0x420e0040
 8005940:	40007000 	.word	0x40007000
 8005944:	420e0044 	.word	0x420e0044

08005948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0cc      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800595c:	4b68      	ldr	r3, [pc, #416]	@ (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d90c      	bls.n	8005984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b65      	ldr	r3, [pc, #404]	@ (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b63      	ldr	r3, [pc, #396]	@ (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0b8      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d020      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800599c:	4b59      	ldr	r3, [pc, #356]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4a58      	ldr	r2, [pc, #352]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b4:	4b53      	ldr	r3, [pc, #332]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	4a52      	ldr	r2, [pc, #328]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c0:	4b50      	ldr	r3, [pc, #320]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	494d      	ldr	r1, [pc, #308]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d044      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	4b47      	ldr	r3, [pc, #284]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d119      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e07f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d003      	beq.n	8005a06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d107      	bne.n	8005a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a06:	4b3f      	ldr	r3, [pc, #252]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e06f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a16:	4b3b      	ldr	r3, [pc, #236]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e067      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a26:	4b37      	ldr	r3, [pc, #220]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f023 0203 	bic.w	r2, r3, #3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4934      	ldr	r1, [pc, #208]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a38:	f7fd feca 	bl	80037d0 <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3e:	e00a      	b.n	8005a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a40:	f7fd fec6 	bl	80037d0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e04f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	4b2b      	ldr	r3, [pc, #172]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 020c 	and.w	r2, r3, #12
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d1eb      	bne.n	8005a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a68:	4b25      	ldr	r3, [pc, #148]	@ (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d20c      	bcs.n	8005a90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b22      	ldr	r3, [pc, #136]	@ (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b20      	ldr	r3, [pc, #128]	@ (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e032      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a9c:	4b19      	ldr	r3, [pc, #100]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4916      	ldr	r1, [pc, #88]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aba:	4b12      	ldr	r3, [pc, #72]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	490e      	ldr	r1, [pc, #56]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ace:	f000 f855 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	490a      	ldr	r1, [pc, #40]	@ (8005b08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae0:	5ccb      	ldrb	r3, [r1, r3]
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	4a09      	ldr	r2, [pc, #36]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005aea:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fd fe2a 	bl	8003748 <HAL_InitTick>

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023c00 	.word	0x40023c00
 8005b04:	40023800 	.word	0x40023800
 8005b08:	0800ba08 	.word	0x0800ba08
 8005b0c:	20000000 	.word	0x20000000
 8005b10:	20000004 	.word	0x20000004

08005b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b18:	4b03      	ldr	r3, [pc, #12]	@ (8005b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000000 	.word	0x20000000

08005b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b30:	f7ff fff0 	bl	8005b14 <HAL_RCC_GetHCLKFreq>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	0a9b      	lsrs	r3, r3, #10
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	4903      	ldr	r1, [pc, #12]	@ (8005b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b42:	5ccb      	ldrb	r3, [r1, r3]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	0800ba18 	.word	0x0800ba18

08005b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b58:	f7ff ffdc 	bl	8005b14 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b05      	ldr	r3, [pc, #20]	@ (8005b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	0b5b      	lsrs	r3, r3, #13
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4903      	ldr	r1, [pc, #12]	@ (8005b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40023800 	.word	0x40023800
 8005b78:	0800ba18 	.word	0x0800ba18

08005b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b80:	b0a6      	sub	sp, #152	@ 0x98
 8005b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ba2:	4bc8      	ldr	r3, [pc, #800]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 030c 	and.w	r3, r3, #12
 8005baa:	2b0c      	cmp	r3, #12
 8005bac:	f200 817e 	bhi.w	8005eac <HAL_RCC_GetSysClockFreq+0x330>
 8005bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bed 	.word	0x08005bed
 8005bbc:	08005ead 	.word	0x08005ead
 8005bc0:	08005ead 	.word	0x08005ead
 8005bc4:	08005ead 	.word	0x08005ead
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	08005ead 	.word	0x08005ead
 8005bd0:	08005ead 	.word	0x08005ead
 8005bd4:	08005ead 	.word	0x08005ead
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005ead 	.word	0x08005ead
 8005be0:	08005ead 	.word	0x08005ead
 8005be4:	08005ead 	.word	0x08005ead
 8005be8:	08005d67 	.word	0x08005d67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bec:	4bb6      	ldr	r3, [pc, #728]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005bee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005bf2:	e15f      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bf4:	4bb5      	ldr	r3, [pc, #724]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x350>)
 8005bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005bfa:	e15b      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bfc:	4bb1      	ldr	r3, [pc, #708]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c08:	4bae      	ldr	r3, [pc, #696]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d031      	beq.n	8005c78 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c14:	4bab      	ldr	r3, [pc, #684]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	099b      	lsrs	r3, r3, #6
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c26:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c28:	2300      	movs	r3, #0
 8005c2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c2c:	4ba7      	ldr	r3, [pc, #668]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x350>)
 8005c2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005c32:	462a      	mov	r2, r5
 8005c34:	fb03 f202 	mul.w	r2, r3, r2
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	4aa2      	ldr	r2, [pc, #648]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x350>)
 8005c44:	4621      	mov	r1, r4
 8005c46:	fba1 1202 	umull	r1, r2, r1, r2
 8005c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c4c:	460a      	mov	r2, r1
 8005c4e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005c50:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005c52:	4413      	add	r3, r2
 8005c54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005c60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005c68:	f7fb f82e 	bl	8000cc8 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4613      	mov	r3, r2
 8005c72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c76:	e064      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c78:	4b92      	ldr	r3, [pc, #584]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	099b      	lsrs	r3, r3, #6
 8005c7e:	2200      	movs	r2, #0
 8005c80:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c82:	657a      	str	r2, [r7, #84]	@ 0x54
 8005c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005c94:	4622      	mov	r2, r4
 8005c96:	462b      	mov	r3, r5
 8005c98:	f04f 0000 	mov.w	r0, #0
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	0159      	lsls	r1, r3, #5
 8005ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ca6:	0150      	lsls	r0, r2, #5
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4621      	mov	r1, r4
 8005cae:	1a51      	subs	r1, r2, r1
 8005cb0:	6139      	str	r1, [r7, #16]
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	eb63 0301 	sbc.w	r3, r3, r1
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cc6:	4659      	mov	r1, fp
 8005cc8:	018b      	lsls	r3, r1, #6
 8005cca:	4651      	mov	r1, sl
 8005ccc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	018a      	lsls	r2, r1, #6
 8005cd4:	4651      	mov	r1, sl
 8005cd6:	ebb2 0801 	subs.w	r8, r2, r1
 8005cda:	4659      	mov	r1, fp
 8005cdc:	eb63 0901 	sbc.w	r9, r3, r1
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cf4:	4690      	mov	r8, r2
 8005cf6:	4699      	mov	r9, r3
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	eb18 0303 	adds.w	r3, r8, r3
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	462b      	mov	r3, r5
 8005d02:	eb49 0303 	adc.w	r3, r9, r3
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d14:	4629      	mov	r1, r5
 8005d16:	028b      	lsls	r3, r1, #10
 8005d18:	4621      	mov	r1, r4
 8005d1a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d1e:	4621      	mov	r1, r4
 8005d20:	028a      	lsls	r2, r1, #10
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d34:	f7fa ffc8 	bl	8000cc8 <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d42:	4b60      	ldr	r3, [pc, #384]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	0c1b      	lsrs	r3, r3, #16
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005d54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005d64:	e0a6      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d66:	4b57      	ldr	r3, [pc, #348]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d72:	4b54      	ldr	r3, [pc, #336]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02a      	beq.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d7e:	4b51      	ldr	r3, [pc, #324]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	099b      	lsrs	r3, r3, #6
 8005d84:	2200      	movs	r2, #0
 8005d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005d90:	2100      	movs	r1, #0
 8005d92:	4b4e      	ldr	r3, [pc, #312]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x350>)
 8005d94:	fb03 f201 	mul.w	r2, r3, r1
 8005d98:	2300      	movs	r3, #0
 8005d9a:	fb00 f303 	mul.w	r3, r0, r3
 8005d9e:	4413      	add	r3, r2
 8005da0:	4a4a      	ldr	r2, [pc, #296]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x350>)
 8005da2:	fba0 1202 	umull	r1, r2, r0, r2
 8005da6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005da8:	460a      	mov	r2, r1
 8005daa:	673a      	str	r2, [r7, #112]	@ 0x70
 8005dac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005dae:	4413      	add	r3, r2
 8005db0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005db6:	2200      	movs	r2, #0
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dba:	637a      	str	r2, [r7, #52]	@ 0x34
 8005dbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005dc0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005dc4:	f7fa ff80 	bl	8000cc8 <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4613      	mov	r3, r2
 8005dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005dd2:	e05b      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	099b      	lsrs	r3, r3, #6
 8005dda:	2200      	movs	r2, #0
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	623b      	str	r3, [r7, #32]
 8005de8:	2300      	movs	r3, #0
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005df0:	4642      	mov	r2, r8
 8005df2:	464b      	mov	r3, r9
 8005df4:	f04f 0000 	mov.w	r0, #0
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	0159      	lsls	r1, r3, #5
 8005dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e02:	0150      	lsls	r0, r2, #5
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4641      	mov	r1, r8
 8005e0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e0e:	4649      	mov	r1, r9
 8005e10:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e28:	ebb2 040a 	subs.w	r4, r2, sl
 8005e2c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	00eb      	lsls	r3, r5, #3
 8005e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e3e:	00e2      	lsls	r2, r4, #3
 8005e40:	4614      	mov	r4, r2
 8005e42:	461d      	mov	r5, r3
 8005e44:	4643      	mov	r3, r8
 8005e46:	18e3      	adds	r3, r4, r3
 8005e48:	603b      	str	r3, [r7, #0]
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	eb45 0303 	adc.w	r3, r5, r3
 8005e50:	607b      	str	r3, [r7, #4]
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e5e:	4629      	mov	r1, r5
 8005e60:	028b      	lsls	r3, r1, #10
 8005e62:	4621      	mov	r1, r4
 8005e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e68:	4621      	mov	r1, r4
 8005e6a:	028a      	lsls	r2, r1, #10
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e74:	2200      	movs	r2, #0
 8005e76:	61bb      	str	r3, [r7, #24]
 8005e78:	61fa      	str	r2, [r7, #28]
 8005e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e7e:	f7fa ff23 	bl	8000cc8 <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4613      	mov	r3, r2
 8005e88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	0f1b      	lsrs	r3, r3, #28
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005eaa:	e003      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005eac:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005eae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005eb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3798      	adds	r7, #152	@ 0x98
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	00f42400 	.word	0x00f42400
 8005ecc:	017d7840 	.word	0x017d7840

08005ed0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e28d      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8083 	beq.w	8005ff6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ef0:	4b94      	ldr	r3, [pc, #592]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 030c 	and.w	r3, r3, #12
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d019      	beq.n	8005f30 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005efc:	4b91      	ldr	r3, [pc, #580]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 030c 	and.w	r3, r3, #12
        || \
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d106      	bne.n	8005f16 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f08:	4b8e      	ldr	r3, [pc, #568]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f14:	d00c      	beq.n	8005f30 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f16:	4b8b      	ldr	r3, [pc, #556]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f1e:	2b0c      	cmp	r3, #12
 8005f20:	d112      	bne.n	8005f48 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f22:	4b88      	ldr	r3, [pc, #544]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f2e:	d10b      	bne.n	8005f48 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	4b84      	ldr	r3, [pc, #528]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d05b      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x124>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d157      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e25a      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f50:	d106      	bne.n	8005f60 <HAL_RCC_OscConfig+0x90>
 8005f52:	4b7c      	ldr	r3, [pc, #496]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a7b      	ldr	r2, [pc, #492]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e01d      	b.n	8005f9c <HAL_RCC_OscConfig+0xcc>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0xb4>
 8005f6a:	4b76      	ldr	r3, [pc, #472]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a75      	ldr	r2, [pc, #468]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	4b73      	ldr	r3, [pc, #460]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a72      	ldr	r2, [pc, #456]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e00b      	b.n	8005f9c <HAL_RCC_OscConfig+0xcc>
 8005f84:	4b6f      	ldr	r3, [pc, #444]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a6e      	ldr	r2, [pc, #440]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	4b6c      	ldr	r3, [pc, #432]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a6b      	ldr	r2, [pc, #428]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d013      	beq.n	8005fcc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fd fc14 	bl	80037d0 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fac:	f7fd fc10 	bl	80037d0 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	@ 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e21f      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbe:	4b61      	ldr	r3, [pc, #388]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0xdc>
 8005fca:	e014      	b.n	8005ff6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fd fc00 	bl	80037d0 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fd4:	f7fd fbfc 	bl	80037d0 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	@ 0x64
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e20b      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe6:	4b57      	ldr	r3, [pc, #348]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x104>
 8005ff2:	e000      	b.n	8005ff6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d06f      	beq.n	80060e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006002:	4b50      	ldr	r3, [pc, #320]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
 800600a:	2b00      	cmp	r3, #0
 800600c:	d017      	beq.n	800603e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800600e:	4b4d      	ldr	r3, [pc, #308]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
        || \
 8006016:	2b08      	cmp	r3, #8
 8006018:	d105      	bne.n	8006026 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800601a:	4b4a      	ldr	r3, [pc, #296]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006026:	4b47      	ldr	r3, [pc, #284]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800602e:	2b0c      	cmp	r3, #12
 8006030:	d11c      	bne.n	800606c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006032:	4b44      	ldr	r3, [pc, #272]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603e:	4b41      	ldr	r3, [pc, #260]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_RCC_OscConfig+0x186>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d001      	beq.n	8006056 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e1d3      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006056:	4b3b      	ldr	r3, [pc, #236]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4937      	ldr	r1, [pc, #220]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606a:	e03a      	b.n	80060e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006074:	4b34      	ldr	r3, [pc, #208]	@ (8006148 <HAL_RCC_OscConfig+0x278>)
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fd fba9 	bl	80037d0 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006082:	f7fd fba5 	bl	80037d0 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e1b4      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006094:	4b2b      	ldr	r3, [pc, #172]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a0:	4b28      	ldr	r3, [pc, #160]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4925      	ldr	r1, [pc, #148]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	600b      	str	r3, [r1, #0]
 80060b4:	e015      	b.n	80060e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b6:	4b24      	ldr	r3, [pc, #144]	@ (8006148 <HAL_RCC_OscConfig+0x278>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fd fb88 	bl	80037d0 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c4:	f7fd fb84 	bl	80037d0 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e193      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d036      	beq.n	800615c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f6:	4b15      	ldr	r3, [pc, #84]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fd fb68 	bl	80037d0 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006104:	f7fd fb64 	bl	80037d0 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e173      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006116:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <HAL_RCC_OscConfig+0x274>)
 8006118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x234>
 8006122:	e01b      	b.n	800615c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006124:	4b09      	ldr	r3, [pc, #36]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612a:	f7fd fb51 	bl	80037d0 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	e00e      	b.n	8006150 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006132:	f7fd fb4d 	bl	80037d0 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d907      	bls.n	8006150 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e15c      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
 8006144:	40023800 	.word	0x40023800
 8006148:	42470000 	.word	0x42470000
 800614c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006150:	4b8a      	ldr	r3, [pc, #552]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ea      	bne.n	8006132 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8097 	beq.w	8006298 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800616a:	2300      	movs	r3, #0
 800616c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800616e:	4b83      	ldr	r3, [pc, #524]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10f      	bne.n	800619a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	4b7f      	ldr	r3, [pc, #508]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006182:	4a7e      	ldr	r2, [pc, #504]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006188:	6413      	str	r3, [r2, #64]	@ 0x40
 800618a:	4b7c      	ldr	r3, [pc, #496]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619a:	4b79      	ldr	r3, [pc, #484]	@ (8006380 <HAL_RCC_OscConfig+0x4b0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d118      	bne.n	80061d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a6:	4b76      	ldr	r3, [pc, #472]	@ (8006380 <HAL_RCC_OscConfig+0x4b0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a75      	ldr	r2, [pc, #468]	@ (8006380 <HAL_RCC_OscConfig+0x4b0>)
 80061ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061b2:	f7fd fb0d 	bl	80037d0 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ba:	f7fd fb09 	bl	80037d0 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e118      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006380 <HAL_RCC_OscConfig+0x4b0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d106      	bne.n	80061ee <HAL_RCC_OscConfig+0x31e>
 80061e0:	4b66      	ldr	r3, [pc, #408]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e4:	4a65      	ldr	r2, [pc, #404]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ec:	e01c      	b.n	8006228 <HAL_RCC_OscConfig+0x358>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d10c      	bne.n	8006210 <HAL_RCC_OscConfig+0x340>
 80061f6:	4b61      	ldr	r3, [pc, #388]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fa:	4a60      	ldr	r2, [pc, #384]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	6713      	str	r3, [r2, #112]	@ 0x70
 8006202:	4b5e      	ldr	r3, [pc, #376]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006206:	4a5d      	ldr	r2, [pc, #372]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	6713      	str	r3, [r2, #112]	@ 0x70
 800620e:	e00b      	b.n	8006228 <HAL_RCC_OscConfig+0x358>
 8006210:	4b5a      	ldr	r3, [pc, #360]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006214:	4a59      	ldr	r2, [pc, #356]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	6713      	str	r3, [r2, #112]	@ 0x70
 800621c:	4b57      	ldr	r3, [pc, #348]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006220:	4a56      	ldr	r2, [pc, #344]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006222:	f023 0304 	bic.w	r3, r3, #4
 8006226:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006230:	f7fd face 	bl	80037d0 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006236:	e00a      	b.n	800624e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006238:	f7fd faca 	bl	80037d0 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e0d7      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624e:	4b4b      	ldr	r3, [pc, #300]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ee      	beq.n	8006238 <HAL_RCC_OscConfig+0x368>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625c:	f7fd fab8 	bl	80037d0 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006262:	e00a      	b.n	800627a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006264:	f7fd fab4 	bl	80037d0 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e0c1      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800627a:	4b40      	ldr	r3, [pc, #256]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ee      	bne.n	8006264 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d105      	bne.n	8006298 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628c:	4b3b      	ldr	r3, [pc, #236]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	4a3a      	ldr	r2, [pc, #232]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006296:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80ad 	beq.w	80063fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a2:	4b36      	ldr	r3, [pc, #216]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d060      	beq.n	8006370 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d145      	bne.n	8006342 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b6:	4b33      	ldr	r3, [pc, #204]	@ (8006384 <HAL_RCC_OscConfig+0x4b4>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fd fa88 	bl	80037d0 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c4:	f7fd fa84 	bl	80037d0 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e093      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d6:	4b29      	ldr	r3, [pc, #164]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	019b      	lsls	r3, r3, #6
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	3b01      	subs	r3, #1
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	061b      	lsls	r3, r3, #24
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630c:	071b      	lsls	r3, r3, #28
 800630e:	491b      	ldr	r1, [pc, #108]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006310:	4313      	orrs	r3, r2
 8006312:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006314:	4b1b      	ldr	r3, [pc, #108]	@ (8006384 <HAL_RCC_OscConfig+0x4b4>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631a:	f7fd fa59 	bl	80037d0 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006322:	f7fd fa55 	bl	80037d0 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e064      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006334:	4b11      	ldr	r3, [pc, #68]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0f0      	beq.n	8006322 <HAL_RCC_OscConfig+0x452>
 8006340:	e05c      	b.n	80063fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006342:	4b10      	ldr	r3, [pc, #64]	@ (8006384 <HAL_RCC_OscConfig+0x4b4>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fd fa42 	bl	80037d0 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006350:	f7fd fa3e 	bl	80037d0 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e04d      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006362:	4b06      	ldr	r3, [pc, #24]	@ (800637c <HAL_RCC_OscConfig+0x4ac>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x480>
 800636e:	e045      	b.n	80063fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d107      	bne.n	8006388 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e040      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
 800637c:	40023800 	.word	0x40023800
 8006380:	40007000 	.word	0x40007000
 8006384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006388:	4b1f      	ldr	r3, [pc, #124]	@ (8006408 <HAL_RCC_OscConfig+0x538>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d030      	beq.n	80063f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d129      	bne.n	80063f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d122      	bne.n	80063f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063b8:	4013      	ands	r3, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d119      	bne.n	80063f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	3b01      	subs	r3, #1
 80063d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d10f      	bne.n	80063f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d001      	beq.n	80063fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40023800 	.word	0x40023800

0800640c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e07b      	b.n	8006516 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d108      	bne.n	8006438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800642e:	d009      	beq.n	8006444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	61da      	str	r2, [r3, #28]
 8006436:	e005      	b.n	8006444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fb fea8 	bl	80021b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800647a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c8:	ea42 0103 	orr.w	r1, r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	f003 0104 	and.w	r1, r3, #4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	f003 0210 	and.w	r2, r3, #16
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006504:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e042      	b.n	80065b6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d106      	bne.n	800654a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fb fe9d 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2224      	movs	r2, #36	@ 0x24
 800654e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006560:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f972 	bl	800684c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006576:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006586:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006596:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b08a      	sub	sp, #40	@ 0x28
 80065c2:	af02      	add	r7, sp, #8
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d175      	bne.n	80066ca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_UART_Transmit+0x2c>
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e06e      	b.n	80066cc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2221      	movs	r2, #33	@ 0x21
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065fc:	f7fd f8e8 	bl	80037d0 <HAL_GetTick>
 8006600:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	88fa      	ldrh	r2, [r7, #6]
 8006606:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006616:	d108      	bne.n	800662a <HAL_UART_Transmit+0x6c>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	e003      	b.n	8006632 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006632:	e02e      	b.n	8006692 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2200      	movs	r2, #0
 800663c:	2180      	movs	r1, #128	@ 0x80
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f848 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e03a      	b.n	80066cc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800666a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	3302      	adds	r3, #2
 8006670:	61bb      	str	r3, [r7, #24]
 8006672:	e007      	b.n	8006684 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	781a      	ldrb	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	3301      	adds	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1cb      	bne.n	8006634 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2200      	movs	r2, #0
 80066a4:	2140      	movs	r1, #64	@ 0x40
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f814 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e006      	b.n	80066cc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3720      	adds	r7, #32
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	e03b      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066ec:	d037      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ee:	f7fd f86f 	bl	80037d0 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <UART_WaitOnFlagUntilTimeout+0x30>
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e03a      	b.n	800677e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b00      	cmp	r3, #0
 8006714:	d023      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b80      	cmp	r3, #128	@ 0x80
 800671a:	d020      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0x8a>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b40      	cmp	r3, #64	@ 0x40
 8006720:	d01d      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b08      	cmp	r3, #8
 800672e:	d116      	bne.n	800675e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f81d 	bl	8006786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2208      	movs	r2, #8
 8006750:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e00f      	b.n	800677e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4013      	ands	r3, r2
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	429a      	cmp	r2, r3
 800676c:	bf0c      	ite	eq
 800676e:	2301      	moveq	r3, #1
 8006770:	2300      	movne	r3, #0
 8006772:	b2db      	uxtb	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	429a      	cmp	r2, r3
 800677a:	d0b4      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006786:	b480      	push	{r7}
 8006788:	b095      	sub	sp, #84	@ 0x54
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80067b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3314      	adds	r3, #20
 80067c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d119      	bne.n	8006832 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	330c      	adds	r3, #12
 8006804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	60bb      	str	r3, [r7, #8]
   return(result);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f023 0310 	bic.w	r3, r3, #16
 8006814:	647b      	str	r3, [r7, #68]	@ 0x44
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	330c      	adds	r3, #12
 800681c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800681e:	61ba      	str	r2, [r7, #24]
 8006820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6979      	ldr	r1, [r7, #20]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	613b      	str	r3, [r7, #16]
   return(result);
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e5      	bne.n	80067fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006840:	bf00      	nop
 8006842:	3754      	adds	r7, #84	@ 0x54
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800684c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006850:	b0c0      	sub	sp, #256	@ 0x100
 8006852:	af00      	add	r7, sp, #0
 8006854:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006868:	68d9      	ldr	r1, [r3, #12]
 800686a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	ea40 0301 	orr.w	r3, r0, r1
 8006874:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	431a      	orrs	r2, r3
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	431a      	orrs	r2, r3
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80068a4:	f021 010c 	bic.w	r1, r1, #12
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068b2:	430b      	orrs	r3, r1
 80068b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c6:	6999      	ldr	r1, [r3, #24]
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	ea40 0301 	orr.w	r3, r0, r1
 80068d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b8f      	ldr	r3, [pc, #572]	@ (8006b18 <UART_SetConfig+0x2cc>)
 80068dc:	429a      	cmp	r2, r3
 80068de:	d005      	beq.n	80068ec <UART_SetConfig+0xa0>
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b8d      	ldr	r3, [pc, #564]	@ (8006b1c <UART_SetConfig+0x2d0>)
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d104      	bne.n	80068f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068ec:	f7ff f932 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 80068f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80068f4:	e003      	b.n	80068fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068f6:	f7ff f919 	bl	8005b2c <HAL_RCC_GetPCLK1Freq>
 80068fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006908:	f040 810c 	bne.w	8006b24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800690c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006910:	2200      	movs	r2, #0
 8006912:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006916:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800691a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800691e:	4622      	mov	r2, r4
 8006920:	462b      	mov	r3, r5
 8006922:	1891      	adds	r1, r2, r2
 8006924:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006926:	415b      	adcs	r3, r3
 8006928:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800692a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800692e:	4621      	mov	r1, r4
 8006930:	eb12 0801 	adds.w	r8, r2, r1
 8006934:	4629      	mov	r1, r5
 8006936:	eb43 0901 	adc.w	r9, r3, r1
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800694e:	4690      	mov	r8, r2
 8006950:	4699      	mov	r9, r3
 8006952:	4623      	mov	r3, r4
 8006954:	eb18 0303 	adds.w	r3, r8, r3
 8006958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800695c:	462b      	mov	r3, r5
 800695e:	eb49 0303 	adc.w	r3, r9, r3
 8006962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006972:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006976:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800697a:	460b      	mov	r3, r1
 800697c:	18db      	adds	r3, r3, r3
 800697e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006980:	4613      	mov	r3, r2
 8006982:	eb42 0303 	adc.w	r3, r2, r3
 8006986:	657b      	str	r3, [r7, #84]	@ 0x54
 8006988:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800698c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006990:	f7fa f99a 	bl	8000cc8 <__aeabi_uldivmod>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4b61      	ldr	r3, [pc, #388]	@ (8006b20 <UART_SetConfig+0x2d4>)
 800699a:	fba3 2302 	umull	r2, r3, r3, r2
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	011c      	lsls	r4, r3, #4
 80069a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	1891      	adds	r1, r2, r2
 80069ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069bc:	415b      	adcs	r3, r3
 80069be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069c4:	4641      	mov	r1, r8
 80069c6:	eb12 0a01 	adds.w	sl, r2, r1
 80069ca:	4649      	mov	r1, r9
 80069cc:	eb43 0b01 	adc.w	fp, r3, r1
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069e4:	4692      	mov	sl, r2
 80069e6:	469b      	mov	fp, r3
 80069e8:	4643      	mov	r3, r8
 80069ea:	eb1a 0303 	adds.w	r3, sl, r3
 80069ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069f2:	464b      	mov	r3, r9
 80069f4:	eb4b 0303 	adc.w	r3, fp, r3
 80069f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a10:	460b      	mov	r3, r1
 8006a12:	18db      	adds	r3, r3, r3
 8006a14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a16:	4613      	mov	r3, r2
 8006a18:	eb42 0303 	adc.w	r3, r2, r3
 8006a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a26:	f7fa f94f 	bl	8000cc8 <__aeabi_uldivmod>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4611      	mov	r1, r2
 8006a30:	4b3b      	ldr	r3, [pc, #236]	@ (8006b20 <UART_SetConfig+0x2d4>)
 8006a32:	fba3 2301 	umull	r2, r3, r3, r1
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	2264      	movs	r2, #100	@ 0x64
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	1acb      	subs	r3, r1, r3
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a46:	4b36      	ldr	r3, [pc, #216]	@ (8006b20 <UART_SetConfig+0x2d4>)
 8006a48:	fba3 2302 	umull	r2, r3, r3, r2
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a54:	441c      	add	r4, r3
 8006a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a68:	4642      	mov	r2, r8
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	1891      	adds	r1, r2, r2
 8006a6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a70:	415b      	adcs	r3, r3
 8006a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a78:	4641      	mov	r1, r8
 8006a7a:	1851      	adds	r1, r2, r1
 8006a7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a7e:	4649      	mov	r1, r9
 8006a80:	414b      	adcs	r3, r1
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a90:	4659      	mov	r1, fp
 8006a92:	00cb      	lsls	r3, r1, #3
 8006a94:	4651      	mov	r1, sl
 8006a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9a:	4651      	mov	r1, sl
 8006a9c:	00ca      	lsls	r2, r1, #3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	189b      	adds	r3, r3, r2
 8006aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aac:	464b      	mov	r3, r9
 8006aae:	460a      	mov	r2, r1
 8006ab0:	eb42 0303 	adc.w	r3, r2, r3
 8006ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ac4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ac8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006acc:	460b      	mov	r3, r1
 8006ace:	18db      	adds	r3, r3, r3
 8006ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	eb42 0303 	adc.w	r3, r2, r3
 8006ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ade:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ae2:	f7fa f8f1 	bl	8000cc8 <__aeabi_uldivmod>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4b0d      	ldr	r3, [pc, #52]	@ (8006b20 <UART_SetConfig+0x2d4>)
 8006aec:	fba3 1302 	umull	r1, r3, r3, r2
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	2164      	movs	r1, #100	@ 0x64
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	3332      	adds	r3, #50	@ 0x32
 8006afe:	4a08      	ldr	r2, [pc, #32]	@ (8006b20 <UART_SetConfig+0x2d4>)
 8006b00:	fba2 2303 	umull	r2, r3, r2, r3
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	f003 0207 	and.w	r2, r3, #7
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4422      	add	r2, r4
 8006b12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b14:	e106      	b.n	8006d24 <UART_SetConfig+0x4d8>
 8006b16:	bf00      	nop
 8006b18:	40011000 	.word	0x40011000
 8006b1c:	40011400 	.word	0x40011400
 8006b20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b36:	4642      	mov	r2, r8
 8006b38:	464b      	mov	r3, r9
 8006b3a:	1891      	adds	r1, r2, r2
 8006b3c:	6239      	str	r1, [r7, #32]
 8006b3e:	415b      	adcs	r3, r3
 8006b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b46:	4641      	mov	r1, r8
 8006b48:	1854      	adds	r4, r2, r1
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	eb43 0501 	adc.w	r5, r3, r1
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	00eb      	lsls	r3, r5, #3
 8006b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b5e:	00e2      	lsls	r2, r4, #3
 8006b60:	4614      	mov	r4, r2
 8006b62:	461d      	mov	r5, r3
 8006b64:	4643      	mov	r3, r8
 8006b66:	18e3      	adds	r3, r4, r3
 8006b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	eb45 0303 	adc.w	r3, r5, r3
 8006b72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b86:	f04f 0200 	mov.w	r2, #0
 8006b8a:	f04f 0300 	mov.w	r3, #0
 8006b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b92:	4629      	mov	r1, r5
 8006b94:	008b      	lsls	r3, r1, #2
 8006b96:	4621      	mov	r1, r4
 8006b98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	008a      	lsls	r2, r1, #2
 8006ba0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ba4:	f7fa f890 	bl	8000cc8 <__aeabi_uldivmod>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4b60      	ldr	r3, [pc, #384]	@ (8006d30 <UART_SetConfig+0x4e4>)
 8006bae:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	011c      	lsls	r4, r3, #4
 8006bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006bc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	1891      	adds	r1, r2, r2
 8006bce:	61b9      	str	r1, [r7, #24]
 8006bd0:	415b      	adcs	r3, r3
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bd8:	4641      	mov	r1, r8
 8006bda:	1851      	adds	r1, r2, r1
 8006bdc:	6139      	str	r1, [r7, #16]
 8006bde:	4649      	mov	r1, r9
 8006be0:	414b      	adcs	r3, r1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	00cb      	lsls	r3, r1, #3
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	00ca      	lsls	r2, r1, #3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	4642      	mov	r2, r8
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	460a      	mov	r2, r1
 8006c10:	eb42 0303 	adc.w	r3, r2, r3
 8006c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c30:	4649      	mov	r1, r9
 8006c32:	008b      	lsls	r3, r1, #2
 8006c34:	4641      	mov	r1, r8
 8006c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	008a      	lsls	r2, r1, #2
 8006c3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c42:	f7fa f841 	bl	8000cc8 <__aeabi_uldivmod>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	4b38      	ldr	r3, [pc, #224]	@ (8006d30 <UART_SetConfig+0x4e4>)
 8006c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	2264      	movs	r2, #100	@ 0x64
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	1acb      	subs	r3, r1, r3
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	3332      	adds	r3, #50	@ 0x32
 8006c60:	4a33      	ldr	r2, [pc, #204]	@ (8006d30 <UART_SetConfig+0x4e4>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c6c:	441c      	add	r4, r3
 8006c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c72:	2200      	movs	r2, #0
 8006c74:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c76:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	1891      	adds	r1, r2, r2
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	415b      	adcs	r3, r3
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	1851      	adds	r1, r2, r1
 8006c90:	6039      	str	r1, [r7, #0]
 8006c92:	4649      	mov	r1, r9
 8006c94:	414b      	adcs	r3, r1
 8006c96:	607b      	str	r3, [r7, #4]
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ca4:	4659      	mov	r1, fp
 8006ca6:	00cb      	lsls	r3, r1, #3
 8006ca8:	4651      	mov	r1, sl
 8006caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cae:	4651      	mov	r1, sl
 8006cb0:	00ca      	lsls	r2, r1, #3
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4642      	mov	r2, r8
 8006cba:	189b      	adds	r3, r3, r2
 8006cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	460a      	mov	r2, r1
 8006cc2:	eb42 0303 	adc.w	r3, r2, r3
 8006cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	008b      	lsls	r3, r1, #2
 8006ce4:	4641      	mov	r1, r8
 8006ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cea:	4641      	mov	r1, r8
 8006cec:	008a      	lsls	r2, r1, #2
 8006cee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006cf2:	f7f9 ffe9 	bl	8000cc8 <__aeabi_uldivmod>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <UART_SetConfig+0x4e4>)
 8006cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8006d00:	095b      	lsrs	r3, r3, #5
 8006d02:	2164      	movs	r1, #100	@ 0x64
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	3332      	adds	r3, #50	@ 0x32
 8006d0e:	4a08      	ldr	r2, [pc, #32]	@ (8006d30 <UART_SetConfig+0x4e4>)
 8006d10:	fba2 2303 	umull	r2, r3, r2, r3
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	f003 020f 	and.w	r2, r3, #15
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4422      	add	r2, r4
 8006d22:	609a      	str	r2, [r3, #8]
}
 8006d24:	bf00      	nop
 8006d26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d30:	51eb851f 	.word	0x51eb851f

08006d34 <__cvt>:
 8006d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	ec57 6b10 	vmov	r6, r7, d0
 8006d3c:	2f00      	cmp	r7, #0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	4619      	mov	r1, r3
 8006d42:	463b      	mov	r3, r7
 8006d44:	bfbb      	ittet	lt
 8006d46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d4a:	461f      	movlt	r7, r3
 8006d4c:	2300      	movge	r3, #0
 8006d4e:	232d      	movlt	r3, #45	@ 0x2d
 8006d50:	700b      	strb	r3, [r1, #0]
 8006d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d58:	4691      	mov	r9, r2
 8006d5a:	f023 0820 	bic.w	r8, r3, #32
 8006d5e:	bfbc      	itt	lt
 8006d60:	4632      	movlt	r2, r6
 8006d62:	4616      	movlt	r6, r2
 8006d64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d68:	d005      	beq.n	8006d76 <__cvt+0x42>
 8006d6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006d6e:	d100      	bne.n	8006d72 <__cvt+0x3e>
 8006d70:	3401      	adds	r4, #1
 8006d72:	2102      	movs	r1, #2
 8006d74:	e000      	b.n	8006d78 <__cvt+0x44>
 8006d76:	2103      	movs	r1, #3
 8006d78:	ab03      	add	r3, sp, #12
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	ab02      	add	r3, sp, #8
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	ec47 6b10 	vmov	d0, r6, r7
 8006d84:	4653      	mov	r3, sl
 8006d86:	4622      	mov	r2, r4
 8006d88:	f000 fdd2 	bl	8007930 <_dtoa_r>
 8006d8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006d90:	4605      	mov	r5, r0
 8006d92:	d119      	bne.n	8006dc8 <__cvt+0x94>
 8006d94:	f019 0f01 	tst.w	r9, #1
 8006d98:	d00e      	beq.n	8006db8 <__cvt+0x84>
 8006d9a:	eb00 0904 	add.w	r9, r0, r4
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2300      	movs	r3, #0
 8006da2:	4630      	mov	r0, r6
 8006da4:	4639      	mov	r1, r7
 8006da6:	f7f9 feaf 	bl	8000b08 <__aeabi_dcmpeq>
 8006daa:	b108      	cbz	r0, 8006db0 <__cvt+0x7c>
 8006dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8006db0:	2230      	movs	r2, #48	@ 0x30
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	454b      	cmp	r3, r9
 8006db6:	d31e      	bcc.n	8006df6 <__cvt+0xc2>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dbc:	1b5b      	subs	r3, r3, r5
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	b004      	add	sp, #16
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006dcc:	eb00 0904 	add.w	r9, r0, r4
 8006dd0:	d1e5      	bne.n	8006d9e <__cvt+0x6a>
 8006dd2:	7803      	ldrb	r3, [r0, #0]
 8006dd4:	2b30      	cmp	r3, #48	@ 0x30
 8006dd6:	d10a      	bne.n	8006dee <__cvt+0xba>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4630      	mov	r0, r6
 8006dde:	4639      	mov	r1, r7
 8006de0:	f7f9 fe92 	bl	8000b08 <__aeabi_dcmpeq>
 8006de4:	b918      	cbnz	r0, 8006dee <__cvt+0xba>
 8006de6:	f1c4 0401 	rsb	r4, r4, #1
 8006dea:	f8ca 4000 	str.w	r4, [sl]
 8006dee:	f8da 3000 	ldr.w	r3, [sl]
 8006df2:	4499      	add	r9, r3
 8006df4:	e7d3      	b.n	8006d9e <__cvt+0x6a>
 8006df6:	1c59      	adds	r1, r3, #1
 8006df8:	9103      	str	r1, [sp, #12]
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e7d9      	b.n	8006db2 <__cvt+0x7e>

08006dfe <__exponent>:
 8006dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e00:	2900      	cmp	r1, #0
 8006e02:	bfba      	itte	lt
 8006e04:	4249      	neglt	r1, r1
 8006e06:	232d      	movlt	r3, #45	@ 0x2d
 8006e08:	232b      	movge	r3, #43	@ 0x2b
 8006e0a:	2909      	cmp	r1, #9
 8006e0c:	7002      	strb	r2, [r0, #0]
 8006e0e:	7043      	strb	r3, [r0, #1]
 8006e10:	dd29      	ble.n	8006e66 <__exponent+0x68>
 8006e12:	f10d 0307 	add.w	r3, sp, #7
 8006e16:	461d      	mov	r5, r3
 8006e18:	270a      	movs	r7, #10
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e20:	fb07 1416 	mls	r4, r7, r6, r1
 8006e24:	3430      	adds	r4, #48	@ 0x30
 8006e26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2c63      	cmp	r4, #99	@ 0x63
 8006e2e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006e32:	4631      	mov	r1, r6
 8006e34:	dcf1      	bgt.n	8006e1a <__exponent+0x1c>
 8006e36:	3130      	adds	r1, #48	@ 0x30
 8006e38:	1e94      	subs	r4, r2, #2
 8006e3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e3e:	1c41      	adds	r1, r0, #1
 8006e40:	4623      	mov	r3, r4
 8006e42:	42ab      	cmp	r3, r5
 8006e44:	d30a      	bcc.n	8006e5c <__exponent+0x5e>
 8006e46:	f10d 0309 	add.w	r3, sp, #9
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	42ac      	cmp	r4, r5
 8006e4e:	bf88      	it	hi
 8006e50:	2300      	movhi	r3, #0
 8006e52:	3302      	adds	r3, #2
 8006e54:	4403      	add	r3, r0
 8006e56:	1a18      	subs	r0, r3, r0
 8006e58:	b003      	add	sp, #12
 8006e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006e64:	e7ed      	b.n	8006e42 <__exponent+0x44>
 8006e66:	2330      	movs	r3, #48	@ 0x30
 8006e68:	3130      	adds	r1, #48	@ 0x30
 8006e6a:	7083      	strb	r3, [r0, #2]
 8006e6c:	70c1      	strb	r1, [r0, #3]
 8006e6e:	1d03      	adds	r3, r0, #4
 8006e70:	e7f1      	b.n	8006e56 <__exponent+0x58>
	...

08006e74 <_printf_float>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	b08d      	sub	sp, #52	@ 0x34
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006e80:	4616      	mov	r6, r2
 8006e82:	461f      	mov	r7, r3
 8006e84:	4605      	mov	r5, r0
 8006e86:	f000 fc97 	bl	80077b8 <_localeconv_r>
 8006e8a:	6803      	ldr	r3, [r0, #0]
 8006e8c:	9304      	str	r3, [sp, #16]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7f9 fa0e 	bl	80002b0 <strlen>
 8006e94:	2300      	movs	r3, #0
 8006e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e98:	f8d8 3000 	ldr.w	r3, [r8]
 8006e9c:	9005      	str	r0, [sp, #20]
 8006e9e:	3307      	adds	r3, #7
 8006ea0:	f023 0307 	bic.w	r3, r3, #7
 8006ea4:	f103 0208 	add.w	r2, r3, #8
 8006ea8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006eac:	f8d4 b000 	ldr.w	fp, [r4]
 8006eb0:	f8c8 2000 	str.w	r2, [r8]
 8006eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ebc:	9307      	str	r3, [sp, #28]
 8006ebe:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ec2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eca:	4b9c      	ldr	r3, [pc, #624]	@ (800713c <_printf_float+0x2c8>)
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ed0:	f7f9 fe4c 	bl	8000b6c <__aeabi_dcmpun>
 8006ed4:	bb70      	cbnz	r0, 8006f34 <_printf_float+0xc0>
 8006ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eda:	4b98      	ldr	r3, [pc, #608]	@ (800713c <_printf_float+0x2c8>)
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ee0:	f7f9 fe26 	bl	8000b30 <__aeabi_dcmple>
 8006ee4:	bb30      	cbnz	r0, 8006f34 <_printf_float+0xc0>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4640      	mov	r0, r8
 8006eec:	4649      	mov	r1, r9
 8006eee:	f7f9 fe15 	bl	8000b1c <__aeabi_dcmplt>
 8006ef2:	b110      	cbz	r0, 8006efa <_printf_float+0x86>
 8006ef4:	232d      	movs	r3, #45	@ 0x2d
 8006ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006efa:	4a91      	ldr	r2, [pc, #580]	@ (8007140 <_printf_float+0x2cc>)
 8006efc:	4b91      	ldr	r3, [pc, #580]	@ (8007144 <_printf_float+0x2d0>)
 8006efe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f02:	bf94      	ite	ls
 8006f04:	4690      	movls	r8, r2
 8006f06:	4698      	movhi	r8, r3
 8006f08:	2303      	movs	r3, #3
 8006f0a:	6123      	str	r3, [r4, #16]
 8006f0c:	f02b 0304 	bic.w	r3, fp, #4
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	f04f 0900 	mov.w	r9, #0
 8006f16:	9700      	str	r7, [sp, #0]
 8006f18:	4633      	mov	r3, r6
 8006f1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f000 f9d2 	bl	80072c8 <_printf_common>
 8006f24:	3001      	adds	r0, #1
 8006f26:	f040 808d 	bne.w	8007044 <_printf_float+0x1d0>
 8006f2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f2e:	b00d      	add	sp, #52	@ 0x34
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 fe16 	bl	8000b6c <__aeabi_dcmpun>
 8006f40:	b140      	cbz	r0, 8006f54 <_printf_float+0xe0>
 8006f42:	464b      	mov	r3, r9
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bfbc      	itt	lt
 8006f48:	232d      	movlt	r3, #45	@ 0x2d
 8006f4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8007148 <_printf_float+0x2d4>)
 8006f50:	4b7e      	ldr	r3, [pc, #504]	@ (800714c <_printf_float+0x2d8>)
 8006f52:	e7d4      	b.n	8006efe <_printf_float+0x8a>
 8006f54:	6863      	ldr	r3, [r4, #4]
 8006f56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f5a:	9206      	str	r2, [sp, #24]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	d13b      	bne.n	8006fd8 <_printf_float+0x164>
 8006f60:	2306      	movs	r3, #6
 8006f62:	6063      	str	r3, [r4, #4]
 8006f64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	9303      	str	r3, [sp, #12]
 8006f6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006f74:	ab09      	add	r3, sp, #36	@ 0x24
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	6861      	ldr	r1, [r4, #4]
 8006f7a:	ec49 8b10 	vmov	d0, r8, r9
 8006f7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006f82:	4628      	mov	r0, r5
 8006f84:	f7ff fed6 	bl	8006d34 <__cvt>
 8006f88:	9b06      	ldr	r3, [sp, #24]
 8006f8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f8c:	2b47      	cmp	r3, #71	@ 0x47
 8006f8e:	4680      	mov	r8, r0
 8006f90:	d129      	bne.n	8006fe6 <_printf_float+0x172>
 8006f92:	1cc8      	adds	r0, r1, #3
 8006f94:	db02      	blt.n	8006f9c <_printf_float+0x128>
 8006f96:	6863      	ldr	r3, [r4, #4]
 8006f98:	4299      	cmp	r1, r3
 8006f9a:	dd41      	ble.n	8007020 <_printf_float+0x1ac>
 8006f9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fa0:	fa5f fa8a 	uxtb.w	sl, sl
 8006fa4:	3901      	subs	r1, #1
 8006fa6:	4652      	mov	r2, sl
 8006fa8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fac:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fae:	f7ff ff26 	bl	8006dfe <__exponent>
 8006fb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fb4:	1813      	adds	r3, r2, r0
 8006fb6:	2a01      	cmp	r2, #1
 8006fb8:	4681      	mov	r9, r0
 8006fba:	6123      	str	r3, [r4, #16]
 8006fbc:	dc02      	bgt.n	8006fc4 <_printf_float+0x150>
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	07d2      	lsls	r2, r2, #31
 8006fc2:	d501      	bpl.n	8006fc8 <_printf_float+0x154>
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0a2      	beq.n	8006f16 <_printf_float+0xa2>
 8006fd0:	232d      	movs	r3, #45	@ 0x2d
 8006fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fd6:	e79e      	b.n	8006f16 <_printf_float+0xa2>
 8006fd8:	9a06      	ldr	r2, [sp, #24]
 8006fda:	2a47      	cmp	r2, #71	@ 0x47
 8006fdc:	d1c2      	bne.n	8006f64 <_printf_float+0xf0>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1c0      	bne.n	8006f64 <_printf_float+0xf0>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7bd      	b.n	8006f62 <_printf_float+0xee>
 8006fe6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006fea:	d9db      	bls.n	8006fa4 <_printf_float+0x130>
 8006fec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006ff0:	d118      	bne.n	8007024 <_printf_float+0x1b0>
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	6863      	ldr	r3, [r4, #4]
 8006ff6:	dd0b      	ble.n	8007010 <_printf_float+0x19c>
 8006ff8:	6121      	str	r1, [r4, #16]
 8006ffa:	b913      	cbnz	r3, 8007002 <_printf_float+0x18e>
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	07d0      	lsls	r0, r2, #31
 8007000:	d502      	bpl.n	8007008 <_printf_float+0x194>
 8007002:	3301      	adds	r3, #1
 8007004:	440b      	add	r3, r1
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	65a1      	str	r1, [r4, #88]	@ 0x58
 800700a:	f04f 0900 	mov.w	r9, #0
 800700e:	e7db      	b.n	8006fc8 <_printf_float+0x154>
 8007010:	b913      	cbnz	r3, 8007018 <_printf_float+0x1a4>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	07d2      	lsls	r2, r2, #31
 8007016:	d501      	bpl.n	800701c <_printf_float+0x1a8>
 8007018:	3302      	adds	r3, #2
 800701a:	e7f4      	b.n	8007006 <_printf_float+0x192>
 800701c:	2301      	movs	r3, #1
 800701e:	e7f2      	b.n	8007006 <_printf_float+0x192>
 8007020:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007026:	4299      	cmp	r1, r3
 8007028:	db05      	blt.n	8007036 <_printf_float+0x1c2>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	6121      	str	r1, [r4, #16]
 800702e:	07d8      	lsls	r0, r3, #31
 8007030:	d5ea      	bpl.n	8007008 <_printf_float+0x194>
 8007032:	1c4b      	adds	r3, r1, #1
 8007034:	e7e7      	b.n	8007006 <_printf_float+0x192>
 8007036:	2900      	cmp	r1, #0
 8007038:	bfd4      	ite	le
 800703a:	f1c1 0202 	rsble	r2, r1, #2
 800703e:	2201      	movgt	r2, #1
 8007040:	4413      	add	r3, r2
 8007042:	e7e0      	b.n	8007006 <_printf_float+0x192>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	055a      	lsls	r2, r3, #21
 8007048:	d407      	bmi.n	800705a <_printf_float+0x1e6>
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	4642      	mov	r2, r8
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	d12b      	bne.n	80070b0 <_printf_float+0x23c>
 8007058:	e767      	b.n	8006f2a <_printf_float+0xb6>
 800705a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800705e:	f240 80dd 	bls.w	800721c <_printf_float+0x3a8>
 8007062:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007066:	2200      	movs	r2, #0
 8007068:	2300      	movs	r3, #0
 800706a:	f7f9 fd4d 	bl	8000b08 <__aeabi_dcmpeq>
 800706e:	2800      	cmp	r0, #0
 8007070:	d033      	beq.n	80070da <_printf_float+0x266>
 8007072:	4a37      	ldr	r2, [pc, #220]	@ (8007150 <_printf_float+0x2dc>)
 8007074:	2301      	movs	r3, #1
 8007076:	4631      	mov	r1, r6
 8007078:	4628      	mov	r0, r5
 800707a:	47b8      	blx	r7
 800707c:	3001      	adds	r0, #1
 800707e:	f43f af54 	beq.w	8006f2a <_printf_float+0xb6>
 8007082:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007086:	4543      	cmp	r3, r8
 8007088:	db02      	blt.n	8007090 <_printf_float+0x21c>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	07d8      	lsls	r0, r3, #31
 800708e:	d50f      	bpl.n	80070b0 <_printf_float+0x23c>
 8007090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007094:	4631      	mov	r1, r6
 8007096:	4628      	mov	r0, r5
 8007098:	47b8      	blx	r7
 800709a:	3001      	adds	r0, #1
 800709c:	f43f af45 	beq.w	8006f2a <_printf_float+0xb6>
 80070a0:	f04f 0900 	mov.w	r9, #0
 80070a4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80070a8:	f104 0a1a 	add.w	sl, r4, #26
 80070ac:	45c8      	cmp	r8, r9
 80070ae:	dc09      	bgt.n	80070c4 <_printf_float+0x250>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	079b      	lsls	r3, r3, #30
 80070b4:	f100 8103 	bmi.w	80072be <_printf_float+0x44a>
 80070b8:	68e0      	ldr	r0, [r4, #12]
 80070ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070bc:	4298      	cmp	r0, r3
 80070be:	bfb8      	it	lt
 80070c0:	4618      	movlt	r0, r3
 80070c2:	e734      	b.n	8006f2e <_printf_float+0xba>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4652      	mov	r2, sl
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f af2b 	beq.w	8006f2a <_printf_float+0xb6>
 80070d4:	f109 0901 	add.w	r9, r9, #1
 80070d8:	e7e8      	b.n	80070ac <_printf_float+0x238>
 80070da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dc39      	bgt.n	8007154 <_printf_float+0x2e0>
 80070e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007150 <_printf_float+0x2dc>)
 80070e2:	2301      	movs	r3, #1
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f af1d 	beq.w	8006f2a <_printf_float+0xb6>
 80070f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80070f4:	ea59 0303 	orrs.w	r3, r9, r3
 80070f8:	d102      	bne.n	8007100 <_printf_float+0x28c>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	07d9      	lsls	r1, r3, #31
 80070fe:	d5d7      	bpl.n	80070b0 <_printf_float+0x23c>
 8007100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f af0d 	beq.w	8006f2a <_printf_float+0xb6>
 8007110:	f04f 0a00 	mov.w	sl, #0
 8007114:	f104 0b1a 	add.w	fp, r4, #26
 8007118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800711a:	425b      	negs	r3, r3
 800711c:	4553      	cmp	r3, sl
 800711e:	dc01      	bgt.n	8007124 <_printf_float+0x2b0>
 8007120:	464b      	mov	r3, r9
 8007122:	e793      	b.n	800704c <_printf_float+0x1d8>
 8007124:	2301      	movs	r3, #1
 8007126:	465a      	mov	r2, fp
 8007128:	4631      	mov	r1, r6
 800712a:	4628      	mov	r0, r5
 800712c:	47b8      	blx	r7
 800712e:	3001      	adds	r0, #1
 8007130:	f43f aefb 	beq.w	8006f2a <_printf_float+0xb6>
 8007134:	f10a 0a01 	add.w	sl, sl, #1
 8007138:	e7ee      	b.n	8007118 <_printf_float+0x2a4>
 800713a:	bf00      	nop
 800713c:	7fefffff 	.word	0x7fefffff
 8007140:	0800ba28 	.word	0x0800ba28
 8007144:	0800ba2c 	.word	0x0800ba2c
 8007148:	0800ba30 	.word	0x0800ba30
 800714c:	0800ba34 	.word	0x0800ba34
 8007150:	0800ba38 	.word	0x0800ba38
 8007154:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007156:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800715a:	4553      	cmp	r3, sl
 800715c:	bfa8      	it	ge
 800715e:	4653      	movge	r3, sl
 8007160:	2b00      	cmp	r3, #0
 8007162:	4699      	mov	r9, r3
 8007164:	dc36      	bgt.n	80071d4 <_printf_float+0x360>
 8007166:	f04f 0b00 	mov.w	fp, #0
 800716a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800716e:	f104 021a 	add.w	r2, r4, #26
 8007172:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007174:	9306      	str	r3, [sp, #24]
 8007176:	eba3 0309 	sub.w	r3, r3, r9
 800717a:	455b      	cmp	r3, fp
 800717c:	dc31      	bgt.n	80071e2 <_printf_float+0x36e>
 800717e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007180:	459a      	cmp	sl, r3
 8007182:	dc3a      	bgt.n	80071fa <_printf_float+0x386>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	07da      	lsls	r2, r3, #31
 8007188:	d437      	bmi.n	80071fa <_printf_float+0x386>
 800718a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800718c:	ebaa 0903 	sub.w	r9, sl, r3
 8007190:	9b06      	ldr	r3, [sp, #24]
 8007192:	ebaa 0303 	sub.w	r3, sl, r3
 8007196:	4599      	cmp	r9, r3
 8007198:	bfa8      	it	ge
 800719a:	4699      	movge	r9, r3
 800719c:	f1b9 0f00 	cmp.w	r9, #0
 80071a0:	dc33      	bgt.n	800720a <_printf_float+0x396>
 80071a2:	f04f 0800 	mov.w	r8, #0
 80071a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071aa:	f104 0b1a 	add.w	fp, r4, #26
 80071ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b0:	ebaa 0303 	sub.w	r3, sl, r3
 80071b4:	eba3 0309 	sub.w	r3, r3, r9
 80071b8:	4543      	cmp	r3, r8
 80071ba:	f77f af79 	ble.w	80070b0 <_printf_float+0x23c>
 80071be:	2301      	movs	r3, #1
 80071c0:	465a      	mov	r2, fp
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	f43f aeae 	beq.w	8006f2a <_printf_float+0xb6>
 80071ce:	f108 0801 	add.w	r8, r8, #1
 80071d2:	e7ec      	b.n	80071ae <_printf_float+0x33a>
 80071d4:	4642      	mov	r2, r8
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	d1c2      	bne.n	8007166 <_printf_float+0x2f2>
 80071e0:	e6a3      	b.n	8006f2a <_printf_float+0xb6>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	9206      	str	r2, [sp, #24]
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	f43f ae9c 	beq.w	8006f2a <_printf_float+0xb6>
 80071f2:	9a06      	ldr	r2, [sp, #24]
 80071f4:	f10b 0b01 	add.w	fp, fp, #1
 80071f8:	e7bb      	b.n	8007172 <_printf_float+0x2fe>
 80071fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071fe:	4631      	mov	r1, r6
 8007200:	4628      	mov	r0, r5
 8007202:	47b8      	blx	r7
 8007204:	3001      	adds	r0, #1
 8007206:	d1c0      	bne.n	800718a <_printf_float+0x316>
 8007208:	e68f      	b.n	8006f2a <_printf_float+0xb6>
 800720a:	9a06      	ldr	r2, [sp, #24]
 800720c:	464b      	mov	r3, r9
 800720e:	4442      	add	r2, r8
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	d1c3      	bne.n	80071a2 <_printf_float+0x32e>
 800721a:	e686      	b.n	8006f2a <_printf_float+0xb6>
 800721c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007220:	f1ba 0f01 	cmp.w	sl, #1
 8007224:	dc01      	bgt.n	800722a <_printf_float+0x3b6>
 8007226:	07db      	lsls	r3, r3, #31
 8007228:	d536      	bpl.n	8007298 <_printf_float+0x424>
 800722a:	2301      	movs	r3, #1
 800722c:	4642      	mov	r2, r8
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	47b8      	blx	r7
 8007234:	3001      	adds	r0, #1
 8007236:	f43f ae78 	beq.w	8006f2a <_printf_float+0xb6>
 800723a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f ae70 	beq.w	8006f2a <_printf_float+0xb6>
 800724a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800724e:	2200      	movs	r2, #0
 8007250:	2300      	movs	r3, #0
 8007252:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007256:	f7f9 fc57 	bl	8000b08 <__aeabi_dcmpeq>
 800725a:	b9c0      	cbnz	r0, 800728e <_printf_float+0x41a>
 800725c:	4653      	mov	r3, sl
 800725e:	f108 0201 	add.w	r2, r8, #1
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	d10c      	bne.n	8007286 <_printf_float+0x412>
 800726c:	e65d      	b.n	8006f2a <_printf_float+0xb6>
 800726e:	2301      	movs	r3, #1
 8007270:	465a      	mov	r2, fp
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	f43f ae56 	beq.w	8006f2a <_printf_float+0xb6>
 800727e:	f108 0801 	add.w	r8, r8, #1
 8007282:	45d0      	cmp	r8, sl
 8007284:	dbf3      	blt.n	800726e <_printf_float+0x3fa>
 8007286:	464b      	mov	r3, r9
 8007288:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800728c:	e6df      	b.n	800704e <_printf_float+0x1da>
 800728e:	f04f 0800 	mov.w	r8, #0
 8007292:	f104 0b1a 	add.w	fp, r4, #26
 8007296:	e7f4      	b.n	8007282 <_printf_float+0x40e>
 8007298:	2301      	movs	r3, #1
 800729a:	4642      	mov	r2, r8
 800729c:	e7e1      	b.n	8007262 <_printf_float+0x3ee>
 800729e:	2301      	movs	r3, #1
 80072a0:	464a      	mov	r2, r9
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	f43f ae3e 	beq.w	8006f2a <_printf_float+0xb6>
 80072ae:	f108 0801 	add.w	r8, r8, #1
 80072b2:	68e3      	ldr	r3, [r4, #12]
 80072b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072b6:	1a5b      	subs	r3, r3, r1
 80072b8:	4543      	cmp	r3, r8
 80072ba:	dcf0      	bgt.n	800729e <_printf_float+0x42a>
 80072bc:	e6fc      	b.n	80070b8 <_printf_float+0x244>
 80072be:	f04f 0800 	mov.w	r8, #0
 80072c2:	f104 0919 	add.w	r9, r4, #25
 80072c6:	e7f4      	b.n	80072b2 <_printf_float+0x43e>

080072c8 <_printf_common>:
 80072c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072cc:	4616      	mov	r6, r2
 80072ce:	4698      	mov	r8, r3
 80072d0:	688a      	ldr	r2, [r1, #8]
 80072d2:	690b      	ldr	r3, [r1, #16]
 80072d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072d8:	4293      	cmp	r3, r2
 80072da:	bfb8      	it	lt
 80072dc:	4613      	movlt	r3, r2
 80072de:	6033      	str	r3, [r6, #0]
 80072e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072e4:	4607      	mov	r7, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	b10a      	cbz	r2, 80072ee <_printf_common+0x26>
 80072ea:	3301      	adds	r3, #1
 80072ec:	6033      	str	r3, [r6, #0]
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	0699      	lsls	r1, r3, #26
 80072f2:	bf42      	ittt	mi
 80072f4:	6833      	ldrmi	r3, [r6, #0]
 80072f6:	3302      	addmi	r3, #2
 80072f8:	6033      	strmi	r3, [r6, #0]
 80072fa:	6825      	ldr	r5, [r4, #0]
 80072fc:	f015 0506 	ands.w	r5, r5, #6
 8007300:	d106      	bne.n	8007310 <_printf_common+0x48>
 8007302:	f104 0a19 	add.w	sl, r4, #25
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	6832      	ldr	r2, [r6, #0]
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	42ab      	cmp	r3, r5
 800730e:	dc26      	bgt.n	800735e <_printf_common+0x96>
 8007310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007314:	6822      	ldr	r2, [r4, #0]
 8007316:	3b00      	subs	r3, #0
 8007318:	bf18      	it	ne
 800731a:	2301      	movne	r3, #1
 800731c:	0692      	lsls	r2, r2, #26
 800731e:	d42b      	bmi.n	8007378 <_printf_common+0xb0>
 8007320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007324:	4641      	mov	r1, r8
 8007326:	4638      	mov	r0, r7
 8007328:	47c8      	blx	r9
 800732a:	3001      	adds	r0, #1
 800732c:	d01e      	beq.n	800736c <_printf_common+0xa4>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	6922      	ldr	r2, [r4, #16]
 8007332:	f003 0306 	and.w	r3, r3, #6
 8007336:	2b04      	cmp	r3, #4
 8007338:	bf02      	ittt	eq
 800733a:	68e5      	ldreq	r5, [r4, #12]
 800733c:	6833      	ldreq	r3, [r6, #0]
 800733e:	1aed      	subeq	r5, r5, r3
 8007340:	68a3      	ldr	r3, [r4, #8]
 8007342:	bf0c      	ite	eq
 8007344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007348:	2500      	movne	r5, #0
 800734a:	4293      	cmp	r3, r2
 800734c:	bfc4      	itt	gt
 800734e:	1a9b      	subgt	r3, r3, r2
 8007350:	18ed      	addgt	r5, r5, r3
 8007352:	2600      	movs	r6, #0
 8007354:	341a      	adds	r4, #26
 8007356:	42b5      	cmp	r5, r6
 8007358:	d11a      	bne.n	8007390 <_printf_common+0xc8>
 800735a:	2000      	movs	r0, #0
 800735c:	e008      	b.n	8007370 <_printf_common+0xa8>
 800735e:	2301      	movs	r3, #1
 8007360:	4652      	mov	r2, sl
 8007362:	4641      	mov	r1, r8
 8007364:	4638      	mov	r0, r7
 8007366:	47c8      	blx	r9
 8007368:	3001      	adds	r0, #1
 800736a:	d103      	bne.n	8007374 <_printf_common+0xac>
 800736c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007374:	3501      	adds	r5, #1
 8007376:	e7c6      	b.n	8007306 <_printf_common+0x3e>
 8007378:	18e1      	adds	r1, r4, r3
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	2030      	movs	r0, #48	@ 0x30
 800737e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007382:	4422      	add	r2, r4
 8007384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800738c:	3302      	adds	r3, #2
 800738e:	e7c7      	b.n	8007320 <_printf_common+0x58>
 8007390:	2301      	movs	r3, #1
 8007392:	4622      	mov	r2, r4
 8007394:	4641      	mov	r1, r8
 8007396:	4638      	mov	r0, r7
 8007398:	47c8      	blx	r9
 800739a:	3001      	adds	r0, #1
 800739c:	d0e6      	beq.n	800736c <_printf_common+0xa4>
 800739e:	3601      	adds	r6, #1
 80073a0:	e7d9      	b.n	8007356 <_printf_common+0x8e>
	...

080073a4 <_printf_i>:
 80073a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	7e0f      	ldrb	r7, [r1, #24]
 80073aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073ac:	2f78      	cmp	r7, #120	@ 0x78
 80073ae:	4691      	mov	r9, r2
 80073b0:	4680      	mov	r8, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	469a      	mov	sl, r3
 80073b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073ba:	d807      	bhi.n	80073cc <_printf_i+0x28>
 80073bc:	2f62      	cmp	r7, #98	@ 0x62
 80073be:	d80a      	bhi.n	80073d6 <_printf_i+0x32>
 80073c0:	2f00      	cmp	r7, #0
 80073c2:	f000 80d2 	beq.w	800756a <_printf_i+0x1c6>
 80073c6:	2f58      	cmp	r7, #88	@ 0x58
 80073c8:	f000 80b9 	beq.w	800753e <_printf_i+0x19a>
 80073cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073d4:	e03a      	b.n	800744c <_printf_i+0xa8>
 80073d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073da:	2b15      	cmp	r3, #21
 80073dc:	d8f6      	bhi.n	80073cc <_printf_i+0x28>
 80073de:	a101      	add	r1, pc, #4	@ (adr r1, 80073e4 <_printf_i+0x40>)
 80073e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073e4:	0800743d 	.word	0x0800743d
 80073e8:	08007451 	.word	0x08007451
 80073ec:	080073cd 	.word	0x080073cd
 80073f0:	080073cd 	.word	0x080073cd
 80073f4:	080073cd 	.word	0x080073cd
 80073f8:	080073cd 	.word	0x080073cd
 80073fc:	08007451 	.word	0x08007451
 8007400:	080073cd 	.word	0x080073cd
 8007404:	080073cd 	.word	0x080073cd
 8007408:	080073cd 	.word	0x080073cd
 800740c:	080073cd 	.word	0x080073cd
 8007410:	08007551 	.word	0x08007551
 8007414:	0800747b 	.word	0x0800747b
 8007418:	0800750b 	.word	0x0800750b
 800741c:	080073cd 	.word	0x080073cd
 8007420:	080073cd 	.word	0x080073cd
 8007424:	08007573 	.word	0x08007573
 8007428:	080073cd 	.word	0x080073cd
 800742c:	0800747b 	.word	0x0800747b
 8007430:	080073cd 	.word	0x080073cd
 8007434:	080073cd 	.word	0x080073cd
 8007438:	08007513 	.word	0x08007513
 800743c:	6833      	ldr	r3, [r6, #0]
 800743e:	1d1a      	adds	r2, r3, #4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6032      	str	r2, [r6, #0]
 8007444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800744c:	2301      	movs	r3, #1
 800744e:	e09d      	b.n	800758c <_printf_i+0x1e8>
 8007450:	6833      	ldr	r3, [r6, #0]
 8007452:	6820      	ldr	r0, [r4, #0]
 8007454:	1d19      	adds	r1, r3, #4
 8007456:	6031      	str	r1, [r6, #0]
 8007458:	0606      	lsls	r6, r0, #24
 800745a:	d501      	bpl.n	8007460 <_printf_i+0xbc>
 800745c:	681d      	ldr	r5, [r3, #0]
 800745e:	e003      	b.n	8007468 <_printf_i+0xc4>
 8007460:	0645      	lsls	r5, r0, #25
 8007462:	d5fb      	bpl.n	800745c <_printf_i+0xb8>
 8007464:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007468:	2d00      	cmp	r5, #0
 800746a:	da03      	bge.n	8007474 <_printf_i+0xd0>
 800746c:	232d      	movs	r3, #45	@ 0x2d
 800746e:	426d      	negs	r5, r5
 8007470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007474:	4859      	ldr	r0, [pc, #356]	@ (80075dc <_printf_i+0x238>)
 8007476:	230a      	movs	r3, #10
 8007478:	e011      	b.n	800749e <_printf_i+0xfa>
 800747a:	6821      	ldr	r1, [r4, #0]
 800747c:	6833      	ldr	r3, [r6, #0]
 800747e:	0608      	lsls	r0, r1, #24
 8007480:	f853 5b04 	ldr.w	r5, [r3], #4
 8007484:	d402      	bmi.n	800748c <_printf_i+0xe8>
 8007486:	0649      	lsls	r1, r1, #25
 8007488:	bf48      	it	mi
 800748a:	b2ad      	uxthmi	r5, r5
 800748c:	2f6f      	cmp	r7, #111	@ 0x6f
 800748e:	4853      	ldr	r0, [pc, #332]	@ (80075dc <_printf_i+0x238>)
 8007490:	6033      	str	r3, [r6, #0]
 8007492:	bf14      	ite	ne
 8007494:	230a      	movne	r3, #10
 8007496:	2308      	moveq	r3, #8
 8007498:	2100      	movs	r1, #0
 800749a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800749e:	6866      	ldr	r6, [r4, #4]
 80074a0:	60a6      	str	r6, [r4, #8]
 80074a2:	2e00      	cmp	r6, #0
 80074a4:	bfa2      	ittt	ge
 80074a6:	6821      	ldrge	r1, [r4, #0]
 80074a8:	f021 0104 	bicge.w	r1, r1, #4
 80074ac:	6021      	strge	r1, [r4, #0]
 80074ae:	b90d      	cbnz	r5, 80074b4 <_printf_i+0x110>
 80074b0:	2e00      	cmp	r6, #0
 80074b2:	d04b      	beq.n	800754c <_printf_i+0x1a8>
 80074b4:	4616      	mov	r6, r2
 80074b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80074ba:	fb03 5711 	mls	r7, r3, r1, r5
 80074be:	5dc7      	ldrb	r7, [r0, r7]
 80074c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074c4:	462f      	mov	r7, r5
 80074c6:	42bb      	cmp	r3, r7
 80074c8:	460d      	mov	r5, r1
 80074ca:	d9f4      	bls.n	80074b6 <_printf_i+0x112>
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d10b      	bne.n	80074e8 <_printf_i+0x144>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	07df      	lsls	r7, r3, #31
 80074d4:	d508      	bpl.n	80074e8 <_printf_i+0x144>
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	6861      	ldr	r1, [r4, #4]
 80074da:	4299      	cmp	r1, r3
 80074dc:	bfde      	ittt	le
 80074de:	2330      	movle	r3, #48	@ 0x30
 80074e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80074e8:	1b92      	subs	r2, r2, r6
 80074ea:	6122      	str	r2, [r4, #16]
 80074ec:	f8cd a000 	str.w	sl, [sp]
 80074f0:	464b      	mov	r3, r9
 80074f2:	aa03      	add	r2, sp, #12
 80074f4:	4621      	mov	r1, r4
 80074f6:	4640      	mov	r0, r8
 80074f8:	f7ff fee6 	bl	80072c8 <_printf_common>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d14a      	bne.n	8007596 <_printf_i+0x1f2>
 8007500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007504:	b004      	add	sp, #16
 8007506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	f043 0320 	orr.w	r3, r3, #32
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	4833      	ldr	r0, [pc, #204]	@ (80075e0 <_printf_i+0x23c>)
 8007514:	2778      	movs	r7, #120	@ 0x78
 8007516:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	6831      	ldr	r1, [r6, #0]
 800751e:	061f      	lsls	r7, r3, #24
 8007520:	f851 5b04 	ldr.w	r5, [r1], #4
 8007524:	d402      	bmi.n	800752c <_printf_i+0x188>
 8007526:	065f      	lsls	r7, r3, #25
 8007528:	bf48      	it	mi
 800752a:	b2ad      	uxthmi	r5, r5
 800752c:	6031      	str	r1, [r6, #0]
 800752e:	07d9      	lsls	r1, r3, #31
 8007530:	bf44      	itt	mi
 8007532:	f043 0320 	orrmi.w	r3, r3, #32
 8007536:	6023      	strmi	r3, [r4, #0]
 8007538:	b11d      	cbz	r5, 8007542 <_printf_i+0x19e>
 800753a:	2310      	movs	r3, #16
 800753c:	e7ac      	b.n	8007498 <_printf_i+0xf4>
 800753e:	4827      	ldr	r0, [pc, #156]	@ (80075dc <_printf_i+0x238>)
 8007540:	e7e9      	b.n	8007516 <_printf_i+0x172>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	f023 0320 	bic.w	r3, r3, #32
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	e7f6      	b.n	800753a <_printf_i+0x196>
 800754c:	4616      	mov	r6, r2
 800754e:	e7bd      	b.n	80074cc <_printf_i+0x128>
 8007550:	6833      	ldr	r3, [r6, #0]
 8007552:	6825      	ldr	r5, [r4, #0]
 8007554:	6961      	ldr	r1, [r4, #20]
 8007556:	1d18      	adds	r0, r3, #4
 8007558:	6030      	str	r0, [r6, #0]
 800755a:	062e      	lsls	r6, r5, #24
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	d501      	bpl.n	8007564 <_printf_i+0x1c0>
 8007560:	6019      	str	r1, [r3, #0]
 8007562:	e002      	b.n	800756a <_printf_i+0x1c6>
 8007564:	0668      	lsls	r0, r5, #25
 8007566:	d5fb      	bpl.n	8007560 <_printf_i+0x1bc>
 8007568:	8019      	strh	r1, [r3, #0]
 800756a:	2300      	movs	r3, #0
 800756c:	6123      	str	r3, [r4, #16]
 800756e:	4616      	mov	r6, r2
 8007570:	e7bc      	b.n	80074ec <_printf_i+0x148>
 8007572:	6833      	ldr	r3, [r6, #0]
 8007574:	1d1a      	adds	r2, r3, #4
 8007576:	6032      	str	r2, [r6, #0]
 8007578:	681e      	ldr	r6, [r3, #0]
 800757a:	6862      	ldr	r2, [r4, #4]
 800757c:	2100      	movs	r1, #0
 800757e:	4630      	mov	r0, r6
 8007580:	f7f8 fe46 	bl	8000210 <memchr>
 8007584:	b108      	cbz	r0, 800758a <_printf_i+0x1e6>
 8007586:	1b80      	subs	r0, r0, r6
 8007588:	6060      	str	r0, [r4, #4]
 800758a:	6863      	ldr	r3, [r4, #4]
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	2300      	movs	r3, #0
 8007590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007594:	e7aa      	b.n	80074ec <_printf_i+0x148>
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	4632      	mov	r2, r6
 800759a:	4649      	mov	r1, r9
 800759c:	4640      	mov	r0, r8
 800759e:	47d0      	blx	sl
 80075a0:	3001      	adds	r0, #1
 80075a2:	d0ad      	beq.n	8007500 <_printf_i+0x15c>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	079b      	lsls	r3, r3, #30
 80075a8:	d413      	bmi.n	80075d2 <_printf_i+0x22e>
 80075aa:	68e0      	ldr	r0, [r4, #12]
 80075ac:	9b03      	ldr	r3, [sp, #12]
 80075ae:	4298      	cmp	r0, r3
 80075b0:	bfb8      	it	lt
 80075b2:	4618      	movlt	r0, r3
 80075b4:	e7a6      	b.n	8007504 <_printf_i+0x160>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4632      	mov	r2, r6
 80075ba:	4649      	mov	r1, r9
 80075bc:	4640      	mov	r0, r8
 80075be:	47d0      	blx	sl
 80075c0:	3001      	adds	r0, #1
 80075c2:	d09d      	beq.n	8007500 <_printf_i+0x15c>
 80075c4:	3501      	adds	r5, #1
 80075c6:	68e3      	ldr	r3, [r4, #12]
 80075c8:	9903      	ldr	r1, [sp, #12]
 80075ca:	1a5b      	subs	r3, r3, r1
 80075cc:	42ab      	cmp	r3, r5
 80075ce:	dcf2      	bgt.n	80075b6 <_printf_i+0x212>
 80075d0:	e7eb      	b.n	80075aa <_printf_i+0x206>
 80075d2:	2500      	movs	r5, #0
 80075d4:	f104 0619 	add.w	r6, r4, #25
 80075d8:	e7f5      	b.n	80075c6 <_printf_i+0x222>
 80075da:	bf00      	nop
 80075dc:	0800ba3a 	.word	0x0800ba3a
 80075e0:	0800ba4b 	.word	0x0800ba4b

080075e4 <siprintf>:
 80075e4:	b40e      	push	{r1, r2, r3}
 80075e6:	b500      	push	{lr}
 80075e8:	b09c      	sub	sp, #112	@ 0x70
 80075ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80075ec:	9002      	str	r0, [sp, #8]
 80075ee:	9006      	str	r0, [sp, #24]
 80075f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075f4:	4809      	ldr	r0, [pc, #36]	@ (800761c <siprintf+0x38>)
 80075f6:	9107      	str	r1, [sp, #28]
 80075f8:	9104      	str	r1, [sp, #16]
 80075fa:	4909      	ldr	r1, [pc, #36]	@ (8007620 <siprintf+0x3c>)
 80075fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007600:	9105      	str	r1, [sp, #20]
 8007602:	6800      	ldr	r0, [r0, #0]
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	a902      	add	r1, sp, #8
 8007608:	f000 ffb2 	bl	8008570 <_svfiprintf_r>
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	b01c      	add	sp, #112	@ 0x70
 8007614:	f85d eb04 	ldr.w	lr, [sp], #4
 8007618:	b003      	add	sp, #12
 800761a:	4770      	bx	lr
 800761c:	20000018 	.word	0x20000018
 8007620:	ffff0208 	.word	0xffff0208

08007624 <std>:
 8007624:	2300      	movs	r3, #0
 8007626:	b510      	push	{r4, lr}
 8007628:	4604      	mov	r4, r0
 800762a:	e9c0 3300 	strd	r3, r3, [r0]
 800762e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007632:	6083      	str	r3, [r0, #8]
 8007634:	8181      	strh	r1, [r0, #12]
 8007636:	6643      	str	r3, [r0, #100]	@ 0x64
 8007638:	81c2      	strh	r2, [r0, #14]
 800763a:	6183      	str	r3, [r0, #24]
 800763c:	4619      	mov	r1, r3
 800763e:	2208      	movs	r2, #8
 8007640:	305c      	adds	r0, #92	@ 0x5c
 8007642:	f000 f8b1 	bl	80077a8 <memset>
 8007646:	4b0d      	ldr	r3, [pc, #52]	@ (800767c <std+0x58>)
 8007648:	6263      	str	r3, [r4, #36]	@ 0x24
 800764a:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <std+0x5c>)
 800764c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <std+0x60>)
 8007650:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007652:	4b0d      	ldr	r3, [pc, #52]	@ (8007688 <std+0x64>)
 8007654:	6323      	str	r3, [r4, #48]	@ 0x30
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <std+0x68>)
 8007658:	6224      	str	r4, [r4, #32]
 800765a:	429c      	cmp	r4, r3
 800765c:	d006      	beq.n	800766c <std+0x48>
 800765e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007662:	4294      	cmp	r4, r2
 8007664:	d002      	beq.n	800766c <std+0x48>
 8007666:	33d0      	adds	r3, #208	@ 0xd0
 8007668:	429c      	cmp	r4, r3
 800766a:	d105      	bne.n	8007678 <std+0x54>
 800766c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007674:	f000 b8ce 	b.w	8007814 <__retarget_lock_init_recursive>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	bf00      	nop
 800767c:	08009131 	.word	0x08009131
 8007680:	08009153 	.word	0x08009153
 8007684:	0800918b 	.word	0x0800918b
 8007688:	080091af 	.word	0x080091af
 800768c:	20000450 	.word	0x20000450

08007690 <stdio_exit_handler>:
 8007690:	4a02      	ldr	r2, [pc, #8]	@ (800769c <stdio_exit_handler+0xc>)
 8007692:	4903      	ldr	r1, [pc, #12]	@ (80076a0 <stdio_exit_handler+0x10>)
 8007694:	4803      	ldr	r0, [pc, #12]	@ (80076a4 <stdio_exit_handler+0x14>)
 8007696:	f000 b869 	b.w	800776c <_fwalk_sglue>
 800769a:	bf00      	nop
 800769c:	2000000c 	.word	0x2000000c
 80076a0:	080089c5 	.word	0x080089c5
 80076a4:	2000001c 	.word	0x2000001c

080076a8 <cleanup_stdio>:
 80076a8:	6841      	ldr	r1, [r0, #4]
 80076aa:	4b0c      	ldr	r3, [pc, #48]	@ (80076dc <cleanup_stdio+0x34>)
 80076ac:	4299      	cmp	r1, r3
 80076ae:	b510      	push	{r4, lr}
 80076b0:	4604      	mov	r4, r0
 80076b2:	d001      	beq.n	80076b8 <cleanup_stdio+0x10>
 80076b4:	f001 f986 	bl	80089c4 <_fflush_r>
 80076b8:	68a1      	ldr	r1, [r4, #8]
 80076ba:	4b09      	ldr	r3, [pc, #36]	@ (80076e0 <cleanup_stdio+0x38>)
 80076bc:	4299      	cmp	r1, r3
 80076be:	d002      	beq.n	80076c6 <cleanup_stdio+0x1e>
 80076c0:	4620      	mov	r0, r4
 80076c2:	f001 f97f 	bl	80089c4 <_fflush_r>
 80076c6:	68e1      	ldr	r1, [r4, #12]
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <cleanup_stdio+0x3c>)
 80076ca:	4299      	cmp	r1, r3
 80076cc:	d004      	beq.n	80076d8 <cleanup_stdio+0x30>
 80076ce:	4620      	mov	r0, r4
 80076d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d4:	f001 b976 	b.w	80089c4 <_fflush_r>
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	20000450 	.word	0x20000450
 80076e0:	200004b8 	.word	0x200004b8
 80076e4:	20000520 	.word	0x20000520

080076e8 <global_stdio_init.part.0>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <global_stdio_init.part.0+0x30>)
 80076ec:	4c0b      	ldr	r4, [pc, #44]	@ (800771c <global_stdio_init.part.0+0x34>)
 80076ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007720 <global_stdio_init.part.0+0x38>)
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	4620      	mov	r0, r4
 80076f4:	2200      	movs	r2, #0
 80076f6:	2104      	movs	r1, #4
 80076f8:	f7ff ff94 	bl	8007624 <std>
 80076fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007700:	2201      	movs	r2, #1
 8007702:	2109      	movs	r1, #9
 8007704:	f7ff ff8e 	bl	8007624 <std>
 8007708:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800770c:	2202      	movs	r2, #2
 800770e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007712:	2112      	movs	r1, #18
 8007714:	f7ff bf86 	b.w	8007624 <std>
 8007718:	20000588 	.word	0x20000588
 800771c:	20000450 	.word	0x20000450
 8007720:	08007691 	.word	0x08007691

08007724 <__sfp_lock_acquire>:
 8007724:	4801      	ldr	r0, [pc, #4]	@ (800772c <__sfp_lock_acquire+0x8>)
 8007726:	f000 b876 	b.w	8007816 <__retarget_lock_acquire_recursive>
 800772a:	bf00      	nop
 800772c:	2000058d 	.word	0x2000058d

08007730 <__sfp_lock_release>:
 8007730:	4801      	ldr	r0, [pc, #4]	@ (8007738 <__sfp_lock_release+0x8>)
 8007732:	f000 b871 	b.w	8007818 <__retarget_lock_release_recursive>
 8007736:	bf00      	nop
 8007738:	2000058d 	.word	0x2000058d

0800773c <__sinit>:
 800773c:	b510      	push	{r4, lr}
 800773e:	4604      	mov	r4, r0
 8007740:	f7ff fff0 	bl	8007724 <__sfp_lock_acquire>
 8007744:	6a23      	ldr	r3, [r4, #32]
 8007746:	b11b      	cbz	r3, 8007750 <__sinit+0x14>
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f7ff bff0 	b.w	8007730 <__sfp_lock_release>
 8007750:	4b04      	ldr	r3, [pc, #16]	@ (8007764 <__sinit+0x28>)
 8007752:	6223      	str	r3, [r4, #32]
 8007754:	4b04      	ldr	r3, [pc, #16]	@ (8007768 <__sinit+0x2c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1f5      	bne.n	8007748 <__sinit+0xc>
 800775c:	f7ff ffc4 	bl	80076e8 <global_stdio_init.part.0>
 8007760:	e7f2      	b.n	8007748 <__sinit+0xc>
 8007762:	bf00      	nop
 8007764:	080076a9 	.word	0x080076a9
 8007768:	20000588 	.word	0x20000588

0800776c <_fwalk_sglue>:
 800776c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007770:	4607      	mov	r7, r0
 8007772:	4688      	mov	r8, r1
 8007774:	4614      	mov	r4, r2
 8007776:	2600      	movs	r6, #0
 8007778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800777c:	f1b9 0901 	subs.w	r9, r9, #1
 8007780:	d505      	bpl.n	800778e <_fwalk_sglue+0x22>
 8007782:	6824      	ldr	r4, [r4, #0]
 8007784:	2c00      	cmp	r4, #0
 8007786:	d1f7      	bne.n	8007778 <_fwalk_sglue+0xc>
 8007788:	4630      	mov	r0, r6
 800778a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778e:	89ab      	ldrh	r3, [r5, #12]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d907      	bls.n	80077a4 <_fwalk_sglue+0x38>
 8007794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007798:	3301      	adds	r3, #1
 800779a:	d003      	beq.n	80077a4 <_fwalk_sglue+0x38>
 800779c:	4629      	mov	r1, r5
 800779e:	4638      	mov	r0, r7
 80077a0:	47c0      	blx	r8
 80077a2:	4306      	orrs	r6, r0
 80077a4:	3568      	adds	r5, #104	@ 0x68
 80077a6:	e7e9      	b.n	800777c <_fwalk_sglue+0x10>

080077a8 <memset>:
 80077a8:	4402      	add	r2, r0
 80077aa:	4603      	mov	r3, r0
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d100      	bne.n	80077b2 <memset+0xa>
 80077b0:	4770      	bx	lr
 80077b2:	f803 1b01 	strb.w	r1, [r3], #1
 80077b6:	e7f9      	b.n	80077ac <memset+0x4>

080077b8 <_localeconv_r>:
 80077b8:	4800      	ldr	r0, [pc, #0]	@ (80077bc <_localeconv_r+0x4>)
 80077ba:	4770      	bx	lr
 80077bc:	20000158 	.word	0x20000158

080077c0 <__errno>:
 80077c0:	4b01      	ldr	r3, [pc, #4]	@ (80077c8 <__errno+0x8>)
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20000018 	.word	0x20000018

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007804 <__libc_init_array+0x38>)
 80077d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007808 <__libc_init_array+0x3c>)
 80077d2:	1b64      	subs	r4, r4, r5
 80077d4:	10a4      	asrs	r4, r4, #2
 80077d6:	2600      	movs	r6, #0
 80077d8:	42a6      	cmp	r6, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	4d0b      	ldr	r5, [pc, #44]	@ (800780c <__libc_init_array+0x40>)
 80077de:	4c0c      	ldr	r4, [pc, #48]	@ (8007810 <__libc_init_array+0x44>)
 80077e0:	f004 f87a 	bl	800b8d8 <_init>
 80077e4:	1b64      	subs	r4, r4, r5
 80077e6:	10a4      	asrs	r4, r4, #2
 80077e8:	2600      	movs	r6, #0
 80077ea:	42a6      	cmp	r6, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f4:	4798      	blx	r3
 80077f6:	3601      	adds	r6, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fe:	4798      	blx	r3
 8007800:	3601      	adds	r6, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	0800bfa8 	.word	0x0800bfa8
 8007808:	0800bfa8 	.word	0x0800bfa8
 800780c:	0800bfa8 	.word	0x0800bfa8
 8007810:	0800bfac 	.word	0x0800bfac

08007814 <__retarget_lock_init_recursive>:
 8007814:	4770      	bx	lr

08007816 <__retarget_lock_acquire_recursive>:
 8007816:	4770      	bx	lr

08007818 <__retarget_lock_release_recursive>:
 8007818:	4770      	bx	lr

0800781a <quorem>:
 800781a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781e:	6903      	ldr	r3, [r0, #16]
 8007820:	690c      	ldr	r4, [r1, #16]
 8007822:	42a3      	cmp	r3, r4
 8007824:	4607      	mov	r7, r0
 8007826:	db7e      	blt.n	8007926 <quorem+0x10c>
 8007828:	3c01      	subs	r4, #1
 800782a:	f101 0814 	add.w	r8, r1, #20
 800782e:	00a3      	lsls	r3, r4, #2
 8007830:	f100 0514 	add.w	r5, r0, #20
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007844:	3301      	adds	r3, #1
 8007846:	429a      	cmp	r2, r3
 8007848:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800784c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007850:	d32e      	bcc.n	80078b0 <quorem+0x96>
 8007852:	f04f 0a00 	mov.w	sl, #0
 8007856:	46c4      	mov	ip, r8
 8007858:	46ae      	mov	lr, r5
 800785a:	46d3      	mov	fp, sl
 800785c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007860:	b298      	uxth	r0, r3
 8007862:	fb06 a000 	mla	r0, r6, r0, sl
 8007866:	0c02      	lsrs	r2, r0, #16
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	fb06 2303 	mla	r3, r6, r3, r2
 800786e:	f8de 2000 	ldr.w	r2, [lr]
 8007872:	b280      	uxth	r0, r0
 8007874:	b292      	uxth	r2, r2
 8007876:	1a12      	subs	r2, r2, r0
 8007878:	445a      	add	r2, fp
 800787a:	f8de 0000 	ldr.w	r0, [lr]
 800787e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007882:	b29b      	uxth	r3, r3
 8007884:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007888:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800788c:	b292      	uxth	r2, r2
 800788e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007892:	45e1      	cmp	r9, ip
 8007894:	f84e 2b04 	str.w	r2, [lr], #4
 8007898:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800789c:	d2de      	bcs.n	800785c <quorem+0x42>
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	58eb      	ldr	r3, [r5, r3]
 80078a2:	b92b      	cbnz	r3, 80078b0 <quorem+0x96>
 80078a4:	9b01      	ldr	r3, [sp, #4]
 80078a6:	3b04      	subs	r3, #4
 80078a8:	429d      	cmp	r5, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	d32f      	bcc.n	800790e <quorem+0xf4>
 80078ae:	613c      	str	r4, [r7, #16]
 80078b0:	4638      	mov	r0, r7
 80078b2:	f001 fb35 	bl	8008f20 <__mcmp>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	db25      	blt.n	8007906 <quorem+0xec>
 80078ba:	4629      	mov	r1, r5
 80078bc:	2000      	movs	r0, #0
 80078be:	f858 2b04 	ldr.w	r2, [r8], #4
 80078c2:	f8d1 c000 	ldr.w	ip, [r1]
 80078c6:	fa1f fe82 	uxth.w	lr, r2
 80078ca:	fa1f f38c 	uxth.w	r3, ip
 80078ce:	eba3 030e 	sub.w	r3, r3, lr
 80078d2:	4403      	add	r3, r0
 80078d4:	0c12      	lsrs	r2, r2, #16
 80078d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078de:	b29b      	uxth	r3, r3
 80078e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078e4:	45c1      	cmp	r9, r8
 80078e6:	f841 3b04 	str.w	r3, [r1], #4
 80078ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078ee:	d2e6      	bcs.n	80078be <quorem+0xa4>
 80078f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078f8:	b922      	cbnz	r2, 8007904 <quorem+0xea>
 80078fa:	3b04      	subs	r3, #4
 80078fc:	429d      	cmp	r5, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	d30b      	bcc.n	800791a <quorem+0x100>
 8007902:	613c      	str	r4, [r7, #16]
 8007904:	3601      	adds	r6, #1
 8007906:	4630      	mov	r0, r6
 8007908:	b003      	add	sp, #12
 800790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	3b04      	subs	r3, #4
 8007912:	2a00      	cmp	r2, #0
 8007914:	d1cb      	bne.n	80078ae <quorem+0x94>
 8007916:	3c01      	subs	r4, #1
 8007918:	e7c6      	b.n	80078a8 <quorem+0x8e>
 800791a:	6812      	ldr	r2, [r2, #0]
 800791c:	3b04      	subs	r3, #4
 800791e:	2a00      	cmp	r2, #0
 8007920:	d1ef      	bne.n	8007902 <quorem+0xe8>
 8007922:	3c01      	subs	r4, #1
 8007924:	e7ea      	b.n	80078fc <quorem+0xe2>
 8007926:	2000      	movs	r0, #0
 8007928:	e7ee      	b.n	8007908 <quorem+0xee>
 800792a:	0000      	movs	r0, r0
 800792c:	0000      	movs	r0, r0
	...

08007930 <_dtoa_r>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	69c7      	ldr	r7, [r0, #28]
 8007936:	b099      	sub	sp, #100	@ 0x64
 8007938:	ed8d 0b02 	vstr	d0, [sp, #8]
 800793c:	ec55 4b10 	vmov	r4, r5, d0
 8007940:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007942:	9109      	str	r1, [sp, #36]	@ 0x24
 8007944:	4683      	mov	fp, r0
 8007946:	920e      	str	r2, [sp, #56]	@ 0x38
 8007948:	9313      	str	r3, [sp, #76]	@ 0x4c
 800794a:	b97f      	cbnz	r7, 800796c <_dtoa_r+0x3c>
 800794c:	2010      	movs	r0, #16
 800794e:	f000 ff0b 	bl	8008768 <malloc>
 8007952:	4602      	mov	r2, r0
 8007954:	f8cb 001c 	str.w	r0, [fp, #28]
 8007958:	b920      	cbnz	r0, 8007964 <_dtoa_r+0x34>
 800795a:	4ba7      	ldr	r3, [pc, #668]	@ (8007bf8 <_dtoa_r+0x2c8>)
 800795c:	21ef      	movs	r1, #239	@ 0xef
 800795e:	48a7      	ldr	r0, [pc, #668]	@ (8007bfc <_dtoa_r+0x2cc>)
 8007960:	f001 fcd6 	bl	8009310 <__assert_func>
 8007964:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007968:	6007      	str	r7, [r0, #0]
 800796a:	60c7      	str	r7, [r0, #12]
 800796c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007970:	6819      	ldr	r1, [r3, #0]
 8007972:	b159      	cbz	r1, 800798c <_dtoa_r+0x5c>
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	604a      	str	r2, [r1, #4]
 8007978:	2301      	movs	r3, #1
 800797a:	4093      	lsls	r3, r2
 800797c:	608b      	str	r3, [r1, #8]
 800797e:	4658      	mov	r0, fp
 8007980:	f001 f894 	bl	8008aac <_Bfree>
 8007984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	1e2b      	subs	r3, r5, #0
 800798e:	bfb9      	ittee	lt
 8007990:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007994:	9303      	strlt	r3, [sp, #12]
 8007996:	2300      	movge	r3, #0
 8007998:	6033      	strge	r3, [r6, #0]
 800799a:	9f03      	ldr	r7, [sp, #12]
 800799c:	4b98      	ldr	r3, [pc, #608]	@ (8007c00 <_dtoa_r+0x2d0>)
 800799e:	bfbc      	itt	lt
 80079a0:	2201      	movlt	r2, #1
 80079a2:	6032      	strlt	r2, [r6, #0]
 80079a4:	43bb      	bics	r3, r7
 80079a6:	d112      	bne.n	80079ce <_dtoa_r+0x9e>
 80079a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079b4:	4323      	orrs	r3, r4
 80079b6:	f000 854d 	beq.w	8008454 <_dtoa_r+0xb24>
 80079ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007c14 <_dtoa_r+0x2e4>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 854f 	beq.w	8008464 <_dtoa_r+0xb34>
 80079c6:	f10a 0303 	add.w	r3, sl, #3
 80079ca:	f000 bd49 	b.w	8008460 <_dtoa_r+0xb30>
 80079ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	ec51 0b17 	vmov	r0, r1, d7
 80079d8:	2300      	movs	r3, #0
 80079da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80079de:	f7f9 f893 	bl	8000b08 <__aeabi_dcmpeq>
 80079e2:	4680      	mov	r8, r0
 80079e4:	b158      	cbz	r0, 80079fe <_dtoa_r+0xce>
 80079e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079e8:	2301      	movs	r3, #1
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079ee:	b113      	cbz	r3, 80079f6 <_dtoa_r+0xc6>
 80079f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079f2:	4b84      	ldr	r3, [pc, #528]	@ (8007c04 <_dtoa_r+0x2d4>)
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007c18 <_dtoa_r+0x2e8>
 80079fa:	f000 bd33 	b.w	8008464 <_dtoa_r+0xb34>
 80079fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a02:	aa16      	add	r2, sp, #88	@ 0x58
 8007a04:	a917      	add	r1, sp, #92	@ 0x5c
 8007a06:	4658      	mov	r0, fp
 8007a08:	f001 fb3a 	bl	8009080 <__d2b>
 8007a0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a10:	4681      	mov	r9, r0
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	d077      	beq.n	8007b06 <_dtoa_r+0x1d6>
 8007a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a30:	4619      	mov	r1, r3
 8007a32:	2200      	movs	r2, #0
 8007a34:	4b74      	ldr	r3, [pc, #464]	@ (8007c08 <_dtoa_r+0x2d8>)
 8007a36:	f7f8 fc47 	bl	80002c8 <__aeabi_dsub>
 8007a3a:	a369      	add	r3, pc, #420	@ (adr r3, 8007be0 <_dtoa_r+0x2b0>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 fdfa 	bl	8000638 <__aeabi_dmul>
 8007a44:	a368      	add	r3, pc, #416	@ (adr r3, 8007be8 <_dtoa_r+0x2b8>)
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	f7f8 fc3f 	bl	80002cc <__adddf3>
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4630      	mov	r0, r6
 8007a52:	460d      	mov	r5, r1
 8007a54:	f7f8 fd86 	bl	8000564 <__aeabi_i2d>
 8007a58:	a365      	add	r3, pc, #404	@ (adr r3, 8007bf0 <_dtoa_r+0x2c0>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fdeb 	bl	8000638 <__aeabi_dmul>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f7f8 fc2f 	bl	80002cc <__adddf3>
 8007a6e:	4604      	mov	r4, r0
 8007a70:	460d      	mov	r5, r1
 8007a72:	f7f9 f891 	bl	8000b98 <__aeabi_d2iz>
 8007a76:	2200      	movs	r2, #0
 8007a78:	4607      	mov	r7, r0
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f9 f84c 	bl	8000b1c <__aeabi_dcmplt>
 8007a84:	b140      	cbz	r0, 8007a98 <_dtoa_r+0x168>
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7f8 fd6c 	bl	8000564 <__aeabi_i2d>
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	462b      	mov	r3, r5
 8007a90:	f7f9 f83a 	bl	8000b08 <__aeabi_dcmpeq>
 8007a94:	b900      	cbnz	r0, 8007a98 <_dtoa_r+0x168>
 8007a96:	3f01      	subs	r7, #1
 8007a98:	2f16      	cmp	r7, #22
 8007a9a:	d851      	bhi.n	8007b40 <_dtoa_r+0x210>
 8007a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8007c0c <_dtoa_r+0x2dc>)
 8007a9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aaa:	f7f9 f837 	bl	8000b1c <__aeabi_dcmplt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d048      	beq.n	8007b44 <_dtoa_r+0x214>
 8007ab2:	3f01      	subs	r7, #1
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ab8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007aba:	1b9b      	subs	r3, r3, r6
 8007abc:	1e5a      	subs	r2, r3, #1
 8007abe:	bf44      	itt	mi
 8007ac0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007ac4:	2300      	movmi	r3, #0
 8007ac6:	9208      	str	r2, [sp, #32]
 8007ac8:	bf54      	ite	pl
 8007aca:	f04f 0800 	movpl.w	r8, #0
 8007ace:	9308      	strmi	r3, [sp, #32]
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	db39      	blt.n	8007b48 <_dtoa_r+0x218>
 8007ad4:	9b08      	ldr	r3, [sp, #32]
 8007ad6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ad8:	443b      	add	r3, r7
 8007ada:	9308      	str	r3, [sp, #32]
 8007adc:	2300      	movs	r3, #0
 8007ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae2:	2b09      	cmp	r3, #9
 8007ae4:	d864      	bhi.n	8007bb0 <_dtoa_r+0x280>
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	bfc4      	itt	gt
 8007aea:	3b04      	subgt	r3, #4
 8007aec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af0:	f1a3 0302 	sub.w	r3, r3, #2
 8007af4:	bfcc      	ite	gt
 8007af6:	2400      	movgt	r4, #0
 8007af8:	2401      	movle	r4, #1
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d863      	bhi.n	8007bc6 <_dtoa_r+0x296>
 8007afe:	e8df f003 	tbb	[pc, r3]
 8007b02:	372a      	.short	0x372a
 8007b04:	5535      	.short	0x5535
 8007b06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007b0a:	441e      	add	r6, r3
 8007b0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	bfc1      	itttt	gt
 8007b14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b18:	409f      	lslgt	r7, r3
 8007b1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b22:	bfd6      	itet	le
 8007b24:	f1c3 0320 	rsble	r3, r3, #32
 8007b28:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b2c:	fa04 f003 	lslle.w	r0, r4, r3
 8007b30:	f7f8 fd08 	bl	8000544 <__aeabi_ui2d>
 8007b34:	2201      	movs	r2, #1
 8007b36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b3a:	3e01      	subs	r6, #1
 8007b3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b3e:	e777      	b.n	8007a30 <_dtoa_r+0x100>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e7b8      	b.n	8007ab6 <_dtoa_r+0x186>
 8007b44:	9012      	str	r0, [sp, #72]	@ 0x48
 8007b46:	e7b7      	b.n	8007ab8 <_dtoa_r+0x188>
 8007b48:	427b      	negs	r3, r7
 8007b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	eba8 0807 	sub.w	r8, r8, r7
 8007b52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b54:	e7c4      	b.n	8007ae0 <_dtoa_r+0x1b0>
 8007b56:	2300      	movs	r3, #0
 8007b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dc35      	bgt.n	8007bcc <_dtoa_r+0x29c>
 8007b60:	2301      	movs	r3, #1
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	9307      	str	r3, [sp, #28]
 8007b66:	461a      	mov	r2, r3
 8007b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b6a:	e00b      	b.n	8007b84 <_dtoa_r+0x254>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e7f3      	b.n	8007b58 <_dtoa_r+0x228>
 8007b70:	2300      	movs	r3, #0
 8007b72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	9307      	str	r3, [sp, #28]
 8007b80:	bfb8      	it	lt
 8007b82:	2301      	movlt	r3, #1
 8007b84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b88:	2100      	movs	r1, #0
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	f102 0514 	add.w	r5, r2, #20
 8007b90:	429d      	cmp	r5, r3
 8007b92:	d91f      	bls.n	8007bd4 <_dtoa_r+0x2a4>
 8007b94:	6041      	str	r1, [r0, #4]
 8007b96:	4658      	mov	r0, fp
 8007b98:	f000 ff48 	bl	8008a2c <_Balloc>
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d13c      	bne.n	8007c1c <_dtoa_r+0x2ec>
 8007ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8007c10 <_dtoa_r+0x2e0>)
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007baa:	e6d8      	b.n	800795e <_dtoa_r+0x2e>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e7e0      	b.n	8007b72 <_dtoa_r+0x242>
 8007bb0:	2401      	movs	r4, #1
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	9307      	str	r3, [sp, #28]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2312      	movs	r3, #18
 8007bc4:	e7d0      	b.n	8007b68 <_dtoa_r+0x238>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bca:	e7f5      	b.n	8007bb8 <_dtoa_r+0x288>
 8007bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	9307      	str	r3, [sp, #28]
 8007bd2:	e7d7      	b.n	8007b84 <_dtoa_r+0x254>
 8007bd4:	3101      	adds	r1, #1
 8007bd6:	0052      	lsls	r2, r2, #1
 8007bd8:	e7d8      	b.n	8007b8c <_dtoa_r+0x25c>
 8007bda:	bf00      	nop
 8007bdc:	f3af 8000 	nop.w
 8007be0:	636f4361 	.word	0x636f4361
 8007be4:	3fd287a7 	.word	0x3fd287a7
 8007be8:	8b60c8b3 	.word	0x8b60c8b3
 8007bec:	3fc68a28 	.word	0x3fc68a28
 8007bf0:	509f79fb 	.word	0x509f79fb
 8007bf4:	3fd34413 	.word	0x3fd34413
 8007bf8:	0800ba69 	.word	0x0800ba69
 8007bfc:	0800ba80 	.word	0x0800ba80
 8007c00:	7ff00000 	.word	0x7ff00000
 8007c04:	0800ba39 	.word	0x0800ba39
 8007c08:	3ff80000 	.word	0x3ff80000
 8007c0c:	0800bb88 	.word	0x0800bb88
 8007c10:	0800bad8 	.word	0x0800bad8
 8007c14:	0800ba65 	.word	0x0800ba65
 8007c18:	0800ba38 	.word	0x0800ba38
 8007c1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c20:	6018      	str	r0, [r3, #0]
 8007c22:	9b07      	ldr	r3, [sp, #28]
 8007c24:	2b0e      	cmp	r3, #14
 8007c26:	f200 80a4 	bhi.w	8007d72 <_dtoa_r+0x442>
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	f000 80a1 	beq.w	8007d72 <_dtoa_r+0x442>
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	dd33      	ble.n	8007c9c <_dtoa_r+0x36c>
 8007c34:	4bad      	ldr	r3, [pc, #692]	@ (8007eec <_dtoa_r+0x5bc>)
 8007c36:	f007 020f 	and.w	r2, r7, #15
 8007c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c3e:	ed93 7b00 	vldr	d7, [r3]
 8007c42:	05f8      	lsls	r0, r7, #23
 8007c44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c4c:	d516      	bpl.n	8007c7c <_dtoa_r+0x34c>
 8007c4e:	4ba8      	ldr	r3, [pc, #672]	@ (8007ef0 <_dtoa_r+0x5c0>)
 8007c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c58:	f7f8 fe18 	bl	800088c <__aeabi_ddiv>
 8007c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c60:	f004 040f 	and.w	r4, r4, #15
 8007c64:	2603      	movs	r6, #3
 8007c66:	4da2      	ldr	r5, [pc, #648]	@ (8007ef0 <_dtoa_r+0x5c0>)
 8007c68:	b954      	cbnz	r4, 8007c80 <_dtoa_r+0x350>
 8007c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c72:	f7f8 fe0b 	bl	800088c <__aeabi_ddiv>
 8007c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c7a:	e028      	b.n	8007cce <_dtoa_r+0x39e>
 8007c7c:	2602      	movs	r6, #2
 8007c7e:	e7f2      	b.n	8007c66 <_dtoa_r+0x336>
 8007c80:	07e1      	lsls	r1, r4, #31
 8007c82:	d508      	bpl.n	8007c96 <_dtoa_r+0x366>
 8007c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c8c:	f7f8 fcd4 	bl	8000638 <__aeabi_dmul>
 8007c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c94:	3601      	adds	r6, #1
 8007c96:	1064      	asrs	r4, r4, #1
 8007c98:	3508      	adds	r5, #8
 8007c9a:	e7e5      	b.n	8007c68 <_dtoa_r+0x338>
 8007c9c:	f000 80d2 	beq.w	8007e44 <_dtoa_r+0x514>
 8007ca0:	427c      	negs	r4, r7
 8007ca2:	4b92      	ldr	r3, [pc, #584]	@ (8007eec <_dtoa_r+0x5bc>)
 8007ca4:	4d92      	ldr	r5, [pc, #584]	@ (8007ef0 <_dtoa_r+0x5c0>)
 8007ca6:	f004 020f 	and.w	r2, r4, #15
 8007caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cb6:	f7f8 fcbf 	bl	8000638 <__aeabi_dmul>
 8007cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cbe:	1124      	asrs	r4, r4, #4
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2602      	movs	r6, #2
 8007cc4:	2c00      	cmp	r4, #0
 8007cc6:	f040 80b2 	bne.w	8007e2e <_dtoa_r+0x4fe>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1d3      	bne.n	8007c76 <_dtoa_r+0x346>
 8007cce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007cd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 80b7 	beq.w	8007e48 <_dtoa_r+0x518>
 8007cda:	4b86      	ldr	r3, [pc, #536]	@ (8007ef4 <_dtoa_r+0x5c4>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	f7f8 ff1b 	bl	8000b1c <__aeabi_dcmplt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f000 80ae 	beq.w	8007e48 <_dtoa_r+0x518>
 8007cec:	9b07      	ldr	r3, [sp, #28]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80aa 	beq.w	8007e48 <_dtoa_r+0x518>
 8007cf4:	9b00      	ldr	r3, [sp, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	dd37      	ble.n	8007d6a <_dtoa_r+0x43a>
 8007cfa:	1e7b      	subs	r3, r7, #1
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4b7d      	ldr	r3, [pc, #500]	@ (8007ef8 <_dtoa_r+0x5c8>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 fc97 	bl	8000638 <__aeabi_dmul>
 8007d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0e:	9c00      	ldr	r4, [sp, #0]
 8007d10:	3601      	adds	r6, #1
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7f8 fc26 	bl	8000564 <__aeabi_i2d>
 8007d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d1c:	f7f8 fc8c 	bl	8000638 <__aeabi_dmul>
 8007d20:	4b76      	ldr	r3, [pc, #472]	@ (8007efc <_dtoa_r+0x5cc>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	f7f8 fad2 	bl	80002cc <__adddf3>
 8007d28:	4605      	mov	r5, r0
 8007d2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d2e:	2c00      	cmp	r4, #0
 8007d30:	f040 808d 	bne.w	8007e4e <_dtoa_r+0x51e>
 8007d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d38:	4b71      	ldr	r3, [pc, #452]	@ (8007f00 <_dtoa_r+0x5d0>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f7f8 fac4 	bl	80002c8 <__aeabi_dsub>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d48:	462a      	mov	r2, r5
 8007d4a:	4633      	mov	r3, r6
 8007d4c:	f7f8 ff04 	bl	8000b58 <__aeabi_dcmpgt>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	f040 828b 	bne.w	800826c <_dtoa_r+0x93c>
 8007d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d60:	f7f8 fedc 	bl	8000b1c <__aeabi_dcmplt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	f040 8128 	bne.w	8007fba <_dtoa_r+0x68a>
 8007d6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f2c0 815a 	blt.w	800802e <_dtoa_r+0x6fe>
 8007d7a:	2f0e      	cmp	r7, #14
 8007d7c:	f300 8157 	bgt.w	800802e <_dtoa_r+0x6fe>
 8007d80:	4b5a      	ldr	r3, [pc, #360]	@ (8007eec <_dtoa_r+0x5bc>)
 8007d82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d86:	ed93 7b00 	vldr	d7, [r3]
 8007d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	ed8d 7b00 	vstr	d7, [sp]
 8007d92:	da03      	bge.n	8007d9c <_dtoa_r+0x46c>
 8007d94:	9b07      	ldr	r3, [sp, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f340 8101 	ble.w	8007f9e <_dtoa_r+0x66e>
 8007d9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007da0:	4656      	mov	r6, sl
 8007da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007da6:	4620      	mov	r0, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fd6f 	bl	800088c <__aeabi_ddiv>
 8007dae:	f7f8 fef3 	bl	8000b98 <__aeabi_d2iz>
 8007db2:	4680      	mov	r8, r0
 8007db4:	f7f8 fbd6 	bl	8000564 <__aeabi_i2d>
 8007db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dbc:	f7f8 fc3c 	bl	8000638 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007dcc:	f7f8 fa7c 	bl	80002c8 <__aeabi_dsub>
 8007dd0:	f806 4b01 	strb.w	r4, [r6], #1
 8007dd4:	9d07      	ldr	r5, [sp, #28]
 8007dd6:	eba6 040a 	sub.w	r4, r6, sl
 8007dda:	42a5      	cmp	r5, r4
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	f040 8117 	bne.w	8008012 <_dtoa_r+0x6e2>
 8007de4:	f7f8 fa72 	bl	80002cc <__adddf3>
 8007de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dec:	4604      	mov	r4, r0
 8007dee:	460d      	mov	r5, r1
 8007df0:	f7f8 feb2 	bl	8000b58 <__aeabi_dcmpgt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f040 80f9 	bne.w	8007fec <_dtoa_r+0x6bc>
 8007dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 fe81 	bl	8000b08 <__aeabi_dcmpeq>
 8007e06:	b118      	cbz	r0, 8007e10 <_dtoa_r+0x4e0>
 8007e08:	f018 0f01 	tst.w	r8, #1
 8007e0c:	f040 80ee 	bne.w	8007fec <_dtoa_r+0x6bc>
 8007e10:	4649      	mov	r1, r9
 8007e12:	4658      	mov	r0, fp
 8007e14:	f000 fe4a 	bl	8008aac <_Bfree>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	7033      	strb	r3, [r6, #0]
 8007e1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e1e:	3701      	adds	r7, #1
 8007e20:	601f      	str	r7, [r3, #0]
 8007e22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 831d 	beq.w	8008464 <_dtoa_r+0xb34>
 8007e2a:	601e      	str	r6, [r3, #0]
 8007e2c:	e31a      	b.n	8008464 <_dtoa_r+0xb34>
 8007e2e:	07e2      	lsls	r2, r4, #31
 8007e30:	d505      	bpl.n	8007e3e <_dtoa_r+0x50e>
 8007e32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e36:	f7f8 fbff 	bl	8000638 <__aeabi_dmul>
 8007e3a:	3601      	adds	r6, #1
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	1064      	asrs	r4, r4, #1
 8007e40:	3508      	adds	r5, #8
 8007e42:	e73f      	b.n	8007cc4 <_dtoa_r+0x394>
 8007e44:	2602      	movs	r6, #2
 8007e46:	e742      	b.n	8007cce <_dtoa_r+0x39e>
 8007e48:	9c07      	ldr	r4, [sp, #28]
 8007e4a:	9704      	str	r7, [sp, #16]
 8007e4c:	e761      	b.n	8007d12 <_dtoa_r+0x3e2>
 8007e4e:	4b27      	ldr	r3, [pc, #156]	@ (8007eec <_dtoa_r+0x5bc>)
 8007e50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e5a:	4454      	add	r4, sl
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d053      	beq.n	8007f08 <_dtoa_r+0x5d8>
 8007e60:	4928      	ldr	r1, [pc, #160]	@ (8007f04 <_dtoa_r+0x5d4>)
 8007e62:	2000      	movs	r0, #0
 8007e64:	f7f8 fd12 	bl	800088c <__aeabi_ddiv>
 8007e68:	4633      	mov	r3, r6
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	f7f8 fa2c 	bl	80002c8 <__aeabi_dsub>
 8007e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e74:	4656      	mov	r6, sl
 8007e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e7a:	f7f8 fe8d 	bl	8000b98 <__aeabi_d2iz>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	f7f8 fb70 	bl	8000564 <__aeabi_i2d>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8c:	f7f8 fa1c 	bl	80002c8 <__aeabi_dsub>
 8007e90:	3530      	adds	r5, #48	@ 0x30
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e9a:	f806 5b01 	strb.w	r5, [r6], #1
 8007e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ea2:	f7f8 fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d171      	bne.n	8007f8e <_dtoa_r+0x65e>
 8007eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eae:	4911      	ldr	r1, [pc, #68]	@ (8007ef4 <_dtoa_r+0x5c4>)
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f7f8 fa09 	bl	80002c8 <__aeabi_dsub>
 8007eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eba:	f7f8 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f040 8095 	bne.w	8007fee <_dtoa_r+0x6be>
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	f43f af50 	beq.w	8007d6a <_dtoa_r+0x43a>
 8007eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ece:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef8 <_dtoa_r+0x5c8>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f7f8 fbb1 	bl	8000638 <__aeabi_dmul>
 8007ed6:	4b08      	ldr	r3, [pc, #32]	@ (8007ef8 <_dtoa_r+0x5c8>)
 8007ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007edc:	2200      	movs	r2, #0
 8007ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee2:	f7f8 fba9 	bl	8000638 <__aeabi_dmul>
 8007ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eea:	e7c4      	b.n	8007e76 <_dtoa_r+0x546>
 8007eec:	0800bb88 	.word	0x0800bb88
 8007ef0:	0800bb60 	.word	0x0800bb60
 8007ef4:	3ff00000 	.word	0x3ff00000
 8007ef8:	40240000 	.word	0x40240000
 8007efc:	401c0000 	.word	0x401c0000
 8007f00:	40140000 	.word	0x40140000
 8007f04:	3fe00000 	.word	0x3fe00000
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f7f8 fb94 	bl	8000638 <__aeabi_dmul>
 8007f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f14:	9415      	str	r4, [sp, #84]	@ 0x54
 8007f16:	4656      	mov	r6, sl
 8007f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f1c:	f7f8 fe3c 	bl	8000b98 <__aeabi_d2iz>
 8007f20:	4605      	mov	r5, r0
 8007f22:	f7f8 fb1f 	bl	8000564 <__aeabi_i2d>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f2e:	f7f8 f9cb 	bl	80002c8 <__aeabi_dsub>
 8007f32:	3530      	adds	r5, #48	@ 0x30
 8007f34:	f806 5b01 	strb.w	r5, [r6], #1
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	d124      	bne.n	8007f92 <_dtoa_r+0x662>
 8007f48:	4bac      	ldr	r3, [pc, #688]	@ (80081fc <_dtoa_r+0x8cc>)
 8007f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f4e:	f7f8 f9bd 	bl	80002cc <__adddf3>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f5a:	f7f8 fdfd 	bl	8000b58 <__aeabi_dcmpgt>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d145      	bne.n	8007fee <_dtoa_r+0x6be>
 8007f62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f66:	49a5      	ldr	r1, [pc, #660]	@ (80081fc <_dtoa_r+0x8cc>)
 8007f68:	2000      	movs	r0, #0
 8007f6a:	f7f8 f9ad 	bl	80002c8 <__aeabi_dsub>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f76:	f7f8 fdd1 	bl	8000b1c <__aeabi_dcmplt>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f43f aef5 	beq.w	8007d6a <_dtoa_r+0x43a>
 8007f80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f82:	1e73      	subs	r3, r6, #1
 8007f84:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f8a:	2b30      	cmp	r3, #48	@ 0x30
 8007f8c:	d0f8      	beq.n	8007f80 <_dtoa_r+0x650>
 8007f8e:	9f04      	ldr	r7, [sp, #16]
 8007f90:	e73e      	b.n	8007e10 <_dtoa_r+0x4e0>
 8007f92:	4b9b      	ldr	r3, [pc, #620]	@ (8008200 <_dtoa_r+0x8d0>)
 8007f94:	f7f8 fb50 	bl	8000638 <__aeabi_dmul>
 8007f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f9c:	e7bc      	b.n	8007f18 <_dtoa_r+0x5e8>
 8007f9e:	d10c      	bne.n	8007fba <_dtoa_r+0x68a>
 8007fa0:	4b98      	ldr	r3, [pc, #608]	@ (8008204 <_dtoa_r+0x8d4>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fa8:	f7f8 fb46 	bl	8000638 <__aeabi_dmul>
 8007fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fb0:	f7f8 fdc8 	bl	8000b44 <__aeabi_dcmpge>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	f000 8157 	beq.w	8008268 <_dtoa_r+0x938>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	4625      	mov	r5, r4
 8007fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	9304      	str	r3, [sp, #16]
 8007fc4:	4656      	mov	r6, sl
 8007fc6:	2700      	movs	r7, #0
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4658      	mov	r0, fp
 8007fcc:	f000 fd6e 	bl	8008aac <_Bfree>
 8007fd0:	2d00      	cmp	r5, #0
 8007fd2:	d0dc      	beq.n	8007f8e <_dtoa_r+0x65e>
 8007fd4:	b12f      	cbz	r7, 8007fe2 <_dtoa_r+0x6b2>
 8007fd6:	42af      	cmp	r7, r5
 8007fd8:	d003      	beq.n	8007fe2 <_dtoa_r+0x6b2>
 8007fda:	4639      	mov	r1, r7
 8007fdc:	4658      	mov	r0, fp
 8007fde:	f000 fd65 	bl	8008aac <_Bfree>
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4658      	mov	r0, fp
 8007fe6:	f000 fd61 	bl	8008aac <_Bfree>
 8007fea:	e7d0      	b.n	8007f8e <_dtoa_r+0x65e>
 8007fec:	9704      	str	r7, [sp, #16]
 8007fee:	4633      	mov	r3, r6
 8007ff0:	461e      	mov	r6, r3
 8007ff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ff6:	2a39      	cmp	r2, #57	@ 0x39
 8007ff8:	d107      	bne.n	800800a <_dtoa_r+0x6da>
 8007ffa:	459a      	cmp	sl, r3
 8007ffc:	d1f8      	bne.n	8007ff0 <_dtoa_r+0x6c0>
 8007ffe:	9a04      	ldr	r2, [sp, #16]
 8008000:	3201      	adds	r2, #1
 8008002:	9204      	str	r2, [sp, #16]
 8008004:	2230      	movs	r2, #48	@ 0x30
 8008006:	f88a 2000 	strb.w	r2, [sl]
 800800a:	781a      	ldrb	r2, [r3, #0]
 800800c:	3201      	adds	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e7bd      	b.n	8007f8e <_dtoa_r+0x65e>
 8008012:	4b7b      	ldr	r3, [pc, #492]	@ (8008200 <_dtoa_r+0x8d0>)
 8008014:	2200      	movs	r2, #0
 8008016:	f7f8 fb0f 	bl	8000638 <__aeabi_dmul>
 800801a:	2200      	movs	r2, #0
 800801c:	2300      	movs	r3, #0
 800801e:	4604      	mov	r4, r0
 8008020:	460d      	mov	r5, r1
 8008022:	f7f8 fd71 	bl	8000b08 <__aeabi_dcmpeq>
 8008026:	2800      	cmp	r0, #0
 8008028:	f43f aebb 	beq.w	8007da2 <_dtoa_r+0x472>
 800802c:	e6f0      	b.n	8007e10 <_dtoa_r+0x4e0>
 800802e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008030:	2a00      	cmp	r2, #0
 8008032:	f000 80db 	beq.w	80081ec <_dtoa_r+0x8bc>
 8008036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008038:	2a01      	cmp	r2, #1
 800803a:	f300 80bf 	bgt.w	80081bc <_dtoa_r+0x88c>
 800803e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008040:	2a00      	cmp	r2, #0
 8008042:	f000 80b7 	beq.w	80081b4 <_dtoa_r+0x884>
 8008046:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800804a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800804c:	4646      	mov	r6, r8
 800804e:	9a08      	ldr	r2, [sp, #32]
 8008050:	2101      	movs	r1, #1
 8008052:	441a      	add	r2, r3
 8008054:	4658      	mov	r0, fp
 8008056:	4498      	add	r8, r3
 8008058:	9208      	str	r2, [sp, #32]
 800805a:	f000 fddb 	bl	8008c14 <__i2b>
 800805e:	4605      	mov	r5, r0
 8008060:	b15e      	cbz	r6, 800807a <_dtoa_r+0x74a>
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	2b00      	cmp	r3, #0
 8008066:	dd08      	ble.n	800807a <_dtoa_r+0x74a>
 8008068:	42b3      	cmp	r3, r6
 800806a:	9a08      	ldr	r2, [sp, #32]
 800806c:	bfa8      	it	ge
 800806e:	4633      	movge	r3, r6
 8008070:	eba8 0803 	sub.w	r8, r8, r3
 8008074:	1af6      	subs	r6, r6, r3
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	9308      	str	r3, [sp, #32]
 800807a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800807c:	b1f3      	cbz	r3, 80080bc <_dtoa_r+0x78c>
 800807e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80b7 	beq.w	80081f4 <_dtoa_r+0x8c4>
 8008086:	b18c      	cbz	r4, 80080ac <_dtoa_r+0x77c>
 8008088:	4629      	mov	r1, r5
 800808a:	4622      	mov	r2, r4
 800808c:	4658      	mov	r0, fp
 800808e:	f000 fe81 	bl	8008d94 <__pow5mult>
 8008092:	464a      	mov	r2, r9
 8008094:	4601      	mov	r1, r0
 8008096:	4605      	mov	r5, r0
 8008098:	4658      	mov	r0, fp
 800809a:	f000 fdd1 	bl	8008c40 <__multiply>
 800809e:	4649      	mov	r1, r9
 80080a0:	9004      	str	r0, [sp, #16]
 80080a2:	4658      	mov	r0, fp
 80080a4:	f000 fd02 	bl	8008aac <_Bfree>
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	4699      	mov	r9, r3
 80080ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ae:	1b1a      	subs	r2, r3, r4
 80080b0:	d004      	beq.n	80080bc <_dtoa_r+0x78c>
 80080b2:	4649      	mov	r1, r9
 80080b4:	4658      	mov	r0, fp
 80080b6:	f000 fe6d 	bl	8008d94 <__pow5mult>
 80080ba:	4681      	mov	r9, r0
 80080bc:	2101      	movs	r1, #1
 80080be:	4658      	mov	r0, fp
 80080c0:	f000 fda8 	bl	8008c14 <__i2b>
 80080c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080c6:	4604      	mov	r4, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 81cf 	beq.w	800846c <_dtoa_r+0xb3c>
 80080ce:	461a      	mov	r2, r3
 80080d0:	4601      	mov	r1, r0
 80080d2:	4658      	mov	r0, fp
 80080d4:	f000 fe5e 	bl	8008d94 <__pow5mult>
 80080d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080da:	2b01      	cmp	r3, #1
 80080dc:	4604      	mov	r4, r0
 80080de:	f300 8095 	bgt.w	800820c <_dtoa_r+0x8dc>
 80080e2:	9b02      	ldr	r3, [sp, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 8087 	bne.w	80081f8 <_dtoa_r+0x8c8>
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 8089 	bne.w	8008208 <_dtoa_r+0x8d8>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080fc:	0d1b      	lsrs	r3, r3, #20
 80080fe:	051b      	lsls	r3, r3, #20
 8008100:	b12b      	cbz	r3, 800810e <_dtoa_r+0x7de>
 8008102:	9b08      	ldr	r3, [sp, #32]
 8008104:	3301      	adds	r3, #1
 8008106:	9308      	str	r3, [sp, #32]
 8008108:	f108 0801 	add.w	r8, r8, #1
 800810c:	2301      	movs	r3, #1
 800810e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 81b0 	beq.w	8008478 <_dtoa_r+0xb48>
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800811e:	6918      	ldr	r0, [r3, #16]
 8008120:	f000 fd2c 	bl	8008b7c <__hi0bits>
 8008124:	f1c0 0020 	rsb	r0, r0, #32
 8008128:	9b08      	ldr	r3, [sp, #32]
 800812a:	4418      	add	r0, r3
 800812c:	f010 001f 	ands.w	r0, r0, #31
 8008130:	d077      	beq.n	8008222 <_dtoa_r+0x8f2>
 8008132:	f1c0 0320 	rsb	r3, r0, #32
 8008136:	2b04      	cmp	r3, #4
 8008138:	dd6b      	ble.n	8008212 <_dtoa_r+0x8e2>
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	f1c0 001c 	rsb	r0, r0, #28
 8008140:	4403      	add	r3, r0
 8008142:	4480      	add	r8, r0
 8008144:	4406      	add	r6, r0
 8008146:	9308      	str	r3, [sp, #32]
 8008148:	f1b8 0f00 	cmp.w	r8, #0
 800814c:	dd05      	ble.n	800815a <_dtoa_r+0x82a>
 800814e:	4649      	mov	r1, r9
 8008150:	4642      	mov	r2, r8
 8008152:	4658      	mov	r0, fp
 8008154:	f000 fe78 	bl	8008e48 <__lshift>
 8008158:	4681      	mov	r9, r0
 800815a:	9b08      	ldr	r3, [sp, #32]
 800815c:	2b00      	cmp	r3, #0
 800815e:	dd05      	ble.n	800816c <_dtoa_r+0x83c>
 8008160:	4621      	mov	r1, r4
 8008162:	461a      	mov	r2, r3
 8008164:	4658      	mov	r0, fp
 8008166:	f000 fe6f 	bl	8008e48 <__lshift>
 800816a:	4604      	mov	r4, r0
 800816c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800816e:	2b00      	cmp	r3, #0
 8008170:	d059      	beq.n	8008226 <_dtoa_r+0x8f6>
 8008172:	4621      	mov	r1, r4
 8008174:	4648      	mov	r0, r9
 8008176:	f000 fed3 	bl	8008f20 <__mcmp>
 800817a:	2800      	cmp	r0, #0
 800817c:	da53      	bge.n	8008226 <_dtoa_r+0x8f6>
 800817e:	1e7b      	subs	r3, r7, #1
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	4649      	mov	r1, r9
 8008184:	2300      	movs	r3, #0
 8008186:	220a      	movs	r2, #10
 8008188:	4658      	mov	r0, fp
 800818a:	f000 fcb1 	bl	8008af0 <__multadd>
 800818e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008190:	4681      	mov	r9, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8172 	beq.w	800847c <_dtoa_r+0xb4c>
 8008198:	2300      	movs	r3, #0
 800819a:	4629      	mov	r1, r5
 800819c:	220a      	movs	r2, #10
 800819e:	4658      	mov	r0, fp
 80081a0:	f000 fca6 	bl	8008af0 <__multadd>
 80081a4:	9b00      	ldr	r3, [sp, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	4605      	mov	r5, r0
 80081aa:	dc67      	bgt.n	800827c <_dtoa_r+0x94c>
 80081ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	dc41      	bgt.n	8008236 <_dtoa_r+0x906>
 80081b2:	e063      	b.n	800827c <_dtoa_r+0x94c>
 80081b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081ba:	e746      	b.n	800804a <_dtoa_r+0x71a>
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	1e5c      	subs	r4, r3, #1
 80081c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081c2:	42a3      	cmp	r3, r4
 80081c4:	bfbf      	itttt	lt
 80081c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80081c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80081ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80081cc:	1ae3      	sublt	r3, r4, r3
 80081ce:	bfb4      	ite	lt
 80081d0:	18d2      	addlt	r2, r2, r3
 80081d2:	1b1c      	subge	r4, r3, r4
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	bfbc      	itt	lt
 80081d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80081da:	2400      	movlt	r4, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfb5      	itete	lt
 80081e0:	eba8 0603 	sublt.w	r6, r8, r3
 80081e4:	9b07      	ldrge	r3, [sp, #28]
 80081e6:	2300      	movlt	r3, #0
 80081e8:	4646      	movge	r6, r8
 80081ea:	e730      	b.n	800804e <_dtoa_r+0x71e>
 80081ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80081f0:	4646      	mov	r6, r8
 80081f2:	e735      	b.n	8008060 <_dtoa_r+0x730>
 80081f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081f6:	e75c      	b.n	80080b2 <_dtoa_r+0x782>
 80081f8:	2300      	movs	r3, #0
 80081fa:	e788      	b.n	800810e <_dtoa_r+0x7de>
 80081fc:	3fe00000 	.word	0x3fe00000
 8008200:	40240000 	.word	0x40240000
 8008204:	40140000 	.word	0x40140000
 8008208:	9b02      	ldr	r3, [sp, #8]
 800820a:	e780      	b.n	800810e <_dtoa_r+0x7de>
 800820c:	2300      	movs	r3, #0
 800820e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008210:	e782      	b.n	8008118 <_dtoa_r+0x7e8>
 8008212:	d099      	beq.n	8008148 <_dtoa_r+0x818>
 8008214:	9a08      	ldr	r2, [sp, #32]
 8008216:	331c      	adds	r3, #28
 8008218:	441a      	add	r2, r3
 800821a:	4498      	add	r8, r3
 800821c:	441e      	add	r6, r3
 800821e:	9208      	str	r2, [sp, #32]
 8008220:	e792      	b.n	8008148 <_dtoa_r+0x818>
 8008222:	4603      	mov	r3, r0
 8008224:	e7f6      	b.n	8008214 <_dtoa_r+0x8e4>
 8008226:	9b07      	ldr	r3, [sp, #28]
 8008228:	9704      	str	r7, [sp, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	dc20      	bgt.n	8008270 <_dtoa_r+0x940>
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008232:	2b02      	cmp	r3, #2
 8008234:	dd1e      	ble.n	8008274 <_dtoa_r+0x944>
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f aec0 	bne.w	8007fbe <_dtoa_r+0x68e>
 800823e:	4621      	mov	r1, r4
 8008240:	2205      	movs	r2, #5
 8008242:	4658      	mov	r0, fp
 8008244:	f000 fc54 	bl	8008af0 <__multadd>
 8008248:	4601      	mov	r1, r0
 800824a:	4604      	mov	r4, r0
 800824c:	4648      	mov	r0, r9
 800824e:	f000 fe67 	bl	8008f20 <__mcmp>
 8008252:	2800      	cmp	r0, #0
 8008254:	f77f aeb3 	ble.w	8007fbe <_dtoa_r+0x68e>
 8008258:	4656      	mov	r6, sl
 800825a:	2331      	movs	r3, #49	@ 0x31
 800825c:	f806 3b01 	strb.w	r3, [r6], #1
 8008260:	9b04      	ldr	r3, [sp, #16]
 8008262:	3301      	adds	r3, #1
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	e6ae      	b.n	8007fc6 <_dtoa_r+0x696>
 8008268:	9c07      	ldr	r4, [sp, #28]
 800826a:	9704      	str	r7, [sp, #16]
 800826c:	4625      	mov	r5, r4
 800826e:	e7f3      	b.n	8008258 <_dtoa_r+0x928>
 8008270:	9b07      	ldr	r3, [sp, #28]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 8104 	beq.w	8008484 <_dtoa_r+0xb54>
 800827c:	2e00      	cmp	r6, #0
 800827e:	dd05      	ble.n	800828c <_dtoa_r+0x95c>
 8008280:	4629      	mov	r1, r5
 8008282:	4632      	mov	r2, r6
 8008284:	4658      	mov	r0, fp
 8008286:	f000 fddf 	bl	8008e48 <__lshift>
 800828a:	4605      	mov	r5, r0
 800828c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d05a      	beq.n	8008348 <_dtoa_r+0xa18>
 8008292:	6869      	ldr	r1, [r5, #4]
 8008294:	4658      	mov	r0, fp
 8008296:	f000 fbc9 	bl	8008a2c <_Balloc>
 800829a:	4606      	mov	r6, r0
 800829c:	b928      	cbnz	r0, 80082aa <_dtoa_r+0x97a>
 800829e:	4b84      	ldr	r3, [pc, #528]	@ (80084b0 <_dtoa_r+0xb80>)
 80082a0:	4602      	mov	r2, r0
 80082a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082a6:	f7ff bb5a 	b.w	800795e <_dtoa_r+0x2e>
 80082aa:	692a      	ldr	r2, [r5, #16]
 80082ac:	3202      	adds	r2, #2
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	f105 010c 	add.w	r1, r5, #12
 80082b4:	300c      	adds	r0, #12
 80082b6:	f001 f81d 	bl	80092f4 <memcpy>
 80082ba:	2201      	movs	r2, #1
 80082bc:	4631      	mov	r1, r6
 80082be:	4658      	mov	r0, fp
 80082c0:	f000 fdc2 	bl	8008e48 <__lshift>
 80082c4:	f10a 0301 	add.w	r3, sl, #1
 80082c8:	9307      	str	r3, [sp, #28]
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	4453      	add	r3, sl
 80082ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082d0:	9b02      	ldr	r3, [sp, #8]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	462f      	mov	r7, r5
 80082d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082da:	4605      	mov	r5, r0
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	4621      	mov	r1, r4
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4648      	mov	r0, r9
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	f7ff fa98 	bl	800781a <quorem>
 80082ea:	4639      	mov	r1, r7
 80082ec:	9002      	str	r0, [sp, #8]
 80082ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082f2:	4648      	mov	r0, r9
 80082f4:	f000 fe14 	bl	8008f20 <__mcmp>
 80082f8:	462a      	mov	r2, r5
 80082fa:	9008      	str	r0, [sp, #32]
 80082fc:	4621      	mov	r1, r4
 80082fe:	4658      	mov	r0, fp
 8008300:	f000 fe2a 	bl	8008f58 <__mdiff>
 8008304:	68c2      	ldr	r2, [r0, #12]
 8008306:	4606      	mov	r6, r0
 8008308:	bb02      	cbnz	r2, 800834c <_dtoa_r+0xa1c>
 800830a:	4601      	mov	r1, r0
 800830c:	4648      	mov	r0, r9
 800830e:	f000 fe07 	bl	8008f20 <__mcmp>
 8008312:	4602      	mov	r2, r0
 8008314:	4631      	mov	r1, r6
 8008316:	4658      	mov	r0, fp
 8008318:	920e      	str	r2, [sp, #56]	@ 0x38
 800831a:	f000 fbc7 	bl	8008aac <_Bfree>
 800831e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008322:	9e07      	ldr	r6, [sp, #28]
 8008324:	ea43 0102 	orr.w	r1, r3, r2
 8008328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800832a:	4319      	orrs	r1, r3
 800832c:	d110      	bne.n	8008350 <_dtoa_r+0xa20>
 800832e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008332:	d029      	beq.n	8008388 <_dtoa_r+0xa58>
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd02      	ble.n	8008340 <_dtoa_r+0xa10>
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008340:	9b00      	ldr	r3, [sp, #0]
 8008342:	f883 8000 	strb.w	r8, [r3]
 8008346:	e63f      	b.n	8007fc8 <_dtoa_r+0x698>
 8008348:	4628      	mov	r0, r5
 800834a:	e7bb      	b.n	80082c4 <_dtoa_r+0x994>
 800834c:	2201      	movs	r2, #1
 800834e:	e7e1      	b.n	8008314 <_dtoa_r+0x9e4>
 8008350:	9b08      	ldr	r3, [sp, #32]
 8008352:	2b00      	cmp	r3, #0
 8008354:	db04      	blt.n	8008360 <_dtoa_r+0xa30>
 8008356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008358:	430b      	orrs	r3, r1
 800835a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800835c:	430b      	orrs	r3, r1
 800835e:	d120      	bne.n	80083a2 <_dtoa_r+0xa72>
 8008360:	2a00      	cmp	r2, #0
 8008362:	dded      	ble.n	8008340 <_dtoa_r+0xa10>
 8008364:	4649      	mov	r1, r9
 8008366:	2201      	movs	r2, #1
 8008368:	4658      	mov	r0, fp
 800836a:	f000 fd6d 	bl	8008e48 <__lshift>
 800836e:	4621      	mov	r1, r4
 8008370:	4681      	mov	r9, r0
 8008372:	f000 fdd5 	bl	8008f20 <__mcmp>
 8008376:	2800      	cmp	r0, #0
 8008378:	dc03      	bgt.n	8008382 <_dtoa_r+0xa52>
 800837a:	d1e1      	bne.n	8008340 <_dtoa_r+0xa10>
 800837c:	f018 0f01 	tst.w	r8, #1
 8008380:	d0de      	beq.n	8008340 <_dtoa_r+0xa10>
 8008382:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008386:	d1d8      	bne.n	800833a <_dtoa_r+0xa0a>
 8008388:	9a00      	ldr	r2, [sp, #0]
 800838a:	2339      	movs	r3, #57	@ 0x39
 800838c:	7013      	strb	r3, [r2, #0]
 800838e:	4633      	mov	r3, r6
 8008390:	461e      	mov	r6, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008398:	2a39      	cmp	r2, #57	@ 0x39
 800839a:	d052      	beq.n	8008442 <_dtoa_r+0xb12>
 800839c:	3201      	adds	r2, #1
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e612      	b.n	8007fc8 <_dtoa_r+0x698>
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	dd07      	ble.n	80083b6 <_dtoa_r+0xa86>
 80083a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083aa:	d0ed      	beq.n	8008388 <_dtoa_r+0xa58>
 80083ac:	9a00      	ldr	r2, [sp, #0]
 80083ae:	f108 0301 	add.w	r3, r8, #1
 80083b2:	7013      	strb	r3, [r2, #0]
 80083b4:	e608      	b.n	8007fc8 <_dtoa_r+0x698>
 80083b6:	9b07      	ldr	r3, [sp, #28]
 80083b8:	9a07      	ldr	r2, [sp, #28]
 80083ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d028      	beq.n	8008416 <_dtoa_r+0xae6>
 80083c4:	4649      	mov	r1, r9
 80083c6:	2300      	movs	r3, #0
 80083c8:	220a      	movs	r2, #10
 80083ca:	4658      	mov	r0, fp
 80083cc:	f000 fb90 	bl	8008af0 <__multadd>
 80083d0:	42af      	cmp	r7, r5
 80083d2:	4681      	mov	r9, r0
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	f04f 020a 	mov.w	r2, #10
 80083dc:	4639      	mov	r1, r7
 80083de:	4658      	mov	r0, fp
 80083e0:	d107      	bne.n	80083f2 <_dtoa_r+0xac2>
 80083e2:	f000 fb85 	bl	8008af0 <__multadd>
 80083e6:	4607      	mov	r7, r0
 80083e8:	4605      	mov	r5, r0
 80083ea:	9b07      	ldr	r3, [sp, #28]
 80083ec:	3301      	adds	r3, #1
 80083ee:	9307      	str	r3, [sp, #28]
 80083f0:	e774      	b.n	80082dc <_dtoa_r+0x9ac>
 80083f2:	f000 fb7d 	bl	8008af0 <__multadd>
 80083f6:	4629      	mov	r1, r5
 80083f8:	4607      	mov	r7, r0
 80083fa:	2300      	movs	r3, #0
 80083fc:	220a      	movs	r2, #10
 80083fe:	4658      	mov	r0, fp
 8008400:	f000 fb76 	bl	8008af0 <__multadd>
 8008404:	4605      	mov	r5, r0
 8008406:	e7f0      	b.n	80083ea <_dtoa_r+0xaba>
 8008408:	9b00      	ldr	r3, [sp, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfcc      	ite	gt
 800840e:	461e      	movgt	r6, r3
 8008410:	2601      	movle	r6, #1
 8008412:	4456      	add	r6, sl
 8008414:	2700      	movs	r7, #0
 8008416:	4649      	mov	r1, r9
 8008418:	2201      	movs	r2, #1
 800841a:	4658      	mov	r0, fp
 800841c:	f000 fd14 	bl	8008e48 <__lshift>
 8008420:	4621      	mov	r1, r4
 8008422:	4681      	mov	r9, r0
 8008424:	f000 fd7c 	bl	8008f20 <__mcmp>
 8008428:	2800      	cmp	r0, #0
 800842a:	dcb0      	bgt.n	800838e <_dtoa_r+0xa5e>
 800842c:	d102      	bne.n	8008434 <_dtoa_r+0xb04>
 800842e:	f018 0f01 	tst.w	r8, #1
 8008432:	d1ac      	bne.n	800838e <_dtoa_r+0xa5e>
 8008434:	4633      	mov	r3, r6
 8008436:	461e      	mov	r6, r3
 8008438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800843c:	2a30      	cmp	r2, #48	@ 0x30
 800843e:	d0fa      	beq.n	8008436 <_dtoa_r+0xb06>
 8008440:	e5c2      	b.n	8007fc8 <_dtoa_r+0x698>
 8008442:	459a      	cmp	sl, r3
 8008444:	d1a4      	bne.n	8008390 <_dtoa_r+0xa60>
 8008446:	9b04      	ldr	r3, [sp, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	9304      	str	r3, [sp, #16]
 800844c:	2331      	movs	r3, #49	@ 0x31
 800844e:	f88a 3000 	strb.w	r3, [sl]
 8008452:	e5b9      	b.n	8007fc8 <_dtoa_r+0x698>
 8008454:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008456:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80084b4 <_dtoa_r+0xb84>
 800845a:	b11b      	cbz	r3, 8008464 <_dtoa_r+0xb34>
 800845c:	f10a 0308 	add.w	r3, sl, #8
 8008460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4650      	mov	r0, sl
 8008466:	b019      	add	sp, #100	@ 0x64
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800846e:	2b01      	cmp	r3, #1
 8008470:	f77f ae37 	ble.w	80080e2 <_dtoa_r+0x7b2>
 8008474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008476:	930a      	str	r3, [sp, #40]	@ 0x28
 8008478:	2001      	movs	r0, #1
 800847a:	e655      	b.n	8008128 <_dtoa_r+0x7f8>
 800847c:	9b00      	ldr	r3, [sp, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f77f aed6 	ble.w	8008230 <_dtoa_r+0x900>
 8008484:	4656      	mov	r6, sl
 8008486:	4621      	mov	r1, r4
 8008488:	4648      	mov	r0, r9
 800848a:	f7ff f9c6 	bl	800781a <quorem>
 800848e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008492:	f806 8b01 	strb.w	r8, [r6], #1
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	eba6 020a 	sub.w	r2, r6, sl
 800849c:	4293      	cmp	r3, r2
 800849e:	ddb3      	ble.n	8008408 <_dtoa_r+0xad8>
 80084a0:	4649      	mov	r1, r9
 80084a2:	2300      	movs	r3, #0
 80084a4:	220a      	movs	r2, #10
 80084a6:	4658      	mov	r0, fp
 80084a8:	f000 fb22 	bl	8008af0 <__multadd>
 80084ac:	4681      	mov	r9, r0
 80084ae:	e7ea      	b.n	8008486 <_dtoa_r+0xb56>
 80084b0:	0800bad8 	.word	0x0800bad8
 80084b4:	0800ba5c 	.word	0x0800ba5c

080084b8 <__ssputs_r>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	688e      	ldr	r6, [r1, #8]
 80084be:	461f      	mov	r7, r3
 80084c0:	42be      	cmp	r6, r7
 80084c2:	680b      	ldr	r3, [r1, #0]
 80084c4:	4682      	mov	sl, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	4690      	mov	r8, r2
 80084ca:	d82d      	bhi.n	8008528 <__ssputs_r+0x70>
 80084cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084d4:	d026      	beq.n	8008524 <__ssputs_r+0x6c>
 80084d6:	6965      	ldr	r5, [r4, #20]
 80084d8:	6909      	ldr	r1, [r1, #16]
 80084da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084de:	eba3 0901 	sub.w	r9, r3, r1
 80084e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084e6:	1c7b      	adds	r3, r7, #1
 80084e8:	444b      	add	r3, r9
 80084ea:	106d      	asrs	r5, r5, #1
 80084ec:	429d      	cmp	r5, r3
 80084ee:	bf38      	it	cc
 80084f0:	461d      	movcc	r5, r3
 80084f2:	0553      	lsls	r3, r2, #21
 80084f4:	d527      	bpl.n	8008546 <__ssputs_r+0x8e>
 80084f6:	4629      	mov	r1, r5
 80084f8:	f000 f960 	bl	80087bc <_malloc_r>
 80084fc:	4606      	mov	r6, r0
 80084fe:	b360      	cbz	r0, 800855a <__ssputs_r+0xa2>
 8008500:	6921      	ldr	r1, [r4, #16]
 8008502:	464a      	mov	r2, r9
 8008504:	f000 fef6 	bl	80092f4 <memcpy>
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800850e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	6126      	str	r6, [r4, #16]
 8008516:	6165      	str	r5, [r4, #20]
 8008518:	444e      	add	r6, r9
 800851a:	eba5 0509 	sub.w	r5, r5, r9
 800851e:	6026      	str	r6, [r4, #0]
 8008520:	60a5      	str	r5, [r4, #8]
 8008522:	463e      	mov	r6, r7
 8008524:	42be      	cmp	r6, r7
 8008526:	d900      	bls.n	800852a <__ssputs_r+0x72>
 8008528:	463e      	mov	r6, r7
 800852a:	6820      	ldr	r0, [r4, #0]
 800852c:	4632      	mov	r2, r6
 800852e:	4641      	mov	r1, r8
 8008530:	f000 fe6f 	bl	8009212 <memmove>
 8008534:	68a3      	ldr	r3, [r4, #8]
 8008536:	1b9b      	subs	r3, r3, r6
 8008538:	60a3      	str	r3, [r4, #8]
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	4433      	add	r3, r6
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	2000      	movs	r0, #0
 8008542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008546:	462a      	mov	r2, r5
 8008548:	f000 fe35 	bl	80091b6 <_realloc_r>
 800854c:	4606      	mov	r6, r0
 800854e:	2800      	cmp	r0, #0
 8008550:	d1e0      	bne.n	8008514 <__ssputs_r+0x5c>
 8008552:	6921      	ldr	r1, [r4, #16]
 8008554:	4650      	mov	r0, sl
 8008556:	f000 ff0d 	bl	8009374 <_free_r>
 800855a:	230c      	movs	r3, #12
 800855c:	f8ca 3000 	str.w	r3, [sl]
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800856c:	e7e9      	b.n	8008542 <__ssputs_r+0x8a>
	...

08008570 <_svfiprintf_r>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	4698      	mov	r8, r3
 8008576:	898b      	ldrh	r3, [r1, #12]
 8008578:	061b      	lsls	r3, r3, #24
 800857a:	b09d      	sub	sp, #116	@ 0x74
 800857c:	4607      	mov	r7, r0
 800857e:	460d      	mov	r5, r1
 8008580:	4614      	mov	r4, r2
 8008582:	d510      	bpl.n	80085a6 <_svfiprintf_r+0x36>
 8008584:	690b      	ldr	r3, [r1, #16]
 8008586:	b973      	cbnz	r3, 80085a6 <_svfiprintf_r+0x36>
 8008588:	2140      	movs	r1, #64	@ 0x40
 800858a:	f000 f917 	bl	80087bc <_malloc_r>
 800858e:	6028      	str	r0, [r5, #0]
 8008590:	6128      	str	r0, [r5, #16]
 8008592:	b930      	cbnz	r0, 80085a2 <_svfiprintf_r+0x32>
 8008594:	230c      	movs	r3, #12
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800859c:	b01d      	add	sp, #116	@ 0x74
 800859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a2:	2340      	movs	r3, #64	@ 0x40
 80085a4:	616b      	str	r3, [r5, #20]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085aa:	2320      	movs	r3, #32
 80085ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b4:	2330      	movs	r3, #48	@ 0x30
 80085b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008754 <_svfiprintf_r+0x1e4>
 80085ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085be:	f04f 0901 	mov.w	r9, #1
 80085c2:	4623      	mov	r3, r4
 80085c4:	469a      	mov	sl, r3
 80085c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ca:	b10a      	cbz	r2, 80085d0 <_svfiprintf_r+0x60>
 80085cc:	2a25      	cmp	r2, #37	@ 0x25
 80085ce:	d1f9      	bne.n	80085c4 <_svfiprintf_r+0x54>
 80085d0:	ebba 0b04 	subs.w	fp, sl, r4
 80085d4:	d00b      	beq.n	80085ee <_svfiprintf_r+0x7e>
 80085d6:	465b      	mov	r3, fp
 80085d8:	4622      	mov	r2, r4
 80085da:	4629      	mov	r1, r5
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ff6b 	bl	80084b8 <__ssputs_r>
 80085e2:	3001      	adds	r0, #1
 80085e4:	f000 80a7 	beq.w	8008736 <_svfiprintf_r+0x1c6>
 80085e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ea:	445a      	add	r2, fp
 80085ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ee:	f89a 3000 	ldrb.w	r3, [sl]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 809f 	beq.w	8008736 <_svfiprintf_r+0x1c6>
 80085f8:	2300      	movs	r3, #0
 80085fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008602:	f10a 0a01 	add.w	sl, sl, #1
 8008606:	9304      	str	r3, [sp, #16]
 8008608:	9307      	str	r3, [sp, #28]
 800860a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800860e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008610:	4654      	mov	r4, sl
 8008612:	2205      	movs	r2, #5
 8008614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008618:	484e      	ldr	r0, [pc, #312]	@ (8008754 <_svfiprintf_r+0x1e4>)
 800861a:	f7f7 fdf9 	bl	8000210 <memchr>
 800861e:	9a04      	ldr	r2, [sp, #16]
 8008620:	b9d8      	cbnz	r0, 800865a <_svfiprintf_r+0xea>
 8008622:	06d0      	lsls	r0, r2, #27
 8008624:	bf44      	itt	mi
 8008626:	2320      	movmi	r3, #32
 8008628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800862c:	0711      	lsls	r1, r2, #28
 800862e:	bf44      	itt	mi
 8008630:	232b      	movmi	r3, #43	@ 0x2b
 8008632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008636:	f89a 3000 	ldrb.w	r3, [sl]
 800863a:	2b2a      	cmp	r3, #42	@ 0x2a
 800863c:	d015      	beq.n	800866a <_svfiprintf_r+0xfa>
 800863e:	9a07      	ldr	r2, [sp, #28]
 8008640:	4654      	mov	r4, sl
 8008642:	2000      	movs	r0, #0
 8008644:	f04f 0c0a 	mov.w	ip, #10
 8008648:	4621      	mov	r1, r4
 800864a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864e:	3b30      	subs	r3, #48	@ 0x30
 8008650:	2b09      	cmp	r3, #9
 8008652:	d94b      	bls.n	80086ec <_svfiprintf_r+0x17c>
 8008654:	b1b0      	cbz	r0, 8008684 <_svfiprintf_r+0x114>
 8008656:	9207      	str	r2, [sp, #28]
 8008658:	e014      	b.n	8008684 <_svfiprintf_r+0x114>
 800865a:	eba0 0308 	sub.w	r3, r0, r8
 800865e:	fa09 f303 	lsl.w	r3, r9, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	46a2      	mov	sl, r4
 8008668:	e7d2      	b.n	8008610 <_svfiprintf_r+0xa0>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	1d19      	adds	r1, r3, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	9103      	str	r1, [sp, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	bfbb      	ittet	lt
 8008676:	425b      	neglt	r3, r3
 8008678:	f042 0202 	orrlt.w	r2, r2, #2
 800867c:	9307      	strge	r3, [sp, #28]
 800867e:	9307      	strlt	r3, [sp, #28]
 8008680:	bfb8      	it	lt
 8008682:	9204      	strlt	r2, [sp, #16]
 8008684:	7823      	ldrb	r3, [r4, #0]
 8008686:	2b2e      	cmp	r3, #46	@ 0x2e
 8008688:	d10a      	bne.n	80086a0 <_svfiprintf_r+0x130>
 800868a:	7863      	ldrb	r3, [r4, #1]
 800868c:	2b2a      	cmp	r3, #42	@ 0x2a
 800868e:	d132      	bne.n	80086f6 <_svfiprintf_r+0x186>
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	1d1a      	adds	r2, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	9203      	str	r2, [sp, #12]
 8008698:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800869c:	3402      	adds	r4, #2
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008764 <_svfiprintf_r+0x1f4>
 80086a4:	7821      	ldrb	r1, [r4, #0]
 80086a6:	2203      	movs	r2, #3
 80086a8:	4650      	mov	r0, sl
 80086aa:	f7f7 fdb1 	bl	8000210 <memchr>
 80086ae:	b138      	cbz	r0, 80086c0 <_svfiprintf_r+0x150>
 80086b0:	9b04      	ldr	r3, [sp, #16]
 80086b2:	eba0 000a 	sub.w	r0, r0, sl
 80086b6:	2240      	movs	r2, #64	@ 0x40
 80086b8:	4082      	lsls	r2, r0
 80086ba:	4313      	orrs	r3, r2
 80086bc:	3401      	adds	r4, #1
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c4:	4824      	ldr	r0, [pc, #144]	@ (8008758 <_svfiprintf_r+0x1e8>)
 80086c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086ca:	2206      	movs	r2, #6
 80086cc:	f7f7 fda0 	bl	8000210 <memchr>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d036      	beq.n	8008742 <_svfiprintf_r+0x1d2>
 80086d4:	4b21      	ldr	r3, [pc, #132]	@ (800875c <_svfiprintf_r+0x1ec>)
 80086d6:	bb1b      	cbnz	r3, 8008720 <_svfiprintf_r+0x1b0>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	3307      	adds	r3, #7
 80086dc:	f023 0307 	bic.w	r3, r3, #7
 80086e0:	3308      	adds	r3, #8
 80086e2:	9303      	str	r3, [sp, #12]
 80086e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e6:	4433      	add	r3, r6
 80086e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ea:	e76a      	b.n	80085c2 <_svfiprintf_r+0x52>
 80086ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f0:	460c      	mov	r4, r1
 80086f2:	2001      	movs	r0, #1
 80086f4:	e7a8      	b.n	8008648 <_svfiprintf_r+0xd8>
 80086f6:	2300      	movs	r3, #0
 80086f8:	3401      	adds	r4, #1
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	4619      	mov	r1, r3
 80086fe:	f04f 0c0a 	mov.w	ip, #10
 8008702:	4620      	mov	r0, r4
 8008704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008708:	3a30      	subs	r2, #48	@ 0x30
 800870a:	2a09      	cmp	r2, #9
 800870c:	d903      	bls.n	8008716 <_svfiprintf_r+0x1a6>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0c6      	beq.n	80086a0 <_svfiprintf_r+0x130>
 8008712:	9105      	str	r1, [sp, #20]
 8008714:	e7c4      	b.n	80086a0 <_svfiprintf_r+0x130>
 8008716:	fb0c 2101 	mla	r1, ip, r1, r2
 800871a:	4604      	mov	r4, r0
 800871c:	2301      	movs	r3, #1
 800871e:	e7f0      	b.n	8008702 <_svfiprintf_r+0x192>
 8008720:	ab03      	add	r3, sp, #12
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	462a      	mov	r2, r5
 8008726:	4b0e      	ldr	r3, [pc, #56]	@ (8008760 <_svfiprintf_r+0x1f0>)
 8008728:	a904      	add	r1, sp, #16
 800872a:	4638      	mov	r0, r7
 800872c:	f7fe fba2 	bl	8006e74 <_printf_float>
 8008730:	1c42      	adds	r2, r0, #1
 8008732:	4606      	mov	r6, r0
 8008734:	d1d6      	bne.n	80086e4 <_svfiprintf_r+0x174>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	065b      	lsls	r3, r3, #25
 800873a:	f53f af2d 	bmi.w	8008598 <_svfiprintf_r+0x28>
 800873e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008740:	e72c      	b.n	800859c <_svfiprintf_r+0x2c>
 8008742:	ab03      	add	r3, sp, #12
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	462a      	mov	r2, r5
 8008748:	4b05      	ldr	r3, [pc, #20]	@ (8008760 <_svfiprintf_r+0x1f0>)
 800874a:	a904      	add	r1, sp, #16
 800874c:	4638      	mov	r0, r7
 800874e:	f7fe fe29 	bl	80073a4 <_printf_i>
 8008752:	e7ed      	b.n	8008730 <_svfiprintf_r+0x1c0>
 8008754:	0800bae9 	.word	0x0800bae9
 8008758:	0800baf3 	.word	0x0800baf3
 800875c:	08006e75 	.word	0x08006e75
 8008760:	080084b9 	.word	0x080084b9
 8008764:	0800baef 	.word	0x0800baef

08008768 <malloc>:
 8008768:	4b02      	ldr	r3, [pc, #8]	@ (8008774 <malloc+0xc>)
 800876a:	4601      	mov	r1, r0
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	f000 b825 	b.w	80087bc <_malloc_r>
 8008772:	bf00      	nop
 8008774:	20000018 	.word	0x20000018

08008778 <sbrk_aligned>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	4e0f      	ldr	r6, [pc, #60]	@ (80087b8 <sbrk_aligned+0x40>)
 800877c:	460c      	mov	r4, r1
 800877e:	6831      	ldr	r1, [r6, #0]
 8008780:	4605      	mov	r5, r0
 8008782:	b911      	cbnz	r1, 800878a <sbrk_aligned+0x12>
 8008784:	f000 fd94 	bl	80092b0 <_sbrk_r>
 8008788:	6030      	str	r0, [r6, #0]
 800878a:	4621      	mov	r1, r4
 800878c:	4628      	mov	r0, r5
 800878e:	f000 fd8f 	bl	80092b0 <_sbrk_r>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	d103      	bne.n	800879e <sbrk_aligned+0x26>
 8008796:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800879a:	4620      	mov	r0, r4
 800879c:	bd70      	pop	{r4, r5, r6, pc}
 800879e:	1cc4      	adds	r4, r0, #3
 80087a0:	f024 0403 	bic.w	r4, r4, #3
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d0f8      	beq.n	800879a <sbrk_aligned+0x22>
 80087a8:	1a21      	subs	r1, r4, r0
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 fd80 	bl	80092b0 <_sbrk_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d1f2      	bne.n	800879a <sbrk_aligned+0x22>
 80087b4:	e7ef      	b.n	8008796 <sbrk_aligned+0x1e>
 80087b6:	bf00      	nop
 80087b8:	20000590 	.word	0x20000590

080087bc <_malloc_r>:
 80087bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c0:	1ccd      	adds	r5, r1, #3
 80087c2:	f025 0503 	bic.w	r5, r5, #3
 80087c6:	3508      	adds	r5, #8
 80087c8:	2d0c      	cmp	r5, #12
 80087ca:	bf38      	it	cc
 80087cc:	250c      	movcc	r5, #12
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	4606      	mov	r6, r0
 80087d2:	db01      	blt.n	80087d8 <_malloc_r+0x1c>
 80087d4:	42a9      	cmp	r1, r5
 80087d6:	d904      	bls.n	80087e2 <_malloc_r+0x26>
 80087d8:	230c      	movs	r3, #12
 80087da:	6033      	str	r3, [r6, #0]
 80087dc:	2000      	movs	r0, #0
 80087de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088b8 <_malloc_r+0xfc>
 80087e6:	f000 f915 	bl	8008a14 <__malloc_lock>
 80087ea:	f8d8 3000 	ldr.w	r3, [r8]
 80087ee:	461c      	mov	r4, r3
 80087f0:	bb44      	cbnz	r4, 8008844 <_malloc_r+0x88>
 80087f2:	4629      	mov	r1, r5
 80087f4:	4630      	mov	r0, r6
 80087f6:	f7ff ffbf 	bl	8008778 <sbrk_aligned>
 80087fa:	1c43      	adds	r3, r0, #1
 80087fc:	4604      	mov	r4, r0
 80087fe:	d158      	bne.n	80088b2 <_malloc_r+0xf6>
 8008800:	f8d8 4000 	ldr.w	r4, [r8]
 8008804:	4627      	mov	r7, r4
 8008806:	2f00      	cmp	r7, #0
 8008808:	d143      	bne.n	8008892 <_malloc_r+0xd6>
 800880a:	2c00      	cmp	r4, #0
 800880c:	d04b      	beq.n	80088a6 <_malloc_r+0xea>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	4639      	mov	r1, r7
 8008812:	4630      	mov	r0, r6
 8008814:	eb04 0903 	add.w	r9, r4, r3
 8008818:	f000 fd4a 	bl	80092b0 <_sbrk_r>
 800881c:	4581      	cmp	r9, r0
 800881e:	d142      	bne.n	80088a6 <_malloc_r+0xea>
 8008820:	6821      	ldr	r1, [r4, #0]
 8008822:	1a6d      	subs	r5, r5, r1
 8008824:	4629      	mov	r1, r5
 8008826:	4630      	mov	r0, r6
 8008828:	f7ff ffa6 	bl	8008778 <sbrk_aligned>
 800882c:	3001      	adds	r0, #1
 800882e:	d03a      	beq.n	80088a6 <_malloc_r+0xea>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	442b      	add	r3, r5
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	f8d8 3000 	ldr.w	r3, [r8]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	bb62      	cbnz	r2, 8008898 <_malloc_r+0xdc>
 800883e:	f8c8 7000 	str.w	r7, [r8]
 8008842:	e00f      	b.n	8008864 <_malloc_r+0xa8>
 8008844:	6822      	ldr	r2, [r4, #0]
 8008846:	1b52      	subs	r2, r2, r5
 8008848:	d420      	bmi.n	800888c <_malloc_r+0xd0>
 800884a:	2a0b      	cmp	r2, #11
 800884c:	d917      	bls.n	800887e <_malloc_r+0xc2>
 800884e:	1961      	adds	r1, r4, r5
 8008850:	42a3      	cmp	r3, r4
 8008852:	6025      	str	r5, [r4, #0]
 8008854:	bf18      	it	ne
 8008856:	6059      	strne	r1, [r3, #4]
 8008858:	6863      	ldr	r3, [r4, #4]
 800885a:	bf08      	it	eq
 800885c:	f8c8 1000 	streq.w	r1, [r8]
 8008860:	5162      	str	r2, [r4, r5]
 8008862:	604b      	str	r3, [r1, #4]
 8008864:	4630      	mov	r0, r6
 8008866:	f000 f8db 	bl	8008a20 <__malloc_unlock>
 800886a:	f104 000b 	add.w	r0, r4, #11
 800886e:	1d23      	adds	r3, r4, #4
 8008870:	f020 0007 	bic.w	r0, r0, #7
 8008874:	1ac2      	subs	r2, r0, r3
 8008876:	bf1c      	itt	ne
 8008878:	1a1b      	subne	r3, r3, r0
 800887a:	50a3      	strne	r3, [r4, r2]
 800887c:	e7af      	b.n	80087de <_malloc_r+0x22>
 800887e:	6862      	ldr	r2, [r4, #4]
 8008880:	42a3      	cmp	r3, r4
 8008882:	bf0c      	ite	eq
 8008884:	f8c8 2000 	streq.w	r2, [r8]
 8008888:	605a      	strne	r2, [r3, #4]
 800888a:	e7eb      	b.n	8008864 <_malloc_r+0xa8>
 800888c:	4623      	mov	r3, r4
 800888e:	6864      	ldr	r4, [r4, #4]
 8008890:	e7ae      	b.n	80087f0 <_malloc_r+0x34>
 8008892:	463c      	mov	r4, r7
 8008894:	687f      	ldr	r7, [r7, #4]
 8008896:	e7b6      	b.n	8008806 <_malloc_r+0x4a>
 8008898:	461a      	mov	r2, r3
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	42a3      	cmp	r3, r4
 800889e:	d1fb      	bne.n	8008898 <_malloc_r+0xdc>
 80088a0:	2300      	movs	r3, #0
 80088a2:	6053      	str	r3, [r2, #4]
 80088a4:	e7de      	b.n	8008864 <_malloc_r+0xa8>
 80088a6:	230c      	movs	r3, #12
 80088a8:	6033      	str	r3, [r6, #0]
 80088aa:	4630      	mov	r0, r6
 80088ac:	f000 f8b8 	bl	8008a20 <__malloc_unlock>
 80088b0:	e794      	b.n	80087dc <_malloc_r+0x20>
 80088b2:	6005      	str	r5, [r0, #0]
 80088b4:	e7d6      	b.n	8008864 <_malloc_r+0xa8>
 80088b6:	bf00      	nop
 80088b8:	20000594 	.word	0x20000594

080088bc <__sflush_r>:
 80088bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c4:	0716      	lsls	r6, r2, #28
 80088c6:	4605      	mov	r5, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	d454      	bmi.n	8008976 <__sflush_r+0xba>
 80088cc:	684b      	ldr	r3, [r1, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dc02      	bgt.n	80088d8 <__sflush_r+0x1c>
 80088d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dd48      	ble.n	800896a <__sflush_r+0xae>
 80088d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088da:	2e00      	cmp	r6, #0
 80088dc:	d045      	beq.n	800896a <__sflush_r+0xae>
 80088de:	2300      	movs	r3, #0
 80088e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088e4:	682f      	ldr	r7, [r5, #0]
 80088e6:	6a21      	ldr	r1, [r4, #32]
 80088e8:	602b      	str	r3, [r5, #0]
 80088ea:	d030      	beq.n	800894e <__sflush_r+0x92>
 80088ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	0759      	lsls	r1, r3, #29
 80088f2:	d505      	bpl.n	8008900 <__sflush_r+0x44>
 80088f4:	6863      	ldr	r3, [r4, #4]
 80088f6:	1ad2      	subs	r2, r2, r3
 80088f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088fa:	b10b      	cbz	r3, 8008900 <__sflush_r+0x44>
 80088fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088fe:	1ad2      	subs	r2, r2, r3
 8008900:	2300      	movs	r3, #0
 8008902:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008904:	6a21      	ldr	r1, [r4, #32]
 8008906:	4628      	mov	r0, r5
 8008908:	47b0      	blx	r6
 800890a:	1c43      	adds	r3, r0, #1
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	d106      	bne.n	800891e <__sflush_r+0x62>
 8008910:	6829      	ldr	r1, [r5, #0]
 8008912:	291d      	cmp	r1, #29
 8008914:	d82b      	bhi.n	800896e <__sflush_r+0xb2>
 8008916:	4a2a      	ldr	r2, [pc, #168]	@ (80089c0 <__sflush_r+0x104>)
 8008918:	410a      	asrs	r2, r1
 800891a:	07d6      	lsls	r6, r2, #31
 800891c:	d427      	bmi.n	800896e <__sflush_r+0xb2>
 800891e:	2200      	movs	r2, #0
 8008920:	6062      	str	r2, [r4, #4]
 8008922:	04d9      	lsls	r1, r3, #19
 8008924:	6922      	ldr	r2, [r4, #16]
 8008926:	6022      	str	r2, [r4, #0]
 8008928:	d504      	bpl.n	8008934 <__sflush_r+0x78>
 800892a:	1c42      	adds	r2, r0, #1
 800892c:	d101      	bne.n	8008932 <__sflush_r+0x76>
 800892e:	682b      	ldr	r3, [r5, #0]
 8008930:	b903      	cbnz	r3, 8008934 <__sflush_r+0x78>
 8008932:	6560      	str	r0, [r4, #84]	@ 0x54
 8008934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008936:	602f      	str	r7, [r5, #0]
 8008938:	b1b9      	cbz	r1, 800896a <__sflush_r+0xae>
 800893a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800893e:	4299      	cmp	r1, r3
 8008940:	d002      	beq.n	8008948 <__sflush_r+0x8c>
 8008942:	4628      	mov	r0, r5
 8008944:	f000 fd16 	bl	8009374 <_free_r>
 8008948:	2300      	movs	r3, #0
 800894a:	6363      	str	r3, [r4, #52]	@ 0x34
 800894c:	e00d      	b.n	800896a <__sflush_r+0xae>
 800894e:	2301      	movs	r3, #1
 8008950:	4628      	mov	r0, r5
 8008952:	47b0      	blx	r6
 8008954:	4602      	mov	r2, r0
 8008956:	1c50      	adds	r0, r2, #1
 8008958:	d1c9      	bne.n	80088ee <__sflush_r+0x32>
 800895a:	682b      	ldr	r3, [r5, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0c6      	beq.n	80088ee <__sflush_r+0x32>
 8008960:	2b1d      	cmp	r3, #29
 8008962:	d001      	beq.n	8008968 <__sflush_r+0xac>
 8008964:	2b16      	cmp	r3, #22
 8008966:	d11e      	bne.n	80089a6 <__sflush_r+0xea>
 8008968:	602f      	str	r7, [r5, #0]
 800896a:	2000      	movs	r0, #0
 800896c:	e022      	b.n	80089b4 <__sflush_r+0xf8>
 800896e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008972:	b21b      	sxth	r3, r3
 8008974:	e01b      	b.n	80089ae <__sflush_r+0xf2>
 8008976:	690f      	ldr	r7, [r1, #16]
 8008978:	2f00      	cmp	r7, #0
 800897a:	d0f6      	beq.n	800896a <__sflush_r+0xae>
 800897c:	0793      	lsls	r3, r2, #30
 800897e:	680e      	ldr	r6, [r1, #0]
 8008980:	bf08      	it	eq
 8008982:	694b      	ldreq	r3, [r1, #20]
 8008984:	600f      	str	r7, [r1, #0]
 8008986:	bf18      	it	ne
 8008988:	2300      	movne	r3, #0
 800898a:	eba6 0807 	sub.w	r8, r6, r7
 800898e:	608b      	str	r3, [r1, #8]
 8008990:	f1b8 0f00 	cmp.w	r8, #0
 8008994:	dde9      	ble.n	800896a <__sflush_r+0xae>
 8008996:	6a21      	ldr	r1, [r4, #32]
 8008998:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800899a:	4643      	mov	r3, r8
 800899c:	463a      	mov	r2, r7
 800899e:	4628      	mov	r0, r5
 80089a0:	47b0      	blx	r6
 80089a2:	2800      	cmp	r0, #0
 80089a4:	dc08      	bgt.n	80089b8 <__sflush_r+0xfc>
 80089a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b8:	4407      	add	r7, r0
 80089ba:	eba8 0800 	sub.w	r8, r8, r0
 80089be:	e7e7      	b.n	8008990 <__sflush_r+0xd4>
 80089c0:	dfbffffe 	.word	0xdfbffffe

080089c4 <_fflush_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	690b      	ldr	r3, [r1, #16]
 80089c8:	4605      	mov	r5, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	b913      	cbnz	r3, 80089d4 <_fflush_r+0x10>
 80089ce:	2500      	movs	r5, #0
 80089d0:	4628      	mov	r0, r5
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	b118      	cbz	r0, 80089de <_fflush_r+0x1a>
 80089d6:	6a03      	ldr	r3, [r0, #32]
 80089d8:	b90b      	cbnz	r3, 80089de <_fflush_r+0x1a>
 80089da:	f7fe feaf 	bl	800773c <__sinit>
 80089de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0f3      	beq.n	80089ce <_fflush_r+0xa>
 80089e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089e8:	07d0      	lsls	r0, r2, #31
 80089ea:	d404      	bmi.n	80089f6 <_fflush_r+0x32>
 80089ec:	0599      	lsls	r1, r3, #22
 80089ee:	d402      	bmi.n	80089f6 <_fflush_r+0x32>
 80089f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089f2:	f7fe ff10 	bl	8007816 <__retarget_lock_acquire_recursive>
 80089f6:	4628      	mov	r0, r5
 80089f8:	4621      	mov	r1, r4
 80089fa:	f7ff ff5f 	bl	80088bc <__sflush_r>
 80089fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a00:	07da      	lsls	r2, r3, #31
 8008a02:	4605      	mov	r5, r0
 8008a04:	d4e4      	bmi.n	80089d0 <_fflush_r+0xc>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	059b      	lsls	r3, r3, #22
 8008a0a:	d4e1      	bmi.n	80089d0 <_fflush_r+0xc>
 8008a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a0e:	f7fe ff03 	bl	8007818 <__retarget_lock_release_recursive>
 8008a12:	e7dd      	b.n	80089d0 <_fflush_r+0xc>

08008a14 <__malloc_lock>:
 8008a14:	4801      	ldr	r0, [pc, #4]	@ (8008a1c <__malloc_lock+0x8>)
 8008a16:	f7fe befe 	b.w	8007816 <__retarget_lock_acquire_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	2000058c 	.word	0x2000058c

08008a20 <__malloc_unlock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	@ (8008a28 <__malloc_unlock+0x8>)
 8008a22:	f7fe bef9 	b.w	8007818 <__retarget_lock_release_recursive>
 8008a26:	bf00      	nop
 8008a28:	2000058c 	.word	0x2000058c

08008a2c <_Balloc>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	69c6      	ldr	r6, [r0, #28]
 8008a30:	4604      	mov	r4, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	b976      	cbnz	r6, 8008a54 <_Balloc+0x28>
 8008a36:	2010      	movs	r0, #16
 8008a38:	f7ff fe96 	bl	8008768 <malloc>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	61e0      	str	r0, [r4, #28]
 8008a40:	b920      	cbnz	r0, 8008a4c <_Balloc+0x20>
 8008a42:	4b18      	ldr	r3, [pc, #96]	@ (8008aa4 <_Balloc+0x78>)
 8008a44:	4818      	ldr	r0, [pc, #96]	@ (8008aa8 <_Balloc+0x7c>)
 8008a46:	216b      	movs	r1, #107	@ 0x6b
 8008a48:	f000 fc62 	bl	8009310 <__assert_func>
 8008a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a50:	6006      	str	r6, [r0, #0]
 8008a52:	60c6      	str	r6, [r0, #12]
 8008a54:	69e6      	ldr	r6, [r4, #28]
 8008a56:	68f3      	ldr	r3, [r6, #12]
 8008a58:	b183      	cbz	r3, 8008a7c <_Balloc+0x50>
 8008a5a:	69e3      	ldr	r3, [r4, #28]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a62:	b9b8      	cbnz	r0, 8008a94 <_Balloc+0x68>
 8008a64:	2101      	movs	r1, #1
 8008a66:	fa01 f605 	lsl.w	r6, r1, r5
 8008a6a:	1d72      	adds	r2, r6, #5
 8008a6c:	0092      	lsls	r2, r2, #2
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 fc6c 	bl	800934c <_calloc_r>
 8008a74:	b160      	cbz	r0, 8008a90 <_Balloc+0x64>
 8008a76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a7a:	e00e      	b.n	8008a9a <_Balloc+0x6e>
 8008a7c:	2221      	movs	r2, #33	@ 0x21
 8008a7e:	2104      	movs	r1, #4
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fc63 	bl	800934c <_calloc_r>
 8008a86:	69e3      	ldr	r3, [r4, #28]
 8008a88:	60f0      	str	r0, [r6, #12]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e4      	bne.n	8008a5a <_Balloc+0x2e>
 8008a90:	2000      	movs	r0, #0
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	6802      	ldr	r2, [r0, #0]
 8008a96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aa0:	e7f7      	b.n	8008a92 <_Balloc+0x66>
 8008aa2:	bf00      	nop
 8008aa4:	0800ba69 	.word	0x0800ba69
 8008aa8:	0800bafa 	.word	0x0800bafa

08008aac <_Bfree>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	69c6      	ldr	r6, [r0, #28]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	b976      	cbnz	r6, 8008ad4 <_Bfree+0x28>
 8008ab6:	2010      	movs	r0, #16
 8008ab8:	f7ff fe56 	bl	8008768 <malloc>
 8008abc:	4602      	mov	r2, r0
 8008abe:	61e8      	str	r0, [r5, #28]
 8008ac0:	b920      	cbnz	r0, 8008acc <_Bfree+0x20>
 8008ac2:	4b09      	ldr	r3, [pc, #36]	@ (8008ae8 <_Bfree+0x3c>)
 8008ac4:	4809      	ldr	r0, [pc, #36]	@ (8008aec <_Bfree+0x40>)
 8008ac6:	218f      	movs	r1, #143	@ 0x8f
 8008ac8:	f000 fc22 	bl	8009310 <__assert_func>
 8008acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ad0:	6006      	str	r6, [r0, #0]
 8008ad2:	60c6      	str	r6, [r0, #12]
 8008ad4:	b13c      	cbz	r4, 8008ae6 <_Bfree+0x3a>
 8008ad6:	69eb      	ldr	r3, [r5, #28]
 8008ad8:	6862      	ldr	r2, [r4, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ae0:	6021      	str	r1, [r4, #0]
 8008ae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	0800ba69 	.word	0x0800ba69
 8008aec:	0800bafa 	.word	0x0800bafa

08008af0 <__multadd>:
 8008af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af4:	690d      	ldr	r5, [r1, #16]
 8008af6:	4607      	mov	r7, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	461e      	mov	r6, r3
 8008afc:	f101 0c14 	add.w	ip, r1, #20
 8008b00:	2000      	movs	r0, #0
 8008b02:	f8dc 3000 	ldr.w	r3, [ip]
 8008b06:	b299      	uxth	r1, r3
 8008b08:	fb02 6101 	mla	r1, r2, r1, r6
 8008b0c:	0c1e      	lsrs	r6, r3, #16
 8008b0e:	0c0b      	lsrs	r3, r1, #16
 8008b10:	fb02 3306 	mla	r3, r2, r6, r3
 8008b14:	b289      	uxth	r1, r1
 8008b16:	3001      	adds	r0, #1
 8008b18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b1c:	4285      	cmp	r5, r0
 8008b1e:	f84c 1b04 	str.w	r1, [ip], #4
 8008b22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b26:	dcec      	bgt.n	8008b02 <__multadd+0x12>
 8008b28:	b30e      	cbz	r6, 8008b6e <__multadd+0x7e>
 8008b2a:	68a3      	ldr	r3, [r4, #8]
 8008b2c:	42ab      	cmp	r3, r5
 8008b2e:	dc19      	bgt.n	8008b64 <__multadd+0x74>
 8008b30:	6861      	ldr	r1, [r4, #4]
 8008b32:	4638      	mov	r0, r7
 8008b34:	3101      	adds	r1, #1
 8008b36:	f7ff ff79 	bl	8008a2c <_Balloc>
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	b928      	cbnz	r0, 8008b4a <__multadd+0x5a>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <__multadd+0x84>)
 8008b42:	480d      	ldr	r0, [pc, #52]	@ (8008b78 <__multadd+0x88>)
 8008b44:	21ba      	movs	r1, #186	@ 0xba
 8008b46:	f000 fbe3 	bl	8009310 <__assert_func>
 8008b4a:	6922      	ldr	r2, [r4, #16]
 8008b4c:	3202      	adds	r2, #2
 8008b4e:	f104 010c 	add.w	r1, r4, #12
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	300c      	adds	r0, #12
 8008b56:	f000 fbcd 	bl	80092f4 <memcpy>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff ffa5 	bl	8008aac <_Bfree>
 8008b62:	4644      	mov	r4, r8
 8008b64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b68:	3501      	adds	r5, #1
 8008b6a:	615e      	str	r6, [r3, #20]
 8008b6c:	6125      	str	r5, [r4, #16]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b74:	0800bad8 	.word	0x0800bad8
 8008b78:	0800bafa 	.word	0x0800bafa

08008b7c <__hi0bits>:
 8008b7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b80:	4603      	mov	r3, r0
 8008b82:	bf36      	itet	cc
 8008b84:	0403      	lslcc	r3, r0, #16
 8008b86:	2000      	movcs	r0, #0
 8008b88:	2010      	movcc	r0, #16
 8008b8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b8e:	bf3c      	itt	cc
 8008b90:	021b      	lslcc	r3, r3, #8
 8008b92:	3008      	addcc	r0, #8
 8008b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b98:	bf3c      	itt	cc
 8008b9a:	011b      	lslcc	r3, r3, #4
 8008b9c:	3004      	addcc	r0, #4
 8008b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba2:	bf3c      	itt	cc
 8008ba4:	009b      	lslcc	r3, r3, #2
 8008ba6:	3002      	addcc	r0, #2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	db05      	blt.n	8008bb8 <__hi0bits+0x3c>
 8008bac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008bb0:	f100 0001 	add.w	r0, r0, #1
 8008bb4:	bf08      	it	eq
 8008bb6:	2020      	moveq	r0, #32
 8008bb8:	4770      	bx	lr

08008bba <__lo0bits>:
 8008bba:	6803      	ldr	r3, [r0, #0]
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	f013 0007 	ands.w	r0, r3, #7
 8008bc2:	d00b      	beq.n	8008bdc <__lo0bits+0x22>
 8008bc4:	07d9      	lsls	r1, r3, #31
 8008bc6:	d421      	bmi.n	8008c0c <__lo0bits+0x52>
 8008bc8:	0798      	lsls	r0, r3, #30
 8008bca:	bf49      	itett	mi
 8008bcc:	085b      	lsrmi	r3, r3, #1
 8008bce:	089b      	lsrpl	r3, r3, #2
 8008bd0:	2001      	movmi	r0, #1
 8008bd2:	6013      	strmi	r3, [r2, #0]
 8008bd4:	bf5c      	itt	pl
 8008bd6:	6013      	strpl	r3, [r2, #0]
 8008bd8:	2002      	movpl	r0, #2
 8008bda:	4770      	bx	lr
 8008bdc:	b299      	uxth	r1, r3
 8008bde:	b909      	cbnz	r1, 8008be4 <__lo0bits+0x2a>
 8008be0:	0c1b      	lsrs	r3, r3, #16
 8008be2:	2010      	movs	r0, #16
 8008be4:	b2d9      	uxtb	r1, r3
 8008be6:	b909      	cbnz	r1, 8008bec <__lo0bits+0x32>
 8008be8:	3008      	adds	r0, #8
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	0719      	lsls	r1, r3, #28
 8008bee:	bf04      	itt	eq
 8008bf0:	091b      	lsreq	r3, r3, #4
 8008bf2:	3004      	addeq	r0, #4
 8008bf4:	0799      	lsls	r1, r3, #30
 8008bf6:	bf04      	itt	eq
 8008bf8:	089b      	lsreq	r3, r3, #2
 8008bfa:	3002      	addeq	r0, #2
 8008bfc:	07d9      	lsls	r1, r3, #31
 8008bfe:	d403      	bmi.n	8008c08 <__lo0bits+0x4e>
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	f100 0001 	add.w	r0, r0, #1
 8008c06:	d003      	beq.n	8008c10 <__lo0bits+0x56>
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	4770      	bx	lr
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	4770      	bx	lr
 8008c10:	2020      	movs	r0, #32
 8008c12:	4770      	bx	lr

08008c14 <__i2b>:
 8008c14:	b510      	push	{r4, lr}
 8008c16:	460c      	mov	r4, r1
 8008c18:	2101      	movs	r1, #1
 8008c1a:	f7ff ff07 	bl	8008a2c <_Balloc>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	b928      	cbnz	r0, 8008c2e <__i2b+0x1a>
 8008c22:	4b05      	ldr	r3, [pc, #20]	@ (8008c38 <__i2b+0x24>)
 8008c24:	4805      	ldr	r0, [pc, #20]	@ (8008c3c <__i2b+0x28>)
 8008c26:	f240 1145 	movw	r1, #325	@ 0x145
 8008c2a:	f000 fb71 	bl	8009310 <__assert_func>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	6144      	str	r4, [r0, #20]
 8008c32:	6103      	str	r3, [r0, #16]
 8008c34:	bd10      	pop	{r4, pc}
 8008c36:	bf00      	nop
 8008c38:	0800bad8 	.word	0x0800bad8
 8008c3c:	0800bafa 	.word	0x0800bafa

08008c40 <__multiply>:
 8008c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c44:	4614      	mov	r4, r2
 8008c46:	690a      	ldr	r2, [r1, #16]
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	bfa8      	it	ge
 8008c4e:	4623      	movge	r3, r4
 8008c50:	460f      	mov	r7, r1
 8008c52:	bfa4      	itt	ge
 8008c54:	460c      	movge	r4, r1
 8008c56:	461f      	movge	r7, r3
 8008c58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c60:	68a3      	ldr	r3, [r4, #8]
 8008c62:	6861      	ldr	r1, [r4, #4]
 8008c64:	eb0a 0609 	add.w	r6, sl, r9
 8008c68:	42b3      	cmp	r3, r6
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	bfb8      	it	lt
 8008c6e:	3101      	addlt	r1, #1
 8008c70:	f7ff fedc 	bl	8008a2c <_Balloc>
 8008c74:	b930      	cbnz	r0, 8008c84 <__multiply+0x44>
 8008c76:	4602      	mov	r2, r0
 8008c78:	4b44      	ldr	r3, [pc, #272]	@ (8008d8c <__multiply+0x14c>)
 8008c7a:	4845      	ldr	r0, [pc, #276]	@ (8008d90 <__multiply+0x150>)
 8008c7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c80:	f000 fb46 	bl	8009310 <__assert_func>
 8008c84:	f100 0514 	add.w	r5, r0, #20
 8008c88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	2200      	movs	r2, #0
 8008c90:	4543      	cmp	r3, r8
 8008c92:	d321      	bcc.n	8008cd8 <__multiply+0x98>
 8008c94:	f107 0114 	add.w	r1, r7, #20
 8008c98:	f104 0214 	add.w	r2, r4, #20
 8008c9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ca0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ca4:	9302      	str	r3, [sp, #8]
 8008ca6:	1b13      	subs	r3, r2, r4
 8008ca8:	3b15      	subs	r3, #21
 8008caa:	f023 0303 	bic.w	r3, r3, #3
 8008cae:	3304      	adds	r3, #4
 8008cb0:	f104 0715 	add.w	r7, r4, #21
 8008cb4:	42ba      	cmp	r2, r7
 8008cb6:	bf38      	it	cc
 8008cb8:	2304      	movcc	r3, #4
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	9b02      	ldr	r3, [sp, #8]
 8008cbe:	9103      	str	r1, [sp, #12]
 8008cc0:	428b      	cmp	r3, r1
 8008cc2:	d80c      	bhi.n	8008cde <__multiply+0x9e>
 8008cc4:	2e00      	cmp	r6, #0
 8008cc6:	dd03      	ble.n	8008cd0 <__multiply+0x90>
 8008cc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d05b      	beq.n	8008d88 <__multiply+0x148>
 8008cd0:	6106      	str	r6, [r0, #16]
 8008cd2:	b005      	add	sp, #20
 8008cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd8:	f843 2b04 	str.w	r2, [r3], #4
 8008cdc:	e7d8      	b.n	8008c90 <__multiply+0x50>
 8008cde:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ce2:	f1ba 0f00 	cmp.w	sl, #0
 8008ce6:	d024      	beq.n	8008d32 <__multiply+0xf2>
 8008ce8:	f104 0e14 	add.w	lr, r4, #20
 8008cec:	46a9      	mov	r9, r5
 8008cee:	f04f 0c00 	mov.w	ip, #0
 8008cf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cf6:	f8d9 3000 	ldr.w	r3, [r9]
 8008cfa:	fa1f fb87 	uxth.w	fp, r7
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008d08:	f8d9 7000 	ldr.w	r7, [r9]
 8008d0c:	4463      	add	r3, ip
 8008d0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d12:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d20:	4572      	cmp	r2, lr
 8008d22:	f849 3b04 	str.w	r3, [r9], #4
 8008d26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d2a:	d8e2      	bhi.n	8008cf2 <__multiply+0xb2>
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	f845 c003 	str.w	ip, [r5, r3]
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d38:	3104      	adds	r1, #4
 8008d3a:	f1b9 0f00 	cmp.w	r9, #0
 8008d3e:	d021      	beq.n	8008d84 <__multiply+0x144>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	f104 0c14 	add.w	ip, r4, #20
 8008d46:	46ae      	mov	lr, r5
 8008d48:	f04f 0a00 	mov.w	sl, #0
 8008d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8008d50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d54:	fb09 770b 	mla	r7, r9, fp, r7
 8008d58:	4457      	add	r7, sl
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d60:	f84e 3b04 	str.w	r3, [lr], #4
 8008d64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d6c:	f8be 3000 	ldrh.w	r3, [lr]
 8008d70:	fb09 330a 	mla	r3, r9, sl, r3
 8008d74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d78:	4562      	cmp	r2, ip
 8008d7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d7e:	d8e5      	bhi.n	8008d4c <__multiply+0x10c>
 8008d80:	9f01      	ldr	r7, [sp, #4]
 8008d82:	51eb      	str	r3, [r5, r7]
 8008d84:	3504      	adds	r5, #4
 8008d86:	e799      	b.n	8008cbc <__multiply+0x7c>
 8008d88:	3e01      	subs	r6, #1
 8008d8a:	e79b      	b.n	8008cc4 <__multiply+0x84>
 8008d8c:	0800bad8 	.word	0x0800bad8
 8008d90:	0800bafa 	.word	0x0800bafa

08008d94 <__pow5mult>:
 8008d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d98:	4615      	mov	r5, r2
 8008d9a:	f012 0203 	ands.w	r2, r2, #3
 8008d9e:	4607      	mov	r7, r0
 8008da0:	460e      	mov	r6, r1
 8008da2:	d007      	beq.n	8008db4 <__pow5mult+0x20>
 8008da4:	4c25      	ldr	r4, [pc, #148]	@ (8008e3c <__pow5mult+0xa8>)
 8008da6:	3a01      	subs	r2, #1
 8008da8:	2300      	movs	r3, #0
 8008daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dae:	f7ff fe9f 	bl	8008af0 <__multadd>
 8008db2:	4606      	mov	r6, r0
 8008db4:	10ad      	asrs	r5, r5, #2
 8008db6:	d03d      	beq.n	8008e34 <__pow5mult+0xa0>
 8008db8:	69fc      	ldr	r4, [r7, #28]
 8008dba:	b97c      	cbnz	r4, 8008ddc <__pow5mult+0x48>
 8008dbc:	2010      	movs	r0, #16
 8008dbe:	f7ff fcd3 	bl	8008768 <malloc>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	61f8      	str	r0, [r7, #28]
 8008dc6:	b928      	cbnz	r0, 8008dd4 <__pow5mult+0x40>
 8008dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e40 <__pow5mult+0xac>)
 8008dca:	481e      	ldr	r0, [pc, #120]	@ (8008e44 <__pow5mult+0xb0>)
 8008dcc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008dd0:	f000 fa9e 	bl	8009310 <__assert_func>
 8008dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dd8:	6004      	str	r4, [r0, #0]
 8008dda:	60c4      	str	r4, [r0, #12]
 8008ddc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008de4:	b94c      	cbnz	r4, 8008dfa <__pow5mult+0x66>
 8008de6:	f240 2171 	movw	r1, #625	@ 0x271
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7ff ff12 	bl	8008c14 <__i2b>
 8008df0:	2300      	movs	r3, #0
 8008df2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008df6:	4604      	mov	r4, r0
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	f04f 0900 	mov.w	r9, #0
 8008dfe:	07eb      	lsls	r3, r5, #31
 8008e00:	d50a      	bpl.n	8008e18 <__pow5mult+0x84>
 8008e02:	4631      	mov	r1, r6
 8008e04:	4622      	mov	r2, r4
 8008e06:	4638      	mov	r0, r7
 8008e08:	f7ff ff1a 	bl	8008c40 <__multiply>
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4680      	mov	r8, r0
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7ff fe4b 	bl	8008aac <_Bfree>
 8008e16:	4646      	mov	r6, r8
 8008e18:	106d      	asrs	r5, r5, #1
 8008e1a:	d00b      	beq.n	8008e34 <__pow5mult+0xa0>
 8008e1c:	6820      	ldr	r0, [r4, #0]
 8008e1e:	b938      	cbnz	r0, 8008e30 <__pow5mult+0x9c>
 8008e20:	4622      	mov	r2, r4
 8008e22:	4621      	mov	r1, r4
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff ff0b 	bl	8008c40 <__multiply>
 8008e2a:	6020      	str	r0, [r4, #0]
 8008e2c:	f8c0 9000 	str.w	r9, [r0]
 8008e30:	4604      	mov	r4, r0
 8008e32:	e7e4      	b.n	8008dfe <__pow5mult+0x6a>
 8008e34:	4630      	mov	r0, r6
 8008e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e3a:	bf00      	nop
 8008e3c:	0800bb54 	.word	0x0800bb54
 8008e40:	0800ba69 	.word	0x0800ba69
 8008e44:	0800bafa 	.word	0x0800bafa

08008e48 <__lshift>:
 8008e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	6849      	ldr	r1, [r1, #4]
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e56:	68a3      	ldr	r3, [r4, #8]
 8008e58:	4607      	mov	r7, r0
 8008e5a:	4691      	mov	r9, r2
 8008e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e60:	f108 0601 	add.w	r6, r8, #1
 8008e64:	42b3      	cmp	r3, r6
 8008e66:	db0b      	blt.n	8008e80 <__lshift+0x38>
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f7ff fddf 	bl	8008a2c <_Balloc>
 8008e6e:	4605      	mov	r5, r0
 8008e70:	b948      	cbnz	r0, 8008e86 <__lshift+0x3e>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b28      	ldr	r3, [pc, #160]	@ (8008f18 <__lshift+0xd0>)
 8008e76:	4829      	ldr	r0, [pc, #164]	@ (8008f1c <__lshift+0xd4>)
 8008e78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e7c:	f000 fa48 	bl	8009310 <__assert_func>
 8008e80:	3101      	adds	r1, #1
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	e7ee      	b.n	8008e64 <__lshift+0x1c>
 8008e86:	2300      	movs	r3, #0
 8008e88:	f100 0114 	add.w	r1, r0, #20
 8008e8c:	f100 0210 	add.w	r2, r0, #16
 8008e90:	4618      	mov	r0, r3
 8008e92:	4553      	cmp	r3, sl
 8008e94:	db33      	blt.n	8008efe <__lshift+0xb6>
 8008e96:	6920      	ldr	r0, [r4, #16]
 8008e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e9c:	f104 0314 	add.w	r3, r4, #20
 8008ea0:	f019 091f 	ands.w	r9, r9, #31
 8008ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ea8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008eac:	d02b      	beq.n	8008f06 <__lshift+0xbe>
 8008eae:	f1c9 0e20 	rsb	lr, r9, #32
 8008eb2:	468a      	mov	sl, r1
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	fa00 f009 	lsl.w	r0, r0, r9
 8008ebc:	4310      	orrs	r0, r2
 8008ebe:	f84a 0b04 	str.w	r0, [sl], #4
 8008ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec6:	459c      	cmp	ip, r3
 8008ec8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ecc:	d8f3      	bhi.n	8008eb6 <__lshift+0x6e>
 8008ece:	ebac 0304 	sub.w	r3, ip, r4
 8008ed2:	3b15      	subs	r3, #21
 8008ed4:	f023 0303 	bic.w	r3, r3, #3
 8008ed8:	3304      	adds	r3, #4
 8008eda:	f104 0015 	add.w	r0, r4, #21
 8008ede:	4584      	cmp	ip, r0
 8008ee0:	bf38      	it	cc
 8008ee2:	2304      	movcc	r3, #4
 8008ee4:	50ca      	str	r2, [r1, r3]
 8008ee6:	b10a      	cbz	r2, 8008eec <__lshift+0xa4>
 8008ee8:	f108 0602 	add.w	r6, r8, #2
 8008eec:	3e01      	subs	r6, #1
 8008eee:	4638      	mov	r0, r7
 8008ef0:	612e      	str	r6, [r5, #16]
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f7ff fdda 	bl	8008aac <_Bfree>
 8008ef8:	4628      	mov	r0, r5
 8008efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f02:	3301      	adds	r3, #1
 8008f04:	e7c5      	b.n	8008e92 <__lshift+0x4a>
 8008f06:	3904      	subs	r1, #4
 8008f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f10:	459c      	cmp	ip, r3
 8008f12:	d8f9      	bhi.n	8008f08 <__lshift+0xc0>
 8008f14:	e7ea      	b.n	8008eec <__lshift+0xa4>
 8008f16:	bf00      	nop
 8008f18:	0800bad8 	.word	0x0800bad8
 8008f1c:	0800bafa 	.word	0x0800bafa

08008f20 <__mcmp>:
 8008f20:	690a      	ldr	r2, [r1, #16]
 8008f22:	4603      	mov	r3, r0
 8008f24:	6900      	ldr	r0, [r0, #16]
 8008f26:	1a80      	subs	r0, r0, r2
 8008f28:	b530      	push	{r4, r5, lr}
 8008f2a:	d10e      	bne.n	8008f4a <__mcmp+0x2a>
 8008f2c:	3314      	adds	r3, #20
 8008f2e:	3114      	adds	r1, #20
 8008f30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f40:	4295      	cmp	r5, r2
 8008f42:	d003      	beq.n	8008f4c <__mcmp+0x2c>
 8008f44:	d205      	bcs.n	8008f52 <__mcmp+0x32>
 8008f46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f4a:	bd30      	pop	{r4, r5, pc}
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d3f3      	bcc.n	8008f38 <__mcmp+0x18>
 8008f50:	e7fb      	b.n	8008f4a <__mcmp+0x2a>
 8008f52:	2001      	movs	r0, #1
 8008f54:	e7f9      	b.n	8008f4a <__mcmp+0x2a>
	...

08008f58 <__mdiff>:
 8008f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	4689      	mov	r9, r1
 8008f5e:	4606      	mov	r6, r0
 8008f60:	4611      	mov	r1, r2
 8008f62:	4648      	mov	r0, r9
 8008f64:	4614      	mov	r4, r2
 8008f66:	f7ff ffdb 	bl	8008f20 <__mcmp>
 8008f6a:	1e05      	subs	r5, r0, #0
 8008f6c:	d112      	bne.n	8008f94 <__mdiff+0x3c>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff fd5b 	bl	8008a2c <_Balloc>
 8008f76:	4602      	mov	r2, r0
 8008f78:	b928      	cbnz	r0, 8008f86 <__mdiff+0x2e>
 8008f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8009078 <__mdiff+0x120>)
 8008f7c:	f240 2137 	movw	r1, #567	@ 0x237
 8008f80:	483e      	ldr	r0, [pc, #248]	@ (800907c <__mdiff+0x124>)
 8008f82:	f000 f9c5 	bl	8009310 <__assert_func>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	b003      	add	sp, #12
 8008f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f94:	bfbc      	itt	lt
 8008f96:	464b      	movlt	r3, r9
 8008f98:	46a1      	movlt	r9, r4
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008fa0:	bfba      	itte	lt
 8008fa2:	461c      	movlt	r4, r3
 8008fa4:	2501      	movlt	r5, #1
 8008fa6:	2500      	movge	r5, #0
 8008fa8:	f7ff fd40 	bl	8008a2c <_Balloc>
 8008fac:	4602      	mov	r2, r0
 8008fae:	b918      	cbnz	r0, 8008fb8 <__mdiff+0x60>
 8008fb0:	4b31      	ldr	r3, [pc, #196]	@ (8009078 <__mdiff+0x120>)
 8008fb2:	f240 2145 	movw	r1, #581	@ 0x245
 8008fb6:	e7e3      	b.n	8008f80 <__mdiff+0x28>
 8008fb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008fbc:	6926      	ldr	r6, [r4, #16]
 8008fbe:	60c5      	str	r5, [r0, #12]
 8008fc0:	f109 0310 	add.w	r3, r9, #16
 8008fc4:	f109 0514 	add.w	r5, r9, #20
 8008fc8:	f104 0e14 	add.w	lr, r4, #20
 8008fcc:	f100 0b14 	add.w	fp, r0, #20
 8008fd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008fd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	46d9      	mov	r9, fp
 8008fdc:	f04f 0c00 	mov.w	ip, #0
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008fe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	fa1f f38a 	uxth.w	r3, sl
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	b283      	uxth	r3, r0
 8008ff4:	1acb      	subs	r3, r1, r3
 8008ff6:	0c00      	lsrs	r0, r0, #16
 8008ff8:	4463      	add	r3, ip
 8008ffa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ffe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009002:	b29b      	uxth	r3, r3
 8009004:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009008:	4576      	cmp	r6, lr
 800900a:	f849 3b04 	str.w	r3, [r9], #4
 800900e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009012:	d8e5      	bhi.n	8008fe0 <__mdiff+0x88>
 8009014:	1b33      	subs	r3, r6, r4
 8009016:	3b15      	subs	r3, #21
 8009018:	f023 0303 	bic.w	r3, r3, #3
 800901c:	3415      	adds	r4, #21
 800901e:	3304      	adds	r3, #4
 8009020:	42a6      	cmp	r6, r4
 8009022:	bf38      	it	cc
 8009024:	2304      	movcc	r3, #4
 8009026:	441d      	add	r5, r3
 8009028:	445b      	add	r3, fp
 800902a:	461e      	mov	r6, r3
 800902c:	462c      	mov	r4, r5
 800902e:	4544      	cmp	r4, r8
 8009030:	d30e      	bcc.n	8009050 <__mdiff+0xf8>
 8009032:	f108 0103 	add.w	r1, r8, #3
 8009036:	1b49      	subs	r1, r1, r5
 8009038:	f021 0103 	bic.w	r1, r1, #3
 800903c:	3d03      	subs	r5, #3
 800903e:	45a8      	cmp	r8, r5
 8009040:	bf38      	it	cc
 8009042:	2100      	movcc	r1, #0
 8009044:	440b      	add	r3, r1
 8009046:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800904a:	b191      	cbz	r1, 8009072 <__mdiff+0x11a>
 800904c:	6117      	str	r7, [r2, #16]
 800904e:	e79d      	b.n	8008f8c <__mdiff+0x34>
 8009050:	f854 1b04 	ldr.w	r1, [r4], #4
 8009054:	46e6      	mov	lr, ip
 8009056:	0c08      	lsrs	r0, r1, #16
 8009058:	fa1c fc81 	uxtah	ip, ip, r1
 800905c:	4471      	add	r1, lr
 800905e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009062:	b289      	uxth	r1, r1
 8009064:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009068:	f846 1b04 	str.w	r1, [r6], #4
 800906c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009070:	e7dd      	b.n	800902e <__mdiff+0xd6>
 8009072:	3f01      	subs	r7, #1
 8009074:	e7e7      	b.n	8009046 <__mdiff+0xee>
 8009076:	bf00      	nop
 8009078:	0800bad8 	.word	0x0800bad8
 800907c:	0800bafa 	.word	0x0800bafa

08009080 <__d2b>:
 8009080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009084:	460f      	mov	r7, r1
 8009086:	2101      	movs	r1, #1
 8009088:	ec59 8b10 	vmov	r8, r9, d0
 800908c:	4616      	mov	r6, r2
 800908e:	f7ff fccd 	bl	8008a2c <_Balloc>
 8009092:	4604      	mov	r4, r0
 8009094:	b930      	cbnz	r0, 80090a4 <__d2b+0x24>
 8009096:	4602      	mov	r2, r0
 8009098:	4b23      	ldr	r3, [pc, #140]	@ (8009128 <__d2b+0xa8>)
 800909a:	4824      	ldr	r0, [pc, #144]	@ (800912c <__d2b+0xac>)
 800909c:	f240 310f 	movw	r1, #783	@ 0x30f
 80090a0:	f000 f936 	bl	8009310 <__assert_func>
 80090a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090ac:	b10d      	cbz	r5, 80090b2 <__d2b+0x32>
 80090ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	f1b8 0300 	subs.w	r3, r8, #0
 80090b8:	d023      	beq.n	8009102 <__d2b+0x82>
 80090ba:	4668      	mov	r0, sp
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	f7ff fd7c 	bl	8008bba <__lo0bits>
 80090c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090c6:	b1d0      	cbz	r0, 80090fe <__d2b+0x7e>
 80090c8:	f1c0 0320 	rsb	r3, r0, #32
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	430b      	orrs	r3, r1
 80090d2:	40c2      	lsrs	r2, r0
 80090d4:	6163      	str	r3, [r4, #20]
 80090d6:	9201      	str	r2, [sp, #4]
 80090d8:	9b01      	ldr	r3, [sp, #4]
 80090da:	61a3      	str	r3, [r4, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bf0c      	ite	eq
 80090e0:	2201      	moveq	r2, #1
 80090e2:	2202      	movne	r2, #2
 80090e4:	6122      	str	r2, [r4, #16]
 80090e6:	b1a5      	cbz	r5, 8009112 <__d2b+0x92>
 80090e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090ec:	4405      	add	r5, r0
 80090ee:	603d      	str	r5, [r7, #0]
 80090f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090f4:	6030      	str	r0, [r6, #0]
 80090f6:	4620      	mov	r0, r4
 80090f8:	b003      	add	sp, #12
 80090fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090fe:	6161      	str	r1, [r4, #20]
 8009100:	e7ea      	b.n	80090d8 <__d2b+0x58>
 8009102:	a801      	add	r0, sp, #4
 8009104:	f7ff fd59 	bl	8008bba <__lo0bits>
 8009108:	9b01      	ldr	r3, [sp, #4]
 800910a:	6163      	str	r3, [r4, #20]
 800910c:	3020      	adds	r0, #32
 800910e:	2201      	movs	r2, #1
 8009110:	e7e8      	b.n	80090e4 <__d2b+0x64>
 8009112:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009116:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800911a:	6038      	str	r0, [r7, #0]
 800911c:	6918      	ldr	r0, [r3, #16]
 800911e:	f7ff fd2d 	bl	8008b7c <__hi0bits>
 8009122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009126:	e7e5      	b.n	80090f4 <__d2b+0x74>
 8009128:	0800bad8 	.word	0x0800bad8
 800912c:	0800bafa 	.word	0x0800bafa

08009130 <__sread>:
 8009130:	b510      	push	{r4, lr}
 8009132:	460c      	mov	r4, r1
 8009134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009138:	f000 f8a8 	bl	800928c <_read_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	bfab      	itete	ge
 8009140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009142:	89a3      	ldrhlt	r3, [r4, #12]
 8009144:	181b      	addge	r3, r3, r0
 8009146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800914a:	bfac      	ite	ge
 800914c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800914e:	81a3      	strhlt	r3, [r4, #12]
 8009150:	bd10      	pop	{r4, pc}

08009152 <__swrite>:
 8009152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009156:	461f      	mov	r7, r3
 8009158:	898b      	ldrh	r3, [r1, #12]
 800915a:	05db      	lsls	r3, r3, #23
 800915c:	4605      	mov	r5, r0
 800915e:	460c      	mov	r4, r1
 8009160:	4616      	mov	r6, r2
 8009162:	d505      	bpl.n	8009170 <__swrite+0x1e>
 8009164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009168:	2302      	movs	r3, #2
 800916a:	2200      	movs	r2, #0
 800916c:	f000 f87c 	bl	8009268 <_lseek_r>
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	4632      	mov	r2, r6
 800917e:	463b      	mov	r3, r7
 8009180:	4628      	mov	r0, r5
 8009182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009186:	f000 b8a3 	b.w	80092d0 <_write_r>

0800918a <__sseek>:
 800918a:	b510      	push	{r4, lr}
 800918c:	460c      	mov	r4, r1
 800918e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009192:	f000 f869 	bl	8009268 <_lseek_r>
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	bf15      	itete	ne
 800919c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800919e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091a6:	81a3      	strheq	r3, [r4, #12]
 80091a8:	bf18      	it	ne
 80091aa:	81a3      	strhne	r3, [r4, #12]
 80091ac:	bd10      	pop	{r4, pc}

080091ae <__sclose>:
 80091ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b2:	f000 b849 	b.w	8009248 <_close_r>

080091b6 <_realloc_r>:
 80091b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ba:	4680      	mov	r8, r0
 80091bc:	4615      	mov	r5, r2
 80091be:	460c      	mov	r4, r1
 80091c0:	b921      	cbnz	r1, 80091cc <_realloc_r+0x16>
 80091c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091c6:	4611      	mov	r1, r2
 80091c8:	f7ff baf8 	b.w	80087bc <_malloc_r>
 80091cc:	b92a      	cbnz	r2, 80091da <_realloc_r+0x24>
 80091ce:	f000 f8d1 	bl	8009374 <_free_r>
 80091d2:	2400      	movs	r4, #0
 80091d4:	4620      	mov	r0, r4
 80091d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091da:	f000 f927 	bl	800942c <_malloc_usable_size_r>
 80091de:	4285      	cmp	r5, r0
 80091e0:	4606      	mov	r6, r0
 80091e2:	d802      	bhi.n	80091ea <_realloc_r+0x34>
 80091e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091e8:	d8f4      	bhi.n	80091d4 <_realloc_r+0x1e>
 80091ea:	4629      	mov	r1, r5
 80091ec:	4640      	mov	r0, r8
 80091ee:	f7ff fae5 	bl	80087bc <_malloc_r>
 80091f2:	4607      	mov	r7, r0
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d0ec      	beq.n	80091d2 <_realloc_r+0x1c>
 80091f8:	42b5      	cmp	r5, r6
 80091fa:	462a      	mov	r2, r5
 80091fc:	4621      	mov	r1, r4
 80091fe:	bf28      	it	cs
 8009200:	4632      	movcs	r2, r6
 8009202:	f000 f877 	bl	80092f4 <memcpy>
 8009206:	4621      	mov	r1, r4
 8009208:	4640      	mov	r0, r8
 800920a:	f000 f8b3 	bl	8009374 <_free_r>
 800920e:	463c      	mov	r4, r7
 8009210:	e7e0      	b.n	80091d4 <_realloc_r+0x1e>

08009212 <memmove>:
 8009212:	4288      	cmp	r0, r1
 8009214:	b510      	push	{r4, lr}
 8009216:	eb01 0402 	add.w	r4, r1, r2
 800921a:	d902      	bls.n	8009222 <memmove+0x10>
 800921c:	4284      	cmp	r4, r0
 800921e:	4623      	mov	r3, r4
 8009220:	d807      	bhi.n	8009232 <memmove+0x20>
 8009222:	1e43      	subs	r3, r0, #1
 8009224:	42a1      	cmp	r1, r4
 8009226:	d008      	beq.n	800923a <memmove+0x28>
 8009228:	f811 2b01 	ldrb.w	r2, [r1], #1
 800922c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009230:	e7f8      	b.n	8009224 <memmove+0x12>
 8009232:	4402      	add	r2, r0
 8009234:	4601      	mov	r1, r0
 8009236:	428a      	cmp	r2, r1
 8009238:	d100      	bne.n	800923c <memmove+0x2a>
 800923a:	bd10      	pop	{r4, pc}
 800923c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009240:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009244:	e7f7      	b.n	8009236 <memmove+0x24>
	...

08009248 <_close_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d06      	ldr	r5, [pc, #24]	@ (8009264 <_close_r+0x1c>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	f7f9 f8fe 	bl	8002454 <_close>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_close_r+0x1a>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_close_r+0x1a>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20000598 	.word	0x20000598

08009268 <_lseek_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d07      	ldr	r5, [pc, #28]	@ (8009288 <_lseek_r+0x20>)
 800926c:	4604      	mov	r4, r0
 800926e:	4608      	mov	r0, r1
 8009270:	4611      	mov	r1, r2
 8009272:	2200      	movs	r2, #0
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	f7f9 f913 	bl	80024a2 <_lseek>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_lseek_r+0x1e>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_lseek_r+0x1e>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20000598 	.word	0x20000598

0800928c <_read_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d07      	ldr	r5, [pc, #28]	@ (80092ac <_read_r+0x20>)
 8009290:	4604      	mov	r4, r0
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	2200      	movs	r2, #0
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7f9 f8a1 	bl	80023e2 <_read>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_read_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_read_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20000598 	.word	0x20000598

080092b0 <_sbrk_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d06      	ldr	r5, [pc, #24]	@ (80092cc <_sbrk_r+0x1c>)
 80092b4:	2300      	movs	r3, #0
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	f7f9 f8fe 	bl	80024bc <_sbrk>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_sbrk_r+0x1a>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_sbrk_r+0x1a>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	20000598 	.word	0x20000598

080092d0 <_write_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	@ (80092f0 <_write_r+0x20>)
 80092d4:	4604      	mov	r4, r0
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7f9 f89c 	bl	800241c <_write>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_write_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_write_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	20000598 	.word	0x20000598

080092f4 <memcpy>:
 80092f4:	440a      	add	r2, r1
 80092f6:	4291      	cmp	r1, r2
 80092f8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092fc:	d100      	bne.n	8009300 <memcpy+0xc>
 80092fe:	4770      	bx	lr
 8009300:	b510      	push	{r4, lr}
 8009302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800930a:	4291      	cmp	r1, r2
 800930c:	d1f9      	bne.n	8009302 <memcpy+0xe>
 800930e:	bd10      	pop	{r4, pc}

08009310 <__assert_func>:
 8009310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009312:	4614      	mov	r4, r2
 8009314:	461a      	mov	r2, r3
 8009316:	4b09      	ldr	r3, [pc, #36]	@ (800933c <__assert_func+0x2c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4605      	mov	r5, r0
 800931c:	68d8      	ldr	r0, [r3, #12]
 800931e:	b954      	cbnz	r4, 8009336 <__assert_func+0x26>
 8009320:	4b07      	ldr	r3, [pc, #28]	@ (8009340 <__assert_func+0x30>)
 8009322:	461c      	mov	r4, r3
 8009324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009328:	9100      	str	r1, [sp, #0]
 800932a:	462b      	mov	r3, r5
 800932c:	4905      	ldr	r1, [pc, #20]	@ (8009344 <__assert_func+0x34>)
 800932e:	f000 f885 	bl	800943c <fiprintf>
 8009332:	f000 f8a2 	bl	800947a <abort>
 8009336:	4b04      	ldr	r3, [pc, #16]	@ (8009348 <__assert_func+0x38>)
 8009338:	e7f4      	b.n	8009324 <__assert_func+0x14>
 800933a:	bf00      	nop
 800933c:	20000018 	.word	0x20000018
 8009340:	0800bd96 	.word	0x0800bd96
 8009344:	0800bd68 	.word	0x0800bd68
 8009348:	0800bd5b 	.word	0x0800bd5b

0800934c <_calloc_r>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	fba1 5402 	umull	r5, r4, r1, r2
 8009352:	b93c      	cbnz	r4, 8009364 <_calloc_r+0x18>
 8009354:	4629      	mov	r1, r5
 8009356:	f7ff fa31 	bl	80087bc <_malloc_r>
 800935a:	4606      	mov	r6, r0
 800935c:	b928      	cbnz	r0, 800936a <_calloc_r+0x1e>
 800935e:	2600      	movs	r6, #0
 8009360:	4630      	mov	r0, r6
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	220c      	movs	r2, #12
 8009366:	6002      	str	r2, [r0, #0]
 8009368:	e7f9      	b.n	800935e <_calloc_r+0x12>
 800936a:	462a      	mov	r2, r5
 800936c:	4621      	mov	r1, r4
 800936e:	f7fe fa1b 	bl	80077a8 <memset>
 8009372:	e7f5      	b.n	8009360 <_calloc_r+0x14>

08009374 <_free_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4605      	mov	r5, r0
 8009378:	2900      	cmp	r1, #0
 800937a:	d041      	beq.n	8009400 <_free_r+0x8c>
 800937c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009380:	1f0c      	subs	r4, r1, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	bfb8      	it	lt
 8009386:	18e4      	addlt	r4, r4, r3
 8009388:	f7ff fb44 	bl	8008a14 <__malloc_lock>
 800938c:	4a1d      	ldr	r2, [pc, #116]	@ (8009404 <_free_r+0x90>)
 800938e:	6813      	ldr	r3, [r2, #0]
 8009390:	b933      	cbnz	r3, 80093a0 <_free_r+0x2c>
 8009392:	6063      	str	r3, [r4, #4]
 8009394:	6014      	str	r4, [r2, #0]
 8009396:	4628      	mov	r0, r5
 8009398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800939c:	f7ff bb40 	b.w	8008a20 <__malloc_unlock>
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	d908      	bls.n	80093b6 <_free_r+0x42>
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	1821      	adds	r1, r4, r0
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf01      	itttt	eq
 80093ac:	6819      	ldreq	r1, [r3, #0]
 80093ae:	685b      	ldreq	r3, [r3, #4]
 80093b0:	1809      	addeq	r1, r1, r0
 80093b2:	6021      	streq	r1, [r4, #0]
 80093b4:	e7ed      	b.n	8009392 <_free_r+0x1e>
 80093b6:	461a      	mov	r2, r3
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	b10b      	cbz	r3, 80093c0 <_free_r+0x4c>
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d9fa      	bls.n	80093b6 <_free_r+0x42>
 80093c0:	6811      	ldr	r1, [r2, #0]
 80093c2:	1850      	adds	r0, r2, r1
 80093c4:	42a0      	cmp	r0, r4
 80093c6:	d10b      	bne.n	80093e0 <_free_r+0x6c>
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	4401      	add	r1, r0
 80093cc:	1850      	adds	r0, r2, r1
 80093ce:	4283      	cmp	r3, r0
 80093d0:	6011      	str	r1, [r2, #0]
 80093d2:	d1e0      	bne.n	8009396 <_free_r+0x22>
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	6053      	str	r3, [r2, #4]
 80093da:	4408      	add	r0, r1
 80093dc:	6010      	str	r0, [r2, #0]
 80093de:	e7da      	b.n	8009396 <_free_r+0x22>
 80093e0:	d902      	bls.n	80093e8 <_free_r+0x74>
 80093e2:	230c      	movs	r3, #12
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	e7d6      	b.n	8009396 <_free_r+0x22>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	1821      	adds	r1, r4, r0
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf04      	itt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	bf04      	itt	eq
 80093f8:	1809      	addeq	r1, r1, r0
 80093fa:	6021      	streq	r1, [r4, #0]
 80093fc:	6054      	str	r4, [r2, #4]
 80093fe:	e7ca      	b.n	8009396 <_free_r+0x22>
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	bf00      	nop
 8009404:	20000594 	.word	0x20000594

08009408 <__ascii_mbtowc>:
 8009408:	b082      	sub	sp, #8
 800940a:	b901      	cbnz	r1, 800940e <__ascii_mbtowc+0x6>
 800940c:	a901      	add	r1, sp, #4
 800940e:	b142      	cbz	r2, 8009422 <__ascii_mbtowc+0x1a>
 8009410:	b14b      	cbz	r3, 8009426 <__ascii_mbtowc+0x1e>
 8009412:	7813      	ldrb	r3, [r2, #0]
 8009414:	600b      	str	r3, [r1, #0]
 8009416:	7812      	ldrb	r2, [r2, #0]
 8009418:	1e10      	subs	r0, r2, #0
 800941a:	bf18      	it	ne
 800941c:	2001      	movne	r0, #1
 800941e:	b002      	add	sp, #8
 8009420:	4770      	bx	lr
 8009422:	4610      	mov	r0, r2
 8009424:	e7fb      	b.n	800941e <__ascii_mbtowc+0x16>
 8009426:	f06f 0001 	mvn.w	r0, #1
 800942a:	e7f8      	b.n	800941e <__ascii_mbtowc+0x16>

0800942c <_malloc_usable_size_r>:
 800942c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009430:	1f18      	subs	r0, r3, #4
 8009432:	2b00      	cmp	r3, #0
 8009434:	bfbc      	itt	lt
 8009436:	580b      	ldrlt	r3, [r1, r0]
 8009438:	18c0      	addlt	r0, r0, r3
 800943a:	4770      	bx	lr

0800943c <fiprintf>:
 800943c:	b40e      	push	{r1, r2, r3}
 800943e:	b503      	push	{r0, r1, lr}
 8009440:	4601      	mov	r1, r0
 8009442:	ab03      	add	r3, sp, #12
 8009444:	4805      	ldr	r0, [pc, #20]	@ (800945c <fiprintf+0x20>)
 8009446:	f853 2b04 	ldr.w	r2, [r3], #4
 800944a:	6800      	ldr	r0, [r0, #0]
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f000 f845 	bl	80094dc <_vfiprintf_r>
 8009452:	b002      	add	sp, #8
 8009454:	f85d eb04 	ldr.w	lr, [sp], #4
 8009458:	b003      	add	sp, #12
 800945a:	4770      	bx	lr
 800945c:	20000018 	.word	0x20000018

08009460 <__ascii_wctomb>:
 8009460:	4603      	mov	r3, r0
 8009462:	4608      	mov	r0, r1
 8009464:	b141      	cbz	r1, 8009478 <__ascii_wctomb+0x18>
 8009466:	2aff      	cmp	r2, #255	@ 0xff
 8009468:	d904      	bls.n	8009474 <__ascii_wctomb+0x14>
 800946a:	228a      	movs	r2, #138	@ 0x8a
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009472:	4770      	bx	lr
 8009474:	700a      	strb	r2, [r1, #0]
 8009476:	2001      	movs	r0, #1
 8009478:	4770      	bx	lr

0800947a <abort>:
 800947a:	b508      	push	{r3, lr}
 800947c:	2006      	movs	r0, #6
 800947e:	f000 fa85 	bl	800998c <raise>
 8009482:	2001      	movs	r0, #1
 8009484:	f7f8 ffa2 	bl	80023cc <_exit>

08009488 <__sfputc_r>:
 8009488:	6893      	ldr	r3, [r2, #8]
 800948a:	3b01      	subs	r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	b410      	push	{r4}
 8009490:	6093      	str	r3, [r2, #8]
 8009492:	da08      	bge.n	80094a6 <__sfputc_r+0x1e>
 8009494:	6994      	ldr	r4, [r2, #24]
 8009496:	42a3      	cmp	r3, r4
 8009498:	db01      	blt.n	800949e <__sfputc_r+0x16>
 800949a:	290a      	cmp	r1, #10
 800949c:	d103      	bne.n	80094a6 <__sfputc_r+0x1e>
 800949e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094a2:	f000 b933 	b.w	800970c <__swbuf_r>
 80094a6:	6813      	ldr	r3, [r2, #0]
 80094a8:	1c58      	adds	r0, r3, #1
 80094aa:	6010      	str	r0, [r2, #0]
 80094ac:	7019      	strb	r1, [r3, #0]
 80094ae:	4608      	mov	r0, r1
 80094b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <__sfputs_r>:
 80094b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b8:	4606      	mov	r6, r0
 80094ba:	460f      	mov	r7, r1
 80094bc:	4614      	mov	r4, r2
 80094be:	18d5      	adds	r5, r2, r3
 80094c0:	42ac      	cmp	r4, r5
 80094c2:	d101      	bne.n	80094c8 <__sfputs_r+0x12>
 80094c4:	2000      	movs	r0, #0
 80094c6:	e007      	b.n	80094d8 <__sfputs_r+0x22>
 80094c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094cc:	463a      	mov	r2, r7
 80094ce:	4630      	mov	r0, r6
 80094d0:	f7ff ffda 	bl	8009488 <__sfputc_r>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d1f3      	bne.n	80094c0 <__sfputs_r+0xa>
 80094d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094dc <_vfiprintf_r>:
 80094dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	460d      	mov	r5, r1
 80094e2:	b09d      	sub	sp, #116	@ 0x74
 80094e4:	4614      	mov	r4, r2
 80094e6:	4698      	mov	r8, r3
 80094e8:	4606      	mov	r6, r0
 80094ea:	b118      	cbz	r0, 80094f4 <_vfiprintf_r+0x18>
 80094ec:	6a03      	ldr	r3, [r0, #32]
 80094ee:	b90b      	cbnz	r3, 80094f4 <_vfiprintf_r+0x18>
 80094f0:	f7fe f924 	bl	800773c <__sinit>
 80094f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094f6:	07d9      	lsls	r1, r3, #31
 80094f8:	d405      	bmi.n	8009506 <_vfiprintf_r+0x2a>
 80094fa:	89ab      	ldrh	r3, [r5, #12]
 80094fc:	059a      	lsls	r2, r3, #22
 80094fe:	d402      	bmi.n	8009506 <_vfiprintf_r+0x2a>
 8009500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009502:	f7fe f988 	bl	8007816 <__retarget_lock_acquire_recursive>
 8009506:	89ab      	ldrh	r3, [r5, #12]
 8009508:	071b      	lsls	r3, r3, #28
 800950a:	d501      	bpl.n	8009510 <_vfiprintf_r+0x34>
 800950c:	692b      	ldr	r3, [r5, #16]
 800950e:	b99b      	cbnz	r3, 8009538 <_vfiprintf_r+0x5c>
 8009510:	4629      	mov	r1, r5
 8009512:	4630      	mov	r0, r6
 8009514:	f000 f938 	bl	8009788 <__swsetup_r>
 8009518:	b170      	cbz	r0, 8009538 <_vfiprintf_r+0x5c>
 800951a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800951c:	07dc      	lsls	r4, r3, #31
 800951e:	d504      	bpl.n	800952a <_vfiprintf_r+0x4e>
 8009520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009524:	b01d      	add	sp, #116	@ 0x74
 8009526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952a:	89ab      	ldrh	r3, [r5, #12]
 800952c:	0598      	lsls	r0, r3, #22
 800952e:	d4f7      	bmi.n	8009520 <_vfiprintf_r+0x44>
 8009530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009532:	f7fe f971 	bl	8007818 <__retarget_lock_release_recursive>
 8009536:	e7f3      	b.n	8009520 <_vfiprintf_r+0x44>
 8009538:	2300      	movs	r3, #0
 800953a:	9309      	str	r3, [sp, #36]	@ 0x24
 800953c:	2320      	movs	r3, #32
 800953e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009542:	f8cd 800c 	str.w	r8, [sp, #12]
 8009546:	2330      	movs	r3, #48	@ 0x30
 8009548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80096f8 <_vfiprintf_r+0x21c>
 800954c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009550:	f04f 0901 	mov.w	r9, #1
 8009554:	4623      	mov	r3, r4
 8009556:	469a      	mov	sl, r3
 8009558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800955c:	b10a      	cbz	r2, 8009562 <_vfiprintf_r+0x86>
 800955e:	2a25      	cmp	r2, #37	@ 0x25
 8009560:	d1f9      	bne.n	8009556 <_vfiprintf_r+0x7a>
 8009562:	ebba 0b04 	subs.w	fp, sl, r4
 8009566:	d00b      	beq.n	8009580 <_vfiprintf_r+0xa4>
 8009568:	465b      	mov	r3, fp
 800956a:	4622      	mov	r2, r4
 800956c:	4629      	mov	r1, r5
 800956e:	4630      	mov	r0, r6
 8009570:	f7ff ffa1 	bl	80094b6 <__sfputs_r>
 8009574:	3001      	adds	r0, #1
 8009576:	f000 80a7 	beq.w	80096c8 <_vfiprintf_r+0x1ec>
 800957a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800957c:	445a      	add	r2, fp
 800957e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009580:	f89a 3000 	ldrb.w	r3, [sl]
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 809f 	beq.w	80096c8 <_vfiprintf_r+0x1ec>
 800958a:	2300      	movs	r3, #0
 800958c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009594:	f10a 0a01 	add.w	sl, sl, #1
 8009598:	9304      	str	r3, [sp, #16]
 800959a:	9307      	str	r3, [sp, #28]
 800959c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80095a2:	4654      	mov	r4, sl
 80095a4:	2205      	movs	r2, #5
 80095a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095aa:	4853      	ldr	r0, [pc, #332]	@ (80096f8 <_vfiprintf_r+0x21c>)
 80095ac:	f7f6 fe30 	bl	8000210 <memchr>
 80095b0:	9a04      	ldr	r2, [sp, #16]
 80095b2:	b9d8      	cbnz	r0, 80095ec <_vfiprintf_r+0x110>
 80095b4:	06d1      	lsls	r1, r2, #27
 80095b6:	bf44      	itt	mi
 80095b8:	2320      	movmi	r3, #32
 80095ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095be:	0713      	lsls	r3, r2, #28
 80095c0:	bf44      	itt	mi
 80095c2:	232b      	movmi	r3, #43	@ 0x2b
 80095c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095c8:	f89a 3000 	ldrb.w	r3, [sl]
 80095cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ce:	d015      	beq.n	80095fc <_vfiprintf_r+0x120>
 80095d0:	9a07      	ldr	r2, [sp, #28]
 80095d2:	4654      	mov	r4, sl
 80095d4:	2000      	movs	r0, #0
 80095d6:	f04f 0c0a 	mov.w	ip, #10
 80095da:	4621      	mov	r1, r4
 80095dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095e0:	3b30      	subs	r3, #48	@ 0x30
 80095e2:	2b09      	cmp	r3, #9
 80095e4:	d94b      	bls.n	800967e <_vfiprintf_r+0x1a2>
 80095e6:	b1b0      	cbz	r0, 8009616 <_vfiprintf_r+0x13a>
 80095e8:	9207      	str	r2, [sp, #28]
 80095ea:	e014      	b.n	8009616 <_vfiprintf_r+0x13a>
 80095ec:	eba0 0308 	sub.w	r3, r0, r8
 80095f0:	fa09 f303 	lsl.w	r3, r9, r3
 80095f4:	4313      	orrs	r3, r2
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	46a2      	mov	sl, r4
 80095fa:	e7d2      	b.n	80095a2 <_vfiprintf_r+0xc6>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	1d19      	adds	r1, r3, #4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	9103      	str	r1, [sp, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	bfbb      	ittet	lt
 8009608:	425b      	neglt	r3, r3
 800960a:	f042 0202 	orrlt.w	r2, r2, #2
 800960e:	9307      	strge	r3, [sp, #28]
 8009610:	9307      	strlt	r3, [sp, #28]
 8009612:	bfb8      	it	lt
 8009614:	9204      	strlt	r2, [sp, #16]
 8009616:	7823      	ldrb	r3, [r4, #0]
 8009618:	2b2e      	cmp	r3, #46	@ 0x2e
 800961a:	d10a      	bne.n	8009632 <_vfiprintf_r+0x156>
 800961c:	7863      	ldrb	r3, [r4, #1]
 800961e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009620:	d132      	bne.n	8009688 <_vfiprintf_r+0x1ac>
 8009622:	9b03      	ldr	r3, [sp, #12]
 8009624:	1d1a      	adds	r2, r3, #4
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	9203      	str	r2, [sp, #12]
 800962a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800962e:	3402      	adds	r4, #2
 8009630:	9305      	str	r3, [sp, #20]
 8009632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009708 <_vfiprintf_r+0x22c>
 8009636:	7821      	ldrb	r1, [r4, #0]
 8009638:	2203      	movs	r2, #3
 800963a:	4650      	mov	r0, sl
 800963c:	f7f6 fde8 	bl	8000210 <memchr>
 8009640:	b138      	cbz	r0, 8009652 <_vfiprintf_r+0x176>
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	eba0 000a 	sub.w	r0, r0, sl
 8009648:	2240      	movs	r2, #64	@ 0x40
 800964a:	4082      	lsls	r2, r0
 800964c:	4313      	orrs	r3, r2
 800964e:	3401      	adds	r4, #1
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009656:	4829      	ldr	r0, [pc, #164]	@ (80096fc <_vfiprintf_r+0x220>)
 8009658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800965c:	2206      	movs	r2, #6
 800965e:	f7f6 fdd7 	bl	8000210 <memchr>
 8009662:	2800      	cmp	r0, #0
 8009664:	d03f      	beq.n	80096e6 <_vfiprintf_r+0x20a>
 8009666:	4b26      	ldr	r3, [pc, #152]	@ (8009700 <_vfiprintf_r+0x224>)
 8009668:	bb1b      	cbnz	r3, 80096b2 <_vfiprintf_r+0x1d6>
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	3307      	adds	r3, #7
 800966e:	f023 0307 	bic.w	r3, r3, #7
 8009672:	3308      	adds	r3, #8
 8009674:	9303      	str	r3, [sp, #12]
 8009676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009678:	443b      	add	r3, r7
 800967a:	9309      	str	r3, [sp, #36]	@ 0x24
 800967c:	e76a      	b.n	8009554 <_vfiprintf_r+0x78>
 800967e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009682:	460c      	mov	r4, r1
 8009684:	2001      	movs	r0, #1
 8009686:	e7a8      	b.n	80095da <_vfiprintf_r+0xfe>
 8009688:	2300      	movs	r3, #0
 800968a:	3401      	adds	r4, #1
 800968c:	9305      	str	r3, [sp, #20]
 800968e:	4619      	mov	r1, r3
 8009690:	f04f 0c0a 	mov.w	ip, #10
 8009694:	4620      	mov	r0, r4
 8009696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800969a:	3a30      	subs	r2, #48	@ 0x30
 800969c:	2a09      	cmp	r2, #9
 800969e:	d903      	bls.n	80096a8 <_vfiprintf_r+0x1cc>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0c6      	beq.n	8009632 <_vfiprintf_r+0x156>
 80096a4:	9105      	str	r1, [sp, #20]
 80096a6:	e7c4      	b.n	8009632 <_vfiprintf_r+0x156>
 80096a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80096ac:	4604      	mov	r4, r0
 80096ae:	2301      	movs	r3, #1
 80096b0:	e7f0      	b.n	8009694 <_vfiprintf_r+0x1b8>
 80096b2:	ab03      	add	r3, sp, #12
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	462a      	mov	r2, r5
 80096b8:	4b12      	ldr	r3, [pc, #72]	@ (8009704 <_vfiprintf_r+0x228>)
 80096ba:	a904      	add	r1, sp, #16
 80096bc:	4630      	mov	r0, r6
 80096be:	f7fd fbd9 	bl	8006e74 <_printf_float>
 80096c2:	4607      	mov	r7, r0
 80096c4:	1c78      	adds	r0, r7, #1
 80096c6:	d1d6      	bne.n	8009676 <_vfiprintf_r+0x19a>
 80096c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096ca:	07d9      	lsls	r1, r3, #31
 80096cc:	d405      	bmi.n	80096da <_vfiprintf_r+0x1fe>
 80096ce:	89ab      	ldrh	r3, [r5, #12]
 80096d0:	059a      	lsls	r2, r3, #22
 80096d2:	d402      	bmi.n	80096da <_vfiprintf_r+0x1fe>
 80096d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096d6:	f7fe f89f 	bl	8007818 <__retarget_lock_release_recursive>
 80096da:	89ab      	ldrh	r3, [r5, #12]
 80096dc:	065b      	lsls	r3, r3, #25
 80096de:	f53f af1f 	bmi.w	8009520 <_vfiprintf_r+0x44>
 80096e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096e4:	e71e      	b.n	8009524 <_vfiprintf_r+0x48>
 80096e6:	ab03      	add	r3, sp, #12
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	462a      	mov	r2, r5
 80096ec:	4b05      	ldr	r3, [pc, #20]	@ (8009704 <_vfiprintf_r+0x228>)
 80096ee:	a904      	add	r1, sp, #16
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7fd fe57 	bl	80073a4 <_printf_i>
 80096f6:	e7e4      	b.n	80096c2 <_vfiprintf_r+0x1e6>
 80096f8:	0800bae9 	.word	0x0800bae9
 80096fc:	0800baf3 	.word	0x0800baf3
 8009700:	08006e75 	.word	0x08006e75
 8009704:	080094b7 	.word	0x080094b7
 8009708:	0800baef 	.word	0x0800baef

0800970c <__swbuf_r>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	460e      	mov	r6, r1
 8009710:	4614      	mov	r4, r2
 8009712:	4605      	mov	r5, r0
 8009714:	b118      	cbz	r0, 800971e <__swbuf_r+0x12>
 8009716:	6a03      	ldr	r3, [r0, #32]
 8009718:	b90b      	cbnz	r3, 800971e <__swbuf_r+0x12>
 800971a:	f7fe f80f 	bl	800773c <__sinit>
 800971e:	69a3      	ldr	r3, [r4, #24]
 8009720:	60a3      	str	r3, [r4, #8]
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	071a      	lsls	r2, r3, #28
 8009726:	d501      	bpl.n	800972c <__swbuf_r+0x20>
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	b943      	cbnz	r3, 800973e <__swbuf_r+0x32>
 800972c:	4621      	mov	r1, r4
 800972e:	4628      	mov	r0, r5
 8009730:	f000 f82a 	bl	8009788 <__swsetup_r>
 8009734:	b118      	cbz	r0, 800973e <__swbuf_r+0x32>
 8009736:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800973a:	4638      	mov	r0, r7
 800973c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	6922      	ldr	r2, [r4, #16]
 8009742:	1a98      	subs	r0, r3, r2
 8009744:	6963      	ldr	r3, [r4, #20]
 8009746:	b2f6      	uxtb	r6, r6
 8009748:	4283      	cmp	r3, r0
 800974a:	4637      	mov	r7, r6
 800974c:	dc05      	bgt.n	800975a <__swbuf_r+0x4e>
 800974e:	4621      	mov	r1, r4
 8009750:	4628      	mov	r0, r5
 8009752:	f7ff f937 	bl	80089c4 <_fflush_r>
 8009756:	2800      	cmp	r0, #0
 8009758:	d1ed      	bne.n	8009736 <__swbuf_r+0x2a>
 800975a:	68a3      	ldr	r3, [r4, #8]
 800975c:	3b01      	subs	r3, #1
 800975e:	60a3      	str	r3, [r4, #8]
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	6022      	str	r2, [r4, #0]
 8009766:	701e      	strb	r6, [r3, #0]
 8009768:	6962      	ldr	r2, [r4, #20]
 800976a:	1c43      	adds	r3, r0, #1
 800976c:	429a      	cmp	r2, r3
 800976e:	d004      	beq.n	800977a <__swbuf_r+0x6e>
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	07db      	lsls	r3, r3, #31
 8009774:	d5e1      	bpl.n	800973a <__swbuf_r+0x2e>
 8009776:	2e0a      	cmp	r6, #10
 8009778:	d1df      	bne.n	800973a <__swbuf_r+0x2e>
 800977a:	4621      	mov	r1, r4
 800977c:	4628      	mov	r0, r5
 800977e:	f7ff f921 	bl	80089c4 <_fflush_r>
 8009782:	2800      	cmp	r0, #0
 8009784:	d0d9      	beq.n	800973a <__swbuf_r+0x2e>
 8009786:	e7d6      	b.n	8009736 <__swbuf_r+0x2a>

08009788 <__swsetup_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4b29      	ldr	r3, [pc, #164]	@ (8009830 <__swsetup_r+0xa8>)
 800978c:	4605      	mov	r5, r0
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	460c      	mov	r4, r1
 8009792:	b118      	cbz	r0, 800979c <__swsetup_r+0x14>
 8009794:	6a03      	ldr	r3, [r0, #32]
 8009796:	b90b      	cbnz	r3, 800979c <__swsetup_r+0x14>
 8009798:	f7fd ffd0 	bl	800773c <__sinit>
 800979c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097a0:	0719      	lsls	r1, r3, #28
 80097a2:	d422      	bmi.n	80097ea <__swsetup_r+0x62>
 80097a4:	06da      	lsls	r2, r3, #27
 80097a6:	d407      	bmi.n	80097b8 <__swsetup_r+0x30>
 80097a8:	2209      	movs	r2, #9
 80097aa:	602a      	str	r2, [r5, #0]
 80097ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097b6:	e033      	b.n	8009820 <__swsetup_r+0x98>
 80097b8:	0758      	lsls	r0, r3, #29
 80097ba:	d512      	bpl.n	80097e2 <__swsetup_r+0x5a>
 80097bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097be:	b141      	cbz	r1, 80097d2 <__swsetup_r+0x4a>
 80097c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097c4:	4299      	cmp	r1, r3
 80097c6:	d002      	beq.n	80097ce <__swsetup_r+0x46>
 80097c8:	4628      	mov	r0, r5
 80097ca:	f7ff fdd3 	bl	8009374 <_free_r>
 80097ce:	2300      	movs	r3, #0
 80097d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	2300      	movs	r3, #0
 80097dc:	6063      	str	r3, [r4, #4]
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	f043 0308 	orr.w	r3, r3, #8
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	b94b      	cbnz	r3, 8009802 <__swsetup_r+0x7a>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f8:	d003      	beq.n	8009802 <__swsetup_r+0x7a>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4628      	mov	r0, r5
 80097fe:	f000 f83f 	bl	8009880 <__smakebuf_r>
 8009802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009806:	f013 0201 	ands.w	r2, r3, #1
 800980a:	d00a      	beq.n	8009822 <__swsetup_r+0x9a>
 800980c:	2200      	movs	r2, #0
 800980e:	60a2      	str	r2, [r4, #8]
 8009810:	6962      	ldr	r2, [r4, #20]
 8009812:	4252      	negs	r2, r2
 8009814:	61a2      	str	r2, [r4, #24]
 8009816:	6922      	ldr	r2, [r4, #16]
 8009818:	b942      	cbnz	r2, 800982c <__swsetup_r+0xa4>
 800981a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800981e:	d1c5      	bne.n	80097ac <__swsetup_r+0x24>
 8009820:	bd38      	pop	{r3, r4, r5, pc}
 8009822:	0799      	lsls	r1, r3, #30
 8009824:	bf58      	it	pl
 8009826:	6962      	ldrpl	r2, [r4, #20]
 8009828:	60a2      	str	r2, [r4, #8]
 800982a:	e7f4      	b.n	8009816 <__swsetup_r+0x8e>
 800982c:	2000      	movs	r0, #0
 800982e:	e7f7      	b.n	8009820 <__swsetup_r+0x98>
 8009830:	20000018 	.word	0x20000018

08009834 <__swhatbuf_r>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	460c      	mov	r4, r1
 8009838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983c:	2900      	cmp	r1, #0
 800983e:	b096      	sub	sp, #88	@ 0x58
 8009840:	4615      	mov	r5, r2
 8009842:	461e      	mov	r6, r3
 8009844:	da0d      	bge.n	8009862 <__swhatbuf_r+0x2e>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800984c:	f04f 0100 	mov.w	r1, #0
 8009850:	bf14      	ite	ne
 8009852:	2340      	movne	r3, #64	@ 0x40
 8009854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009858:	2000      	movs	r0, #0
 800985a:	6031      	str	r1, [r6, #0]
 800985c:	602b      	str	r3, [r5, #0]
 800985e:	b016      	add	sp, #88	@ 0x58
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	466a      	mov	r2, sp
 8009864:	f000 f848 	bl	80098f8 <_fstat_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	dbec      	blt.n	8009846 <__swhatbuf_r+0x12>
 800986c:	9901      	ldr	r1, [sp, #4]
 800986e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009876:	4259      	negs	r1, r3
 8009878:	4159      	adcs	r1, r3
 800987a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800987e:	e7eb      	b.n	8009858 <__swhatbuf_r+0x24>

08009880 <__smakebuf_r>:
 8009880:	898b      	ldrh	r3, [r1, #12]
 8009882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009884:	079d      	lsls	r5, r3, #30
 8009886:	4606      	mov	r6, r0
 8009888:	460c      	mov	r4, r1
 800988a:	d507      	bpl.n	800989c <__smakebuf_r+0x1c>
 800988c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	2301      	movs	r3, #1
 8009896:	6163      	str	r3, [r4, #20]
 8009898:	b003      	add	sp, #12
 800989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800989c:	ab01      	add	r3, sp, #4
 800989e:	466a      	mov	r2, sp
 80098a0:	f7ff ffc8 	bl	8009834 <__swhatbuf_r>
 80098a4:	9f00      	ldr	r7, [sp, #0]
 80098a6:	4605      	mov	r5, r0
 80098a8:	4639      	mov	r1, r7
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7fe ff86 	bl	80087bc <_malloc_r>
 80098b0:	b948      	cbnz	r0, 80098c6 <__smakebuf_r+0x46>
 80098b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b6:	059a      	lsls	r2, r3, #22
 80098b8:	d4ee      	bmi.n	8009898 <__smakebuf_r+0x18>
 80098ba:	f023 0303 	bic.w	r3, r3, #3
 80098be:	f043 0302 	orr.w	r3, r3, #2
 80098c2:	81a3      	strh	r3, [r4, #12]
 80098c4:	e7e2      	b.n	800988c <__smakebuf_r+0xc>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	6020      	str	r0, [r4, #0]
 80098ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	9b01      	ldr	r3, [sp, #4]
 80098d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098d6:	b15b      	cbz	r3, 80098f0 <__smakebuf_r+0x70>
 80098d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098dc:	4630      	mov	r0, r6
 80098de:	f000 f81d 	bl	800991c <_isatty_r>
 80098e2:	b128      	cbz	r0, 80098f0 <__smakebuf_r+0x70>
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	f023 0303 	bic.w	r3, r3, #3
 80098ea:	f043 0301 	orr.w	r3, r3, #1
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	431d      	orrs	r5, r3
 80098f4:	81a5      	strh	r5, [r4, #12]
 80098f6:	e7cf      	b.n	8009898 <__smakebuf_r+0x18>

080098f8 <_fstat_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	@ (8009918 <_fstat_r+0x20>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	4611      	mov	r1, r2
 8009904:	602b      	str	r3, [r5, #0]
 8009906:	f7f8 fdb1 	bl	800246c <_fstat>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d102      	bne.n	8009914 <_fstat_r+0x1c>
 800990e:	682b      	ldr	r3, [r5, #0]
 8009910:	b103      	cbz	r3, 8009914 <_fstat_r+0x1c>
 8009912:	6023      	str	r3, [r4, #0]
 8009914:	bd38      	pop	{r3, r4, r5, pc}
 8009916:	bf00      	nop
 8009918:	20000598 	.word	0x20000598

0800991c <_isatty_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	@ (8009938 <_isatty_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7f8 fdb0 	bl	800248c <_isatty>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_isatty_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_isatty_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	20000598 	.word	0x20000598

0800993c <_raise_r>:
 800993c:	291f      	cmp	r1, #31
 800993e:	b538      	push	{r3, r4, r5, lr}
 8009940:	4605      	mov	r5, r0
 8009942:	460c      	mov	r4, r1
 8009944:	d904      	bls.n	8009950 <_raise_r+0x14>
 8009946:	2316      	movs	r3, #22
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009952:	b112      	cbz	r2, 800995a <_raise_r+0x1e>
 8009954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009958:	b94b      	cbnz	r3, 800996e <_raise_r+0x32>
 800995a:	4628      	mov	r0, r5
 800995c:	f000 f830 	bl	80099c0 <_getpid_r>
 8009960:	4622      	mov	r2, r4
 8009962:	4601      	mov	r1, r0
 8009964:	4628      	mov	r0, r5
 8009966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996a:	f000 b817 	b.w	800999c <_kill_r>
 800996e:	2b01      	cmp	r3, #1
 8009970:	d00a      	beq.n	8009988 <_raise_r+0x4c>
 8009972:	1c59      	adds	r1, r3, #1
 8009974:	d103      	bne.n	800997e <_raise_r+0x42>
 8009976:	2316      	movs	r3, #22
 8009978:	6003      	str	r3, [r0, #0]
 800997a:	2001      	movs	r0, #1
 800997c:	e7e7      	b.n	800994e <_raise_r+0x12>
 800997e:	2100      	movs	r1, #0
 8009980:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009984:	4620      	mov	r0, r4
 8009986:	4798      	blx	r3
 8009988:	2000      	movs	r0, #0
 800998a:	e7e0      	b.n	800994e <_raise_r+0x12>

0800998c <raise>:
 800998c:	4b02      	ldr	r3, [pc, #8]	@ (8009998 <raise+0xc>)
 800998e:	4601      	mov	r1, r0
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f7ff bfd3 	b.w	800993c <_raise_r>
 8009996:	bf00      	nop
 8009998:	20000018 	.word	0x20000018

0800999c <_kill_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4d07      	ldr	r5, [pc, #28]	@ (80099bc <_kill_r+0x20>)
 80099a0:	2300      	movs	r3, #0
 80099a2:	4604      	mov	r4, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	4611      	mov	r1, r2
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	f7f8 fcff 	bl	80023ac <_kill>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d102      	bne.n	80099b8 <_kill_r+0x1c>
 80099b2:	682b      	ldr	r3, [r5, #0]
 80099b4:	b103      	cbz	r3, 80099b8 <_kill_r+0x1c>
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	bd38      	pop	{r3, r4, r5, pc}
 80099ba:	bf00      	nop
 80099bc:	20000598 	.word	0x20000598

080099c0 <_getpid_r>:
 80099c0:	f7f8 bcec 	b.w	800239c <_getpid>

080099c4 <pow>:
 80099c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c6:	ed2d 8b02 	vpush	{d8}
 80099ca:	eeb0 8a40 	vmov.f32	s16, s0
 80099ce:	eef0 8a60 	vmov.f32	s17, s1
 80099d2:	ec55 4b11 	vmov	r4, r5, d1
 80099d6:	f000 fa23 	bl	8009e20 <__ieee754_pow>
 80099da:	4622      	mov	r2, r4
 80099dc:	462b      	mov	r3, r5
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	ec57 6b10 	vmov	r6, r7, d0
 80099e6:	f7f7 f8c1 	bl	8000b6c <__aeabi_dcmpun>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d13b      	bne.n	8009a66 <pow+0xa2>
 80099ee:	ec51 0b18 	vmov	r0, r1, d8
 80099f2:	2200      	movs	r2, #0
 80099f4:	2300      	movs	r3, #0
 80099f6:	f7f7 f887 	bl	8000b08 <__aeabi_dcmpeq>
 80099fa:	b1b8      	cbz	r0, 8009a2c <pow+0x68>
 80099fc:	2200      	movs	r2, #0
 80099fe:	2300      	movs	r3, #0
 8009a00:	4620      	mov	r0, r4
 8009a02:	4629      	mov	r1, r5
 8009a04:	f7f7 f880 	bl	8000b08 <__aeabi_dcmpeq>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d146      	bne.n	8009a9a <pow+0xd6>
 8009a0c:	ec45 4b10 	vmov	d0, r4, r5
 8009a10:	f000 f8ca 	bl	8009ba8 <finite>
 8009a14:	b338      	cbz	r0, 8009a66 <pow+0xa2>
 8009a16:	2200      	movs	r2, #0
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	f7f7 f87d 	bl	8000b1c <__aeabi_dcmplt>
 8009a22:	b300      	cbz	r0, 8009a66 <pow+0xa2>
 8009a24:	f7fd fecc 	bl	80077c0 <__errno>
 8009a28:	2322      	movs	r3, #34	@ 0x22
 8009a2a:	e01b      	b.n	8009a64 <pow+0xa0>
 8009a2c:	ec47 6b10 	vmov	d0, r6, r7
 8009a30:	f000 f8ba 	bl	8009ba8 <finite>
 8009a34:	b9e0      	cbnz	r0, 8009a70 <pow+0xac>
 8009a36:	eeb0 0a48 	vmov.f32	s0, s16
 8009a3a:	eef0 0a68 	vmov.f32	s1, s17
 8009a3e:	f000 f8b3 	bl	8009ba8 <finite>
 8009a42:	b1a8      	cbz	r0, 8009a70 <pow+0xac>
 8009a44:	ec45 4b10 	vmov	d0, r4, r5
 8009a48:	f000 f8ae 	bl	8009ba8 <finite>
 8009a4c:	b180      	cbz	r0, 8009a70 <pow+0xac>
 8009a4e:	4632      	mov	r2, r6
 8009a50:	463b      	mov	r3, r7
 8009a52:	4630      	mov	r0, r6
 8009a54:	4639      	mov	r1, r7
 8009a56:	f7f7 f889 	bl	8000b6c <__aeabi_dcmpun>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0e2      	beq.n	8009a24 <pow+0x60>
 8009a5e:	f7fd feaf 	bl	80077c0 <__errno>
 8009a62:	2321      	movs	r3, #33	@ 0x21
 8009a64:	6003      	str	r3, [r0, #0]
 8009a66:	ecbd 8b02 	vpop	{d8}
 8009a6a:	ec47 6b10 	vmov	d0, r6, r7
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a70:	2200      	movs	r2, #0
 8009a72:	2300      	movs	r3, #0
 8009a74:	4630      	mov	r0, r6
 8009a76:	4639      	mov	r1, r7
 8009a78:	f7f7 f846 	bl	8000b08 <__aeabi_dcmpeq>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d0f2      	beq.n	8009a66 <pow+0xa2>
 8009a80:	eeb0 0a48 	vmov.f32	s0, s16
 8009a84:	eef0 0a68 	vmov.f32	s1, s17
 8009a88:	f000 f88e 	bl	8009ba8 <finite>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d0ea      	beq.n	8009a66 <pow+0xa2>
 8009a90:	ec45 4b10 	vmov	d0, r4, r5
 8009a94:	f000 f888 	bl	8009ba8 <finite>
 8009a98:	e7c3      	b.n	8009a22 <pow+0x5e>
 8009a9a:	4f01      	ldr	r7, [pc, #4]	@ (8009aa0 <pow+0xdc>)
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	e7e2      	b.n	8009a66 <pow+0xa2>
 8009aa0:	3ff00000 	.word	0x3ff00000

08009aa4 <sqrt>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	ed2d 8b02 	vpush	{d8}
 8009aaa:	ec55 4b10 	vmov	r4, r5, d0
 8009aae:	f000 f8db 	bl	8009c68 <__ieee754_sqrt>
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	eeb0 8a40 	vmov.f32	s16, s0
 8009abe:	eef0 8a60 	vmov.f32	s17, s1
 8009ac2:	f7f7 f853 	bl	8000b6c <__aeabi_dcmpun>
 8009ac6:	b990      	cbnz	r0, 8009aee <sqrt+0x4a>
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2300      	movs	r3, #0
 8009acc:	4620      	mov	r0, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f7f7 f824 	bl	8000b1c <__aeabi_dcmplt>
 8009ad4:	b158      	cbz	r0, 8009aee <sqrt+0x4a>
 8009ad6:	f7fd fe73 	bl	80077c0 <__errno>
 8009ada:	2321      	movs	r3, #33	@ 0x21
 8009adc:	6003      	str	r3, [r0, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f7f6 fed1 	bl	800088c <__aeabi_ddiv>
 8009aea:	ec41 0b18 	vmov	d8, r0, r1
 8009aee:	eeb0 0a48 	vmov.f32	s0, s16
 8009af2:	eef0 0a68 	vmov.f32	s1, s17
 8009af6:	ecbd 8b02 	vpop	{d8}
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	0000      	movs	r0, r0
	...

08009b00 <cos>:
 8009b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b02:	ec53 2b10 	vmov	r2, r3, d0
 8009b06:	4826      	ldr	r0, [pc, #152]	@ (8009ba0 <cos+0xa0>)
 8009b08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b0c:	4281      	cmp	r1, r0
 8009b0e:	d806      	bhi.n	8009b1e <cos+0x1e>
 8009b10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009b98 <cos+0x98>
 8009b14:	b005      	add	sp, #20
 8009b16:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b1a:	f001 bc55 	b.w	800b3c8 <__kernel_cos>
 8009b1e:	4821      	ldr	r0, [pc, #132]	@ (8009ba4 <cos+0xa4>)
 8009b20:	4281      	cmp	r1, r0
 8009b22:	d908      	bls.n	8009b36 <cos+0x36>
 8009b24:	4610      	mov	r0, r2
 8009b26:	4619      	mov	r1, r3
 8009b28:	f7f6 fbce 	bl	80002c8 <__aeabi_dsub>
 8009b2c:	ec41 0b10 	vmov	d0, r0, r1
 8009b30:	b005      	add	sp, #20
 8009b32:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b36:	4668      	mov	r0, sp
 8009b38:	f000 feb6 	bl	800a8a8 <__ieee754_rem_pio2>
 8009b3c:	f000 0003 	and.w	r0, r0, #3
 8009b40:	2801      	cmp	r0, #1
 8009b42:	d00b      	beq.n	8009b5c <cos+0x5c>
 8009b44:	2802      	cmp	r0, #2
 8009b46:	d015      	beq.n	8009b74 <cos+0x74>
 8009b48:	b9d8      	cbnz	r0, 8009b82 <cos+0x82>
 8009b4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b4e:	ed9d 0b00 	vldr	d0, [sp]
 8009b52:	f001 fc39 	bl	800b3c8 <__kernel_cos>
 8009b56:	ec51 0b10 	vmov	r0, r1, d0
 8009b5a:	e7e7      	b.n	8009b2c <cos+0x2c>
 8009b5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b60:	ed9d 0b00 	vldr	d0, [sp]
 8009b64:	f001 fcf8 	bl	800b558 <__kernel_sin>
 8009b68:	ec53 2b10 	vmov	r2, r3, d0
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009b72:	e7db      	b.n	8009b2c <cos+0x2c>
 8009b74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b78:	ed9d 0b00 	vldr	d0, [sp]
 8009b7c:	f001 fc24 	bl	800b3c8 <__kernel_cos>
 8009b80:	e7f2      	b.n	8009b68 <cos+0x68>
 8009b82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b86:	ed9d 0b00 	vldr	d0, [sp]
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	f001 fce4 	bl	800b558 <__kernel_sin>
 8009b90:	e7e1      	b.n	8009b56 <cos+0x56>
 8009b92:	bf00      	nop
 8009b94:	f3af 8000 	nop.w
	...
 8009ba0:	3fe921fb 	.word	0x3fe921fb
 8009ba4:	7fefffff 	.word	0x7fefffff

08009ba8 <finite>:
 8009ba8:	b082      	sub	sp, #8
 8009baa:	ed8d 0b00 	vstr	d0, [sp]
 8009bae:	9801      	ldr	r0, [sp, #4]
 8009bb0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009bb4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009bb8:	0fc0      	lsrs	r0, r0, #31
 8009bba:	b002      	add	sp, #8
 8009bbc:	4770      	bx	lr
	...

08009bc0 <sin>:
 8009bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bc2:	ec53 2b10 	vmov	r2, r3, d0
 8009bc6:	4826      	ldr	r0, [pc, #152]	@ (8009c60 <sin+0xa0>)
 8009bc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009bcc:	4281      	cmp	r1, r0
 8009bce:	d807      	bhi.n	8009be0 <sin+0x20>
 8009bd0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009c58 <sin+0x98>
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	b005      	add	sp, #20
 8009bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bdc:	f001 bcbc 	b.w	800b558 <__kernel_sin>
 8009be0:	4820      	ldr	r0, [pc, #128]	@ (8009c64 <sin+0xa4>)
 8009be2:	4281      	cmp	r1, r0
 8009be4:	d908      	bls.n	8009bf8 <sin+0x38>
 8009be6:	4610      	mov	r0, r2
 8009be8:	4619      	mov	r1, r3
 8009bea:	f7f6 fb6d 	bl	80002c8 <__aeabi_dsub>
 8009bee:	ec41 0b10 	vmov	d0, r0, r1
 8009bf2:	b005      	add	sp, #20
 8009bf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bf8:	4668      	mov	r0, sp
 8009bfa:	f000 fe55 	bl	800a8a8 <__ieee754_rem_pio2>
 8009bfe:	f000 0003 	and.w	r0, r0, #3
 8009c02:	2801      	cmp	r0, #1
 8009c04:	d00c      	beq.n	8009c20 <sin+0x60>
 8009c06:	2802      	cmp	r0, #2
 8009c08:	d011      	beq.n	8009c2e <sin+0x6e>
 8009c0a:	b9e8      	cbnz	r0, 8009c48 <sin+0x88>
 8009c0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c10:	ed9d 0b00 	vldr	d0, [sp]
 8009c14:	2001      	movs	r0, #1
 8009c16:	f001 fc9f 	bl	800b558 <__kernel_sin>
 8009c1a:	ec51 0b10 	vmov	r0, r1, d0
 8009c1e:	e7e6      	b.n	8009bee <sin+0x2e>
 8009c20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c24:	ed9d 0b00 	vldr	d0, [sp]
 8009c28:	f001 fbce 	bl	800b3c8 <__kernel_cos>
 8009c2c:	e7f5      	b.n	8009c1a <sin+0x5a>
 8009c2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c32:	ed9d 0b00 	vldr	d0, [sp]
 8009c36:	2001      	movs	r0, #1
 8009c38:	f001 fc8e 	bl	800b558 <__kernel_sin>
 8009c3c:	ec53 2b10 	vmov	r2, r3, d0
 8009c40:	4610      	mov	r0, r2
 8009c42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009c46:	e7d2      	b.n	8009bee <sin+0x2e>
 8009c48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c4c:	ed9d 0b00 	vldr	d0, [sp]
 8009c50:	f001 fbba 	bl	800b3c8 <__kernel_cos>
 8009c54:	e7f2      	b.n	8009c3c <sin+0x7c>
 8009c56:	bf00      	nop
	...
 8009c60:	3fe921fb 	.word	0x3fe921fb
 8009c64:	7fefffff 	.word	0x7fefffff

08009c68 <__ieee754_sqrt>:
 8009c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	4a68      	ldr	r2, [pc, #416]	@ (8009e10 <__ieee754_sqrt+0x1a8>)
 8009c6e:	ec55 4b10 	vmov	r4, r5, d0
 8009c72:	43aa      	bics	r2, r5
 8009c74:	462b      	mov	r3, r5
 8009c76:	4621      	mov	r1, r4
 8009c78:	d110      	bne.n	8009c9c <__ieee754_sqrt+0x34>
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	f7f6 fcda 	bl	8000638 <__aeabi_dmul>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7f6 fb1e 	bl	80002cc <__adddf3>
 8009c90:	4604      	mov	r4, r0
 8009c92:	460d      	mov	r5, r1
 8009c94:	ec45 4b10 	vmov	d0, r4, r5
 8009c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9c:	2d00      	cmp	r5, #0
 8009c9e:	dc0e      	bgt.n	8009cbe <__ieee754_sqrt+0x56>
 8009ca0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009ca4:	4322      	orrs	r2, r4
 8009ca6:	d0f5      	beq.n	8009c94 <__ieee754_sqrt+0x2c>
 8009ca8:	b19d      	cbz	r5, 8009cd2 <__ieee754_sqrt+0x6a>
 8009caa:	4622      	mov	r2, r4
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f7f6 fb0a 	bl	80002c8 <__aeabi_dsub>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	f7f6 fde8 	bl	800088c <__aeabi_ddiv>
 8009cbc:	e7e8      	b.n	8009c90 <__ieee754_sqrt+0x28>
 8009cbe:	152a      	asrs	r2, r5, #20
 8009cc0:	d115      	bne.n	8009cee <__ieee754_sqrt+0x86>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e009      	b.n	8009cda <__ieee754_sqrt+0x72>
 8009cc6:	0acb      	lsrs	r3, r1, #11
 8009cc8:	3a15      	subs	r2, #21
 8009cca:	0549      	lsls	r1, r1, #21
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d0fa      	beq.n	8009cc6 <__ieee754_sqrt+0x5e>
 8009cd0:	e7f7      	b.n	8009cc2 <__ieee754_sqrt+0x5a>
 8009cd2:	462a      	mov	r2, r5
 8009cd4:	e7fa      	b.n	8009ccc <__ieee754_sqrt+0x64>
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	3001      	adds	r0, #1
 8009cda:	02dc      	lsls	r4, r3, #11
 8009cdc:	d5fb      	bpl.n	8009cd6 <__ieee754_sqrt+0x6e>
 8009cde:	1e44      	subs	r4, r0, #1
 8009ce0:	1b12      	subs	r2, r2, r4
 8009ce2:	f1c0 0420 	rsb	r4, r0, #32
 8009ce6:	fa21 f404 	lsr.w	r4, r1, r4
 8009cea:	4323      	orrs	r3, r4
 8009cec:	4081      	lsls	r1, r0
 8009cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cf2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cfa:	07d2      	lsls	r2, r2, #31
 8009cfc:	bf5c      	itt	pl
 8009cfe:	005b      	lslpl	r3, r3, #1
 8009d00:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009d04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d08:	bf58      	it	pl
 8009d0a:	0049      	lslpl	r1, r1, #1
 8009d0c:	2600      	movs	r6, #0
 8009d0e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009d12:	106d      	asrs	r5, r5, #1
 8009d14:	0049      	lsls	r1, r1, #1
 8009d16:	2016      	movs	r0, #22
 8009d18:	4632      	mov	r2, r6
 8009d1a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009d1e:	1917      	adds	r7, r2, r4
 8009d20:	429f      	cmp	r7, r3
 8009d22:	bfde      	ittt	le
 8009d24:	193a      	addle	r2, r7, r4
 8009d26:	1bdb      	suble	r3, r3, r7
 8009d28:	1936      	addle	r6, r6, r4
 8009d2a:	0fcf      	lsrs	r7, r1, #31
 8009d2c:	3801      	subs	r0, #1
 8009d2e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009d32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009d36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009d3a:	d1f0      	bne.n	8009d1e <__ieee754_sqrt+0xb6>
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	2720      	movs	r7, #32
 8009d40:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009d44:	429a      	cmp	r2, r3
 8009d46:	eb00 0e0c 	add.w	lr, r0, ip
 8009d4a:	db02      	blt.n	8009d52 <__ieee754_sqrt+0xea>
 8009d4c:	d113      	bne.n	8009d76 <__ieee754_sqrt+0x10e>
 8009d4e:	458e      	cmp	lr, r1
 8009d50:	d811      	bhi.n	8009d76 <__ieee754_sqrt+0x10e>
 8009d52:	f1be 0f00 	cmp.w	lr, #0
 8009d56:	eb0e 000c 	add.w	r0, lr, ip
 8009d5a:	da42      	bge.n	8009de2 <__ieee754_sqrt+0x17a>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	db40      	blt.n	8009de2 <__ieee754_sqrt+0x17a>
 8009d60:	f102 0801 	add.w	r8, r2, #1
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	458e      	cmp	lr, r1
 8009d68:	bf88      	it	hi
 8009d6a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8009d6e:	eba1 010e 	sub.w	r1, r1, lr
 8009d72:	4464      	add	r4, ip
 8009d74:	4642      	mov	r2, r8
 8009d76:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009d7a:	3f01      	subs	r7, #1
 8009d7c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009d80:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009d84:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009d88:	d1dc      	bne.n	8009d44 <__ieee754_sqrt+0xdc>
 8009d8a:	4319      	orrs	r1, r3
 8009d8c:	d01b      	beq.n	8009dc6 <__ieee754_sqrt+0x15e>
 8009d8e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009e14 <__ieee754_sqrt+0x1ac>
 8009d92:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009e18 <__ieee754_sqrt+0x1b0>
 8009d96:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d9a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d9e:	f7f6 fa93 	bl	80002c8 <__aeabi_dsub>
 8009da2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4640      	mov	r0, r8
 8009dac:	4649      	mov	r1, r9
 8009dae:	f7f6 febf 	bl	8000b30 <__aeabi_dcmple>
 8009db2:	b140      	cbz	r0, 8009dc6 <__ieee754_sqrt+0x15e>
 8009db4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8009db8:	e9da 0100 	ldrd	r0, r1, [sl]
 8009dbc:	e9db 2300 	ldrd	r2, r3, [fp]
 8009dc0:	d111      	bne.n	8009de6 <__ieee754_sqrt+0x17e>
 8009dc2:	3601      	adds	r6, #1
 8009dc4:	463c      	mov	r4, r7
 8009dc6:	1072      	asrs	r2, r6, #1
 8009dc8:	0863      	lsrs	r3, r4, #1
 8009dca:	07f1      	lsls	r1, r6, #31
 8009dcc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009dd0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009dd4:	bf48      	it	mi
 8009dd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009dda:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009dde:	4618      	mov	r0, r3
 8009de0:	e756      	b.n	8009c90 <__ieee754_sqrt+0x28>
 8009de2:	4690      	mov	r8, r2
 8009de4:	e7be      	b.n	8009d64 <__ieee754_sqrt+0xfc>
 8009de6:	f7f6 fa71 	bl	80002cc <__adddf3>
 8009dea:	e9da 8900 	ldrd	r8, r9, [sl]
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	f7f6 fe91 	bl	8000b1c <__aeabi_dcmplt>
 8009dfa:	b120      	cbz	r0, 8009e06 <__ieee754_sqrt+0x19e>
 8009dfc:	1ca0      	adds	r0, r4, #2
 8009dfe:	bf08      	it	eq
 8009e00:	3601      	addeq	r6, #1
 8009e02:	3402      	adds	r4, #2
 8009e04:	e7df      	b.n	8009dc6 <__ieee754_sqrt+0x15e>
 8009e06:	1c63      	adds	r3, r4, #1
 8009e08:	f023 0401 	bic.w	r4, r3, #1
 8009e0c:	e7db      	b.n	8009dc6 <__ieee754_sqrt+0x15e>
 8009e0e:	bf00      	nop
 8009e10:	7ff00000 	.word	0x7ff00000
 8009e14:	200001e0 	.word	0x200001e0
 8009e18:	200001d8 	.word	0x200001d8
 8009e1c:	00000000 	.word	0x00000000

08009e20 <__ieee754_pow>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	b091      	sub	sp, #68	@ 0x44
 8009e26:	ed8d 1b00 	vstr	d1, [sp]
 8009e2a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009e2e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009e32:	ea5a 0001 	orrs.w	r0, sl, r1
 8009e36:	ec57 6b10 	vmov	r6, r7, d0
 8009e3a:	d113      	bne.n	8009e64 <__ieee754_pow+0x44>
 8009e3c:	19b3      	adds	r3, r6, r6
 8009e3e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009e42:	4152      	adcs	r2, r2
 8009e44:	4298      	cmp	r0, r3
 8009e46:	4b98      	ldr	r3, [pc, #608]	@ (800a0a8 <__ieee754_pow+0x288>)
 8009e48:	4193      	sbcs	r3, r2
 8009e4a:	f080 84ea 	bcs.w	800a822 <__ieee754_pow+0xa02>
 8009e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 fa39 	bl	80002cc <__adddf3>
 8009e5a:	ec41 0b10 	vmov	d0, r0, r1
 8009e5e:	b011      	add	sp, #68	@ 0x44
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	4a91      	ldr	r2, [pc, #580]	@ (800a0ac <__ieee754_pow+0x28c>)
 8009e66:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009e6a:	4590      	cmp	r8, r2
 8009e6c:	463d      	mov	r5, r7
 8009e6e:	4633      	mov	r3, r6
 8009e70:	d806      	bhi.n	8009e80 <__ieee754_pow+0x60>
 8009e72:	d101      	bne.n	8009e78 <__ieee754_pow+0x58>
 8009e74:	2e00      	cmp	r6, #0
 8009e76:	d1ea      	bne.n	8009e4e <__ieee754_pow+0x2e>
 8009e78:	4592      	cmp	sl, r2
 8009e7a:	d801      	bhi.n	8009e80 <__ieee754_pow+0x60>
 8009e7c:	d10e      	bne.n	8009e9c <__ieee754_pow+0x7c>
 8009e7e:	b169      	cbz	r1, 8009e9c <__ieee754_pow+0x7c>
 8009e80:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009e84:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009e88:	431d      	orrs	r5, r3
 8009e8a:	d1e0      	bne.n	8009e4e <__ieee754_pow+0x2e>
 8009e8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e90:	18db      	adds	r3, r3, r3
 8009e92:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009e96:	4152      	adcs	r2, r2
 8009e98:	429d      	cmp	r5, r3
 8009e9a:	e7d4      	b.n	8009e46 <__ieee754_pow+0x26>
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	46c3      	mov	fp, r8
 8009ea0:	da3a      	bge.n	8009f18 <__ieee754_pow+0xf8>
 8009ea2:	4a83      	ldr	r2, [pc, #524]	@ (800a0b0 <__ieee754_pow+0x290>)
 8009ea4:	4592      	cmp	sl, r2
 8009ea6:	d84d      	bhi.n	8009f44 <__ieee754_pow+0x124>
 8009ea8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009eac:	4592      	cmp	sl, r2
 8009eae:	f240 84c7 	bls.w	800a840 <__ieee754_pow+0xa20>
 8009eb2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009eb6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009eba:	2a14      	cmp	r2, #20
 8009ebc:	dd0f      	ble.n	8009ede <__ieee754_pow+0xbe>
 8009ebe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009ec2:	fa21 f402 	lsr.w	r4, r1, r2
 8009ec6:	fa04 f202 	lsl.w	r2, r4, r2
 8009eca:	428a      	cmp	r2, r1
 8009ecc:	f040 84b8 	bne.w	800a840 <__ieee754_pow+0xa20>
 8009ed0:	f004 0401 	and.w	r4, r4, #1
 8009ed4:	f1c4 0402 	rsb	r4, r4, #2
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	d158      	bne.n	8009f8e <__ieee754_pow+0x16e>
 8009edc:	e00e      	b.n	8009efc <__ieee754_pow+0xdc>
 8009ede:	2900      	cmp	r1, #0
 8009ee0:	d154      	bne.n	8009f8c <__ieee754_pow+0x16c>
 8009ee2:	f1c2 0214 	rsb	r2, r2, #20
 8009ee6:	fa4a f402 	asr.w	r4, sl, r2
 8009eea:	fa04 f202 	lsl.w	r2, r4, r2
 8009eee:	4552      	cmp	r2, sl
 8009ef0:	f040 84a3 	bne.w	800a83a <__ieee754_pow+0xa1a>
 8009ef4:	f004 0401 	and.w	r4, r4, #1
 8009ef8:	f1c4 0402 	rsb	r4, r4, #2
 8009efc:	4a6d      	ldr	r2, [pc, #436]	@ (800a0b4 <__ieee754_pow+0x294>)
 8009efe:	4592      	cmp	sl, r2
 8009f00:	d12e      	bne.n	8009f60 <__ieee754_pow+0x140>
 8009f02:	f1b9 0f00 	cmp.w	r9, #0
 8009f06:	f280 8494 	bge.w	800a832 <__ieee754_pow+0xa12>
 8009f0a:	496a      	ldr	r1, [pc, #424]	@ (800a0b4 <__ieee754_pow+0x294>)
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	463b      	mov	r3, r7
 8009f10:	2000      	movs	r0, #0
 8009f12:	f7f6 fcbb 	bl	800088c <__aeabi_ddiv>
 8009f16:	e7a0      	b.n	8009e5a <__ieee754_pow+0x3a>
 8009f18:	2400      	movs	r4, #0
 8009f1a:	bbc1      	cbnz	r1, 8009f8e <__ieee754_pow+0x16e>
 8009f1c:	4a63      	ldr	r2, [pc, #396]	@ (800a0ac <__ieee754_pow+0x28c>)
 8009f1e:	4592      	cmp	sl, r2
 8009f20:	d1ec      	bne.n	8009efc <__ieee754_pow+0xdc>
 8009f22:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009f26:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	f000 8479 	beq.w	800a822 <__ieee754_pow+0xa02>
 8009f30:	4b61      	ldr	r3, [pc, #388]	@ (800a0b8 <__ieee754_pow+0x298>)
 8009f32:	4598      	cmp	r8, r3
 8009f34:	d908      	bls.n	8009f48 <__ieee754_pow+0x128>
 8009f36:	f1b9 0f00 	cmp.w	r9, #0
 8009f3a:	f2c0 8476 	blt.w	800a82a <__ieee754_pow+0xa0a>
 8009f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f42:	e78a      	b.n	8009e5a <__ieee754_pow+0x3a>
 8009f44:	2402      	movs	r4, #2
 8009f46:	e7e8      	b.n	8009f1a <__ieee754_pow+0xfa>
 8009f48:	f1b9 0f00 	cmp.w	r9, #0
 8009f4c:	f04f 0000 	mov.w	r0, #0
 8009f50:	f04f 0100 	mov.w	r1, #0
 8009f54:	da81      	bge.n	8009e5a <__ieee754_pow+0x3a>
 8009f56:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009f5e:	e77c      	b.n	8009e5a <__ieee754_pow+0x3a>
 8009f60:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009f64:	d106      	bne.n	8009f74 <__ieee754_pow+0x154>
 8009f66:	4632      	mov	r2, r6
 8009f68:	463b      	mov	r3, r7
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	f7f6 fb63 	bl	8000638 <__aeabi_dmul>
 8009f72:	e772      	b.n	8009e5a <__ieee754_pow+0x3a>
 8009f74:	4a51      	ldr	r2, [pc, #324]	@ (800a0bc <__ieee754_pow+0x29c>)
 8009f76:	4591      	cmp	r9, r2
 8009f78:	d109      	bne.n	8009f8e <__ieee754_pow+0x16e>
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	db07      	blt.n	8009f8e <__ieee754_pow+0x16e>
 8009f7e:	ec47 6b10 	vmov	d0, r6, r7
 8009f82:	b011      	add	sp, #68	@ 0x44
 8009f84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	f7ff be6e 	b.w	8009c68 <__ieee754_sqrt>
 8009f8c:	2400      	movs	r4, #0
 8009f8e:	ec47 6b10 	vmov	d0, r6, r7
 8009f92:	9302      	str	r3, [sp, #8]
 8009f94:	f001 fb9a 	bl	800b6cc <fabs>
 8009f98:	9b02      	ldr	r3, [sp, #8]
 8009f9a:	ec51 0b10 	vmov	r0, r1, d0
 8009f9e:	bb53      	cbnz	r3, 8009ff6 <__ieee754_pow+0x1d6>
 8009fa0:	4b44      	ldr	r3, [pc, #272]	@ (800a0b4 <__ieee754_pow+0x294>)
 8009fa2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d002      	beq.n	8009fb0 <__ieee754_pow+0x190>
 8009faa:	f1b8 0f00 	cmp.w	r8, #0
 8009fae:	d122      	bne.n	8009ff6 <__ieee754_pow+0x1d6>
 8009fb0:	f1b9 0f00 	cmp.w	r9, #0
 8009fb4:	da05      	bge.n	8009fc2 <__ieee754_pow+0x1a2>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	2000      	movs	r0, #0
 8009fbc:	493d      	ldr	r1, [pc, #244]	@ (800a0b4 <__ieee754_pow+0x294>)
 8009fbe:	f7f6 fc65 	bl	800088c <__aeabi_ddiv>
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	f6bf af49 	bge.w	8009e5a <__ieee754_pow+0x3a>
 8009fc8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009fcc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009fd0:	ea58 0804 	orrs.w	r8, r8, r4
 8009fd4:	d108      	bne.n	8009fe8 <__ieee754_pow+0x1c8>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4610      	mov	r0, r2
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f7f6 f973 	bl	80002c8 <__aeabi_dsub>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	e794      	b.n	8009f12 <__ieee754_pow+0xf2>
 8009fe8:	2c01      	cmp	r4, #1
 8009fea:	f47f af36 	bne.w	8009e5a <__ieee754_pow+0x3a>
 8009fee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	e731      	b.n	8009e5a <__ieee754_pow+0x3a>
 8009ff6:	0feb      	lsrs	r3, r5, #31
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	ea53 0204 	orrs.w	r2, r3, r4
 8009ffe:	d102      	bne.n	800a006 <__ieee754_pow+0x1e6>
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	e7e9      	b.n	8009fda <__ieee754_pow+0x1ba>
 800a006:	3c01      	subs	r4, #1
 800a008:	431c      	orrs	r4, r3
 800a00a:	d016      	beq.n	800a03a <__ieee754_pow+0x21a>
 800a00c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a098 <__ieee754_pow+0x278>
 800a010:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a014:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a018:	f240 8112 	bls.w	800a240 <__ieee754_pow+0x420>
 800a01c:	4b28      	ldr	r3, [pc, #160]	@ (800a0c0 <__ieee754_pow+0x2a0>)
 800a01e:	459a      	cmp	sl, r3
 800a020:	4b25      	ldr	r3, [pc, #148]	@ (800a0b8 <__ieee754_pow+0x298>)
 800a022:	d916      	bls.n	800a052 <__ieee754_pow+0x232>
 800a024:	4598      	cmp	r8, r3
 800a026:	d80b      	bhi.n	800a040 <__ieee754_pow+0x220>
 800a028:	f1b9 0f00 	cmp.w	r9, #0
 800a02c:	da0b      	bge.n	800a046 <__ieee754_pow+0x226>
 800a02e:	2000      	movs	r0, #0
 800a030:	b011      	add	sp, #68	@ 0x44
 800a032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a036:	f000 be67 	b.w	800ad08 <__math_oflow>
 800a03a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a0a0 <__ieee754_pow+0x280>
 800a03e:	e7e7      	b.n	800a010 <__ieee754_pow+0x1f0>
 800a040:	f1b9 0f00 	cmp.w	r9, #0
 800a044:	dcf3      	bgt.n	800a02e <__ieee754_pow+0x20e>
 800a046:	2000      	movs	r0, #0
 800a048:	b011      	add	sp, #68	@ 0x44
 800a04a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04e:	f000 be53 	b.w	800acf8 <__math_uflow>
 800a052:	4598      	cmp	r8, r3
 800a054:	d20c      	bcs.n	800a070 <__ieee754_pow+0x250>
 800a056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a05a:	2200      	movs	r2, #0
 800a05c:	2300      	movs	r3, #0
 800a05e:	f7f6 fd5d 	bl	8000b1c <__aeabi_dcmplt>
 800a062:	3800      	subs	r0, #0
 800a064:	bf18      	it	ne
 800a066:	2001      	movne	r0, #1
 800a068:	f1b9 0f00 	cmp.w	r9, #0
 800a06c:	daec      	bge.n	800a048 <__ieee754_pow+0x228>
 800a06e:	e7df      	b.n	800a030 <__ieee754_pow+0x210>
 800a070:	4b10      	ldr	r3, [pc, #64]	@ (800a0b4 <__ieee754_pow+0x294>)
 800a072:	4598      	cmp	r8, r3
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	d924      	bls.n	800a0c4 <__ieee754_pow+0x2a4>
 800a07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a07e:	2300      	movs	r3, #0
 800a080:	f7f6 fd4c 	bl	8000b1c <__aeabi_dcmplt>
 800a084:	3800      	subs	r0, #0
 800a086:	bf18      	it	ne
 800a088:	2001      	movne	r0, #1
 800a08a:	f1b9 0f00 	cmp.w	r9, #0
 800a08e:	dccf      	bgt.n	800a030 <__ieee754_pow+0x210>
 800a090:	e7da      	b.n	800a048 <__ieee754_pow+0x228>
 800a092:	bf00      	nop
 800a094:	f3af 8000 	nop.w
 800a098:	00000000 	.word	0x00000000
 800a09c:	3ff00000 	.word	0x3ff00000
 800a0a0:	00000000 	.word	0x00000000
 800a0a4:	bff00000 	.word	0xbff00000
 800a0a8:	fff00000 	.word	0xfff00000
 800a0ac:	7ff00000 	.word	0x7ff00000
 800a0b0:	433fffff 	.word	0x433fffff
 800a0b4:	3ff00000 	.word	0x3ff00000
 800a0b8:	3fefffff 	.word	0x3fefffff
 800a0bc:	3fe00000 	.word	0x3fe00000
 800a0c0:	43f00000 	.word	0x43f00000
 800a0c4:	4b5a      	ldr	r3, [pc, #360]	@ (800a230 <__ieee754_pow+0x410>)
 800a0c6:	f7f6 f8ff 	bl	80002c8 <__aeabi_dsub>
 800a0ca:	a351      	add	r3, pc, #324	@ (adr r3, 800a210 <__ieee754_pow+0x3f0>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	460d      	mov	r5, r1
 800a0d4:	f7f6 fab0 	bl	8000638 <__aeabi_dmul>
 800a0d8:	a34f      	add	r3, pc, #316	@ (adr r3, 800a218 <__ieee754_pow+0x3f8>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	4606      	mov	r6, r0
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	f7f6 faa7 	bl	8000638 <__aeabi_dmul>
 800a0ea:	4b52      	ldr	r3, [pc, #328]	@ (800a234 <__ieee754_pow+0x414>)
 800a0ec:	4682      	mov	sl, r0
 800a0ee:	468b      	mov	fp, r1
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	f7f6 fa9f 	bl	8000638 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	a148      	add	r1, pc, #288	@ (adr r1, 800a220 <__ieee754_pow+0x400>)
 800a100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a104:	f7f6 f8e0 	bl	80002c8 <__aeabi_dsub>
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	f7f6 fa94 	bl	8000638 <__aeabi_dmul>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	2000      	movs	r0, #0
 800a116:	4948      	ldr	r1, [pc, #288]	@ (800a238 <__ieee754_pow+0x418>)
 800a118:	f7f6 f8d6 	bl	80002c8 <__aeabi_dsub>
 800a11c:	4622      	mov	r2, r4
 800a11e:	4680      	mov	r8, r0
 800a120:	4689      	mov	r9, r1
 800a122:	462b      	mov	r3, r5
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f7f6 fa86 	bl	8000638 <__aeabi_dmul>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4640      	mov	r0, r8
 800a132:	4649      	mov	r1, r9
 800a134:	f7f6 fa80 	bl	8000638 <__aeabi_dmul>
 800a138:	a33b      	add	r3, pc, #236	@ (adr r3, 800a228 <__ieee754_pow+0x408>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f7f6 fa7b 	bl	8000638 <__aeabi_dmul>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4650      	mov	r0, sl
 800a148:	4659      	mov	r1, fp
 800a14a:	f7f6 f8bd 	bl	80002c8 <__aeabi_dsub>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4680      	mov	r8, r0
 800a154:	4689      	mov	r9, r1
 800a156:	4630      	mov	r0, r6
 800a158:	4639      	mov	r1, r7
 800a15a:	f7f6 f8b7 	bl	80002cc <__adddf3>
 800a15e:	2400      	movs	r4, #0
 800a160:	4632      	mov	r2, r6
 800a162:	463b      	mov	r3, r7
 800a164:	4620      	mov	r0, r4
 800a166:	460d      	mov	r5, r1
 800a168:	f7f6 f8ae 	bl	80002c8 <__aeabi_dsub>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4640      	mov	r0, r8
 800a172:	4649      	mov	r1, r9
 800a174:	f7f6 f8a8 	bl	80002c8 <__aeabi_dsub>
 800a178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a17c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a180:	2300      	movs	r3, #0
 800a182:	9304      	str	r3, [sp, #16]
 800a184:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a188:	4606      	mov	r6, r0
 800a18a:	460f      	mov	r7, r1
 800a18c:	4652      	mov	r2, sl
 800a18e:	465b      	mov	r3, fp
 800a190:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a194:	f7f6 f898 	bl	80002c8 <__aeabi_dsub>
 800a198:	4622      	mov	r2, r4
 800a19a:	462b      	mov	r3, r5
 800a19c:	f7f6 fa4c 	bl	8000638 <__aeabi_dmul>
 800a1a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	4689      	mov	r9, r1
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	f7f6 fa44 	bl	8000638 <__aeabi_dmul>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	f7f6 f888 	bl	80002cc <__adddf3>
 800a1bc:	4652      	mov	r2, sl
 800a1be:	465b      	mov	r3, fp
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	460f      	mov	r7, r1
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f7f6 fa36 	bl	8000638 <__aeabi_dmul>
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	4689      	mov	r9, r1
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	f7f6 f878 	bl	80002cc <__adddf3>
 800a1dc:	4b17      	ldr	r3, [pc, #92]	@ (800a23c <__ieee754_pow+0x41c>)
 800a1de:	4299      	cmp	r1, r3
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	460d      	mov	r5, r1
 800a1e4:	468a      	mov	sl, r1
 800a1e6:	468b      	mov	fp, r1
 800a1e8:	f340 82ef 	ble.w	800a7ca <__ieee754_pow+0x9aa>
 800a1ec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a1f0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a1f4:	4303      	orrs	r3, r0
 800a1f6:	f000 81e8 	beq.w	800a5ca <__ieee754_pow+0x7aa>
 800a1fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	2300      	movs	r3, #0
 800a202:	f7f6 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 800a206:	3800      	subs	r0, #0
 800a208:	bf18      	it	ne
 800a20a:	2001      	movne	r0, #1
 800a20c:	e710      	b.n	800a030 <__ieee754_pow+0x210>
 800a20e:	bf00      	nop
 800a210:	60000000 	.word	0x60000000
 800a214:	3ff71547 	.word	0x3ff71547
 800a218:	f85ddf44 	.word	0xf85ddf44
 800a21c:	3e54ae0b 	.word	0x3e54ae0b
 800a220:	55555555 	.word	0x55555555
 800a224:	3fd55555 	.word	0x3fd55555
 800a228:	652b82fe 	.word	0x652b82fe
 800a22c:	3ff71547 	.word	0x3ff71547
 800a230:	3ff00000 	.word	0x3ff00000
 800a234:	3fd00000 	.word	0x3fd00000
 800a238:	3fe00000 	.word	0x3fe00000
 800a23c:	408fffff 	.word	0x408fffff
 800a240:	4bd5      	ldr	r3, [pc, #852]	@ (800a598 <__ieee754_pow+0x778>)
 800a242:	402b      	ands	r3, r5
 800a244:	2200      	movs	r2, #0
 800a246:	b92b      	cbnz	r3, 800a254 <__ieee754_pow+0x434>
 800a248:	4bd4      	ldr	r3, [pc, #848]	@ (800a59c <__ieee754_pow+0x77c>)
 800a24a:	f7f6 f9f5 	bl	8000638 <__aeabi_dmul>
 800a24e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a252:	468b      	mov	fp, r1
 800a254:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a258:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a25c:	4413      	add	r3, r2
 800a25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a260:	4bcf      	ldr	r3, [pc, #828]	@ (800a5a0 <__ieee754_pow+0x780>)
 800a262:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a266:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a26a:	459b      	cmp	fp, r3
 800a26c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a270:	dd08      	ble.n	800a284 <__ieee754_pow+0x464>
 800a272:	4bcc      	ldr	r3, [pc, #816]	@ (800a5a4 <__ieee754_pow+0x784>)
 800a274:	459b      	cmp	fp, r3
 800a276:	f340 81a5 	ble.w	800a5c4 <__ieee754_pow+0x7a4>
 800a27a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a27c:	3301      	adds	r3, #1
 800a27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a280:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a284:	f04f 0a00 	mov.w	sl, #0
 800a288:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a28c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a28e:	4bc6      	ldr	r3, [pc, #792]	@ (800a5a8 <__ieee754_pow+0x788>)
 800a290:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a294:	ed93 7b00 	vldr	d7, [r3]
 800a298:	4629      	mov	r1, r5
 800a29a:	ec53 2b17 	vmov	r2, r3, d7
 800a29e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2a6:	f7f6 f80f 	bl	80002c8 <__aeabi_dsub>
 800a2aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2b6:	f7f6 f809 	bl	80002cc <__adddf3>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	2000      	movs	r0, #0
 800a2c0:	49ba      	ldr	r1, [pc, #744]	@ (800a5ac <__ieee754_pow+0x78c>)
 800a2c2:	f7f6 fae3 	bl	800088c <__aeabi_ddiv>
 800a2c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	f7f6 f9b1 	bl	8000638 <__aeabi_dmul>
 800a2d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a2de:	106d      	asrs	r5, r5, #1
 800a2e0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a2e4:	f04f 0b00 	mov.w	fp, #0
 800a2e8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a2ec:	4661      	mov	r1, ip
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a2f4:	4658      	mov	r0, fp
 800a2f6:	46e1      	mov	r9, ip
 800a2f8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a2fc:	4614      	mov	r4, r2
 800a2fe:	461d      	mov	r5, r3
 800a300:	f7f6 f99a 	bl	8000638 <__aeabi_dmul>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4630      	mov	r0, r6
 800a30a:	4639      	mov	r1, r7
 800a30c:	f7f5 ffdc 	bl	80002c8 <__aeabi_dsub>
 800a310:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a314:	4606      	mov	r6, r0
 800a316:	460f      	mov	r7, r1
 800a318:	4620      	mov	r0, r4
 800a31a:	4629      	mov	r1, r5
 800a31c:	f7f5 ffd4 	bl	80002c8 <__aeabi_dsub>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a328:	f7f5 ffce 	bl	80002c8 <__aeabi_dsub>
 800a32c:	465a      	mov	r2, fp
 800a32e:	464b      	mov	r3, r9
 800a330:	f7f6 f982 	bl	8000638 <__aeabi_dmul>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f5 ffc4 	bl	80002c8 <__aeabi_dsub>
 800a340:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a344:	f7f6 f978 	bl	8000638 <__aeabi_dmul>
 800a348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a34c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a350:	4610      	mov	r0, r2
 800a352:	4619      	mov	r1, r3
 800a354:	f7f6 f970 	bl	8000638 <__aeabi_dmul>
 800a358:	a37d      	add	r3, pc, #500	@ (adr r3, 800a550 <__ieee754_pow+0x730>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	4604      	mov	r4, r0
 800a360:	460d      	mov	r5, r1
 800a362:	f7f6 f969 	bl	8000638 <__aeabi_dmul>
 800a366:	a37c      	add	r3, pc, #496	@ (adr r3, 800a558 <__ieee754_pow+0x738>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 ffae 	bl	80002cc <__adddf3>
 800a370:	4622      	mov	r2, r4
 800a372:	462b      	mov	r3, r5
 800a374:	f7f6 f960 	bl	8000638 <__aeabi_dmul>
 800a378:	a379      	add	r3, pc, #484	@ (adr r3, 800a560 <__ieee754_pow+0x740>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f5 ffa5 	bl	80002cc <__adddf3>
 800a382:	4622      	mov	r2, r4
 800a384:	462b      	mov	r3, r5
 800a386:	f7f6 f957 	bl	8000638 <__aeabi_dmul>
 800a38a:	a377      	add	r3, pc, #476	@ (adr r3, 800a568 <__ieee754_pow+0x748>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 ff9c 	bl	80002cc <__adddf3>
 800a394:	4622      	mov	r2, r4
 800a396:	462b      	mov	r3, r5
 800a398:	f7f6 f94e 	bl	8000638 <__aeabi_dmul>
 800a39c:	a374      	add	r3, pc, #464	@ (adr r3, 800a570 <__ieee754_pow+0x750>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 ff93 	bl	80002cc <__adddf3>
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	462b      	mov	r3, r5
 800a3aa:	f7f6 f945 	bl	8000638 <__aeabi_dmul>
 800a3ae:	a372      	add	r3, pc, #456	@ (adr r3, 800a578 <__ieee754_pow+0x758>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f5 ff8a 	bl	80002cc <__adddf3>
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	462b      	mov	r3, r5
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	f7f6 f938 	bl	8000638 <__aeabi_dmul>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f7f6 f932 	bl	8000638 <__aeabi_dmul>
 800a3d4:	465a      	mov	r2, fp
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	460d      	mov	r5, r1
 800a3da:	464b      	mov	r3, r9
 800a3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3e0:	f7f5 ff74 	bl	80002cc <__adddf3>
 800a3e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3e8:	f7f6 f926 	bl	8000638 <__aeabi_dmul>
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	462b      	mov	r3, r5
 800a3f0:	f7f5 ff6c 	bl	80002cc <__adddf3>
 800a3f4:	465a      	mov	r2, fp
 800a3f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	4658      	mov	r0, fp
 800a3fe:	4649      	mov	r1, r9
 800a400:	f7f6 f91a 	bl	8000638 <__aeabi_dmul>
 800a404:	4b6a      	ldr	r3, [pc, #424]	@ (800a5b0 <__ieee754_pow+0x790>)
 800a406:	2200      	movs	r2, #0
 800a408:	4606      	mov	r6, r0
 800a40a:	460f      	mov	r7, r1
 800a40c:	f7f5 ff5e 	bl	80002cc <__adddf3>
 800a410:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a414:	f7f5 ff5a 	bl	80002cc <__adddf3>
 800a418:	46d8      	mov	r8, fp
 800a41a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a41e:	460d      	mov	r5, r1
 800a420:	465a      	mov	r2, fp
 800a422:	460b      	mov	r3, r1
 800a424:	4640      	mov	r0, r8
 800a426:	4649      	mov	r1, r9
 800a428:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a42c:	f7f6 f904 	bl	8000638 <__aeabi_dmul>
 800a430:	465c      	mov	r4, fp
 800a432:	4680      	mov	r8, r0
 800a434:	4689      	mov	r9, r1
 800a436:	4b5e      	ldr	r3, [pc, #376]	@ (800a5b0 <__ieee754_pow+0x790>)
 800a438:	2200      	movs	r2, #0
 800a43a:	4620      	mov	r0, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7f5 ff43 	bl	80002c8 <__aeabi_dsub>
 800a442:	4632      	mov	r2, r6
 800a444:	463b      	mov	r3, r7
 800a446:	f7f5 ff3f 	bl	80002c8 <__aeabi_dsub>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a452:	f7f5 ff39 	bl	80002c8 <__aeabi_dsub>
 800a456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a45a:	f7f6 f8ed 	bl	8000638 <__aeabi_dmul>
 800a45e:	4622      	mov	r2, r4
 800a460:	4606      	mov	r6, r0
 800a462:	460f      	mov	r7, r1
 800a464:	462b      	mov	r3, r5
 800a466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a46a:	f7f6 f8e5 	bl	8000638 <__aeabi_dmul>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4630      	mov	r0, r6
 800a474:	4639      	mov	r1, r7
 800a476:	f7f5 ff29 	bl	80002cc <__adddf3>
 800a47a:	4606      	mov	r6, r0
 800a47c:	460f      	mov	r7, r1
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4640      	mov	r0, r8
 800a484:	4649      	mov	r1, r9
 800a486:	f7f5 ff21 	bl	80002cc <__adddf3>
 800a48a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a48e:	a33c      	add	r3, pc, #240	@ (adr r3, 800a580 <__ieee754_pow+0x760>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	4658      	mov	r0, fp
 800a496:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a49a:	460d      	mov	r5, r1
 800a49c:	f7f6 f8cc 	bl	8000638 <__aeabi_dmul>
 800a4a0:	465c      	mov	r4, fp
 800a4a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4a6:	4642      	mov	r2, r8
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	f7f5 ff0b 	bl	80002c8 <__aeabi_dsub>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	f7f5 ff05 	bl	80002c8 <__aeabi_dsub>
 800a4be:	a332      	add	r3, pc, #200	@ (adr r3, 800a588 <__ieee754_pow+0x768>)
 800a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c4:	f7f6 f8b8 	bl	8000638 <__aeabi_dmul>
 800a4c8:	a331      	add	r3, pc, #196	@ (adr r3, 800a590 <__ieee754_pow+0x770>)
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	460f      	mov	r7, r1
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f7f6 f8af 	bl	8000638 <__aeabi_dmul>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4630      	mov	r0, r6
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	f7f5 fef3 	bl	80002cc <__adddf3>
 800a4e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4e8:	4b32      	ldr	r3, [pc, #200]	@ (800a5b4 <__ieee754_pow+0x794>)
 800a4ea:	4413      	add	r3, r2
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f7f5 feec 	bl	80002cc <__adddf3>
 800a4f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4fa:	f7f6 f833 	bl	8000564 <__aeabi_i2d>
 800a4fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a500:	4b2d      	ldr	r3, [pc, #180]	@ (800a5b8 <__ieee754_pow+0x798>)
 800a502:	4413      	add	r3, r2
 800a504:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a508:	4606      	mov	r6, r0
 800a50a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a50e:	460f      	mov	r7, r1
 800a510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a514:	f7f5 feda 	bl	80002cc <__adddf3>
 800a518:	4642      	mov	r2, r8
 800a51a:	464b      	mov	r3, r9
 800a51c:	f7f5 fed6 	bl	80002cc <__adddf3>
 800a520:	4632      	mov	r2, r6
 800a522:	463b      	mov	r3, r7
 800a524:	f7f5 fed2 	bl	80002cc <__adddf3>
 800a528:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a52c:	4632      	mov	r2, r6
 800a52e:	463b      	mov	r3, r7
 800a530:	4658      	mov	r0, fp
 800a532:	460d      	mov	r5, r1
 800a534:	f7f5 fec8 	bl	80002c8 <__aeabi_dsub>
 800a538:	4642      	mov	r2, r8
 800a53a:	464b      	mov	r3, r9
 800a53c:	f7f5 fec4 	bl	80002c8 <__aeabi_dsub>
 800a540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a544:	f7f5 fec0 	bl	80002c8 <__aeabi_dsub>
 800a548:	465c      	mov	r4, fp
 800a54a:	4602      	mov	r2, r0
 800a54c:	e036      	b.n	800a5bc <__ieee754_pow+0x79c>
 800a54e:	bf00      	nop
 800a550:	4a454eef 	.word	0x4a454eef
 800a554:	3fca7e28 	.word	0x3fca7e28
 800a558:	93c9db65 	.word	0x93c9db65
 800a55c:	3fcd864a 	.word	0x3fcd864a
 800a560:	a91d4101 	.word	0xa91d4101
 800a564:	3fd17460 	.word	0x3fd17460
 800a568:	518f264d 	.word	0x518f264d
 800a56c:	3fd55555 	.word	0x3fd55555
 800a570:	db6fabff 	.word	0xdb6fabff
 800a574:	3fdb6db6 	.word	0x3fdb6db6
 800a578:	33333303 	.word	0x33333303
 800a57c:	3fe33333 	.word	0x3fe33333
 800a580:	e0000000 	.word	0xe0000000
 800a584:	3feec709 	.word	0x3feec709
 800a588:	dc3a03fd 	.word	0xdc3a03fd
 800a58c:	3feec709 	.word	0x3feec709
 800a590:	145b01f5 	.word	0x145b01f5
 800a594:	be3e2fe0 	.word	0xbe3e2fe0
 800a598:	7ff00000 	.word	0x7ff00000
 800a59c:	43400000 	.word	0x43400000
 800a5a0:	0003988e 	.word	0x0003988e
 800a5a4:	000bb679 	.word	0x000bb679
 800a5a8:	0800bdb8 	.word	0x0800bdb8
 800a5ac:	3ff00000 	.word	0x3ff00000
 800a5b0:	40080000 	.word	0x40080000
 800a5b4:	0800bd98 	.word	0x0800bd98
 800a5b8:	0800bda8 	.word	0x0800bda8
 800a5bc:	460b      	mov	r3, r1
 800a5be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5c2:	e5d7      	b.n	800a174 <__ieee754_pow+0x354>
 800a5c4:	f04f 0a01 	mov.w	sl, #1
 800a5c8:	e65e      	b.n	800a288 <__ieee754_pow+0x468>
 800a5ca:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a89c <__ieee754_pow+0xa7c>)
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f5 fe7a 	bl	80002cc <__adddf3>
 800a5d8:	4642      	mov	r2, r8
 800a5da:	e9cd 0100 	strd	r0, r1, [sp]
 800a5de:	464b      	mov	r3, r9
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	f7f5 fe70 	bl	80002c8 <__aeabi_dsub>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5f0:	f7f6 fab2 	bl	8000b58 <__aeabi_dcmpgt>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	f47f ae00 	bne.w	800a1fa <__ieee754_pow+0x3da>
 800a5fa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a5fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a602:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a606:	fa43 fa0a 	asr.w	sl, r3, sl
 800a60a:	44da      	add	sl, fp
 800a60c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a610:	489d      	ldr	r0, [pc, #628]	@ (800a888 <__ieee754_pow+0xa68>)
 800a612:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a616:	4108      	asrs	r0, r1
 800a618:	ea00 030a 	and.w	r3, r0, sl
 800a61c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a620:	f1c1 0114 	rsb	r1, r1, #20
 800a624:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a628:	fa4a fa01 	asr.w	sl, sl, r1
 800a62c:	f1bb 0f00 	cmp.w	fp, #0
 800a630:	4640      	mov	r0, r8
 800a632:	4649      	mov	r1, r9
 800a634:	f04f 0200 	mov.w	r2, #0
 800a638:	bfb8      	it	lt
 800a63a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a63e:	f7f5 fe43 	bl	80002c8 <__aeabi_dsub>
 800a642:	4680      	mov	r8, r0
 800a644:	4689      	mov	r9, r1
 800a646:	4632      	mov	r2, r6
 800a648:	463b      	mov	r3, r7
 800a64a:	4640      	mov	r0, r8
 800a64c:	4649      	mov	r1, r9
 800a64e:	f7f5 fe3d 	bl	80002cc <__adddf3>
 800a652:	2400      	movs	r4, #0
 800a654:	a37c      	add	r3, pc, #496	@ (adr r3, 800a848 <__ieee754_pow+0xa28>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	4620      	mov	r0, r4
 800a65c:	460d      	mov	r5, r1
 800a65e:	f7f5 ffeb 	bl	8000638 <__aeabi_dmul>
 800a662:	4642      	mov	r2, r8
 800a664:	e9cd 0100 	strd	r0, r1, [sp]
 800a668:	464b      	mov	r3, r9
 800a66a:	4620      	mov	r0, r4
 800a66c:	4629      	mov	r1, r5
 800a66e:	f7f5 fe2b 	bl	80002c8 <__aeabi_dsub>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4630      	mov	r0, r6
 800a678:	4639      	mov	r1, r7
 800a67a:	f7f5 fe25 	bl	80002c8 <__aeabi_dsub>
 800a67e:	a374      	add	r3, pc, #464	@ (adr r3, 800a850 <__ieee754_pow+0xa30>)
 800a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a684:	f7f5 ffd8 	bl	8000638 <__aeabi_dmul>
 800a688:	a373      	add	r3, pc, #460	@ (adr r3, 800a858 <__ieee754_pow+0xa38>)
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	4680      	mov	r8, r0
 800a690:	4689      	mov	r9, r1
 800a692:	4620      	mov	r0, r4
 800a694:	4629      	mov	r1, r5
 800a696:	f7f5 ffcf 	bl	8000638 <__aeabi_dmul>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4640      	mov	r0, r8
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	f7f5 fe13 	bl	80002cc <__adddf3>
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6b2:	f7f5 fe0b 	bl	80002cc <__adddf3>
 800a6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	4689      	mov	r9, r1
 800a6be:	f7f5 fe03 	bl	80002c8 <__aeabi_dsub>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7f5 fdfd 	bl	80002c8 <__aeabi_dsub>
 800a6ce:	4642      	mov	r2, r8
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	460f      	mov	r7, r1
 800a6d4:	464b      	mov	r3, r9
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	4649      	mov	r1, r9
 800a6da:	f7f5 ffad 	bl	8000638 <__aeabi_dmul>
 800a6de:	a360      	add	r3, pc, #384	@ (adr r3, 800a860 <__ieee754_pow+0xa40>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	f7f5 ffa6 	bl	8000638 <__aeabi_dmul>
 800a6ec:	a35e      	add	r3, pc, #376	@ (adr r3, 800a868 <__ieee754_pow+0xa48>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	f7f5 fde9 	bl	80002c8 <__aeabi_dsub>
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	f7f5 ff9d 	bl	8000638 <__aeabi_dmul>
 800a6fe:	a35c      	add	r3, pc, #368	@ (adr r3, 800a870 <__ieee754_pow+0xa50>)
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f7f5 fde2 	bl	80002cc <__adddf3>
 800a708:	4622      	mov	r2, r4
 800a70a:	462b      	mov	r3, r5
 800a70c:	f7f5 ff94 	bl	8000638 <__aeabi_dmul>
 800a710:	a359      	add	r3, pc, #356	@ (adr r3, 800a878 <__ieee754_pow+0xa58>)
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	f7f5 fdd7 	bl	80002c8 <__aeabi_dsub>
 800a71a:	4622      	mov	r2, r4
 800a71c:	462b      	mov	r3, r5
 800a71e:	f7f5 ff8b 	bl	8000638 <__aeabi_dmul>
 800a722:	a357      	add	r3, pc, #348	@ (adr r3, 800a880 <__ieee754_pow+0xa60>)
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f7f5 fdd0 	bl	80002cc <__adddf3>
 800a72c:	4622      	mov	r2, r4
 800a72e:	462b      	mov	r3, r5
 800a730:	f7f5 ff82 	bl	8000638 <__aeabi_dmul>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4640      	mov	r0, r8
 800a73a:	4649      	mov	r1, r9
 800a73c:	f7f5 fdc4 	bl	80002c8 <__aeabi_dsub>
 800a740:	4604      	mov	r4, r0
 800a742:	460d      	mov	r5, r1
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4640      	mov	r0, r8
 800a74a:	4649      	mov	r1, r9
 800a74c:	f7f5 ff74 	bl	8000638 <__aeabi_dmul>
 800a750:	2200      	movs	r2, #0
 800a752:	e9cd 0100 	strd	r0, r1, [sp]
 800a756:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a75a:	4620      	mov	r0, r4
 800a75c:	4629      	mov	r1, r5
 800a75e:	f7f5 fdb3 	bl	80002c8 <__aeabi_dsub>
 800a762:	4602      	mov	r2, r0
 800a764:	460b      	mov	r3, r1
 800a766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a76a:	f7f6 f88f 	bl	800088c <__aeabi_ddiv>
 800a76e:	4632      	mov	r2, r6
 800a770:	4604      	mov	r4, r0
 800a772:	460d      	mov	r5, r1
 800a774:	463b      	mov	r3, r7
 800a776:	4640      	mov	r0, r8
 800a778:	4649      	mov	r1, r9
 800a77a:	f7f5 ff5d 	bl	8000638 <__aeabi_dmul>
 800a77e:	4632      	mov	r2, r6
 800a780:	463b      	mov	r3, r7
 800a782:	f7f5 fda3 	bl	80002cc <__adddf3>
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	4620      	mov	r0, r4
 800a78c:	4629      	mov	r1, r5
 800a78e:	f7f5 fd9b 	bl	80002c8 <__aeabi_dsub>
 800a792:	4642      	mov	r2, r8
 800a794:	464b      	mov	r3, r9
 800a796:	f7f5 fd97 	bl	80002c8 <__aeabi_dsub>
 800a79a:	460b      	mov	r3, r1
 800a79c:	4602      	mov	r2, r0
 800a79e:	493b      	ldr	r1, [pc, #236]	@ (800a88c <__ieee754_pow+0xa6c>)
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	f7f5 fd91 	bl	80002c8 <__aeabi_dsub>
 800a7a6:	ec41 0b10 	vmov	d0, r0, r1
 800a7aa:	ee10 3a90 	vmov	r3, s1
 800a7ae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a7b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7b6:	da30      	bge.n	800a81a <__ieee754_pow+0x9fa>
 800a7b8:	4650      	mov	r0, sl
 800a7ba:	f000 ff91 	bl	800b6e0 <scalbn>
 800a7be:	ec51 0b10 	vmov	r0, r1, d0
 800a7c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7c6:	f7ff bbd2 	b.w	8009f6e <__ieee754_pow+0x14e>
 800a7ca:	4c31      	ldr	r4, [pc, #196]	@ (800a890 <__ieee754_pow+0xa70>)
 800a7cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	d91a      	bls.n	800a80a <__ieee754_pow+0x9ea>
 800a7d4:	4b2f      	ldr	r3, [pc, #188]	@ (800a894 <__ieee754_pow+0xa74>)
 800a7d6:	440b      	add	r3, r1
 800a7d8:	4303      	orrs	r3, r0
 800a7da:	d009      	beq.n	800a7f0 <__ieee754_pow+0x9d0>
 800a7dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f7f6 f99a 	bl	8000b1c <__aeabi_dcmplt>
 800a7e8:	3800      	subs	r0, #0
 800a7ea:	bf18      	it	ne
 800a7ec:	2001      	movne	r0, #1
 800a7ee:	e42b      	b.n	800a048 <__ieee754_pow+0x228>
 800a7f0:	4642      	mov	r2, r8
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	f7f5 fd68 	bl	80002c8 <__aeabi_dsub>
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	463b      	mov	r3, r7
 800a7fc:	f7f6 f9a2 	bl	8000b44 <__aeabi_dcmpge>
 800a800:	2800      	cmp	r0, #0
 800a802:	d1eb      	bne.n	800a7dc <__ieee754_pow+0x9bc>
 800a804:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a8a4 <__ieee754_pow+0xa84>
 800a808:	e6f7      	b.n	800a5fa <__ieee754_pow+0x7da>
 800a80a:	469a      	mov	sl, r3
 800a80c:	4b22      	ldr	r3, [pc, #136]	@ (800a898 <__ieee754_pow+0xa78>)
 800a80e:	459a      	cmp	sl, r3
 800a810:	f63f aef3 	bhi.w	800a5fa <__ieee754_pow+0x7da>
 800a814:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a818:	e715      	b.n	800a646 <__ieee754_pow+0x826>
 800a81a:	ec51 0b10 	vmov	r0, r1, d0
 800a81e:	4619      	mov	r1, r3
 800a820:	e7cf      	b.n	800a7c2 <__ieee754_pow+0x9a2>
 800a822:	491a      	ldr	r1, [pc, #104]	@ (800a88c <__ieee754_pow+0xa6c>)
 800a824:	2000      	movs	r0, #0
 800a826:	f7ff bb18 	b.w	8009e5a <__ieee754_pow+0x3a>
 800a82a:	2000      	movs	r0, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	f7ff bb14 	b.w	8009e5a <__ieee754_pow+0x3a>
 800a832:	4630      	mov	r0, r6
 800a834:	4639      	mov	r1, r7
 800a836:	f7ff bb10 	b.w	8009e5a <__ieee754_pow+0x3a>
 800a83a:	460c      	mov	r4, r1
 800a83c:	f7ff bb5e 	b.w	8009efc <__ieee754_pow+0xdc>
 800a840:	2400      	movs	r4, #0
 800a842:	f7ff bb49 	b.w	8009ed8 <__ieee754_pow+0xb8>
 800a846:	bf00      	nop
 800a848:	00000000 	.word	0x00000000
 800a84c:	3fe62e43 	.word	0x3fe62e43
 800a850:	fefa39ef 	.word	0xfefa39ef
 800a854:	3fe62e42 	.word	0x3fe62e42
 800a858:	0ca86c39 	.word	0x0ca86c39
 800a85c:	be205c61 	.word	0xbe205c61
 800a860:	72bea4d0 	.word	0x72bea4d0
 800a864:	3e663769 	.word	0x3e663769
 800a868:	c5d26bf1 	.word	0xc5d26bf1
 800a86c:	3ebbbd41 	.word	0x3ebbbd41
 800a870:	af25de2c 	.word	0xaf25de2c
 800a874:	3f11566a 	.word	0x3f11566a
 800a878:	16bebd93 	.word	0x16bebd93
 800a87c:	3f66c16c 	.word	0x3f66c16c
 800a880:	5555553e 	.word	0x5555553e
 800a884:	3fc55555 	.word	0x3fc55555
 800a888:	fff00000 	.word	0xfff00000
 800a88c:	3ff00000 	.word	0x3ff00000
 800a890:	4090cbff 	.word	0x4090cbff
 800a894:	3f6f3400 	.word	0x3f6f3400
 800a898:	3fe00000 	.word	0x3fe00000
 800a89c:	652b82fe 	.word	0x652b82fe
 800a8a0:	3c971547 	.word	0x3c971547
 800a8a4:	4090cc00 	.word	0x4090cc00

0800a8a8 <__ieee754_rem_pio2>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	ec57 6b10 	vmov	r6, r7, d0
 800a8b0:	4bc5      	ldr	r3, [pc, #788]	@ (800abc8 <__ieee754_rem_pio2+0x320>)
 800a8b2:	b08d      	sub	sp, #52	@ 0x34
 800a8b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a8b8:	4598      	cmp	r8, r3
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	9704      	str	r7, [sp, #16]
 800a8be:	d807      	bhi.n	800a8d0 <__ieee754_rem_pio2+0x28>
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	ed80 0b00 	vstr	d0, [r0]
 800a8c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8cc:	2500      	movs	r5, #0
 800a8ce:	e028      	b.n	800a922 <__ieee754_rem_pio2+0x7a>
 800a8d0:	4bbe      	ldr	r3, [pc, #760]	@ (800abcc <__ieee754_rem_pio2+0x324>)
 800a8d2:	4598      	cmp	r8, r3
 800a8d4:	d878      	bhi.n	800a9c8 <__ieee754_rem_pio2+0x120>
 800a8d6:	9b04      	ldr	r3, [sp, #16]
 800a8d8:	4dbd      	ldr	r5, [pc, #756]	@ (800abd0 <__ieee754_rem_pio2+0x328>)
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	4630      	mov	r0, r6
 800a8de:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ab90 <__ieee754_rem_pio2+0x2e8>)
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	dd38      	ble.n	800a95a <__ieee754_rem_pio2+0xb2>
 800a8e8:	f7f5 fcee 	bl	80002c8 <__aeabi_dsub>
 800a8ec:	45a8      	cmp	r8, r5
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	460f      	mov	r7, r1
 800a8f2:	d01a      	beq.n	800a92a <__ieee754_rem_pio2+0x82>
 800a8f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f0>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fce5 	bl	80002c8 <__aeabi_dsub>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4680      	mov	r8, r0
 800a904:	4689      	mov	r9, r1
 800a906:	4630      	mov	r0, r6
 800a908:	4639      	mov	r1, r7
 800a90a:	f7f5 fcdd 	bl	80002c8 <__aeabi_dsub>
 800a90e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f0>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f7f5 fcd8 	bl	80002c8 <__aeabi_dsub>
 800a918:	e9c4 8900 	strd	r8, r9, [r4]
 800a91c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a920:	2501      	movs	r5, #1
 800a922:	4628      	mov	r0, r5
 800a924:	b00d      	add	sp, #52	@ 0x34
 800a926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92a:	a39d      	add	r3, pc, #628	@ (adr r3, 800aba0 <__ieee754_rem_pio2+0x2f8>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fcca 	bl	80002c8 <__aeabi_dsub>
 800a934:	a39c      	add	r3, pc, #624	@ (adr r3, 800aba8 <__ieee754_rem_pio2+0x300>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	4606      	mov	r6, r0
 800a93c:	460f      	mov	r7, r1
 800a93e:	f7f5 fcc3 	bl	80002c8 <__aeabi_dsub>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	4680      	mov	r8, r0
 800a948:	4689      	mov	r9, r1
 800a94a:	4630      	mov	r0, r6
 800a94c:	4639      	mov	r1, r7
 800a94e:	f7f5 fcbb 	bl	80002c8 <__aeabi_dsub>
 800a952:	a395      	add	r3, pc, #596	@ (adr r3, 800aba8 <__ieee754_rem_pio2+0x300>)
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	e7dc      	b.n	800a914 <__ieee754_rem_pio2+0x6c>
 800a95a:	f7f5 fcb7 	bl	80002cc <__adddf3>
 800a95e:	45a8      	cmp	r8, r5
 800a960:	4606      	mov	r6, r0
 800a962:	460f      	mov	r7, r1
 800a964:	d018      	beq.n	800a998 <__ieee754_rem_pio2+0xf0>
 800a966:	a38c      	add	r3, pc, #560	@ (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f0>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f5 fcae 	bl	80002cc <__adddf3>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4680      	mov	r8, r0
 800a976:	4689      	mov	r9, r1
 800a978:	4630      	mov	r0, r6
 800a97a:	4639      	mov	r1, r7
 800a97c:	f7f5 fca4 	bl	80002c8 <__aeabi_dsub>
 800a980:	a385      	add	r3, pc, #532	@ (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f0>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fca1 	bl	80002cc <__adddf3>
 800a98a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a98e:	e9c4 8900 	strd	r8, r9, [r4]
 800a992:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a996:	e7c4      	b.n	800a922 <__ieee754_rem_pio2+0x7a>
 800a998:	a381      	add	r3, pc, #516	@ (adr r3, 800aba0 <__ieee754_rem_pio2+0x2f8>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f7f5 fc95 	bl	80002cc <__adddf3>
 800a9a2:	a381      	add	r3, pc, #516	@ (adr r3, 800aba8 <__ieee754_rem_pio2+0x300>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	4606      	mov	r6, r0
 800a9aa:	460f      	mov	r7, r1
 800a9ac:	f7f5 fc8e 	bl	80002cc <__adddf3>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4680      	mov	r8, r0
 800a9b6:	4689      	mov	r9, r1
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	f7f5 fc84 	bl	80002c8 <__aeabi_dsub>
 800a9c0:	a379      	add	r3, pc, #484	@ (adr r3, 800aba8 <__ieee754_rem_pio2+0x300>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	e7de      	b.n	800a986 <__ieee754_rem_pio2+0xde>
 800a9c8:	4b82      	ldr	r3, [pc, #520]	@ (800abd4 <__ieee754_rem_pio2+0x32c>)
 800a9ca:	4598      	cmp	r8, r3
 800a9cc:	f200 80d1 	bhi.w	800ab72 <__ieee754_rem_pio2+0x2ca>
 800a9d0:	f000 fe7c 	bl	800b6cc <fabs>
 800a9d4:	ec57 6b10 	vmov	r6, r7, d0
 800a9d8:	a375      	add	r3, pc, #468	@ (adr r3, 800abb0 <__ieee754_rem_pio2+0x308>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	4630      	mov	r0, r6
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	f7f5 fe29 	bl	8000638 <__aeabi_dmul>
 800a9e6:	4b7c      	ldr	r3, [pc, #496]	@ (800abd8 <__ieee754_rem_pio2+0x330>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f7f5 fc6f 	bl	80002cc <__adddf3>
 800a9ee:	f7f6 f8d3 	bl	8000b98 <__aeabi_d2iz>
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	f7f5 fdb6 	bl	8000564 <__aeabi_i2d>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa00:	a363      	add	r3, pc, #396	@ (adr r3, 800ab90 <__ieee754_rem_pio2+0x2e8>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f7f5 fe17 	bl	8000638 <__aeabi_dmul>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4630      	mov	r0, r6
 800aa10:	4639      	mov	r1, r7
 800aa12:	f7f5 fc59 	bl	80002c8 <__aeabi_dsub>
 800aa16:	a360      	add	r3, pc, #384	@ (adr r3, 800ab98 <__ieee754_rem_pio2+0x2f0>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	4682      	mov	sl, r0
 800aa1e:	468b      	mov	fp, r1
 800aa20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa24:	f7f5 fe08 	bl	8000638 <__aeabi_dmul>
 800aa28:	2d1f      	cmp	r5, #31
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460f      	mov	r7, r1
 800aa2e:	dc0c      	bgt.n	800aa4a <__ieee754_rem_pio2+0x1a2>
 800aa30:	4b6a      	ldr	r3, [pc, #424]	@ (800abdc <__ieee754_rem_pio2+0x334>)
 800aa32:	1e6a      	subs	r2, r5, #1
 800aa34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa38:	4543      	cmp	r3, r8
 800aa3a:	d006      	beq.n	800aa4a <__ieee754_rem_pio2+0x1a2>
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	463b      	mov	r3, r7
 800aa40:	4650      	mov	r0, sl
 800aa42:	4659      	mov	r1, fp
 800aa44:	f7f5 fc40 	bl	80002c8 <__aeabi_dsub>
 800aa48:	e00e      	b.n	800aa68 <__ieee754_rem_pio2+0x1c0>
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	4632      	mov	r2, r6
 800aa4e:	4650      	mov	r0, sl
 800aa50:	4659      	mov	r1, fp
 800aa52:	f7f5 fc39 	bl	80002c8 <__aeabi_dsub>
 800aa56:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa5a:	9305      	str	r3, [sp, #20]
 800aa5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa60:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800aa64:	2b10      	cmp	r3, #16
 800aa66:	dc02      	bgt.n	800aa6e <__ieee754_rem_pio2+0x1c6>
 800aa68:	e9c4 0100 	strd	r0, r1, [r4]
 800aa6c:	e039      	b.n	800aae2 <__ieee754_rem_pio2+0x23a>
 800aa6e:	a34c      	add	r3, pc, #304	@ (adr r3, 800aba0 <__ieee754_rem_pio2+0x2f8>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa78:	f7f5 fdde 	bl	8000638 <__aeabi_dmul>
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	460f      	mov	r7, r1
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4650      	mov	r0, sl
 800aa86:	4659      	mov	r1, fp
 800aa88:	f7f5 fc1e 	bl	80002c8 <__aeabi_dsub>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4680      	mov	r8, r0
 800aa92:	4689      	mov	r9, r1
 800aa94:	4650      	mov	r0, sl
 800aa96:	4659      	mov	r1, fp
 800aa98:	f7f5 fc16 	bl	80002c8 <__aeabi_dsub>
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	463b      	mov	r3, r7
 800aaa0:	f7f5 fc12 	bl	80002c8 <__aeabi_dsub>
 800aaa4:	a340      	add	r3, pc, #256	@ (adr r3, 800aba8 <__ieee754_rem_pio2+0x300>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460f      	mov	r7, r1
 800aaae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab2:	f7f5 fdc1 	bl	8000638 <__aeabi_dmul>
 800aab6:	4632      	mov	r2, r6
 800aab8:	463b      	mov	r3, r7
 800aaba:	f7f5 fc05 	bl	80002c8 <__aeabi_dsub>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4606      	mov	r6, r0
 800aac4:	460f      	mov	r7, r1
 800aac6:	4640      	mov	r0, r8
 800aac8:	4649      	mov	r1, r9
 800aaca:	f7f5 fbfd 	bl	80002c8 <__aeabi_dsub>
 800aace:	9a05      	ldr	r2, [sp, #20]
 800aad0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	2b31      	cmp	r3, #49	@ 0x31
 800aad8:	dc20      	bgt.n	800ab1c <__ieee754_rem_pio2+0x274>
 800aada:	e9c4 0100 	strd	r0, r1, [r4]
 800aade:	46c2      	mov	sl, r8
 800aae0:	46cb      	mov	fp, r9
 800aae2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aae6:	4650      	mov	r0, sl
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	4659      	mov	r1, fp
 800aaee:	f7f5 fbeb 	bl	80002c8 <__aeabi_dsub>
 800aaf2:	463b      	mov	r3, r7
 800aaf4:	4632      	mov	r2, r6
 800aaf6:	f7f5 fbe7 	bl	80002c8 <__aeabi_dsub>
 800aafa:	9b04      	ldr	r3, [sp, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab02:	f6bf af0e 	bge.w	800a922 <__ieee754_rem_pio2+0x7a>
 800ab06:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab10:	f8c4 8000 	str.w	r8, [r4]
 800ab14:	60a0      	str	r0, [r4, #8]
 800ab16:	60e3      	str	r3, [r4, #12]
 800ab18:	426d      	negs	r5, r5
 800ab1a:	e702      	b.n	800a922 <__ieee754_rem_pio2+0x7a>
 800ab1c:	a326      	add	r3, pc, #152	@ (adr r3, 800abb8 <__ieee754_rem_pio2+0x310>)
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab26:	f7f5 fd87 	bl	8000638 <__aeabi_dmul>
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	460f      	mov	r7, r1
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4640      	mov	r0, r8
 800ab34:	4649      	mov	r1, r9
 800ab36:	f7f5 fbc7 	bl	80002c8 <__aeabi_dsub>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4682      	mov	sl, r0
 800ab40:	468b      	mov	fp, r1
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	f7f5 fbbf 	bl	80002c8 <__aeabi_dsub>
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	463b      	mov	r3, r7
 800ab4e:	f7f5 fbbb 	bl	80002c8 <__aeabi_dsub>
 800ab52:	a31b      	add	r3, pc, #108	@ (adr r3, 800abc0 <__ieee754_rem_pio2+0x318>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	4606      	mov	r6, r0
 800ab5a:	460f      	mov	r7, r1
 800ab5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab60:	f7f5 fd6a 	bl	8000638 <__aeabi_dmul>
 800ab64:	4632      	mov	r2, r6
 800ab66:	463b      	mov	r3, r7
 800ab68:	f7f5 fbae 	bl	80002c8 <__aeabi_dsub>
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	460f      	mov	r7, r1
 800ab70:	e764      	b.n	800aa3c <__ieee754_rem_pio2+0x194>
 800ab72:	4b1b      	ldr	r3, [pc, #108]	@ (800abe0 <__ieee754_rem_pio2+0x338>)
 800ab74:	4598      	cmp	r8, r3
 800ab76:	d935      	bls.n	800abe4 <__ieee754_rem_pio2+0x33c>
 800ab78:	4632      	mov	r2, r6
 800ab7a:	463b      	mov	r3, r7
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	4639      	mov	r1, r7
 800ab80:	f7f5 fba2 	bl	80002c8 <__aeabi_dsub>
 800ab84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab88:	e9c4 0100 	strd	r0, r1, [r4]
 800ab8c:	e69e      	b.n	800a8cc <__ieee754_rem_pio2+0x24>
 800ab8e:	bf00      	nop
 800ab90:	54400000 	.word	0x54400000
 800ab94:	3ff921fb 	.word	0x3ff921fb
 800ab98:	1a626331 	.word	0x1a626331
 800ab9c:	3dd0b461 	.word	0x3dd0b461
 800aba0:	1a600000 	.word	0x1a600000
 800aba4:	3dd0b461 	.word	0x3dd0b461
 800aba8:	2e037073 	.word	0x2e037073
 800abac:	3ba3198a 	.word	0x3ba3198a
 800abb0:	6dc9c883 	.word	0x6dc9c883
 800abb4:	3fe45f30 	.word	0x3fe45f30
 800abb8:	2e000000 	.word	0x2e000000
 800abbc:	3ba3198a 	.word	0x3ba3198a
 800abc0:	252049c1 	.word	0x252049c1
 800abc4:	397b839a 	.word	0x397b839a
 800abc8:	3fe921fb 	.word	0x3fe921fb
 800abcc:	4002d97b 	.word	0x4002d97b
 800abd0:	3ff921fb 	.word	0x3ff921fb
 800abd4:	413921fb 	.word	0x413921fb
 800abd8:	3fe00000 	.word	0x3fe00000
 800abdc:	0800bdc8 	.word	0x0800bdc8
 800abe0:	7fefffff 	.word	0x7fefffff
 800abe4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800abe8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800abec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800abf0:	4630      	mov	r0, r6
 800abf2:	460f      	mov	r7, r1
 800abf4:	f7f5 ffd0 	bl	8000b98 <__aeabi_d2iz>
 800abf8:	f7f5 fcb4 	bl	8000564 <__aeabi_i2d>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4630      	mov	r0, r6
 800ac02:	4639      	mov	r1, r7
 800ac04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac08:	f7f5 fb5e 	bl	80002c8 <__aeabi_dsub>
 800ac0c:	4b22      	ldr	r3, [pc, #136]	@ (800ac98 <__ieee754_rem_pio2+0x3f0>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f7f5 fd12 	bl	8000638 <__aeabi_dmul>
 800ac14:	460f      	mov	r7, r1
 800ac16:	4606      	mov	r6, r0
 800ac18:	f7f5 ffbe 	bl	8000b98 <__aeabi_d2iz>
 800ac1c:	f7f5 fca2 	bl	8000564 <__aeabi_i2d>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4630      	mov	r0, r6
 800ac26:	4639      	mov	r1, r7
 800ac28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac2c:	f7f5 fb4c 	bl	80002c8 <__aeabi_dsub>
 800ac30:	4b19      	ldr	r3, [pc, #100]	@ (800ac98 <__ieee754_rem_pio2+0x3f0>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	f7f5 fd00 	bl	8000638 <__aeabi_dmul>
 800ac38:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ac3c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ac40:	f04f 0803 	mov.w	r8, #3
 800ac44:	2600      	movs	r6, #0
 800ac46:	2700      	movs	r7, #0
 800ac48:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	463b      	mov	r3, r7
 800ac50:	46c2      	mov	sl, r8
 800ac52:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ac56:	f7f5 ff57 	bl	8000b08 <__aeabi_dcmpeq>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d1f4      	bne.n	800ac48 <__ieee754_rem_pio2+0x3a0>
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac9c <__ieee754_rem_pio2+0x3f4>)
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	2302      	movs	r3, #2
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	462a      	mov	r2, r5
 800ac68:	4653      	mov	r3, sl
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	a806      	add	r0, sp, #24
 800ac6e:	f000 f853 	bl	800ad18 <__kernel_rem_pio2>
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	4605      	mov	r5, r0
 800ac78:	f6bf ae53 	bge.w	800a922 <__ieee754_rem_pio2+0x7a>
 800ac7c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ac80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac84:	e9c4 2300 	strd	r2, r3, [r4]
 800ac88:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ac8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac90:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ac94:	e740      	b.n	800ab18 <__ieee754_rem_pio2+0x270>
 800ac96:	bf00      	nop
 800ac98:	41700000 	.word	0x41700000
 800ac9c:	0800be48 	.word	0x0800be48

0800aca0 <with_errno>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	ed2d 8b02 	vpush	{d8}
 800aca6:	eeb0 8a40 	vmov.f32	s16, s0
 800acaa:	eef0 8a60 	vmov.f32	s17, s1
 800acae:	4604      	mov	r4, r0
 800acb0:	f7fc fd86 	bl	80077c0 <__errno>
 800acb4:	eeb0 0a48 	vmov.f32	s0, s16
 800acb8:	eef0 0a68 	vmov.f32	s1, s17
 800acbc:	ecbd 8b02 	vpop	{d8}
 800acc0:	6004      	str	r4, [r0, #0]
 800acc2:	bd10      	pop	{r4, pc}

0800acc4 <xflow>:
 800acc4:	4603      	mov	r3, r0
 800acc6:	b507      	push	{r0, r1, r2, lr}
 800acc8:	ec51 0b10 	vmov	r0, r1, d0
 800accc:	b183      	cbz	r3, 800acf0 <xflow+0x2c>
 800acce:	4602      	mov	r2, r0
 800acd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acd4:	e9cd 2300 	strd	r2, r3, [sp]
 800acd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acdc:	f7f5 fcac 	bl	8000638 <__aeabi_dmul>
 800ace0:	ec41 0b10 	vmov	d0, r0, r1
 800ace4:	2022      	movs	r0, #34	@ 0x22
 800ace6:	b003      	add	sp, #12
 800ace8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acec:	f7ff bfd8 	b.w	800aca0 <with_errno>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	e7ee      	b.n	800acd4 <xflow+0x10>
	...

0800acf8 <__math_uflow>:
 800acf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ad00 <__math_uflow+0x8>
 800acfc:	f7ff bfe2 	b.w	800acc4 <xflow>
 800ad00:	00000000 	.word	0x00000000
 800ad04:	10000000 	.word	0x10000000

0800ad08 <__math_oflow>:
 800ad08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ad10 <__math_oflow+0x8>
 800ad0c:	f7ff bfda 	b.w	800acc4 <xflow>
 800ad10:	00000000 	.word	0x00000000
 800ad14:	70000000 	.word	0x70000000

0800ad18 <__kernel_rem_pio2>:
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	ed2d 8b02 	vpush	{d8}
 800ad20:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ad24:	f112 0f14 	cmn.w	r2, #20
 800ad28:	9306      	str	r3, [sp, #24]
 800ad2a:	9104      	str	r1, [sp, #16]
 800ad2c:	4bbe      	ldr	r3, [pc, #760]	@ (800b028 <__kernel_rem_pio2+0x310>)
 800ad2e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ad30:	9008      	str	r0, [sp, #32]
 800ad32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	9b06      	ldr	r3, [sp, #24]
 800ad3a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ad3e:	bfa8      	it	ge
 800ad40:	1ed4      	subge	r4, r2, #3
 800ad42:	9305      	str	r3, [sp, #20]
 800ad44:	bfb2      	itee	lt
 800ad46:	2400      	movlt	r4, #0
 800ad48:	2318      	movge	r3, #24
 800ad4a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ad4e:	f06f 0317 	mvn.w	r3, #23
 800ad52:	fb04 3303 	mla	r3, r4, r3, r3
 800ad56:	eb03 0b02 	add.w	fp, r3, r2
 800ad5a:	9b00      	ldr	r3, [sp, #0]
 800ad5c:	9a05      	ldr	r2, [sp, #20]
 800ad5e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b018 <__kernel_rem_pio2+0x300>
 800ad62:	eb03 0802 	add.w	r8, r3, r2
 800ad66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ad68:	1aa7      	subs	r7, r4, r2
 800ad6a:	ae20      	add	r6, sp, #128	@ 0x80
 800ad6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ad70:	2500      	movs	r5, #0
 800ad72:	4545      	cmp	r5, r8
 800ad74:	dd13      	ble.n	800ad9e <__kernel_rem_pio2+0x86>
 800ad76:	9b06      	ldr	r3, [sp, #24]
 800ad78:	aa20      	add	r2, sp, #128	@ 0x80
 800ad7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ad7e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ad82:	f04f 0800 	mov.w	r8, #0
 800ad86:	9b00      	ldr	r3, [sp, #0]
 800ad88:	4598      	cmp	r8, r3
 800ad8a:	dc31      	bgt.n	800adf0 <__kernel_rem_pio2+0xd8>
 800ad8c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b018 <__kernel_rem_pio2+0x300>
 800ad90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad98:	462f      	mov	r7, r5
 800ad9a:	2600      	movs	r6, #0
 800ad9c:	e01b      	b.n	800add6 <__kernel_rem_pio2+0xbe>
 800ad9e:	42ef      	cmn	r7, r5
 800ada0:	d407      	bmi.n	800adb2 <__kernel_rem_pio2+0x9a>
 800ada2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ada6:	f7f5 fbdd 	bl	8000564 <__aeabi_i2d>
 800adaa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800adae:	3501      	adds	r5, #1
 800adb0:	e7df      	b.n	800ad72 <__kernel_rem_pio2+0x5a>
 800adb2:	ec51 0b18 	vmov	r0, r1, d8
 800adb6:	e7f8      	b.n	800adaa <__kernel_rem_pio2+0x92>
 800adb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adbc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800adc0:	f7f5 fc3a 	bl	8000638 <__aeabi_dmul>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adcc:	f7f5 fa7e 	bl	80002cc <__adddf3>
 800add0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800add4:	3601      	adds	r6, #1
 800add6:	9b05      	ldr	r3, [sp, #20]
 800add8:	429e      	cmp	r6, r3
 800adda:	f1a7 0708 	sub.w	r7, r7, #8
 800adde:	ddeb      	ble.n	800adb8 <__kernel_rem_pio2+0xa0>
 800ade0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ade4:	f108 0801 	add.w	r8, r8, #1
 800ade8:	ecaa 7b02 	vstmia	sl!, {d7}
 800adec:	3508      	adds	r5, #8
 800adee:	e7ca      	b.n	800ad86 <__kernel_rem_pio2+0x6e>
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	f8dd 8000 	ldr.w	r8, [sp]
 800adf6:	aa0c      	add	r2, sp, #48	@ 0x30
 800adf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800adfe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ae00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ae04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae06:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ae0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae0c:	ab98      	add	r3, sp, #608	@ 0x260
 800ae0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ae12:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ae16:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae1a:	ac0c      	add	r4, sp, #48	@ 0x30
 800ae1c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ae1e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ae22:	46a1      	mov	r9, r4
 800ae24:	46c2      	mov	sl, r8
 800ae26:	f1ba 0f00 	cmp.w	sl, #0
 800ae2a:	f1a5 0508 	sub.w	r5, r5, #8
 800ae2e:	dc77      	bgt.n	800af20 <__kernel_rem_pio2+0x208>
 800ae30:	4658      	mov	r0, fp
 800ae32:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ae36:	f000 fc53 	bl	800b6e0 <scalbn>
 800ae3a:	ec57 6b10 	vmov	r6, r7, d0
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ae44:	4630      	mov	r0, r6
 800ae46:	4639      	mov	r1, r7
 800ae48:	f7f5 fbf6 	bl	8000638 <__aeabi_dmul>
 800ae4c:	ec41 0b10 	vmov	d0, r0, r1
 800ae50:	f000 fcc6 	bl	800b7e0 <floor>
 800ae54:	4b75      	ldr	r3, [pc, #468]	@ (800b02c <__kernel_rem_pio2+0x314>)
 800ae56:	ec51 0b10 	vmov	r0, r1, d0
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f7f5 fbec 	bl	8000638 <__aeabi_dmul>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4630      	mov	r0, r6
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fa2e 	bl	80002c8 <__aeabi_dsub>
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	4606      	mov	r6, r0
 800ae70:	f7f5 fe92 	bl	8000b98 <__aeabi_d2iz>
 800ae74:	9002      	str	r0, [sp, #8]
 800ae76:	f7f5 fb75 	bl	8000564 <__aeabi_i2d>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4630      	mov	r0, r6
 800ae80:	4639      	mov	r1, r7
 800ae82:	f7f5 fa21 	bl	80002c8 <__aeabi_dsub>
 800ae86:	f1bb 0f00 	cmp.w	fp, #0
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	460f      	mov	r7, r1
 800ae8e:	dd6c      	ble.n	800af6a <__kernel_rem_pio2+0x252>
 800ae90:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800ae94:	ab0c      	add	r3, sp, #48	@ 0x30
 800ae96:	9d02      	ldr	r5, [sp, #8]
 800ae98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae9c:	f1cb 0018 	rsb	r0, fp, #24
 800aea0:	fa43 f200 	asr.w	r2, r3, r0
 800aea4:	4415      	add	r5, r2
 800aea6:	4082      	lsls	r2, r0
 800aea8:	1a9b      	subs	r3, r3, r2
 800aeaa:	aa0c      	add	r2, sp, #48	@ 0x30
 800aeac:	9502      	str	r5, [sp, #8]
 800aeae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800aeb2:	f1cb 0217 	rsb	r2, fp, #23
 800aeb6:	fa43 f902 	asr.w	r9, r3, r2
 800aeba:	f1b9 0f00 	cmp.w	r9, #0
 800aebe:	dd64      	ble.n	800af8a <__kernel_rem_pio2+0x272>
 800aec0:	9b02      	ldr	r3, [sp, #8]
 800aec2:	2200      	movs	r2, #0
 800aec4:	3301      	adds	r3, #1
 800aec6:	9302      	str	r3, [sp, #8]
 800aec8:	4615      	mov	r5, r2
 800aeca:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800aece:	4590      	cmp	r8, r2
 800aed0:	f300 80b8 	bgt.w	800b044 <__kernel_rem_pio2+0x32c>
 800aed4:	f1bb 0f00 	cmp.w	fp, #0
 800aed8:	dd07      	ble.n	800aeea <__kernel_rem_pio2+0x1d2>
 800aeda:	f1bb 0f01 	cmp.w	fp, #1
 800aede:	f000 80bf 	beq.w	800b060 <__kernel_rem_pio2+0x348>
 800aee2:	f1bb 0f02 	cmp.w	fp, #2
 800aee6:	f000 80c6 	beq.w	800b076 <__kernel_rem_pio2+0x35e>
 800aeea:	f1b9 0f02 	cmp.w	r9, #2
 800aeee:	d14c      	bne.n	800af8a <__kernel_rem_pio2+0x272>
 800aef0:	4632      	mov	r2, r6
 800aef2:	463b      	mov	r3, r7
 800aef4:	494e      	ldr	r1, [pc, #312]	@ (800b030 <__kernel_rem_pio2+0x318>)
 800aef6:	2000      	movs	r0, #0
 800aef8:	f7f5 f9e6 	bl	80002c8 <__aeabi_dsub>
 800aefc:	4606      	mov	r6, r0
 800aefe:	460f      	mov	r7, r1
 800af00:	2d00      	cmp	r5, #0
 800af02:	d042      	beq.n	800af8a <__kernel_rem_pio2+0x272>
 800af04:	4658      	mov	r0, fp
 800af06:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b020 <__kernel_rem_pio2+0x308>
 800af0a:	f000 fbe9 	bl	800b6e0 <scalbn>
 800af0e:	4630      	mov	r0, r6
 800af10:	4639      	mov	r1, r7
 800af12:	ec53 2b10 	vmov	r2, r3, d0
 800af16:	f7f5 f9d7 	bl	80002c8 <__aeabi_dsub>
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	e034      	b.n	800af8a <__kernel_rem_pio2+0x272>
 800af20:	4b44      	ldr	r3, [pc, #272]	@ (800b034 <__kernel_rem_pio2+0x31c>)
 800af22:	2200      	movs	r2, #0
 800af24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af28:	f7f5 fb86 	bl	8000638 <__aeabi_dmul>
 800af2c:	f7f5 fe34 	bl	8000b98 <__aeabi_d2iz>
 800af30:	f7f5 fb18 	bl	8000564 <__aeabi_i2d>
 800af34:	4b40      	ldr	r3, [pc, #256]	@ (800b038 <__kernel_rem_pio2+0x320>)
 800af36:	2200      	movs	r2, #0
 800af38:	4606      	mov	r6, r0
 800af3a:	460f      	mov	r7, r1
 800af3c:	f7f5 fb7c 	bl	8000638 <__aeabi_dmul>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af48:	f7f5 f9be 	bl	80002c8 <__aeabi_dsub>
 800af4c:	f7f5 fe24 	bl	8000b98 <__aeabi_d2iz>
 800af50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af54:	f849 0b04 	str.w	r0, [r9], #4
 800af58:	4639      	mov	r1, r7
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7f5 f9b6 	bl	80002cc <__adddf3>
 800af60:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800af64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af68:	e75d      	b.n	800ae26 <__kernel_rem_pio2+0x10e>
 800af6a:	d107      	bne.n	800af7c <__kernel_rem_pio2+0x264>
 800af6c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800af70:	aa0c      	add	r2, sp, #48	@ 0x30
 800af72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af76:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800af7a:	e79e      	b.n	800aeba <__kernel_rem_pio2+0x1a2>
 800af7c:	4b2f      	ldr	r3, [pc, #188]	@ (800b03c <__kernel_rem_pio2+0x324>)
 800af7e:	2200      	movs	r2, #0
 800af80:	f7f5 fde0 	bl	8000b44 <__aeabi_dcmpge>
 800af84:	2800      	cmp	r0, #0
 800af86:	d143      	bne.n	800b010 <__kernel_rem_pio2+0x2f8>
 800af88:	4681      	mov	r9, r0
 800af8a:	2200      	movs	r2, #0
 800af8c:	2300      	movs	r3, #0
 800af8e:	4630      	mov	r0, r6
 800af90:	4639      	mov	r1, r7
 800af92:	f7f5 fdb9 	bl	8000b08 <__aeabi_dcmpeq>
 800af96:	2800      	cmp	r0, #0
 800af98:	f000 80bf 	beq.w	800b11a <__kernel_rem_pio2+0x402>
 800af9c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800afa0:	2200      	movs	r2, #0
 800afa2:	9900      	ldr	r1, [sp, #0]
 800afa4:	428b      	cmp	r3, r1
 800afa6:	da6e      	bge.n	800b086 <__kernel_rem_pio2+0x36e>
 800afa8:	2a00      	cmp	r2, #0
 800afaa:	f000 8089 	beq.w	800b0c0 <__kernel_rem_pio2+0x3a8>
 800afae:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800afb2:	ab0c      	add	r3, sp, #48	@ 0x30
 800afb4:	f1ab 0b18 	sub.w	fp, fp, #24
 800afb8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0f6      	beq.n	800afae <__kernel_rem_pio2+0x296>
 800afc0:	4658      	mov	r0, fp
 800afc2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b020 <__kernel_rem_pio2+0x308>
 800afc6:	f000 fb8b 	bl	800b6e0 <scalbn>
 800afca:	f108 0301 	add.w	r3, r8, #1
 800afce:	00da      	lsls	r2, r3, #3
 800afd0:	9205      	str	r2, [sp, #20]
 800afd2:	ec55 4b10 	vmov	r4, r5, d0
 800afd6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800afd8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b034 <__kernel_rem_pio2+0x31c>
 800afdc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800afe0:	4646      	mov	r6, r8
 800afe2:	f04f 0a00 	mov.w	sl, #0
 800afe6:	2e00      	cmp	r6, #0
 800afe8:	f280 80cf 	bge.w	800b18a <__kernel_rem_pio2+0x472>
 800afec:	4644      	mov	r4, r8
 800afee:	2c00      	cmp	r4, #0
 800aff0:	f2c0 80fd 	blt.w	800b1ee <__kernel_rem_pio2+0x4d6>
 800aff4:	4b12      	ldr	r3, [pc, #72]	@ (800b040 <__kernel_rem_pio2+0x328>)
 800aff6:	461f      	mov	r7, r3
 800aff8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800affa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800affe:	9306      	str	r3, [sp, #24]
 800b000:	f04f 0a00 	mov.w	sl, #0
 800b004:	f04f 0b00 	mov.w	fp, #0
 800b008:	2600      	movs	r6, #0
 800b00a:	eba8 0504 	sub.w	r5, r8, r4
 800b00e:	e0e2      	b.n	800b1d6 <__kernel_rem_pio2+0x4be>
 800b010:	f04f 0902 	mov.w	r9, #2
 800b014:	e754      	b.n	800aec0 <__kernel_rem_pio2+0x1a8>
 800b016:	bf00      	nop
	...
 800b024:	3ff00000 	.word	0x3ff00000
 800b028:	0800bf90 	.word	0x0800bf90
 800b02c:	40200000 	.word	0x40200000
 800b030:	3ff00000 	.word	0x3ff00000
 800b034:	3e700000 	.word	0x3e700000
 800b038:	41700000 	.word	0x41700000
 800b03c:	3fe00000 	.word	0x3fe00000
 800b040:	0800bf50 	.word	0x0800bf50
 800b044:	f854 3b04 	ldr.w	r3, [r4], #4
 800b048:	b945      	cbnz	r5, 800b05c <__kernel_rem_pio2+0x344>
 800b04a:	b123      	cbz	r3, 800b056 <__kernel_rem_pio2+0x33e>
 800b04c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b050:	f844 3c04 	str.w	r3, [r4, #-4]
 800b054:	2301      	movs	r3, #1
 800b056:	3201      	adds	r2, #1
 800b058:	461d      	mov	r5, r3
 800b05a:	e738      	b.n	800aece <__kernel_rem_pio2+0x1b6>
 800b05c:	1acb      	subs	r3, r1, r3
 800b05e:	e7f7      	b.n	800b050 <__kernel_rem_pio2+0x338>
 800b060:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800b064:	ab0c      	add	r3, sp, #48	@ 0x30
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b06e:	a90c      	add	r1, sp, #48	@ 0x30
 800b070:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b074:	e739      	b.n	800aeea <__kernel_rem_pio2+0x1d2>
 800b076:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800b07a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b080:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b084:	e7f3      	b.n	800b06e <__kernel_rem_pio2+0x356>
 800b086:	a90c      	add	r1, sp, #48	@ 0x30
 800b088:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	430a      	orrs	r2, r1
 800b090:	e787      	b.n	800afa2 <__kernel_rem_pio2+0x28a>
 800b092:	3401      	adds	r4, #1
 800b094:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b098:	2a00      	cmp	r2, #0
 800b09a:	d0fa      	beq.n	800b092 <__kernel_rem_pio2+0x37a>
 800b09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b09e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b0a2:	eb0d 0503 	add.w	r5, sp, r3
 800b0a6:	9b06      	ldr	r3, [sp, #24]
 800b0a8:	aa20      	add	r2, sp, #128	@ 0x80
 800b0aa:	4443      	add	r3, r8
 800b0ac:	f108 0701 	add.w	r7, r8, #1
 800b0b0:	3d98      	subs	r5, #152	@ 0x98
 800b0b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b0b6:	4444      	add	r4, r8
 800b0b8:	42bc      	cmp	r4, r7
 800b0ba:	da04      	bge.n	800b0c6 <__kernel_rem_pio2+0x3ae>
 800b0bc:	46a0      	mov	r8, r4
 800b0be:	e6a2      	b.n	800ae06 <__kernel_rem_pio2+0xee>
 800b0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0c2:	2401      	movs	r4, #1
 800b0c4:	e7e6      	b.n	800b094 <__kernel_rem_pio2+0x37c>
 800b0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b0cc:	f7f5 fa4a 	bl	8000564 <__aeabi_i2d>
 800b0d0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b398 <__kernel_rem_pio2+0x680>
 800b0d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b0d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b0dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0e0:	46b2      	mov	sl, r6
 800b0e2:	f04f 0800 	mov.w	r8, #0
 800b0e6:	9b05      	ldr	r3, [sp, #20]
 800b0e8:	4598      	cmp	r8, r3
 800b0ea:	dd05      	ble.n	800b0f8 <__kernel_rem_pio2+0x3e0>
 800b0ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0f0:	3701      	adds	r7, #1
 800b0f2:	eca5 7b02 	vstmia	r5!, {d7}
 800b0f6:	e7df      	b.n	800b0b8 <__kernel_rem_pio2+0x3a0>
 800b0f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b0fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b100:	f7f5 fa9a 	bl	8000638 <__aeabi_dmul>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b10c:	f7f5 f8de 	bl	80002cc <__adddf3>
 800b110:	f108 0801 	add.w	r8, r8, #1
 800b114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b118:	e7e5      	b.n	800b0e6 <__kernel_rem_pio2+0x3ce>
 800b11a:	f1cb 0000 	rsb	r0, fp, #0
 800b11e:	ec47 6b10 	vmov	d0, r6, r7
 800b122:	f000 fadd 	bl	800b6e0 <scalbn>
 800b126:	ec55 4b10 	vmov	r4, r5, d0
 800b12a:	4b9d      	ldr	r3, [pc, #628]	@ (800b3a0 <__kernel_rem_pio2+0x688>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 fd07 	bl	8000b44 <__aeabi_dcmpge>
 800b136:	b300      	cbz	r0, 800b17a <__kernel_rem_pio2+0x462>
 800b138:	4b9a      	ldr	r3, [pc, #616]	@ (800b3a4 <__kernel_rem_pio2+0x68c>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	4620      	mov	r0, r4
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 fa7a 	bl	8000638 <__aeabi_dmul>
 800b144:	f7f5 fd28 	bl	8000b98 <__aeabi_d2iz>
 800b148:	4606      	mov	r6, r0
 800b14a:	f7f5 fa0b 	bl	8000564 <__aeabi_i2d>
 800b14e:	4b94      	ldr	r3, [pc, #592]	@ (800b3a0 <__kernel_rem_pio2+0x688>)
 800b150:	2200      	movs	r2, #0
 800b152:	f7f5 fa71 	bl	8000638 <__aeabi_dmul>
 800b156:	460b      	mov	r3, r1
 800b158:	4602      	mov	r2, r0
 800b15a:	4629      	mov	r1, r5
 800b15c:	4620      	mov	r0, r4
 800b15e:	f7f5 f8b3 	bl	80002c8 <__aeabi_dsub>
 800b162:	f7f5 fd19 	bl	8000b98 <__aeabi_d2iz>
 800b166:	ab0c      	add	r3, sp, #48	@ 0x30
 800b168:	f10b 0b18 	add.w	fp, fp, #24
 800b16c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b170:	f108 0801 	add.w	r8, r8, #1
 800b174:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b178:	e722      	b.n	800afc0 <__kernel_rem_pio2+0x2a8>
 800b17a:	4620      	mov	r0, r4
 800b17c:	4629      	mov	r1, r5
 800b17e:	f7f5 fd0b 	bl	8000b98 <__aeabi_d2iz>
 800b182:	ab0c      	add	r3, sp, #48	@ 0x30
 800b184:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b188:	e71a      	b.n	800afc0 <__kernel_rem_pio2+0x2a8>
 800b18a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b18c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b190:	f7f5 f9e8 	bl	8000564 <__aeabi_i2d>
 800b194:	4622      	mov	r2, r4
 800b196:	462b      	mov	r3, r5
 800b198:	f7f5 fa4e 	bl	8000638 <__aeabi_dmul>
 800b19c:	4652      	mov	r2, sl
 800b19e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b1a2:	465b      	mov	r3, fp
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f7f5 fa46 	bl	8000638 <__aeabi_dmul>
 800b1ac:	3e01      	subs	r6, #1
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	460d      	mov	r5, r1
 800b1b2:	e718      	b.n	800afe6 <__kernel_rem_pio2+0x2ce>
 800b1b4:	9906      	ldr	r1, [sp, #24]
 800b1b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b1ba:	9106      	str	r1, [sp, #24]
 800b1bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b1c0:	f7f5 fa3a 	bl	8000638 <__aeabi_dmul>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	4659      	mov	r1, fp
 800b1cc:	f7f5 f87e 	bl	80002cc <__adddf3>
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	4682      	mov	sl, r0
 800b1d4:	468b      	mov	fp, r1
 800b1d6:	9b00      	ldr	r3, [sp, #0]
 800b1d8:	429e      	cmp	r6, r3
 800b1da:	dc01      	bgt.n	800b1e0 <__kernel_rem_pio2+0x4c8>
 800b1dc:	42b5      	cmp	r5, r6
 800b1de:	dae9      	bge.n	800b1b4 <__kernel_rem_pio2+0x49c>
 800b1e0:	ab48      	add	r3, sp, #288	@ 0x120
 800b1e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b1e6:	e9c5 ab00 	strd	sl, fp, [r5]
 800b1ea:	3c01      	subs	r4, #1
 800b1ec:	e6ff      	b.n	800afee <__kernel_rem_pio2+0x2d6>
 800b1ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	dc0b      	bgt.n	800b20c <__kernel_rem_pio2+0x4f4>
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	dc39      	bgt.n	800b26c <__kernel_rem_pio2+0x554>
 800b1f8:	d05d      	beq.n	800b2b6 <__kernel_rem_pio2+0x59e>
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	f003 0007 	and.w	r0, r3, #7
 800b200:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b204:	ecbd 8b02 	vpop	{d8}
 800b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d1f3      	bne.n	800b1fa <__kernel_rem_pio2+0x4e2>
 800b212:	9b05      	ldr	r3, [sp, #20]
 800b214:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b218:	eb0d 0403 	add.w	r4, sp, r3
 800b21c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b220:	4625      	mov	r5, r4
 800b222:	46c2      	mov	sl, r8
 800b224:	f1ba 0f00 	cmp.w	sl, #0
 800b228:	f1a5 0508 	sub.w	r5, r5, #8
 800b22c:	dc6b      	bgt.n	800b306 <__kernel_rem_pio2+0x5ee>
 800b22e:	4645      	mov	r5, r8
 800b230:	2d01      	cmp	r5, #1
 800b232:	f1a4 0408 	sub.w	r4, r4, #8
 800b236:	f300 8087 	bgt.w	800b348 <__kernel_rem_pio2+0x630>
 800b23a:	9c05      	ldr	r4, [sp, #20]
 800b23c:	ab48      	add	r3, sp, #288	@ 0x120
 800b23e:	441c      	add	r4, r3
 800b240:	2000      	movs	r0, #0
 800b242:	2100      	movs	r1, #0
 800b244:	f1b8 0f01 	cmp.w	r8, #1
 800b248:	f300 809c 	bgt.w	800b384 <__kernel_rem_pio2+0x66c>
 800b24c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b250:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b254:	f1b9 0f00 	cmp.w	r9, #0
 800b258:	f040 80a6 	bne.w	800b3a8 <__kernel_rem_pio2+0x690>
 800b25c:	9b04      	ldr	r3, [sp, #16]
 800b25e:	e9c3 7800 	strd	r7, r8, [r3]
 800b262:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b266:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b26a:	e7c6      	b.n	800b1fa <__kernel_rem_pio2+0x4e2>
 800b26c:	9d05      	ldr	r5, [sp, #20]
 800b26e:	ab48      	add	r3, sp, #288	@ 0x120
 800b270:	441d      	add	r5, r3
 800b272:	4644      	mov	r4, r8
 800b274:	2000      	movs	r0, #0
 800b276:	2100      	movs	r1, #0
 800b278:	2c00      	cmp	r4, #0
 800b27a:	da35      	bge.n	800b2e8 <__kernel_rem_pio2+0x5d0>
 800b27c:	f1b9 0f00 	cmp.w	r9, #0
 800b280:	d038      	beq.n	800b2f4 <__kernel_rem_pio2+0x5dc>
 800b282:	4602      	mov	r2, r0
 800b284:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b288:	9c04      	ldr	r4, [sp, #16]
 800b28a:	e9c4 2300 	strd	r2, r3, [r4]
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b296:	f7f5 f817 	bl	80002c8 <__aeabi_dsub>
 800b29a:	ad4a      	add	r5, sp, #296	@ 0x128
 800b29c:	2401      	movs	r4, #1
 800b29e:	45a0      	cmp	r8, r4
 800b2a0:	da2b      	bge.n	800b2fa <__kernel_rem_pio2+0x5e2>
 800b2a2:	f1b9 0f00 	cmp.w	r9, #0
 800b2a6:	d002      	beq.n	800b2ae <__kernel_rem_pio2+0x596>
 800b2a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b2b4:	e7a1      	b.n	800b1fa <__kernel_rem_pio2+0x4e2>
 800b2b6:	9c05      	ldr	r4, [sp, #20]
 800b2b8:	ab48      	add	r3, sp, #288	@ 0x120
 800b2ba:	441c      	add	r4, r3
 800b2bc:	2000      	movs	r0, #0
 800b2be:	2100      	movs	r1, #0
 800b2c0:	f1b8 0f00 	cmp.w	r8, #0
 800b2c4:	da09      	bge.n	800b2da <__kernel_rem_pio2+0x5c2>
 800b2c6:	f1b9 0f00 	cmp.w	r9, #0
 800b2ca:	d002      	beq.n	800b2d2 <__kernel_rem_pio2+0x5ba>
 800b2cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	9b04      	ldr	r3, [sp, #16]
 800b2d4:	e9c3 0100 	strd	r0, r1, [r3]
 800b2d8:	e78f      	b.n	800b1fa <__kernel_rem_pio2+0x4e2>
 800b2da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2de:	f7f4 fff5 	bl	80002cc <__adddf3>
 800b2e2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b2e6:	e7eb      	b.n	800b2c0 <__kernel_rem_pio2+0x5a8>
 800b2e8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b2ec:	f7f4 ffee 	bl	80002cc <__adddf3>
 800b2f0:	3c01      	subs	r4, #1
 800b2f2:	e7c1      	b.n	800b278 <__kernel_rem_pio2+0x560>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	e7c6      	b.n	800b288 <__kernel_rem_pio2+0x570>
 800b2fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b2fe:	f7f4 ffe5 	bl	80002cc <__adddf3>
 800b302:	3401      	adds	r4, #1
 800b304:	e7cb      	b.n	800b29e <__kernel_rem_pio2+0x586>
 800b306:	ed95 7b00 	vldr	d7, [r5]
 800b30a:	ed8d 7b00 	vstr	d7, [sp]
 800b30e:	ed95 7b02 	vldr	d7, [r5, #8]
 800b312:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b316:	ec53 2b17 	vmov	r2, r3, d7
 800b31a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b31e:	f7f4 ffd5 	bl	80002cc <__adddf3>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b32e:	f7f4 ffcb 	bl	80002c8 <__aeabi_dsub>
 800b332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b336:	f7f4 ffc9 	bl	80002cc <__adddf3>
 800b33a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b33e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b342:	e9c5 6700 	strd	r6, r7, [r5]
 800b346:	e76d      	b.n	800b224 <__kernel_rem_pio2+0x50c>
 800b348:	ed94 7b00 	vldr	d7, [r4]
 800b34c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b350:	ec51 0b17 	vmov	r0, r1, d7
 800b354:	4652      	mov	r2, sl
 800b356:	465b      	mov	r3, fp
 800b358:	ed8d 7b00 	vstr	d7, [sp]
 800b35c:	f7f4 ffb6 	bl	80002cc <__adddf3>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	4606      	mov	r6, r0
 800b366:	460f      	mov	r7, r1
 800b368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b36c:	f7f4 ffac 	bl	80002c8 <__aeabi_dsub>
 800b370:	4652      	mov	r2, sl
 800b372:	465b      	mov	r3, fp
 800b374:	f7f4 ffaa 	bl	80002cc <__adddf3>
 800b378:	3d01      	subs	r5, #1
 800b37a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b37e:	e9c4 6700 	strd	r6, r7, [r4]
 800b382:	e755      	b.n	800b230 <__kernel_rem_pio2+0x518>
 800b384:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b388:	f7f4 ffa0 	bl	80002cc <__adddf3>
 800b38c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b390:	e758      	b.n	800b244 <__kernel_rem_pio2+0x52c>
 800b392:	bf00      	nop
 800b394:	f3af 8000 	nop.w
	...
 800b3a0:	41700000 	.word	0x41700000
 800b3a4:	3e700000 	.word	0x3e700000
 800b3a8:	9b04      	ldr	r3, [sp, #16]
 800b3aa:	9a04      	ldr	r2, [sp, #16]
 800b3ac:	601f      	str	r7, [r3, #0]
 800b3ae:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b3b2:	605c      	str	r4, [r3, #4]
 800b3b4:	609d      	str	r5, [r3, #8]
 800b3b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b3ba:	60d3      	str	r3, [r2, #12]
 800b3bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3c0:	6110      	str	r0, [r2, #16]
 800b3c2:	6153      	str	r3, [r2, #20]
 800b3c4:	e719      	b.n	800b1fa <__kernel_rem_pio2+0x4e2>
 800b3c6:	bf00      	nop

0800b3c8 <__kernel_cos>:
 800b3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	ec57 6b10 	vmov	r6, r7, d0
 800b3d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b3d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b3d8:	ed8d 1b00 	vstr	d1, [sp]
 800b3dc:	d206      	bcs.n	800b3ec <__kernel_cos+0x24>
 800b3de:	4630      	mov	r0, r6
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	f7f5 fbd9 	bl	8000b98 <__aeabi_d2iz>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f000 8088 	beq.w	800b4fc <__kernel_cos+0x134>
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	463b      	mov	r3, r7
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	f7f5 f920 	bl	8000638 <__aeabi_dmul>
 800b3f8:	4b51      	ldr	r3, [pc, #324]	@ (800b540 <__kernel_cos+0x178>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	460d      	mov	r5, r1
 800b400:	f7f5 f91a 	bl	8000638 <__aeabi_dmul>
 800b404:	a340      	add	r3, pc, #256	@ (adr r3, 800b508 <__kernel_cos+0x140>)
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	4682      	mov	sl, r0
 800b40c:	468b      	mov	fp, r1
 800b40e:	4620      	mov	r0, r4
 800b410:	4629      	mov	r1, r5
 800b412:	f7f5 f911 	bl	8000638 <__aeabi_dmul>
 800b416:	a33e      	add	r3, pc, #248	@ (adr r3, 800b510 <__kernel_cos+0x148>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	f7f4 ff56 	bl	80002cc <__adddf3>
 800b420:	4622      	mov	r2, r4
 800b422:	462b      	mov	r3, r5
 800b424:	f7f5 f908 	bl	8000638 <__aeabi_dmul>
 800b428:	a33b      	add	r3, pc, #236	@ (adr r3, 800b518 <__kernel_cos+0x150>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f4 ff4b 	bl	80002c8 <__aeabi_dsub>
 800b432:	4622      	mov	r2, r4
 800b434:	462b      	mov	r3, r5
 800b436:	f7f5 f8ff 	bl	8000638 <__aeabi_dmul>
 800b43a:	a339      	add	r3, pc, #228	@ (adr r3, 800b520 <__kernel_cos+0x158>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	f7f4 ff44 	bl	80002cc <__adddf3>
 800b444:	4622      	mov	r2, r4
 800b446:	462b      	mov	r3, r5
 800b448:	f7f5 f8f6 	bl	8000638 <__aeabi_dmul>
 800b44c:	a336      	add	r3, pc, #216	@ (adr r3, 800b528 <__kernel_cos+0x160>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f4 ff39 	bl	80002c8 <__aeabi_dsub>
 800b456:	4622      	mov	r2, r4
 800b458:	462b      	mov	r3, r5
 800b45a:	f7f5 f8ed 	bl	8000638 <__aeabi_dmul>
 800b45e:	a334      	add	r3, pc, #208	@ (adr r3, 800b530 <__kernel_cos+0x168>)
 800b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b464:	f7f4 ff32 	bl	80002cc <__adddf3>
 800b468:	4622      	mov	r2, r4
 800b46a:	462b      	mov	r3, r5
 800b46c:	f7f5 f8e4 	bl	8000638 <__aeabi_dmul>
 800b470:	4622      	mov	r2, r4
 800b472:	462b      	mov	r3, r5
 800b474:	f7f5 f8e0 	bl	8000638 <__aeabi_dmul>
 800b478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b47c:	4604      	mov	r4, r0
 800b47e:	460d      	mov	r5, r1
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f5 f8d8 	bl	8000638 <__aeabi_dmul>
 800b488:	460b      	mov	r3, r1
 800b48a:	4602      	mov	r2, r0
 800b48c:	4629      	mov	r1, r5
 800b48e:	4620      	mov	r0, r4
 800b490:	f7f4 ff1a 	bl	80002c8 <__aeabi_dsub>
 800b494:	4b2b      	ldr	r3, [pc, #172]	@ (800b544 <__kernel_cos+0x17c>)
 800b496:	4598      	cmp	r8, r3
 800b498:	4606      	mov	r6, r0
 800b49a:	460f      	mov	r7, r1
 800b49c:	d810      	bhi.n	800b4c0 <__kernel_cos+0xf8>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4650      	mov	r0, sl
 800b4a4:	4659      	mov	r1, fp
 800b4a6:	f7f4 ff0f 	bl	80002c8 <__aeabi_dsub>
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4926      	ldr	r1, [pc, #152]	@ (800b548 <__kernel_cos+0x180>)
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f7f4 ff09 	bl	80002c8 <__aeabi_dsub>
 800b4b6:	ec41 0b10 	vmov	d0, r0, r1
 800b4ba:	b003      	add	sp, #12
 800b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c0:	4b22      	ldr	r3, [pc, #136]	@ (800b54c <__kernel_cos+0x184>)
 800b4c2:	4921      	ldr	r1, [pc, #132]	@ (800b548 <__kernel_cos+0x180>)
 800b4c4:	4598      	cmp	r8, r3
 800b4c6:	bf8c      	ite	hi
 800b4c8:	4d21      	ldrhi	r5, [pc, #132]	@ (800b550 <__kernel_cos+0x188>)
 800b4ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b4ce:	2400      	movs	r4, #0
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	f7f4 fef7 	bl	80002c8 <__aeabi_dsub>
 800b4da:	4622      	mov	r2, r4
 800b4dc:	4680      	mov	r8, r0
 800b4de:	4689      	mov	r9, r1
 800b4e0:	462b      	mov	r3, r5
 800b4e2:	4650      	mov	r0, sl
 800b4e4:	4659      	mov	r1, fp
 800b4e6:	f7f4 feef 	bl	80002c8 <__aeabi_dsub>
 800b4ea:	4632      	mov	r2, r6
 800b4ec:	463b      	mov	r3, r7
 800b4ee:	f7f4 feeb 	bl	80002c8 <__aeabi_dsub>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	e7da      	b.n	800b4b2 <__kernel_cos+0xea>
 800b4fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b538 <__kernel_cos+0x170>
 800b500:	e7db      	b.n	800b4ba <__kernel_cos+0xf2>
 800b502:	bf00      	nop
 800b504:	f3af 8000 	nop.w
 800b508:	be8838d4 	.word	0xbe8838d4
 800b50c:	bda8fae9 	.word	0xbda8fae9
 800b510:	bdb4b1c4 	.word	0xbdb4b1c4
 800b514:	3e21ee9e 	.word	0x3e21ee9e
 800b518:	809c52ad 	.word	0x809c52ad
 800b51c:	3e927e4f 	.word	0x3e927e4f
 800b520:	19cb1590 	.word	0x19cb1590
 800b524:	3efa01a0 	.word	0x3efa01a0
 800b528:	16c15177 	.word	0x16c15177
 800b52c:	3f56c16c 	.word	0x3f56c16c
 800b530:	5555554c 	.word	0x5555554c
 800b534:	3fa55555 	.word	0x3fa55555
 800b538:	00000000 	.word	0x00000000
 800b53c:	3ff00000 	.word	0x3ff00000
 800b540:	3fe00000 	.word	0x3fe00000
 800b544:	3fd33332 	.word	0x3fd33332
 800b548:	3ff00000 	.word	0x3ff00000
 800b54c:	3fe90000 	.word	0x3fe90000
 800b550:	3fd20000 	.word	0x3fd20000
 800b554:	00000000 	.word	0x00000000

0800b558 <__kernel_sin>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	ec55 4b10 	vmov	r4, r5, d0
 800b560:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b564:	b085      	sub	sp, #20
 800b566:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b56a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b56e:	4680      	mov	r8, r0
 800b570:	d205      	bcs.n	800b57e <__kernel_sin+0x26>
 800b572:	4620      	mov	r0, r4
 800b574:	4629      	mov	r1, r5
 800b576:	f7f5 fb0f 	bl	8000b98 <__aeabi_d2iz>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d052      	beq.n	800b624 <__kernel_sin+0xcc>
 800b57e:	4622      	mov	r2, r4
 800b580:	462b      	mov	r3, r5
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	f7f5 f857 	bl	8000638 <__aeabi_dmul>
 800b58a:	4682      	mov	sl, r0
 800b58c:	468b      	mov	fp, r1
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4620      	mov	r0, r4
 800b594:	4629      	mov	r1, r5
 800b596:	f7f5 f84f 	bl	8000638 <__aeabi_dmul>
 800b59a:	a342      	add	r3, pc, #264	@ (adr r3, 800b6a4 <__kernel_sin+0x14c>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	e9cd 0100 	strd	r0, r1, [sp]
 800b5a4:	4650      	mov	r0, sl
 800b5a6:	4659      	mov	r1, fp
 800b5a8:	f7f5 f846 	bl	8000638 <__aeabi_dmul>
 800b5ac:	a33f      	add	r3, pc, #252	@ (adr r3, 800b6ac <__kernel_sin+0x154>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f4 fe89 	bl	80002c8 <__aeabi_dsub>
 800b5b6:	4652      	mov	r2, sl
 800b5b8:	465b      	mov	r3, fp
 800b5ba:	f7f5 f83d 	bl	8000638 <__aeabi_dmul>
 800b5be:	a33d      	add	r3, pc, #244	@ (adr r3, 800b6b4 <__kernel_sin+0x15c>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 fe82 	bl	80002cc <__adddf3>
 800b5c8:	4652      	mov	r2, sl
 800b5ca:	465b      	mov	r3, fp
 800b5cc:	f7f5 f834 	bl	8000638 <__aeabi_dmul>
 800b5d0:	a33a      	add	r3, pc, #232	@ (adr r3, 800b6bc <__kernel_sin+0x164>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f4 fe77 	bl	80002c8 <__aeabi_dsub>
 800b5da:	4652      	mov	r2, sl
 800b5dc:	465b      	mov	r3, fp
 800b5de:	f7f5 f82b 	bl	8000638 <__aeabi_dmul>
 800b5e2:	a338      	add	r3, pc, #224	@ (adr r3, 800b6c4 <__kernel_sin+0x16c>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f7f4 fe70 	bl	80002cc <__adddf3>
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	460f      	mov	r7, r1
 800b5f0:	f1b8 0f00 	cmp.w	r8, #0
 800b5f4:	d11b      	bne.n	800b62e <__kernel_sin+0xd6>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	4650      	mov	r0, sl
 800b5fc:	4659      	mov	r1, fp
 800b5fe:	f7f5 f81b 	bl	8000638 <__aeabi_dmul>
 800b602:	a325      	add	r3, pc, #148	@ (adr r3, 800b698 <__kernel_sin+0x140>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f4 fe5e 	bl	80002c8 <__aeabi_dsub>
 800b60c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b610:	f7f5 f812 	bl	8000638 <__aeabi_dmul>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4620      	mov	r0, r4
 800b61a:	4629      	mov	r1, r5
 800b61c:	f7f4 fe56 	bl	80002cc <__adddf3>
 800b620:	4604      	mov	r4, r0
 800b622:	460d      	mov	r5, r1
 800b624:	ec45 4b10 	vmov	d0, r4, r5
 800b628:	b005      	add	sp, #20
 800b62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b632:	4b1b      	ldr	r3, [pc, #108]	@ (800b6a0 <__kernel_sin+0x148>)
 800b634:	2200      	movs	r2, #0
 800b636:	f7f4 ffff 	bl	8000638 <__aeabi_dmul>
 800b63a:	4632      	mov	r2, r6
 800b63c:	4680      	mov	r8, r0
 800b63e:	4689      	mov	r9, r1
 800b640:	463b      	mov	r3, r7
 800b642:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b646:	f7f4 fff7 	bl	8000638 <__aeabi_dmul>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4640      	mov	r0, r8
 800b650:	4649      	mov	r1, r9
 800b652:	f7f4 fe39 	bl	80002c8 <__aeabi_dsub>
 800b656:	4652      	mov	r2, sl
 800b658:	465b      	mov	r3, fp
 800b65a:	f7f4 ffed 	bl	8000638 <__aeabi_dmul>
 800b65e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b662:	f7f4 fe31 	bl	80002c8 <__aeabi_dsub>
 800b666:	a30c      	add	r3, pc, #48	@ (adr r3, 800b698 <__kernel_sin+0x140>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	4606      	mov	r6, r0
 800b66e:	460f      	mov	r7, r1
 800b670:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b674:	f7f4 ffe0 	bl	8000638 <__aeabi_dmul>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f4 fe24 	bl	80002cc <__adddf3>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4620      	mov	r0, r4
 800b68a:	4629      	mov	r1, r5
 800b68c:	f7f4 fe1c 	bl	80002c8 <__aeabi_dsub>
 800b690:	e7c6      	b.n	800b620 <__kernel_sin+0xc8>
 800b692:	bf00      	nop
 800b694:	f3af 8000 	nop.w
 800b698:	55555549 	.word	0x55555549
 800b69c:	3fc55555 	.word	0x3fc55555
 800b6a0:	3fe00000 	.word	0x3fe00000
 800b6a4:	5acfd57c 	.word	0x5acfd57c
 800b6a8:	3de5d93a 	.word	0x3de5d93a
 800b6ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800b6b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b6b4:	57b1fe7d 	.word	0x57b1fe7d
 800b6b8:	3ec71de3 	.word	0x3ec71de3
 800b6bc:	19c161d5 	.word	0x19c161d5
 800b6c0:	3f2a01a0 	.word	0x3f2a01a0
 800b6c4:	1110f8a6 	.word	0x1110f8a6
 800b6c8:	3f811111 	.word	0x3f811111

0800b6cc <fabs>:
 800b6cc:	ec51 0b10 	vmov	r0, r1, d0
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b6d6:	ec43 2b10 	vmov	d0, r2, r3
 800b6da:	4770      	bx	lr
 800b6dc:	0000      	movs	r0, r0
	...

0800b6e0 <scalbn>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	ec55 4b10 	vmov	r4, r5, d0
 800b6e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	b991      	cbnz	r1, 800b716 <scalbn+0x36>
 800b6f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b6f4:	4323      	orrs	r3, r4
 800b6f6:	d03d      	beq.n	800b774 <scalbn+0x94>
 800b6f8:	4b35      	ldr	r3, [pc, #212]	@ (800b7d0 <scalbn+0xf0>)
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	2200      	movs	r2, #0
 800b700:	f7f4 ff9a 	bl	8000638 <__aeabi_dmul>
 800b704:	4b33      	ldr	r3, [pc, #204]	@ (800b7d4 <scalbn+0xf4>)
 800b706:	429e      	cmp	r6, r3
 800b708:	4604      	mov	r4, r0
 800b70a:	460d      	mov	r5, r1
 800b70c:	da0f      	bge.n	800b72e <scalbn+0x4e>
 800b70e:	a328      	add	r3, pc, #160	@ (adr r3, 800b7b0 <scalbn+0xd0>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	e01e      	b.n	800b754 <scalbn+0x74>
 800b716:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b71a:	4291      	cmp	r1, r2
 800b71c:	d10b      	bne.n	800b736 <scalbn+0x56>
 800b71e:	4622      	mov	r2, r4
 800b720:	4620      	mov	r0, r4
 800b722:	4629      	mov	r1, r5
 800b724:	f7f4 fdd2 	bl	80002cc <__adddf3>
 800b728:	4604      	mov	r4, r0
 800b72a:	460d      	mov	r5, r1
 800b72c:	e022      	b.n	800b774 <scalbn+0x94>
 800b72e:	460b      	mov	r3, r1
 800b730:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b734:	3936      	subs	r1, #54	@ 0x36
 800b736:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b73a:	4296      	cmp	r6, r2
 800b73c:	dd0d      	ble.n	800b75a <scalbn+0x7a>
 800b73e:	2d00      	cmp	r5, #0
 800b740:	a11d      	add	r1, pc, #116	@ (adr r1, 800b7b8 <scalbn+0xd8>)
 800b742:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b746:	da02      	bge.n	800b74e <scalbn+0x6e>
 800b748:	a11d      	add	r1, pc, #116	@ (adr r1, 800b7c0 <scalbn+0xe0>)
 800b74a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b74e:	a31a      	add	r3, pc, #104	@ (adr r3, 800b7b8 <scalbn+0xd8>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f4 ff70 	bl	8000638 <__aeabi_dmul>
 800b758:	e7e6      	b.n	800b728 <scalbn+0x48>
 800b75a:	1872      	adds	r2, r6, r1
 800b75c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b760:	428a      	cmp	r2, r1
 800b762:	dcec      	bgt.n	800b73e <scalbn+0x5e>
 800b764:	2a00      	cmp	r2, #0
 800b766:	dd08      	ble.n	800b77a <scalbn+0x9a>
 800b768:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b76c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b770:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b774:	ec45 4b10 	vmov	d0, r4, r5
 800b778:	bd70      	pop	{r4, r5, r6, pc}
 800b77a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b77e:	da08      	bge.n	800b792 <scalbn+0xb2>
 800b780:	2d00      	cmp	r5, #0
 800b782:	a10b      	add	r1, pc, #44	@ (adr r1, 800b7b0 <scalbn+0xd0>)
 800b784:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b788:	dac1      	bge.n	800b70e <scalbn+0x2e>
 800b78a:	a10f      	add	r1, pc, #60	@ (adr r1, 800b7c8 <scalbn+0xe8>)
 800b78c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b790:	e7bd      	b.n	800b70e <scalbn+0x2e>
 800b792:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b796:	3236      	adds	r2, #54	@ 0x36
 800b798:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b79c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d8 <scalbn+0xf8>)
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	e7d4      	b.n	800b754 <scalbn+0x74>
 800b7aa:	bf00      	nop
 800b7ac:	f3af 8000 	nop.w
 800b7b0:	c2f8f359 	.word	0xc2f8f359
 800b7b4:	01a56e1f 	.word	0x01a56e1f
 800b7b8:	8800759c 	.word	0x8800759c
 800b7bc:	7e37e43c 	.word	0x7e37e43c
 800b7c0:	8800759c 	.word	0x8800759c
 800b7c4:	fe37e43c 	.word	0xfe37e43c
 800b7c8:	c2f8f359 	.word	0xc2f8f359
 800b7cc:	81a56e1f 	.word	0x81a56e1f
 800b7d0:	43500000 	.word	0x43500000
 800b7d4:	ffff3cb0 	.word	0xffff3cb0
 800b7d8:	3c900000 	.word	0x3c900000
 800b7dc:	00000000 	.word	0x00000000

0800b7e0 <floor>:
 800b7e0:	ec51 0b10 	vmov	r0, r1, d0
 800b7e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b7f0:	2e13      	cmp	r6, #19
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	4680      	mov	r8, r0
 800b7f8:	dc34      	bgt.n	800b864 <floor+0x84>
 800b7fa:	2e00      	cmp	r6, #0
 800b7fc:	da17      	bge.n	800b82e <floor+0x4e>
 800b7fe:	a332      	add	r3, pc, #200	@ (adr r3, 800b8c8 <floor+0xe8>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 fd62 	bl	80002cc <__adddf3>
 800b808:	2200      	movs	r2, #0
 800b80a:	2300      	movs	r3, #0
 800b80c:	f7f5 f9a4 	bl	8000b58 <__aeabi_dcmpgt>
 800b810:	b150      	cbz	r0, 800b828 <floor+0x48>
 800b812:	2c00      	cmp	r4, #0
 800b814:	da55      	bge.n	800b8c2 <floor+0xe2>
 800b816:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b81a:	432c      	orrs	r4, r5
 800b81c:	2500      	movs	r5, #0
 800b81e:	42ac      	cmp	r4, r5
 800b820:	4c2b      	ldr	r4, [pc, #172]	@ (800b8d0 <floor+0xf0>)
 800b822:	bf08      	it	eq
 800b824:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b828:	4621      	mov	r1, r4
 800b82a:	4628      	mov	r0, r5
 800b82c:	e023      	b.n	800b876 <floor+0x96>
 800b82e:	4f29      	ldr	r7, [pc, #164]	@ (800b8d4 <floor+0xf4>)
 800b830:	4137      	asrs	r7, r6
 800b832:	ea01 0307 	and.w	r3, r1, r7
 800b836:	4303      	orrs	r3, r0
 800b838:	d01d      	beq.n	800b876 <floor+0x96>
 800b83a:	a323      	add	r3, pc, #140	@ (adr r3, 800b8c8 <floor+0xe8>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 fd44 	bl	80002cc <__adddf3>
 800b844:	2200      	movs	r2, #0
 800b846:	2300      	movs	r3, #0
 800b848:	f7f5 f986 	bl	8000b58 <__aeabi_dcmpgt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d0eb      	beq.n	800b828 <floor+0x48>
 800b850:	2c00      	cmp	r4, #0
 800b852:	bfbe      	ittt	lt
 800b854:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b858:	4133      	asrlt	r3, r6
 800b85a:	18e4      	addlt	r4, r4, r3
 800b85c:	ea24 0407 	bic.w	r4, r4, r7
 800b860:	2500      	movs	r5, #0
 800b862:	e7e1      	b.n	800b828 <floor+0x48>
 800b864:	2e33      	cmp	r6, #51	@ 0x33
 800b866:	dd0a      	ble.n	800b87e <floor+0x9e>
 800b868:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b86c:	d103      	bne.n	800b876 <floor+0x96>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	f7f4 fd2b 	bl	80002cc <__adddf3>
 800b876:	ec41 0b10 	vmov	d0, r0, r1
 800b87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b882:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b886:	40df      	lsrs	r7, r3
 800b888:	4207      	tst	r7, r0
 800b88a:	d0f4      	beq.n	800b876 <floor+0x96>
 800b88c:	a30e      	add	r3, pc, #56	@ (adr r3, 800b8c8 <floor+0xe8>)
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f7f4 fd1b 	bl	80002cc <__adddf3>
 800b896:	2200      	movs	r2, #0
 800b898:	2300      	movs	r3, #0
 800b89a:	f7f5 f95d 	bl	8000b58 <__aeabi_dcmpgt>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d0c2      	beq.n	800b828 <floor+0x48>
 800b8a2:	2c00      	cmp	r4, #0
 800b8a4:	da0a      	bge.n	800b8bc <floor+0xdc>
 800b8a6:	2e14      	cmp	r6, #20
 800b8a8:	d101      	bne.n	800b8ae <floor+0xce>
 800b8aa:	3401      	adds	r4, #1
 800b8ac:	e006      	b.n	800b8bc <floor+0xdc>
 800b8ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	40b3      	lsls	r3, r6
 800b8b6:	441d      	add	r5, r3
 800b8b8:	4545      	cmp	r5, r8
 800b8ba:	d3f6      	bcc.n	800b8aa <floor+0xca>
 800b8bc:	ea25 0507 	bic.w	r5, r5, r7
 800b8c0:	e7b2      	b.n	800b828 <floor+0x48>
 800b8c2:	2500      	movs	r5, #0
 800b8c4:	462c      	mov	r4, r5
 800b8c6:	e7af      	b.n	800b828 <floor+0x48>
 800b8c8:	8800759c 	.word	0x8800759c
 800b8cc:	7e37e43c 	.word	0x7e37e43c
 800b8d0:	bff00000 	.word	0xbff00000
 800b8d4:	000fffff 	.word	0x000fffff

0800b8d8 <_init>:
 800b8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8da:	bf00      	nop
 800b8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8de:	bc08      	pop	{r3}
 800b8e0:	469e      	mov	lr, r3
 800b8e2:	4770      	bx	lr

0800b8e4 <_fini>:
 800b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e6:	bf00      	nop
 800b8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ea:	bc08      	pop	{r3}
 800b8ec:	469e      	mov	lr, r3
 800b8ee:	4770      	bx	lr
