
Stewart_platform_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800aef0  0800aef0  0000bef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b488  0800b488  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b488  0800b488  0000c488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b490  0800b490  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b490  0800b490  0000c490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b494  0800b494  0000c494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b498  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001e8  0800b680  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800b680  0000d534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109c2  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e3  00000000  00000000  0001dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000204c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd7  00000000  00000000  000213e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040d7  00000000  00000000  00021fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140ff  00000000  00000000  00026096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc1af  00000000  00000000  0003a195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000540c  00000000  00000000  00116388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aed8 	.word	0x0800aed8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800aed8 	.word	0x0800aed8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0bc      	sub	sp, #240	@ 0xf0
 8000fbc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	stewart platform;

	platform_init(&platform);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 f931 	bl	8002228 <platform_init>

	// set position limits
	platform.xyz_limit = 50.0;	// [mm]
 8000fc6:	4b76      	ldr	r3, [pc, #472]	@ (80011a0 <main+0x1e8>)
 8000fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	platform.tilt_limit = 10;	// deg
 8000fcc:	4b75      	ldr	r3, [pc, #468]	@ (80011a4 <main+0x1ec>)
 8000fce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	platform.rot_limit = 10;	// deg
 8000fd2:	4b74      	ldr	r3, [pc, #464]	@ (80011a4 <main+0x1ec>)
 8000fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f002 f9bc 	bl	8003354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f8fe 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 fab4 	bl	800154c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe4:	f000 fa92 	bl	800150c <MX_DMA_Init>
  MX_ADC1_Init();
 8000fe8:	f000 f96a 	bl	80012c0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000fec:	f000 fa2e 	bl	800144c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ff0:	f000 fa62 	bl	80014b8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000ff4:	f000 f9fc 	bl	80013f0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  adc_ready = 0;
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80011a8 <main+0x1f0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, 6);
 8000ffe:	2206      	movs	r2, #6
 8001000:	496a      	ldr	r1, [pc, #424]	@ (80011ac <main+0x1f4>)
 8001002:	486b      	ldr	r0, [pc, #428]	@ (80011b0 <main+0x1f8>)
 8001004:	f002 fb90 	bl	8003728 <HAL_ADC_Start_DMA>

	  if (adc_ready) {
 8001008:	4b67      	ldr	r3, [pc, #412]	@ (80011a8 <main+0x1f0>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d03e      	beq.n	800108e <main+0xd6>

		  joyx = adc_raw_to_joystick(adc_raw[0]);
 8001010:	4b66      	ldr	r3, [pc, #408]	@ (80011ac <main+0x1f4>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fcf7 	bl	8001a08 <adc_raw_to_joystick>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	4b65      	ldr	r3, [pc, #404]	@ (80011b4 <main+0x1fc>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
		  joyy = adc_raw_to_joystick(adc_raw[1]);
 8001024:	4b61      	ldr	r3, [pc, #388]	@ (80011ac <main+0x1f4>)
 8001026:	885b      	ldrh	r3, [r3, #2]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fced 	bl	8001a08 <adc_raw_to_joystick>
 800102e:	eef0 7a40 	vmov.f32	s15, s0
 8001032:	4b61      	ldr	r3, [pc, #388]	@ (80011b8 <main+0x200>)
 8001034:	edc3 7a00 	vstr	s15, [r3]
		  joyz = adc_raw_to_joystick(adc_raw[2]);
 8001038:	4b5c      	ldr	r3, [pc, #368]	@ (80011ac <main+0x1f4>)
 800103a:	889b      	ldrh	r3, [r3, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fce3 	bl	8001a08 <adc_raw_to_joystick>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	4b5d      	ldr	r3, [pc, #372]	@ (80011bc <main+0x204>)
 8001048:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_x = adc_raw_to_joystick(adc_raw[3]);
 800104c:	4b57      	ldr	r3, [pc, #348]	@ (80011ac <main+0x1f4>)
 800104e:	88db      	ldrh	r3, [r3, #6]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fcd9 	bl	8001a08 <adc_raw_to_joystick>
 8001056:	eef0 7a40 	vmov.f32	s15, s0
 800105a:	4b59      	ldr	r3, [pc, #356]	@ (80011c0 <main+0x208>)
 800105c:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_y = adc_raw_to_joystick(adc_raw[4]);
 8001060:	4b52      	ldr	r3, [pc, #328]	@ (80011ac <main+0x1f4>)
 8001062:	891b      	ldrh	r3, [r3, #8]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fccf 	bl	8001a08 <adc_raw_to_joystick>
 800106a:	eef0 7a40 	vmov.f32	s15, s0
 800106e:	4b55      	ldr	r3, [pc, #340]	@ (80011c4 <main+0x20c>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
		  joyrot_z = adc_raw_to_joystick(adc_raw[5]);
 8001074:	4b4d      	ldr	r3, [pc, #308]	@ (80011ac <main+0x1f4>)
 8001076:	895b      	ldrh	r3, [r3, #10]
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fcc5 	bl	8001a08 <adc_raw_to_joystick>
 800107e:	eef0 7a40 	vmov.f32	s15, s0
 8001082:	4b51      	ldr	r3, [pc, #324]	@ (80011c8 <main+0x210>)
 8001084:	edc3 7a00 	vstr	s15, [r3]

		  adc_ready = 0;
 8001088:	4b47      	ldr	r3, [pc, #284]	@ (80011a8 <main+0x1f0>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

	  }

	  move_target_position(&platform);
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fadf 	bl	8001654 <move_target_position>

	  rotate_platform(&platform, platform.a1);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fcf8 	bl	8002a96 <rotate_platform>
	  rotate_platform(&platform, platform.a2);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fcf0 	bl	8002a96 <rotate_platform>
	  rotate_platform(&platform, platform.a3);
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fce8 	bl	8002a96 <rotate_platform>
	  rotate_platform(&platform, platform.a4);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fce0 	bl	8002a96 <rotate_platform>
	  rotate_platform(&platform, platform.a5);
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fcd8 	bl	8002a96 <rotate_platform>
	  rotate_platform(&platform, platform.a6);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fcd0 	bl	8002a96 <rotate_platform>

	  run_platform(&platform);
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fd15 	bl	8002b28 <run_platform>



	  target_pot[0] = c_length_to_pot_value(platform.c_target[0]);
 80010fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	f000 fcc3 	bl	8001a90 <c_length_to_pot_value>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <main+0x214>)
 8001110:	801a      	strh	r2, [r3, #0]
	  target_pot[1] = c_length_to_pot_value(platform.c_target[1]);
 8001112:	edd7 7a02 	vldr	s15, [r7, #8]
 8001116:	eeb0 0a67 	vmov.f32	s0, s15
 800111a:	f000 fcb9 	bl	8001a90 <c_length_to_pot_value>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <main+0x214>)
 8001124:	805a      	strh	r2, [r3, #2]
	  target_pot[2] = c_length_to_pot_value(platform.c_target[2]);
 8001126:	edd7 7a03 	vldr	s15, [r7, #12]
 800112a:	eeb0 0a67 	vmov.f32	s0, s15
 800112e:	f000 fcaf 	bl	8001a90 <c_length_to_pot_value>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <main+0x214>)
 8001138:	809a      	strh	r2, [r3, #4]
	  target_pot[3] = c_length_to_pot_value(platform.c_target[3]);
 800113a:	edd7 7a04 	vldr	s15, [r7, #16]
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	f000 fca5 	bl	8001a90 <c_length_to_pot_value>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <main+0x214>)
 800114c:	80da      	strh	r2, [r3, #6]
	  target_pot[4] = c_length_to_pot_value(platform.c_target[4]);
 800114e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	f000 fc9b 	bl	8001a90 <c_length_to_pot_value>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <main+0x214>)
 8001160:	811a      	strh	r2, [r3, #8]
	  target_pot[5] = c_length_to_pot_value(platform.c_target[5]);
 8001162:	edd7 7a06 	vldr	s15, [r7, #24]
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	f000 fc91 	bl	8001a90 <c_length_to_pot_value>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <main+0x214>)
 8001174:	815a      	strh	r2, [r3, #10]

	  pack_data();
 8001176:	f000 fcbd 	bl	8001af4 <pack_data>

	  if (HAL_I2C_Master_Transmit(&hi2c2, 0x00, TxData, sizeof(TxData), 200) == HAL_OK) {
 800117a:	23c8      	movs	r3, #200	@ 0xc8
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	230c      	movs	r3, #12
 8001180:	4a13      	ldr	r2, [pc, #76]	@ (80011d0 <main+0x218>)
 8001182:	2100      	movs	r1, #0
 8001184:	4813      	ldr	r0, [pc, #76]	@ (80011d4 <main+0x21c>)
 8001186:	f003 fe45 	bl	8004e14 <HAL_I2C_Master_Transmit>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <main+0x1e0>

		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001190:	2120      	movs	r1, #32
 8001192:	4811      	ldr	r0, [pc, #68]	@ (80011d8 <main+0x220>)
 8001194:	f003 fcdf 	bl	8004b56 <HAL_GPIO_TogglePin>
	  }



	  HAL_Delay(30);
 8001198:	201e      	movs	r0, #30
 800119a:	f002 f94d 	bl	8003438 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, 6);
 800119e:	e72e      	b.n	8000ffe <main+0x46>
 80011a0:	42480000 	.word	0x42480000
 80011a4:	41200000 	.word	0x41200000
 80011a8:	200003c4 	.word	0x200003c4
 80011ac:	200003a0 	.word	0x200003a0
 80011b0:	20000204 	.word	0x20000204
 80011b4:	200003ac 	.word	0x200003ac
 80011b8:	200003b0 	.word	0x200003b0
 80011bc:	200003b4 	.word	0x200003b4
 80011c0:	200003b8 	.word	0x200003b8
 80011c4:	200003bc 	.word	0x200003bc
 80011c8:	200003c0 	.word	0x200003c0
 80011cc:	200003c8 	.word	0x200003c8
 80011d0:	200003d4 	.word	0x200003d4
 80011d4:	200002ac 	.word	0x200002ac
 80011d8:	40020000 	.word	0x40020000

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	@ 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2234      	movs	r2, #52	@ 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f005 ff86 	bl	80070fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <SystemClock_Config+0xdc>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	4a2b      	ldr	r2, [pc, #172]	@ (80012b8 <SystemClock_Config+0xdc>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001210:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <SystemClock_Config+0xdc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <SystemClock_Config+0xe0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <SystemClock_Config+0xe0>)
 8001226:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <SystemClock_Config+0xe0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800124c:	2308      	movs	r3, #8
 800124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001250:	23b4      	movs	r3, #180	@ 0xb4
 8001252:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125c:	2302      	movs	r3, #2
 800125e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4618      	mov	r0, r3
 8001266:	f004 fc43 	bl	8005af0 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001270:	f000 fca6 	bl	8001bc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001274:	f004 f928 	bl	80054c8 <HAL_PWREx_EnableOverDrive>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800127e:	f000 fc9f 	bl	8001bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800128e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001298:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	2105      	movs	r1, #5
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 f961 	bl	8005568 <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012ac:	f000 fc88 	bl	8001bc0 <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3750      	adds	r7, #80	@ 0x50
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012d2:	4b44      	ldr	r3, [pc, #272]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80012d4:	4a44      	ldr	r2, [pc, #272]	@ (80013e8 <MX_ADC1_Init+0x128>)
 80012d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012d8:	4b42      	ldr	r3, [pc, #264]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80012da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e0:	4b40      	ldr	r3, [pc, #256]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012e6:	4b3f      	ldr	r3, [pc, #252]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ec:	4b3d      	ldr	r3, [pc, #244]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f2:	4b3c      	ldr	r3, [pc, #240]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fa:	4b3a      	ldr	r3, [pc, #232]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001300:	4b38      	ldr	r3, [pc, #224]	@ (80013e4 <MX_ADC1_Init+0x124>)
 8001302:	4a3a      	ldr	r2, [pc, #232]	@ (80013ec <MX_ADC1_Init+0x12c>)
 8001304:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001306:	4b37      	ldr	r3, [pc, #220]	@ (80013e4 <MX_ADC1_Init+0x124>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800130c:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <MX_ADC1_Init+0x124>)
 800130e:	2206      	movs	r2, #6
 8001310:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <MX_ADC1_Init+0x124>)
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131a:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <MX_ADC1_Init+0x124>)
 800131c:	2201      	movs	r2, #1
 800131e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001320:	4830      	ldr	r0, [pc, #192]	@ (80013e4 <MX_ADC1_Init+0x124>)
 8001322:	f002 f8ad 	bl	8003480 <HAL_ADC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800132c:	f000 fc48 	bl	8001bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001330:	2300      	movs	r3, #0
 8001332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001338:	2305      	movs	r3, #5
 800133a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4828      	ldr	r0, [pc, #160]	@ (80013e4 <MX_ADC1_Init+0x124>)
 8001342:	f002 fb1f 	bl	8003984 <HAL_ADC_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800134c:	f000 fc38 	bl	8001bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001350:	2301      	movs	r3, #1
 8001352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001354:	2302      	movs	r3, #2
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4821      	ldr	r0, [pc, #132]	@ (80013e4 <MX_ADC1_Init+0x124>)
 800135e:	f002 fb11 	bl	8003984 <HAL_ADC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001368:	f000 fc2a 	bl	8001bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800136c:	2302      	movs	r3, #2
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001370:	2303      	movs	r3, #3
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	481a      	ldr	r0, [pc, #104]	@ (80013e4 <MX_ADC1_Init+0x124>)
 800137a:	f002 fb03 	bl	8003984 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001384:	f000 fc1c 	bl	8001bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001388:	2303      	movs	r3, #3
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4813      	ldr	r0, [pc, #76]	@ (80013e4 <MX_ADC1_Init+0x124>)
 8001396:	f002 faf5 	bl	8003984 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80013a0:	f000 fc0e 	bl	8001bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80013a8:	2305      	movs	r3, #5
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80013b2:	f002 fae7 	bl	8003984 <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80013bc:	f000 fc00 	bl	8001bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013c0:	2308      	movs	r3, #8
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80013c4:	2306      	movs	r3, #6
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_ADC1_Init+0x124>)
 80013ce:	f002 fad9 	bl	8003984 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80013d8:	f000 fbf2 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000204 	.word	0x20000204
 80013e8:	40012000 	.word	0x40012000
 80013ec:	0f000001 	.word	0x0f000001

080013f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_I2C2_Init+0x50>)
 80013f6:	4a13      	ldr	r2, [pc, #76]	@ (8001444 <MX_I2C2_Init+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_I2C2_Init+0x50>)
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <MX_I2C2_Init+0x58>)
 80013fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_I2C2_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_I2C2_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_I2C2_Init+0x50>)
 800140e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001412:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001414:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <MX_I2C2_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_I2C2_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001420:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <MX_I2C2_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_I2C2_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_I2C2_Init+0x50>)
 800142e:	f003 fbad 	bl	8004b8c <HAL_I2C_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001438:	f000 fbc2 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200002ac 	.word	0x200002ac
 8001444:	40005800 	.word	0x40005800
 8001448:	000186a0 	.word	0x000186a0

0800144c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001452:	4a18      	ldr	r2, [pc, #96]	@ (80014b4 <MX_SPI1_Init+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001458:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800145c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_SPI1_Init+0x64>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001480:	2228      	movs	r2, #40	@ 0x28
 8001482:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_SPI1_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_SPI1_Init+0x64>)
 8001498:	220a      	movs	r2, #10
 800149a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_SPI1_Init+0x64>)
 800149e:	f004 fdc5 	bl	800602c <HAL_SPI_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014a8:	f000 fb8a 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000300 	.word	0x20000300
 80014b4:	40013000 	.word	0x40013000

080014b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <MX_USART1_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014f0:	f004 fe25 	bl	800613e <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014fa:	f000 fb61 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000358 	.word	0x20000358
 8001508:	40011000 	.word	0x40011000

0800150c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <MX_DMA_Init+0x3c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <MX_DMA_Init+0x3c>)
 800151c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <MX_DMA_Init+0x3c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2038      	movs	r0, #56	@ 0x38
 8001534:	f002 fdbb 	bl	80040ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001538:	2038      	movs	r0, #56	@ 0x38
 800153a:	f002 fdd4 	bl	80040e6 <HAL_NVIC_EnableIRQ>

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <MX_GPIO_Init+0xdc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a2f      	ldr	r2, [pc, #188]	@ (8001628 <MX_GPIO_Init+0xdc>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <MX_GPIO_Init+0xdc>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <MX_GPIO_Init+0xdc>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a28      	ldr	r2, [pc, #160]	@ (8001628 <MX_GPIO_Init+0xdc>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <MX_GPIO_Init+0xdc>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <MX_GPIO_Init+0xdc>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <MX_GPIO_Init+0xdc>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_GPIO_Init+0xdc>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <MX_GPIO_Init+0xdc>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a1a      	ldr	r2, [pc, #104]	@ (8001628 <MX_GPIO_Init+0xdc>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <MX_GPIO_Init+0xdc>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	4815      	ldr	r0, [pc, #84]	@ (800162c <MX_GPIO_Init+0xe0>)
 80015d8:	f003 faa4 	bl	8004b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2130      	movs	r1, #48	@ 0x30
 80015e0:	4813      	ldr	r0, [pc, #76]	@ (8001630 <MX_GPIO_Init+0xe4>)
 80015e2:	f003 fa9f 	bl	8004b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015e6:	2320      	movs	r3, #32
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480b      	ldr	r0, [pc, #44]	@ (800162c <MX_GPIO_Init+0xe0>)
 80015fe:	f003 f8fd 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001602:	2330      	movs	r3, #48	@ 0x30
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_GPIO_Init+0xe4>)
 800161a:	f003 f8ef 	bl	80047fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400

08001634 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

	adc_ready = 1;
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <HAL_ADC_ConvCpltCallback+0x1c>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]


}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200003c4 	.word	0x200003c4

08001654 <move_target_position>:


void move_target_position(stewart* stewart) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]


	if (stewart->tp_target_pos[0] > stewart->xyz_limit) stewart->tp_target_pos[0] = stewart->xyz_limit;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	dd06      	ble.n	8001680 <move_target_position+0x2c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800167e:	e038      	b.n	80016f2 <move_target_position+0x9e>
	else if (stewart->tp_target_pos[0] < -stewart->xyz_limit) stewart->tp_target_pos[0] = -stewart->xyz_limit;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800168c:	eef1 7a67 	vneg.f32	s15, s15
 8001690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	d508      	bpl.n	80016ac <move_target_position+0x58>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80016a0:	eef1 7a67 	vneg.f32	s15, s15
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
 80016aa:	e022      	b.n	80016f2 <move_target_position+0x9e>
	else if (stewart->tp_target_pos[0] >= -stewart->xyz_limit || stewart->tp_target_pos[0] <= stewart->xyz_limit )
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80016b8:	eef1 7a67 	vneg.f32	s15, s15
 80016bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	da0a      	bge.n	80016dc <move_target_position+0x88>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80016d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	d80a      	bhi.n	80016f2 <move_target_position+0x9e>
	{
		stewart->tp_target_pos[0] += joyx;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80016e2:	4bba      	ldr	r3, [pc, #744]	@ (80019cc <move_target_position+0x378>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	}

	if (stewart->tp_target_pos[1] > stewart->xyz_limit) stewart->tp_target_pos[1] = stewart->xyz_limit;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dd06      	ble.n	8001716 <move_target_position+0xc2>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8001714:	e038      	b.n	8001788 <move_target_position+0x134>
	else if (stewart->tp_target_pos[1] < -stewart->xyz_limit) stewart->tp_target_pos[1] = -stewart->xyz_limit;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001722:	eef1 7a67 	vneg.f32	s15, s15
 8001726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d508      	bpl.n	8001742 <move_target_position+0xee>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001736:	eef1 7a67 	vneg.f32	s15, s15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
 8001740:	e022      	b.n	8001788 <move_target_position+0x134>
	else if (stewart->tp_target_pos[1] >= -stewart->xyz_limit || stewart->tp_target_pos[1] <= stewart->xyz_limit )
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800174e:	eef1 7a67 	vneg.f32	s15, s15
 8001752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	da0a      	bge.n	8001772 <move_target_position+0x11e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d80a      	bhi.n	8001788 <move_target_position+0x134>
	{
		stewart->tp_target_pos[1] += joyy;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001778:	4b95      	ldr	r3, [pc, #596]	@ (80019d0 <move_target_position+0x37c>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
	}

	if (stewart->tp_target_pos[2] > 0) stewart->tp_target_pos[2] = 0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 800178e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	dd05      	ble.n	80017a4 <move_target_position+0x150>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 80017a2:	e03b      	b.n	800181c <move_target_position+0x1c8>
	else if (stewart->tp_target_pos[2] < -2*stewart->xyz_limit) stewart->tp_target_pos[2] = -2*stewart->xyz_limit;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017b0:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 80017b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	d50a      	bpl.n	80017d8 <move_target_position+0x184>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017c8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80017cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
 80017d6:	e021      	b.n	800181c <move_target_position+0x1c8>
	else if (stewart->tp_target_pos[2] >= -2*stewart->xyz_limit || stewart->tp_target_pos[2] <= 0 )
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80017e4:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 80017e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	da07      	bge.n	8001806 <move_target_position+0x1b2>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 80017fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001804:	d80a      	bhi.n	800181c <move_target_position+0x1c8>
	{
		stewart->tp_target_pos[2] += joyz;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 800180c:	4b71      	ldr	r3, [pc, #452]	@ (80019d4 <move_target_position+0x380>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
	}


	if (stewart->tp_target_pos[3] > stewart->tilt_limit) stewart->tp_target_pos[3] = stewart->tilt_limit;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	dd06      	ble.n	8001840 <move_target_position+0x1ec>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 800183e:	e038      	b.n	80018b2 <move_target_position+0x25e>
	else if (stewart->tp_target_pos[3] < -stewart->tilt_limit) stewart->tp_target_pos[3] = -stewart->tilt_limit;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 800184c:	eef1 7a67 	vneg.f32	s15, s15
 8001850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	d508      	bpl.n	800186c <move_target_position+0x218>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001860:	eef1 7a67 	vneg.f32	s15, s15
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
 800186a:	e022      	b.n	80018b2 <move_target_position+0x25e>
	else if (stewart->tp_target_pos[3] >= -stewart->tilt_limit || stewart->tp_target_pos[3] <= stewart->tilt_limit )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001878:	eef1 7a67 	vneg.f32	s15, s15
 800187c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	da0a      	bge.n	800189c <move_target_position+0x248>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189a:	d80a      	bhi.n	80018b2 <move_target_position+0x25e>
	{
		stewart->tp_target_pos[3] += joyrot_x;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80018a2:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <move_target_position+0x384>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
	}


	if (stewart->tp_target_pos[4] > stewart->tilt_limit) stewart->tp_target_pos[4] = stewart->tilt_limit;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80018be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	dd06      	ble.n	80018d6 <move_target_position+0x282>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80018d4:	e038      	b.n	8001948 <move_target_position+0x2f4>
	else if (stewart->tp_target_pos[4] < -stewart->tilt_limit) stewart->tp_target_pos[4] = -stewart->tilt_limit;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80018e2:	eef1 7a67 	vneg.f32	s15, s15
 80018e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ee:	d508      	bpl.n	8001902 <move_target_position+0x2ae>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80018f6:	eef1 7a67 	vneg.f32	s15, s15
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
 8001900:	e022      	b.n	8001948 <move_target_position+0x2f4>
	else if (stewart->tp_target_pos[4] >= -stewart->tilt_limit || stewart->tp_target_pos[4] <= stewart->tilt_limit )
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 800190e:	eef1 7a67 	vneg.f32	s15, s15
 8001912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	da0a      	bge.n	8001932 <move_target_position+0x2de>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	d80a      	bhi.n	8001948 <move_target_position+0x2f4>
	{
		stewart->tp_target_pos[4] += joyrot_y;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 8001938:	4b28      	ldr	r3, [pc, #160]	@ (80019dc <move_target_position+0x388>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
	}


	if (stewart->tp_target_pos[5] > stewart->rot_limit) stewart->tp_target_pos[5] = stewart->rot_limit;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	dd06      	ble.n	800196c <move_target_position+0x318>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	{
		stewart->tp_target_pos[5] += joyrot_z;
	}


}
 800196a:	e044      	b.n	80019f6 <move_target_position+0x3a2>
	else if (stewart->tp_target_pos[5] < -stewart->rot_limit) stewart->tp_target_pos[5] = -stewart->rot_limit;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001978:	eef1 7a67 	vneg.f32	s15, s15
 800197c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	d508      	bpl.n	8001998 <move_target_position+0x344>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 800198c:	eef1 7a67 	vneg.f32	s15, s15
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 8001996:	e02e      	b.n	80019f6 <move_target_position+0x3a2>
	else if (stewart->tp_target_pos[5] >= -stewart->rot_limit || stewart->tp_target_pos[5] <= stewart->rot_limit )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 80019a4:	eef1 7a67 	vneg.f32	s15, s15
 80019a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	da16      	bge.n	80019e0 <move_target_position+0x38c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 80019be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	d90b      	bls.n	80019e0 <move_target_position+0x38c>
}
 80019c8:	e015      	b.n	80019f6 <move_target_position+0x3a2>
 80019ca:	bf00      	nop
 80019cc:	200003ac 	.word	0x200003ac
 80019d0:	200003b0 	.word	0x200003b0
 80019d4:	200003b4 	.word	0x200003b4
 80019d8:	200003b8 	.word	0x200003b8
 80019dc:	200003bc 	.word	0x200003bc
		stewart->tp_target_pos[5] += joyrot_z;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <move_target_position+0x3b0>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	200003c0 	.word	0x200003c0

08001a08 <adc_raw_to_joystick>:


float adc_raw_to_joystick(uint16_t adc_raw) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]

	float joy_val;

	if (adc_raw >= 1900 && adc_raw <= 2100) {
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d907      	bls.n	8001a2c <adc_raw_to_joystick+0x24>
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	f640 0234 	movw	r2, #2100	@ 0x834
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d802      	bhi.n	8001a2c <adc_raw_to_joystick+0x24>
		return 0;
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e025      	b.n	8001a78 <adc_raw_to_joystick+0x70>
	}

	else if (adc_raw > 2100) {
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	f640 0234 	movw	r2, #2100	@ 0x834
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d90d      	bls.n	8001a52 <adc_raw_to_joystick+0x4a>
		joy_val = (float) (adc_raw - 2100) / 1000;
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a44:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001a8c <adc_raw_to_joystick+0x84>
 8001a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4c:	edc7 7a03 	vstr	s15, [r7, #12]
 8001a50:	e011      	b.n	8001a76 <adc_raw_to_joystick+0x6e>

	}

	else if (adc_raw <1900) {
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d80c      	bhi.n	8001a76 <adc_raw_to_joystick+0x6e>
		joy_val = (float) (adc_raw - 1900)/ 1000;
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001a8c <adc_raw_to_joystick+0x84>
 8001a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a72:	edc7 7a03 	vstr	s15, [r7, #12]

	}
	return joy_val;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	447a0000 	.word	0x447a0000

08001a90 <c_length_to_pot_value>:
	}

}


uint16_t c_length_to_pot_value(float cylinder_length) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	ed87 0a01 	vstr	s0, [r7, #4]

	uint16_t pot_val;

	pot_val = (uint16_t) (cylinder_length - 400.00) * 13.6533;
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe fd74 	bl	8000588 <__aeabi_f2d>
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <c_length_to_pot_value+0x60>)
 8001aa6:	f7fe fc0f 	bl	80002c8 <__aeabi_dsub>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7ff f899 	bl	8000be8 <__aeabi_d2uiz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd52 	bl	8000564 <__aeabi_i2d>
 8001ac0:	a309      	add	r3, pc, #36	@ (adr r3, 8001ae8 <c_length_to_pot_value+0x58>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fdb7 	bl	8000638 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f889 	bl	8000be8 <__aeabi_d2uiz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	81fb      	strh	r3, [r7, #14]

	return pot_val;
 8001ada:	89fb      	ldrh	r3, [r7, #14]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	566cf41f 	.word	0x566cf41f
 8001aec:	402b4e7d 	.word	0x402b4e7d
 8001af0:	40790000 	.word	0x40790000

08001af4 <pack_data>:

void pack_data(void) {
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

	TxData[0] = (uint8_t) (target_pot[0] & 0xFF);
 8001af8:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb8 <pack_data+0xc4>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b2f      	ldr	r3, [pc, #188]	@ (8001bbc <pack_data+0xc8>)
 8001b00:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t) (target_pot[0] >> 8) & 0x0F;
 8001b02:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <pack_data+0xc4>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <pack_data+0xc8>)
 8001b14:	705a      	strb	r2, [r3, #1]

	TxData[2] = (uint8_t) (target_pot[1] & 0xFF);
 8001b16:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <pack_data+0xc4>)
 8001b18:	885b      	ldrh	r3, [r3, #2]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <pack_data+0xc8>)
 8001b1e:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) (target_pot[1] >> 8) & 0x0F;
 8001b20:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <pack_data+0xc4>)
 8001b22:	885b      	ldrh	r3, [r3, #2]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <pack_data+0xc8>)
 8001b32:	70da      	strb	r2, [r3, #3]

	TxData[4] = (uint8_t) (target_pot[2] & 0xFF);
 8001b34:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <pack_data+0xc4>)
 8001b36:	889b      	ldrh	r3, [r3, #4]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <pack_data+0xc8>)
 8001b3c:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) (target_pot[2] >> 8) & 0x0F;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <pack_data+0xc4>)
 8001b40:	889b      	ldrh	r3, [r3, #4]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <pack_data+0xc8>)
 8001b50:	715a      	strb	r2, [r3, #5]

	TxData[6] = (uint8_t) (target_pot[3] & 0xFF);
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <pack_data+0xc4>)
 8001b54:	88db      	ldrh	r3, [r3, #6]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <pack_data+0xc8>)
 8001b5a:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t) (target_pot[3] >> 8) & 0x0F;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <pack_data+0xc4>)
 8001b5e:	88db      	ldrh	r3, [r3, #6]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <pack_data+0xc8>)
 8001b6e:	71da      	strb	r2, [r3, #7]

	TxData[8] = (uint8_t) (target_pot[4] & 0xFF);
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <pack_data+0xc4>)
 8001b72:	891b      	ldrh	r3, [r3, #8]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <pack_data+0xc8>)
 8001b78:	721a      	strb	r2, [r3, #8]
	TxData[9] = (uint8_t) (target_pot[4] >> 8) & 0x0F;
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <pack_data+0xc4>)
 8001b7c:	891b      	ldrh	r3, [r3, #8]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <pack_data+0xc8>)
 8001b8c:	725a      	strb	r2, [r3, #9]

	TxData[10] = (uint8_t) (target_pot[5] & 0xFF);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <pack_data+0xc4>)
 8001b90:	895b      	ldrh	r3, [r3, #10]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <pack_data+0xc8>)
 8001b96:	729a      	strb	r2, [r3, #10]
	TxData[11] = (uint8_t) (target_pot[5] >> 8) & 0x0F;
 8001b98:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <pack_data+0xc4>)
 8001b9a:	895b      	ldrh	r3, [r3, #10]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <pack_data+0xc8>)
 8001baa:	72da      	strb	r2, [r3, #11]

}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200003c8 	.word	0x200003c8
 8001bbc:	200003d4 	.word	0x200003d4

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001bc4:	2120      	movs	r1, #32
 8001bc6:	4804      	ldr	r0, [pc, #16]	@ (8001bd8 <Error_Handler+0x18>)
 8001bc8:	f002 ffc5 	bl	8004b56 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001bcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd0:	f001 fc32 	bl	8003438 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001bd4:	bf00      	nop
 8001bd6:	e7f5      	b.n	8001bc4 <Error_Handler+0x4>
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <HAL_MspInit+0x4c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a08      	ldr	r2, [pc, #32]	@ (8001c28 <HAL_MspInit+0x4c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a40      	ldr	r2, [pc, #256]	@ (8001d4c <HAL_ADC_MspInit+0x120>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d179      	bne.n	8001d42 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b3f      	ldr	r3, [pc, #252]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4a3e      	ldr	r2, [pc, #248]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a37      	ldr	r2, [pc, #220]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b35      	ldr	r3, [pc, #212]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a30      	ldr	r2, [pc, #192]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b2e      	ldr	r3, [pc, #184]	@ (8001d50 <HAL_ADC_MspInit+0x124>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = joy_x_Pin|joy_y_Pin|joy_z_Pin|joy_rot_x_Pin
 8001ca2:	231f      	movs	r3, #31
 8001ca4:	617b      	str	r3, [r7, #20]
                          |joy_rot_y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4827      	ldr	r0, [pc, #156]	@ (8001d54 <HAL_ADC_MspInit+0x128>)
 8001cb6:	f002 fda1 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joy3_rot_z_Pin;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(joy3_rot_z_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4822      	ldr	r0, [pc, #136]	@ (8001d58 <HAL_ADC_MspInit+0x12c>)
 8001cce:	f002 fd95 	bl	80047fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cd2:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001cd4:	4a22      	ldr	r2, [pc, #136]	@ (8001d60 <HAL_ADC_MspInit+0x134>)
 8001cd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cd8:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001cec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d0a:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d16:	4811      	ldr	r0, [pc, #68]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001d18:	f002 fa00 	bl	800411c <HAL_DMA_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001d22:	f7ff ff4d 	bl	8001bc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a0c      	ldr	r2, [pc, #48]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001d2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d5c <HAL_ADC_MspInit+0x130>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2012      	movs	r0, #18
 8001d38:	f002 f9b9 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d3c:	2012      	movs	r0, #18
 8001d3e:	f002 f9d2 	bl	80040e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	@ 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40012000 	.word	0x40012000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	2000024c 	.word	0x2000024c
 8001d60:	40026410 	.word	0x40026410

08001d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a29      	ldr	r2, [pc, #164]	@ (8001e28 <HAL_I2C_MspInit+0xc4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d14b      	bne.n	8001e1e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b28      	ldr	r3, [pc, #160]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a27      	ldr	r2, [pc, #156]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b25      	ldr	r3, [pc, #148]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a20      	ldr	r2, [pc, #128]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc4:	2312      	movs	r3, #18
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4815      	ldr	r0, [pc, #84]	@ (8001e30 <HAL_I2C_MspInit+0xcc>)
 8001ddc:	f002 fd0e 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	2312      	movs	r3, #18
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001df2:	2304      	movs	r3, #4
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480d      	ldr	r0, [pc, #52]	@ (8001e34 <HAL_I2C_MspInit+0xd0>)
 8001dfe:	f002 fcfd 	bl	80047fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001e0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_I2C_MspInit+0xc8>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	@ 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40005800 	.word	0x40005800
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020800 	.word	0x40020800

08001e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a28      	ldr	r2, [pc, #160]	@ (8001ef8 <HAL_SPI_MspInit+0xc0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d149      	bne.n	8001eee <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	4a26      	ldr	r2, [pc, #152]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001e64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6a:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <HAL_SPI_MspInit+0xc4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eae:	23c0      	movs	r3, #192	@ 0xc0
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <HAL_SPI_MspInit+0xc8>)
 8001eca:	f002 fc97 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4806      	ldr	r0, [pc, #24]	@ (8001f04 <HAL_SPI_MspInit+0xcc>)
 8001eea:	f002 fc87 	bl	80047fc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	@ 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40013000 	.word	0x40013000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020400 	.word	0x40020400

08001f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <HAL_UART_MspInit+0x84>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12c      	bne.n	8001f84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f34:	f043 0310 	orr.w	r3, r3, #16
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f74:	2307      	movs	r3, #7
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_UART_MspInit+0x8c>)
 8001f80:	f002 fc3c 	bl	80047fc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	@ 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <NMI_Handler+0x4>

08001fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <MemManage_Handler+0x4>

08001fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fee:	f001 fa03 	bl	80033f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <ADC_IRQHandler+0x10>)
 8001ffe:	f001 fa82 	bl	8003506 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000204 	.word	0x20000204

0800200c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <DMA2_Stream0_IRQHandler+0x10>)
 8002012:	f002 f989 	bl	8004328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000024c 	.word	0x2000024c

08002020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return 1;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_kill>:

int _kill(int pid, int sig)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800203a:	f005 f86b 	bl	8007114 <__errno>
 800203e:	4603      	mov	r3, r0
 8002040:	2216      	movs	r2, #22
 8002042:	601a      	str	r2, [r3, #0]
  return -1;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_exit>:

void _exit (int status)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002058:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ffe7 	bl	8002030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002062:	bf00      	nop
 8002064:	e7fd      	b.n	8002062 <_exit+0x12>

08002066 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e00a      	b.n	800208e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002078:	f3af 8000 	nop.w
 800207c:	4601      	mov	r1, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	60ba      	str	r2, [r7, #8]
 8002084:	b2ca      	uxtb	r2, r1
 8002086:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	dbf0      	blt.n	8002078 <_read+0x12>
  }

  return len;
 8002096:	687b      	ldr	r3, [r7, #4]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e009      	b.n	80020c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	60ba      	str	r2, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	dbf1      	blt.n	80020b2 <_write+0x12>
  }
  return len;
 80020ce:	687b      	ldr	r3, [r7, #4]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_close>:

int _close(int file)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002100:	605a      	str	r2, [r3, #4]
  return 0;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_isatty>:

int _isatty(int file)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002148:	4a14      	ldr	r2, [pc, #80]	@ (800219c <_sbrk+0x5c>)
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <_sbrk+0x60>)
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002154:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <_sbrk+0x64>)
 800215e:	4a12      	ldr	r2, [pc, #72]	@ (80021a8 <_sbrk+0x68>)
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	429a      	cmp	r2, r3
 800216e:	d207      	bcs.n	8002180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002170:	f004 ffd0 	bl	8007114 <__errno>
 8002174:	4603      	mov	r3, r0
 8002176:	220c      	movs	r2, #12
 8002178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800217e:	e009      	b.n	8002194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	4a05      	ldr	r2, [pc, #20]	@ (80021a4 <_sbrk+0x64>)
 8002190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002192:	68fb      	ldr	r3, [r7, #12]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20020000 	.word	0x20020000
 80021a0:	00000400 	.word	0x00000400
 80021a4:	200003e0 	.word	0x200003e0
 80021a8:	20000538 	.word	0x20000538

080021ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <SystemInit+0x20>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <SystemInit+0x20>)
 80021b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002208 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021d4:	f7ff ffea 	bl	80021ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021da:	490d      	ldr	r1, [pc, #52]	@ (8002210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f0:	4c0a      	ldr	r4, [pc, #40]	@ (800221c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021fe:	f004 ff8f 	bl	8007120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002202:	f7fe fed9 	bl	8000fb8 <main>
  bx  lr    
 8002206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002214:	0800b498 	.word	0x0800b498
  ldr r2, =_sbss
 8002218:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800221c:	20000534 	.word	0x20000534

08002220 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <CAN1_RX0_IRQHandler>
 8002222:	0000      	movs	r0, r0
 8002224:	0000      	movs	r0, r0
	...

08002228 <platform_init>:
#include "stewart.h"




void platform_init(stewart* stewart) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

    // base plate joints positions 
    stewart->b1[0]=R*cos(deg_to_rad(60-beta/2)),  stewart->b1[1]=R*sin(deg_to_rad(60-beta/2)),  stewart->b1[2]=h;
 8002230:	ed9f 0acf 	vldr	s0, [pc, #828]	@ 8002570 <platform_init+0x348>
 8002234:	f000 f9ac 	bl	8002590 <deg_to_rad>
 8002238:	ee10 3a10 	vmov	r3, s0
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f9a3 	bl	8000588 <__aeabi_f2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	ec43 2b10 	vmov	d0, r2, r3
 800224a:	f006 ff59 	bl	8009100 <cos>
 800224e:	ec51 0b10 	vmov	r0, r1, d0
 8002252:	a3c5      	add	r3, pc, #788	@ (adr r3, 8002568 <platform_init+0x340>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	f7fe f9ee 	bl	8000638 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f7fe fce0 	bl	8000c28 <__aeabi_d2f>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	679a      	str	r2, [r3, #120]	@ 0x78
 800226e:	ed9f 0ac0 	vldr	s0, [pc, #768]	@ 8002570 <platform_init+0x348>
 8002272:	f000 f98d 	bl	8002590 <deg_to_rad>
 8002276:	ee10 3a10 	vmov	r3, s0
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f984 	bl	8000588 <__aeabi_f2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	ec43 2b10 	vmov	d0, r2, r3
 8002288:	f006 ff9a 	bl	80091c0 <sin>
 800228c:	ec51 0b10 	vmov	r0, r1, d0
 8002290:	a3b5      	add	r3, pc, #724	@ (adr r3, 8002568 <platform_init+0x340>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fe f9cf 	bl	8000638 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7fe fcc1 	bl	8000c28 <__aeabi_d2f>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4ab1      	ldr	r2, [pc, #708]	@ (8002574 <platform_init+0x34c>)
 80022b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    stewart->b2[0]=R*cos(deg_to_rad(60+beta/2)),  stewart->b2[1]=R*sin(deg_to_rad(60+beta/2)),  stewart->b2[2]=h;
 80022b4:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8002578 <platform_init+0x350>
 80022b8:	f000 f96a 	bl	8002590 <deg_to_rad>
 80022bc:	ee10 3a10 	vmov	r3, s0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f961 	bl	8000588 <__aeabi_f2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	ec43 2b10 	vmov	d0, r2, r3
 80022ce:	f006 ff17 	bl	8009100 <cos>
 80022d2:	ec51 0b10 	vmov	r0, r1, d0
 80022d6:	a3a4      	add	r3, pc, #656	@ (adr r3, 8002568 <platform_init+0x340>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f7fe f9ac 	bl	8000638 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fc9e 	bl	8000c28 <__aeabi_d2f>
 80022ec:	4602      	mov	r2, r0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80022f4:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8002578 <platform_init+0x350>
 80022f8:	f000 f94a 	bl	8002590 <deg_to_rad>
 80022fc:	ee10 3a10 	vmov	r3, s0
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f941 	bl	8000588 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	ec43 2b10 	vmov	d0, r2, r3
 800230e:	f006 ff57 	bl	80091c0 <sin>
 8002312:	ec51 0b10 	vmov	r0, r1, d0
 8002316:	a394      	add	r3, pc, #592	@ (adr r3, 8002568 <platform_init+0x340>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fe f98c 	bl	8000638 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc7e 	bl	8000c28 <__aeabi_d2f>
 800232c:	4602      	mov	r2, r0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a8f      	ldr	r2, [pc, #572]	@ (8002574 <platform_init+0x34c>)
 8002338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    stewart->b3[0]=R*cos(deg_to_rad(180-beta/2)), stewart->b3[1]=R*sin(deg_to_rad(180-beta/2)), stewart->b3[2]=h;
 800233c:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 800257c <platform_init+0x354>
 8002340:	f000 f926 	bl	8002590 <deg_to_rad>
 8002344:	ee10 3a10 	vmov	r3, s0
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f91d 	bl	8000588 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	ec43 2b10 	vmov	d0, r2, r3
 8002356:	f006 fed3 	bl	8009100 <cos>
 800235a:	ec51 0b10 	vmov	r0, r1, d0
 800235e:	a382      	add	r3, pc, #520	@ (adr r3, 8002568 <platform_init+0x340>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f7fe f968 	bl	8000638 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fc5a 	bl	8000c28 <__aeabi_d2f>
 8002374:	4602      	mov	r2, r0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800237c:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 800257c <platform_init+0x354>
 8002380:	f000 f906 	bl	8002590 <deg_to_rad>
 8002384:	ee10 3a10 	vmov	r3, s0
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8fd 	bl	8000588 <__aeabi_f2d>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	ec43 2b10 	vmov	d0, r2, r3
 8002396:	f006 ff13 	bl	80091c0 <sin>
 800239a:	ec51 0b10 	vmov	r0, r1, d0
 800239e:	a372      	add	r3, pc, #456	@ (adr r3, 8002568 <platform_init+0x340>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fe f948 	bl	8000638 <__aeabi_dmul>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fc3a 	bl	8000c28 <__aeabi_d2f>
 80023b4:	4602      	mov	r2, r0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a6d      	ldr	r2, [pc, #436]	@ (8002574 <platform_init+0x34c>)
 80023c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    stewart->b4[0]=R*cos(deg_to_rad(180+beta/2)), stewart->b4[1]=R*sin(deg_to_rad(180+beta/2)), stewart->b4[2]=h;
 80023c4:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 8002580 <platform_init+0x358>
 80023c8:	f000 f8e2 	bl	8002590 <deg_to_rad>
 80023cc:	ee10 3a10 	vmov	r3, s0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f8d9 	bl	8000588 <__aeabi_f2d>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	ec43 2b10 	vmov	d0, r2, r3
 80023de:	f006 fe8f 	bl	8009100 <cos>
 80023e2:	ec51 0b10 	vmov	r0, r1, d0
 80023e6:	a360      	add	r3, pc, #384	@ (adr r3, 8002568 <platform_init+0x340>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f924 	bl	8000638 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f7fe fc16 	bl	8000c28 <__aeabi_d2f>
 80023fc:	4602      	mov	r2, r0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002404:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8002580 <platform_init+0x358>
 8002408:	f000 f8c2 	bl	8002590 <deg_to_rad>
 800240c:	ee10 3a10 	vmov	r3, s0
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f8b9 	bl	8000588 <__aeabi_f2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	ec43 2b10 	vmov	d0, r2, r3
 800241e:	f006 fecf 	bl	80091c0 <sin>
 8002422:	ec51 0b10 	vmov	r0, r1, d0
 8002426:	a350      	add	r3, pc, #320	@ (adr r3, 8002568 <platform_init+0x340>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fe f904 	bl	8000638 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f7fe fbf6 	bl	8000c28 <__aeabi_d2f>
 800243c:	4602      	mov	r2, r0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a4b      	ldr	r2, [pc, #300]	@ (8002574 <platform_init+0x34c>)
 8002448:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    stewart->b5[0]=R*cos(deg_to_rad(300-beta/2)), stewart->b5[1]=R*sin(deg_to_rad(300-beta/2)), stewart->b5[2]=h;
 800244c:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8002584 <platform_init+0x35c>
 8002450:	f000 f89e 	bl	8002590 <deg_to_rad>
 8002454:	ee10 3a10 	vmov	r3, s0
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f895 	bl	8000588 <__aeabi_f2d>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	ec43 2b10 	vmov	d0, r2, r3
 8002466:	f006 fe4b 	bl	8009100 <cos>
 800246a:	ec51 0b10 	vmov	r0, r1, d0
 800246e:	a33e      	add	r3, pc, #248	@ (adr r3, 8002568 <platform_init+0x340>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	f7fe f8e0 	bl	8000638 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	f7fe fbd2 	bl	8000c28 <__aeabi_d2f>
 8002484:	4602      	mov	r2, r0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800248c:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8002584 <platform_init+0x35c>
 8002490:	f000 f87e 	bl	8002590 <deg_to_rad>
 8002494:	ee10 3a10 	vmov	r3, s0
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f875 	bl	8000588 <__aeabi_f2d>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	ec43 2b10 	vmov	d0, r2, r3
 80024a6:	f006 fe8b 	bl	80091c0 <sin>
 80024aa:	ec51 0b10 	vmov	r0, r1, d0
 80024ae:	a32e      	add	r3, pc, #184	@ (adr r3, 8002568 <platform_init+0x340>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f8c0 	bl	8000638 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fbb2 	bl	8000c28 <__aeabi_d2f>
 80024c4:	4602      	mov	r2, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <platform_init+0x34c>)
 80024d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    stewart->b6[0]=R*cos(deg_to_rad(300+beta/2)), stewart->b6[1]=R*sin(deg_to_rad(300+beta/2)), stewart->b6[2]=h;
 80024d4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002588 <platform_init+0x360>
 80024d8:	f000 f85a 	bl	8002590 <deg_to_rad>
 80024dc:	ee10 3a10 	vmov	r3, s0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe f851 	bl	8000588 <__aeabi_f2d>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	ec43 2b10 	vmov	d0, r2, r3
 80024ee:	f006 fe07 	bl	8009100 <cos>
 80024f2:	ec51 0b10 	vmov	r0, r1, d0
 80024f6:	a31c      	add	r3, pc, #112	@ (adr r3, 8002568 <platform_init+0x340>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	f7fe f89c 	bl	8000638 <__aeabi_dmul>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fb8e 	bl	8000c28 <__aeabi_d2f>
 800250c:	4602      	mov	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8002514:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8002588 <platform_init+0x360>
 8002518:	f000 f83a 	bl	8002590 <deg_to_rad>
 800251c:	ee10 3a10 	vmov	r3, s0
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f831 	bl	8000588 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	ec43 2b10 	vmov	d0, r2, r3
 800252e:	f006 fe47 	bl	80091c0 <sin>
 8002532:	ec51 0b10 	vmov	r0, r1, d0
 8002536:	a30c      	add	r3, pc, #48	@ (adr r3, 8002568 <platform_init+0x340>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f87c 	bl	8000638 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fb6e 	bl	8000c28 <__aeabi_d2f>
 800254c:	4602      	mov	r2, r0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <platform_init+0x34c>)
 8002558:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	f3af 8000 	nop.w
 8002568:	00000000 	.word	0x00000000
 800256c:	4072c000 	.word	0x4072c000
 8002570:	425c0000 	.word	0x425c0000
 8002574:	43c80000 	.word	0x43c80000
 8002578:	42820000 	.word	0x42820000
 800257c:	432f0000 	.word	0x432f0000
 8002580:	43390000 	.word	0x43390000
 8002584:	43938000 	.word	0x43938000
 8002588:	43988000 	.word	0x43988000
 800258c:	00000000 	.word	0x00000000

08002590 <deg_to_rad>:


/*convert degrees to radians */
float deg_to_rad(float deg) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	ed87 0a01 	vstr	s0, [r7, #4]
    float rad = deg * PI / 180;
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fd fff4 	bl	8000588 <__aeabi_f2d>
 80025a0:	a310      	add	r3, pc, #64	@ (adr r3, 80025e4 <deg_to_rad+0x54>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe f847 	bl	8000638 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <deg_to_rad+0x50>)
 80025b8:	f7fe f968 	bl	800088c <__aeabi_ddiv>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe fb30 	bl	8000c28 <__aeabi_d2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]
    return rad;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	ee07 3a90 	vmov	s15, r3
}
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	f3af 8000 	nop.w
 80025e0:	40668000 	.word	0x40668000
 80025e4:	54442d18 	.word	0x54442d18
 80025e8:	400921fb 	.word	0x400921fb

080025ec <rot_x>:


void rot_x(float theta_x, float vector[3]) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b090      	sub	sp, #64	@ 0x40
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80025f6:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_x[3][3] = {
 800260a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
        {1, 0, 0},
        {0, cos(deg_to_rad(theta_x)), -sin(deg_to_rad(theta_x))},
 8002622:	ed97 0a01 	vldr	s0, [r7, #4]
 8002626:	f7ff ffb3 	bl	8002590 <deg_to_rad>
 800262a:	ee10 3a10 	vmov	r3, s0
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ffaa 	bl	8000588 <__aeabi_f2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	ec43 2b10 	vmov	d0, r2, r3
 800263c:	f006 fd60 	bl	8009100 <cos>
 8002640:	ec53 2b10 	vmov	r2, r3, d0
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe faee 	bl	8000c28 <__aeabi_d2f>
 800264c:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 800264e:	61bb      	str	r3, [r7, #24]
        {0, cos(deg_to_rad(theta_x)), -sin(deg_to_rad(theta_x))},
 8002650:	ed97 0a01 	vldr	s0, [r7, #4]
 8002654:	f7ff ff9c 	bl	8002590 <deg_to_rad>
 8002658:	ee10 3a10 	vmov	r3, s0
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff93 	bl	8000588 <__aeabi_f2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	ec43 2b10 	vmov	d0, r2, r3
 800266a:	f006 fda9 	bl	80091c0 <sin>
 800266e:	ec53 2b10 	vmov	r2, r3, d0
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f7fe fad7 	bl	8000c28 <__aeabi_d2f>
 800267a:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef1 7a67 	vneg.f32	s15, s15
 8002684:	edc7 7a07 	vstr	s15, [r7, #28]
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
        {0, sin(deg_to_rad(theta_x)), cos(deg_to_rad(theta_x))}
 800268e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002692:	f7ff ff7d 	bl	8002590 <deg_to_rad>
 8002696:	ee10 3a10 	vmov	r3, s0
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff74 	bl	8000588 <__aeabi_f2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	ec43 2b10 	vmov	d0, r2, r3
 80026a8:	f006 fd8a 	bl	80091c0 <sin>
 80026ac:	ec53 2b10 	vmov	r2, r3, d0
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f7fe fab8 	bl	8000c28 <__aeabi_d2f>
 80026b8:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
        {0, sin(deg_to_rad(theta_x)), cos(deg_to_rad(theta_x))}
 80026bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80026c0:	f7ff ff66 	bl	8002590 <deg_to_rad>
 80026c4:	ee10 3a10 	vmov	r3, s0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd ff5d 	bl	8000588 <__aeabi_f2d>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	ec43 2b10 	vmov	d0, r2, r3
 80026d6:	f006 fd13 	bl	8009100 <cos>
 80026da:	ec53 2b10 	vmov	r2, r3, d0
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f7fe faa1 	bl	8000c28 <__aeabi_d2f>
 80026e6:	4603      	mov	r3, r0
    float rot_x[3][3] = {
 80026e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3304      	adds	r3, #4
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3308      	adds	r3, #8
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002706:	2300      	movs	r3, #0
 8002708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800270a:	e02e      	b.n	800276a <rot_x+0x17e>
        
        for (int column=0;column<3;column++) {
 800270c:	2300      	movs	r3, #0
 800270e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002710:	e025      	b.n	800275e <rot_x+0x172>
            vector[row] += rot_x[row][column] * vector_copy[column];  
 8002712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	3340      	adds	r3, #64	@ 0x40
 800272e:	443b      	add	r3, r7
 8002730:	3b38      	subs	r3, #56	@ 0x38
 8002732:	edd3 6a00 	vldr	s13, [r3]
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	3340      	adds	r3, #64	@ 0x40
 800273c:	443b      	add	r3, r7
 800273e:	3b14      	subs	r3, #20
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4413      	add	r3, r2
 8002750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002754:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275a:	3301      	adds	r3, #1
 800275c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002760:	2b02      	cmp	r3, #2
 8002762:	ddd6      	ble.n	8002712 <rot_x+0x126>
    for (int row=0;row<3;row++) {
 8002764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002766:	3301      	adds	r3, #1
 8002768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800276a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800276c:	2b02      	cmp	r3, #2
 800276e:	ddcd      	ble.n	800270c <rot_x+0x120>
            
        }
    }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3740      	adds	r7, #64	@ 0x40
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <rot_y>:



void rot_y(float theta_y, float vector[3]) {
 800277a:	b580      	push	{r7, lr}
 800277c:	b090      	sub	sp, #64	@ 0x40
 800277e:	af00      	add	r7, sp, #0
 8002780:	ed87 0a01 	vstr	s0, [r7, #4]
 8002784:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	633b      	str	r3, [r7, #48]	@ 0x30
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_y[3][3] = {
        {cos(deg_to_rad(theta_y)), 0, sin(deg_to_rad(theta_y))},
 8002798:	ed97 0a01 	vldr	s0, [r7, #4]
 800279c:	f7ff fef8 	bl	8002590 <deg_to_rad>
 80027a0:	ee10 3a10 	vmov	r3, s0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd feef 	bl	8000588 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	ec43 2b10 	vmov	d0, r2, r3
 80027b2:	f006 fca5 	bl	8009100 <cos>
 80027b6:	ec53 2b10 	vmov	r2, r3, d0
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe fa33 	bl	8000c28 <__aeabi_d2f>
 80027c2:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
        {cos(deg_to_rad(theta_y)), 0, sin(deg_to_rad(theta_y))},
 80027cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80027d0:	f7ff fede 	bl	8002590 <deg_to_rad>
 80027d4:	ee10 3a10 	vmov	r3, s0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fed5 	bl	8000588 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	ec43 2b10 	vmov	d0, r2, r3
 80027e6:	f006 fceb 	bl	80091c0 <sin>
 80027ea:	ec53 2b10 	vmov	r2, r3, d0
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe fa19 	bl	8000c28 <__aeabi_d2f>
 80027f6:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
        {0, 1, 0},
        {-sin(deg_to_rad(theta_y)), 0, cos(deg_to_rad(theta_y))}
 800280c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002810:	f7ff febe 	bl	8002590 <deg_to_rad>
 8002814:	ee10 3a10 	vmov	r3, s0
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd feb5 	bl	8000588 <__aeabi_f2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	ec43 2b10 	vmov	d0, r2, r3
 8002826:	f006 fccb 	bl	80091c0 <sin>
 800282a:	ec53 2b10 	vmov	r2, r3, d0
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	f7fe f9f9 	bl	8000c28 <__aeabi_d2f>
 8002836:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eef1 7a67 	vneg.f32	s15, s15
 8002840:	edc7 7a08 	vstr	s15, [r7, #32]
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
        {-sin(deg_to_rad(theta_y)), 0, cos(deg_to_rad(theta_y))}
 800284a:	ed97 0a01 	vldr	s0, [r7, #4]
 800284e:	f7ff fe9f 	bl	8002590 <deg_to_rad>
 8002852:	ee10 3a10 	vmov	r3, s0
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fe96 	bl	8000588 <__aeabi_f2d>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	ec43 2b10 	vmov	d0, r2, r3
 8002864:	f006 fc4c 	bl	8009100 <cos>
 8002868:	ec53 2b10 	vmov	r2, r3, d0
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f9da 	bl	8000c28 <__aeabi_d2f>
 8002874:	4603      	mov	r3, r0
    float rot_y[3][3] = {
 8002876:	62bb      	str	r3, [r7, #40]	@ 0x28
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	3304      	adds	r3, #4
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3308      	adds	r3, #8
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002894:	2300      	movs	r3, #0
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002898:	e02e      	b.n	80028f8 <rot_y+0x17e>
        
        for (int column=0;column<3;column++) {
 800289a:	2300      	movs	r3, #0
 800289c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800289e:	e025      	b.n	80028ec <rot_y+0x172>
            vector[row] += rot_y[row][column] * vector_copy[column];  
 80028a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	ed93 7a00 	vldr	s14, [r3]
 80028ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	3340      	adds	r3, #64	@ 0x40
 80028bc:	443b      	add	r3, r7
 80028be:	3b38      	subs	r3, #56	@ 0x38
 80028c0:	edd3 6a00 	vldr	s13, [r3]
 80028c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3340      	adds	r3, #64	@ 0x40
 80028ca:	443b      	add	r3, r7
 80028cc:	3b14      	subs	r3, #20
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e2:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 80028e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e8:	3301      	adds	r3, #1
 80028ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	ddd6      	ble.n	80028a0 <rot_y+0x126>
    for (int row=0;row<3;row++) {
 80028f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f4:	3301      	adds	r3, #1
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	ddcd      	ble.n	800289a <rot_y+0x120>
            
        }
    }
}
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	3740      	adds	r7, #64	@ 0x40
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <rot_z>:


void rot_z(float theta_z, float vector[3]) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b090      	sub	sp, #64	@ 0x40
 800290c:	af00      	add	r7, sp, #0
 800290e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002912:	6038      	str	r0, [r7, #0]

    float vector_copy[3]={vector[0], vector[1], vector[2]};
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	637b      	str	r3, [r7, #52]	@ 0x34

    float rot_z[3][3] = {
        {cos(deg_to_rad(theta_z)), -sin(deg_to_rad(theta_z)), 0},
 8002926:	ed97 0a01 	vldr	s0, [r7, #4]
 800292a:	f7ff fe31 	bl	8002590 <deg_to_rad>
 800292e:	ee10 3a10 	vmov	r3, s0
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe28 	bl	8000588 <__aeabi_f2d>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	ec43 2b10 	vmov	d0, r2, r3
 8002940:	f006 fbde 	bl	8009100 <cos>
 8002944:	ec53 2b10 	vmov	r2, r3, d0
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7fe f96c 	bl	8000c28 <__aeabi_d2f>
 8002950:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002952:	60bb      	str	r3, [r7, #8]
        {cos(deg_to_rad(theta_z)), -sin(deg_to_rad(theta_z)), 0},
 8002954:	ed97 0a01 	vldr	s0, [r7, #4]
 8002958:	f7ff fe1a 	bl	8002590 <deg_to_rad>
 800295c:	ee10 3a10 	vmov	r3, s0
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fe11 	bl	8000588 <__aeabi_f2d>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	ec43 2b10 	vmov	d0, r2, r3
 800296e:	f006 fc27 	bl	80091c0 <sin>
 8002972:	ec53 2b10 	vmov	r2, r3, d0
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f7fe f955 	bl	8000c28 <__aeabi_d2f>
 800297e:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eef1 7a67 	vneg.f32	s15, s15
 8002988:	edc7 7a03 	vstr	s15, [r7, #12]
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
        {sin(deg_to_rad(theta_z)), cos(deg_to_rad(theta_z)), 0},
 8002992:	ed97 0a01 	vldr	s0, [r7, #4]
 8002996:	f7ff fdfb 	bl	8002590 <deg_to_rad>
 800299a:	ee10 3a10 	vmov	r3, s0
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdf2 	bl	8000588 <__aeabi_f2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	ec43 2b10 	vmov	d0, r2, r3
 80029ac:	f006 fc08 	bl	80091c0 <sin>
 80029b0:	ec53 2b10 	vmov	r2, r3, d0
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f936 	bl	8000c28 <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 80029be:	617b      	str	r3, [r7, #20]
        {sin(deg_to_rad(theta_z)), cos(deg_to_rad(theta_z)), 0},
 80029c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80029c4:	f7ff fde4 	bl	8002590 <deg_to_rad>
 80029c8:	ee10 3a10 	vmov	r3, s0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fddb 	bl	8000588 <__aeabi_f2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	ec43 2b10 	vmov	d0, r2, r3
 80029da:	f006 fb91 	bl	8009100 <cos>
 80029de:	ec53 2b10 	vmov	r2, r3, d0
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f91f 	bl	8000c28 <__aeabi_d2f>
 80029ea:	4603      	mov	r3, r0
    float rot_z[3][3] = {
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a00:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
        {0, 0, 1},
    };

    vector[0]=0, vector[1]=0, vector[2]=0;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3304      	adds	r3, #4
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]

    for (int row=0;row<3;row++) {
 8002a22:	2300      	movs	r3, #0
 8002a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a26:	e02e      	b.n	8002a86 <rot_z+0x17e>
        
        for (int column=0;column<3;column++) {
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a2c:	e025      	b.n	8002a7a <rot_z+0x172>
            vector[row] += rot_z[row][column] * vector_copy[column];  
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	ed93 7a00 	vldr	s14, [r3]
 8002a3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	3340      	adds	r3, #64	@ 0x40
 8002a4a:	443b      	add	r3, r7
 8002a4c:	3b38      	subs	r3, #56	@ 0x38
 8002a4e:	edd3 6a00 	vldr	s13, [r3]
 8002a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	3340      	adds	r3, #64	@ 0x40
 8002a58:	443b      	add	r3, r7
 8002a5a:	3b14      	subs	r3, #20
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a70:	edc3 7a00 	vstr	s15, [r3]
        for (int column=0;column<3;column++) {
 8002a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a76:	3301      	adds	r3, #1
 8002a78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	ddd6      	ble.n	8002a2e <rot_z+0x126>
    for (int row=0;row<3;row++) {
 8002a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a82:	3301      	adds	r3, #1
 8002a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	ddcd      	ble.n	8002a28 <rot_z+0x120>
            
        }
    }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3740      	adds	r7, #64	@ 0x40
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <rotate_platform>:


void rotate_platform(stewart* stewart, float vector[3]) {
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]

    rot_z(stewart->tp_target_pos[5], vector);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8002aa6:	6838      	ldr	r0, [r7, #0]
 8002aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002aac:	f7ff ff2c 	bl	8002908 <rot_z>
    rot_y(stewart->tp_target_pos[4], vector);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002ab6:	6838      	ldr	r0, [r7, #0]
 8002ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8002abc:	f7ff fe5d 	bl	800277a <rot_y>
    rot_x(stewart->tp_target_pos[3], vector);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8002acc:	f7ff fd8e 	bl	80025ec <rot_x>

    vector[0] = vector[0] + stewart->tp_target_pos[0];
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	ed93 7a00 	vldr	s14, [r3]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	edc3 7a00 	vstr	s15, [r3]
    vector[1] = vector[1] + stewart->tp_target_pos[1];
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	ed93 7a00 	vldr	s14, [r3]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	3304      	adds	r3, #4
 8002af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afc:	edc3 7a00 	vstr	s15, [r3]
    vector[2] = vector[2] + stewart->tp_target_pos[2];
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	3308      	adds	r3, #8
 8002b04:	ed93 7a00 	vldr	s14, [r3]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	3308      	adds	r3, #8
 8002b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b16:	edc3 7a00 	vstr	s15, [r3]

}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	0000      	movs	r0, r0
 8002b24:	0000      	movs	r0, r0
	...

08002b28 <run_platform>:





void run_platform(stewart* stewart)  {
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

    stewart->a1[0]=r*cos(deg_to_rad(0+beta/2)),   stewart->a1[1]=r*sin(deg_to_rad(0+beta/2)),    stewart->a1[2] = 0;
 8002b30:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002b34:	f7ff fd2c 	bl	8002590 <deg_to_rad>
 8002b38:	ee10 3a10 	vmov	r3, s0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fd23 	bl	8000588 <__aeabi_f2d>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	ec43 2b10 	vmov	d0, r2, r3
 8002b4a:	f006 fad9 	bl	8009100 <cos>
 8002b4e:	ec51 0b10 	vmov	r0, r1, d0
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	4bd3      	ldr	r3, [pc, #844]	@ (8002ea4 <run_platform+0x37c>)
 8002b58:	f7fd fd6e 	bl	8000638 <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7fe f860 	bl	8000c28 <__aeabi_d2f>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b6e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002b72:	f7ff fd0d 	bl	8002590 <deg_to_rad>
 8002b76:	ee10 3a10 	vmov	r3, s0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fd04 	bl	8000588 <__aeabi_f2d>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	ec43 2b10 	vmov	d0, r2, r3
 8002b88:	f006 fb1a 	bl	80091c0 <sin>
 8002b8c:	ec51 0b10 	vmov	r0, r1, d0
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	4bc3      	ldr	r3, [pc, #780]	@ (8002ea4 <run_platform+0x37c>)
 8002b96:	f7fd fd4f 	bl	8000638 <__aeabi_dmul>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fe f841 	bl	8000c28 <__aeabi_d2f>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	639a      	str	r2, [r3, #56]	@ 0x38
    stewart->a2[0]=r*cos(deg_to_rad(120-beta/2)), stewart->a2[1]=r*sin(deg_to_rad(120-beta/2)),  stewart->a2[2] = 0;
 8002bb4:	ed9f 0abc 	vldr	s0, [pc, #752]	@ 8002ea8 <run_platform+0x380>
 8002bb8:	f7ff fcea 	bl	8002590 <deg_to_rad>
 8002bbc:	ee10 3a10 	vmov	r3, s0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd fce1 	bl	8000588 <__aeabi_f2d>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	ec43 2b10 	vmov	d0, r2, r3
 8002bce:	f006 fa97 	bl	8009100 <cos>
 8002bd2:	ec51 0b10 	vmov	r0, r1, d0
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4bb2      	ldr	r3, [pc, #712]	@ (8002ea4 <run_platform+0x37c>)
 8002bdc:	f7fd fd2c 	bl	8000638 <__aeabi_dmul>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f7fe f81e 	bl	8000c28 <__aeabi_d2f>
 8002bec:	4602      	mov	r2, r0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bf2:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8002ea8 <run_platform+0x380>
 8002bf6:	f7ff fccb 	bl	8002590 <deg_to_rad>
 8002bfa:	ee10 3a10 	vmov	r3, s0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fcc2 	bl	8000588 <__aeabi_f2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	ec43 2b10 	vmov	d0, r2, r3
 8002c0c:	f006 fad8 	bl	80091c0 <sin>
 8002c10:	ec51 0b10 	vmov	r0, r1, d0
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	4ba2      	ldr	r3, [pc, #648]	@ (8002ea4 <run_platform+0x37c>)
 8002c1a:	f7fd fd0d 	bl	8000638 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7fd ffff 	bl	8000c28 <__aeabi_d2f>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
    stewart->a3[0]=r*cos(deg_to_rad(120+beta/2)), stewart->a3[1]=r*sin(deg_to_rad(120+beta/2)),  stewart->a3[2] = 0;
 8002c38:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 8002eac <run_platform+0x384>
 8002c3c:	f7ff fca8 	bl	8002590 <deg_to_rad>
 8002c40:	ee10 3a10 	vmov	r3, s0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fc9f 	bl	8000588 <__aeabi_f2d>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	ec43 2b10 	vmov	d0, r2, r3
 8002c52:	f006 fa55 	bl	8009100 <cos>
 8002c56:	ec51 0b10 	vmov	r0, r1, d0
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	4b91      	ldr	r3, [pc, #580]	@ (8002ea4 <run_platform+0x37c>)
 8002c60:	f7fd fcea 	bl	8000638 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f7fd ffdc 	bl	8000c28 <__aeabi_d2f>
 8002c70:	4602      	mov	r2, r0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	649a      	str	r2, [r3, #72]	@ 0x48
 8002c76:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 8002eac <run_platform+0x384>
 8002c7a:	f7ff fc89 	bl	8002590 <deg_to_rad>
 8002c7e:	ee10 3a10 	vmov	r3, s0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fc80 	bl	8000588 <__aeabi_f2d>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	ec43 2b10 	vmov	d0, r2, r3
 8002c90:	f006 fa96 	bl	80091c0 <sin>
 8002c94:	ec51 0b10 	vmov	r0, r1, d0
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	4b81      	ldr	r3, [pc, #516]	@ (8002ea4 <run_platform+0x37c>)
 8002c9e:	f7fd fccb 	bl	8000638 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ffbd 	bl	8000c28 <__aeabi_d2f>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	651a      	str	r2, [r3, #80]	@ 0x50
    stewart->a4[0]=r*cos(deg_to_rad(240-beta/2)), stewart->a4[1]=r*sin(deg_to_rad(240-beta/2)),  stewart->a4[2] = 0;
 8002cbc:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8002eb0 <run_platform+0x388>
 8002cc0:	f7ff fc66 	bl	8002590 <deg_to_rad>
 8002cc4:	ee10 3a10 	vmov	r3, s0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc5d 	bl	8000588 <__aeabi_f2d>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	ec43 2b10 	vmov	d0, r2, r3
 8002cd6:	f006 fa13 	bl	8009100 <cos>
 8002cda:	ec51 0b10 	vmov	r0, r1, d0
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	4b70      	ldr	r3, [pc, #448]	@ (8002ea4 <run_platform+0x37c>)
 8002ce4:	f7fd fca8 	bl	8000638 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7fd ff9a 	bl	8000c28 <__aeabi_d2f>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002cfa:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8002eb0 <run_platform+0x388>
 8002cfe:	f7ff fc47 	bl	8002590 <deg_to_rad>
 8002d02:	ee10 3a10 	vmov	r3, s0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc3e 	bl	8000588 <__aeabi_f2d>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	ec43 2b10 	vmov	d0, r2, r3
 8002d14:	f006 fa54 	bl	80091c0 <sin>
 8002d18:	ec51 0b10 	vmov	r0, r1, d0
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	4b60      	ldr	r3, [pc, #384]	@ (8002ea4 <run_platform+0x37c>)
 8002d22:	f7fd fc89 	bl	8000638 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd ff7b 	bl	8000c28 <__aeabi_d2f>
 8002d32:	4602      	mov	r2, r0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    stewart->a5[0]=r*cos(deg_to_rad(240+beta/2)), stewart->a5[1]=r*sin(deg_to_rad(240+beta/2)),  stewart->a5[2] = 0;
 8002d40:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8002eb4 <run_platform+0x38c>
 8002d44:	f7ff fc24 	bl	8002590 <deg_to_rad>
 8002d48:	ee10 3a10 	vmov	r3, s0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fc1b 	bl	8000588 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	ec43 2b10 	vmov	d0, r2, r3
 8002d5a:	f006 f9d1 	bl	8009100 <cos>
 8002d5e:	ec51 0b10 	vmov	r0, r1, d0
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea4 <run_platform+0x37c>)
 8002d68:	f7fd fc66 	bl	8000638 <__aeabi_dmul>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f7fd ff58 	bl	8000c28 <__aeabi_d2f>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d7e:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8002eb4 <run_platform+0x38c>
 8002d82:	f7ff fc05 	bl	8002590 <deg_to_rad>
 8002d86:	ee10 3a10 	vmov	r3, s0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fbfc 	bl	8000588 <__aeabi_f2d>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	ec43 2b10 	vmov	d0, r2, r3
 8002d98:	f006 fa12 	bl	80091c0 <sin>
 8002d9c:	ec51 0b10 	vmov	r0, r1, d0
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea4 <run_platform+0x37c>)
 8002da6:	f7fd fc47 	bl	8000638 <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff39 	bl	8000c28 <__aeabi_d2f>
 8002db6:	4602      	mov	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	665a      	str	r2, [r3, #100]	@ 0x64
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	669a      	str	r2, [r3, #104]	@ 0x68
    stewart->a6[0]=r*cos(deg_to_rad(360-beta/2)), stewart->a6[1]=r*sin(deg_to_rad(360-beta/2)),  stewart->a6[2] = 0;
 8002dc4:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8002eb8 <run_platform+0x390>
 8002dc8:	f7ff fbe2 	bl	8002590 <deg_to_rad>
 8002dcc:	ee10 3a10 	vmov	r3, s0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd fbd9 	bl	8000588 <__aeabi_f2d>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	ec43 2b10 	vmov	d0, r2, r3
 8002dde:	f006 f98f 	bl	8009100 <cos>
 8002de2:	ec51 0b10 	vmov	r0, r1, d0
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <run_platform+0x37c>)
 8002dec:	f7fd fc24 	bl	8000638 <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7fd ff16 	bl	8000c28 <__aeabi_d2f>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002e02:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8002eb8 <run_platform+0x390>
 8002e06:	f7ff fbc3 	bl	8002590 <deg_to_rad>
 8002e0a:	ee10 3a10 	vmov	r3, s0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fbba 	bl	8000588 <__aeabi_f2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	ec43 2b10 	vmov	d0, r2, r3
 8002e1c:	f006 f9d0 	bl	80091c0 <sin>
 8002e20:	ec51 0b10 	vmov	r0, r1, d0
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <run_platform+0x37c>)
 8002e2a:	f7fd fc05 	bl	8000638 <__aeabi_dmul>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f7fd fef7 	bl	8000c28 <__aeabi_d2f>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	675a      	str	r2, [r3, #116]	@ 0x74


    rotate_platform(stewart, stewart->a1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3330      	adds	r3, #48	@ 0x30
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff fe21 	bl	8002a96 <rotate_platform>
    rotate_platform(stewart, stewart->a2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	333c      	adds	r3, #60	@ 0x3c
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff fe1b 	bl	8002a96 <rotate_platform>
    rotate_platform(stewart, stewart->a3);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3348      	adds	r3, #72	@ 0x48
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fe15 	bl	8002a96 <rotate_platform>
    rotate_platform(stewart, stewart->a4);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3354      	adds	r3, #84	@ 0x54
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fe0f 	bl	8002a96 <rotate_platform>
    rotate_platform(stewart, stewart->a5);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3360      	adds	r3, #96	@ 0x60
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fe09 	bl	8002a96 <rotate_platform>
    rotate_platform(stewart, stewart->a6);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	336c      	adds	r3, #108	@ 0x6c
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fe03 	bl	8002a96 <rotate_platform>


    // calculate the length of each arm 
    stewart->c_target[0]=sqrt(pow(stewart->a1[0]-stewart->b1[0],2)+pow(stewart->a1[1]-stewart->b1[1],2) + pow(stewart->a1[2]-stewart->b1[2],2));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8002e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea0:	e00c      	b.n	8002ebc <run_platform+0x394>
 8002ea2:	bf00      	nop
 8002ea4:	40590000 	.word	0x40590000
 8002ea8:	42e60000 	.word	0x42e60000
 8002eac:	42fa0000 	.word	0x42fa0000
 8002eb0:	436b0000 	.word	0x436b0000
 8002eb4:	43750000 	.word	0x43750000
 8002eb8:	43b18000 	.word	0x43b18000
 8002ebc:	ee17 0a90 	vmov	r0, s15
 8002ec0:	f7fd fb62 	bl	8000588 <__aeabi_f2d>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	ed9f 1be9 	vldr	d1, [pc, #932]	@ 8003270 <run_platform+0x748>
 8002ecc:	ec43 2b10 	vmov	d0, r2, r3
 8002ed0:	f006 f878 	bl	8008fc4 <pow>
 8002ed4:	ec55 4b10 	vmov	r4, r5, d0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8002ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee8:	ee17 0a90 	vmov	r0, s15
 8002eec:	f7fd fb4c 	bl	8000588 <__aeabi_f2d>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	ed9f 1bde 	vldr	d1, [pc, #888]	@ 8003270 <run_platform+0x748>
 8002ef8:	ec43 2b10 	vmov	d0, r2, r3
 8002efc:	f006 f862 	bl	8008fc4 <pow>
 8002f00:	ec53 2b10 	vmov	r2, r3, d0
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd f9e0 	bl	80002cc <__adddf3>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	ee17 0a90 	vmov	r0, s15
 8002f28:	f7fd fb2e 	bl	8000588 <__aeabi_f2d>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	ed9f 1bcf 	vldr	d1, [pc, #828]	@ 8003270 <run_platform+0x748>
 8002f34:	ec43 2b10 	vmov	d0, r2, r3
 8002f38:	f006 f844 	bl	8008fc4 <pow>
 8002f3c:	ec53 2b10 	vmov	r2, r3, d0
 8002f40:	4620      	mov	r0, r4
 8002f42:	4629      	mov	r1, r5
 8002f44:	f7fd f9c2 	bl	80002cc <__adddf3>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	ec43 2b17 	vmov	d7, r2, r3
 8002f50:	eeb0 0a47 	vmov.f32	s0, s14
 8002f54:	eef0 0a67 	vmov.f32	s1, s15
 8002f58:	f006 f8a4 	bl	80090a4 <sqrt>
 8002f5c:	ec53 2b10 	vmov	r2, r3, d0
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fe60 	bl	8000c28 <__aeabi_d2f>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
    stewart->c_target[1]=sqrt(pow(stewart->a2[0]-stewart->b2[0],2)+pow(stewart->a2[1]-stewart->b2[1],2) + pow(stewart->a2[2]-stewart->b2[2],2));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7e:	ee17 0a90 	vmov	r0, s15
 8002f82:	f7fd fb01 	bl	8000588 <__aeabi_f2d>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	ed9f 1bb9 	vldr	d1, [pc, #740]	@ 8003270 <run_platform+0x748>
 8002f8e:	ec43 2b10 	vmov	d0, r2, r3
 8002f92:	f006 f817 	bl	8008fc4 <pow>
 8002f96:	ec55 4b10 	vmov	r4, r5, d0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8002fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002faa:	ee17 0a90 	vmov	r0, s15
 8002fae:	f7fd faeb 	bl	8000588 <__aeabi_f2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	ed9f 1bae 	vldr	d1, [pc, #696]	@ 8003270 <run_platform+0x748>
 8002fba:	ec43 2b10 	vmov	d0, r2, r3
 8002fbe:	f006 f801 	bl	8008fc4 <pow>
 8002fc2:	ec53 2b10 	vmov	r2, r3, d0
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f7fd f97f 	bl	80002cc <__adddf3>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	461d      	mov	r5, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8002fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe6:	ee17 0a90 	vmov	r0, s15
 8002fea:	f7fd facd 	bl	8000588 <__aeabi_f2d>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8003270 <run_platform+0x748>
 8002ff6:	ec43 2b10 	vmov	d0, r2, r3
 8002ffa:	f005 ffe3 	bl	8008fc4 <pow>
 8002ffe:	ec53 2b10 	vmov	r2, r3, d0
 8003002:	4620      	mov	r0, r4
 8003004:	4629      	mov	r1, r5
 8003006:	f7fd f961 	bl	80002cc <__adddf3>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	ec43 2b17 	vmov	d7, r2, r3
 8003012:	eeb0 0a47 	vmov.f32	s0, s14
 8003016:	eef0 0a67 	vmov.f32	s1, s15
 800301a:	f006 f843 	bl	80090a4 <sqrt>
 800301e:	ec53 2b10 	vmov	r2, r3, d0
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	f7fd fdff 	bl	8000c28 <__aeabi_d2f>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	605a      	str	r2, [r3, #4]
    stewart->c_target[2]=sqrt(pow(stewart->a3[0]-stewart->b3[0],2)+pow(stewart->a3[1]-stewart->b3[1],2) + pow(stewart->a3[2]-stewart->b3[2],2));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800303c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003040:	ee17 0a90 	vmov	r0, s15
 8003044:	f7fd faa0 	bl	8000588 <__aeabi_f2d>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 8003270 <run_platform+0x748>
 8003050:	ec43 2b10 	vmov	d0, r2, r3
 8003054:	f005 ffb6 	bl	8008fc4 <pow>
 8003058:	ec55 4b10 	vmov	r4, r5, d0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306c:	ee17 0a90 	vmov	r0, s15
 8003070:	f7fd fa8a 	bl	8000588 <__aeabi_f2d>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8003270 <run_platform+0x748>
 800307c:	ec43 2b10 	vmov	d0, r2, r3
 8003080:	f005 ffa0 	bl	8008fc4 <pow>
 8003084:	ec53 2b10 	vmov	r2, r3, d0
 8003088:	4620      	mov	r0, r4
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd f91e 	bl	80002cc <__adddf3>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4614      	mov	r4, r2
 8003096:	461d      	mov	r5, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 80030a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a8:	ee17 0a90 	vmov	r0, s15
 80030ac:	f7fd fa6c 	bl	8000588 <__aeabi_f2d>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 8003270 <run_platform+0x748>
 80030b8:	ec43 2b10 	vmov	d0, r2, r3
 80030bc:	f005 ff82 	bl	8008fc4 <pow>
 80030c0:	ec53 2b10 	vmov	r2, r3, d0
 80030c4:	4620      	mov	r0, r4
 80030c6:	4629      	mov	r1, r5
 80030c8:	f7fd f900 	bl	80002cc <__adddf3>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	ec43 2b17 	vmov	d7, r2, r3
 80030d4:	eeb0 0a47 	vmov.f32	s0, s14
 80030d8:	eef0 0a67 	vmov.f32	s1, s15
 80030dc:	f005 ffe2 	bl	80090a4 <sqrt>
 80030e0:	ec53 2b10 	vmov	r2, r3, d0
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7fd fd9e 	bl	8000c28 <__aeabi_d2f>
 80030ec:	4602      	mov	r2, r0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	609a      	str	r2, [r3, #8]
    stewart->c_target[3]=sqrt(pow(stewart->a4[0]-stewart->b4[0],2)+pow(stewart->a4[1]-stewart->b4[1],2) + pow(stewart->a4[2]-stewart->b4[2],2));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 80030fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003102:	ee17 0a90 	vmov	r0, s15
 8003106:	f7fd fa3f 	bl	8000588 <__aeabi_f2d>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8003270 <run_platform+0x748>
 8003112:	ec43 2b10 	vmov	d0, r2, r3
 8003116:	f005 ff55 	bl	8008fc4 <pow>
 800311a:	ec55 4b10 	vmov	r4, r5, d0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 800312a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312e:	ee17 0a90 	vmov	r0, s15
 8003132:	f7fd fa29 	bl	8000588 <__aeabi_f2d>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8003270 <run_platform+0x748>
 800313e:	ec43 2b10 	vmov	d0, r2, r3
 8003142:	f005 ff3f 	bl	8008fc4 <pow>
 8003146:	ec53 2b10 	vmov	r2, r3, d0
 800314a:	4620      	mov	r0, r4
 800314c:	4629      	mov	r1, r5
 800314e:	f7fd f8bd 	bl	80002cc <__adddf3>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4614      	mov	r4, r2
 8003158:	461d      	mov	r5, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8003166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316a:	ee17 0a90 	vmov	r0, s15
 800316e:	f7fd fa0b 	bl	8000588 <__aeabi_f2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8003270 <run_platform+0x748>
 800317a:	ec43 2b10 	vmov	d0, r2, r3
 800317e:	f005 ff21 	bl	8008fc4 <pow>
 8003182:	ec53 2b10 	vmov	r2, r3, d0
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd f89f 	bl	80002cc <__adddf3>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	ec43 2b17 	vmov	d7, r2, r3
 8003196:	eeb0 0a47 	vmov.f32	s0, s14
 800319a:	eef0 0a67 	vmov.f32	s1, s15
 800319e:	f005 ff81 	bl	80090a4 <sqrt>
 80031a2:	ec53 2b10 	vmov	r2, r3, d0
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fd3d 	bl	8000c28 <__aeabi_d2f>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
    stewart->c_target[4]=sqrt(pow(stewart->a5[0]-stewart->b5[0],2)+pow(stewart->a5[1]-stewart->b5[1],2) + pow(stewart->a5[2]-stewart->b5[2],2));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80031c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c4:	ee17 0a90 	vmov	r0, s15
 80031c8:	f7fd f9de 	bl	8000588 <__aeabi_f2d>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003270 <run_platform+0x748>
 80031d4:	ec43 2b10 	vmov	d0, r2, r3
 80031d8:	f005 fef4 	bl	8008fc4 <pow>
 80031dc:	ec55 4b10 	vmov	r4, r5, d0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 80031ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f0:	ee17 0a90 	vmov	r0, s15
 80031f4:	f7fd f9c8 	bl	8000588 <__aeabi_f2d>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8003270 <run_platform+0x748>
 8003200:	ec43 2b10 	vmov	d0, r2, r3
 8003204:	f005 fede 	bl	8008fc4 <pow>
 8003208:	ec53 2b10 	vmov	r2, r3, d0
 800320c:	4620      	mov	r0, r4
 800320e:	4629      	mov	r1, r5
 8003210:	f7fd f85c 	bl	80002cc <__adddf3>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4614      	mov	r4, r2
 800321a:	461d      	mov	r5, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8003228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322c:	ee17 0a90 	vmov	r0, s15
 8003230:	f7fd f9aa 	bl	8000588 <__aeabi_f2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8003270 <run_platform+0x748>
 800323c:	ec43 2b10 	vmov	d0, r2, r3
 8003240:	f005 fec0 	bl	8008fc4 <pow>
 8003244:	ec53 2b10 	vmov	r2, r3, d0
 8003248:	4620      	mov	r0, r4
 800324a:	4629      	mov	r1, r5
 800324c:	f7fd f83e 	bl	80002cc <__adddf3>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	ec43 2b17 	vmov	d7, r2, r3
 8003258:	eeb0 0a47 	vmov.f32	s0, s14
 800325c:	eef0 0a67 	vmov.f32	s1, s15
 8003260:	f005 ff20 	bl	80090a4 <sqrt>
 8003264:	ec53 2b10 	vmov	r2, r3, d0
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	e008      	b.n	8003280 <run_platform+0x758>
 800326e:	bf00      	nop
 8003270:	00000000 	.word	0x00000000
 8003274:	40000000 	.word	0x40000000
 8003278:	00000000 	.word	0x00000000
 800327c:	40000000 	.word	0x40000000
 8003280:	f7fd fcd2 	bl	8000c28 <__aeabi_d2f>
 8003284:	4602      	mov	r2, r0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
    stewart->c_target[5]=sqrt(pow(stewart->a6[0]-stewart->b6[0],2)+pow(stewart->a6[1]-stewart->b6[1],2) + pow(stewart->a6[2]-stewart->b6[2],2));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8003296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329a:	ee17 0a90 	vmov	r0, s15
 800329e:	f7fd f973 	bl	8000588 <__aeabi_f2d>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	ed1f 1b0c 	vldr	d1, [pc, #-48]	@ 8003278 <run_platform+0x750>
 80032aa:	ec43 2b10 	vmov	d0, r2, r3
 80032ae:	f005 fe89 	bl	8008fc4 <pow>
 80032b2:	ec55 4b10 	vmov	r4, r5, d0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 80032c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c6:	ee17 0a90 	vmov	r0, s15
 80032ca:	f7fd f95d 	bl	8000588 <__aeabi_f2d>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	ed1f 1b17 	vldr	d1, [pc, #-92]	@ 8003278 <run_platform+0x750>
 80032d6:	ec43 2b10 	vmov	d0, r2, r3
 80032da:	f005 fe73 	bl	8008fc4 <pow>
 80032de:	ec53 2b10 	vmov	r2, r3, d0
 80032e2:	4620      	mov	r0, r4
 80032e4:	4629      	mov	r1, r5
 80032e6:	f7fc fff1 	bl	80002cc <__adddf3>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4614      	mov	r4, r2
 80032f0:	461d      	mov	r5, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80032fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003302:	ee17 0a90 	vmov	r0, s15
 8003306:	f7fd f93f 	bl	8000588 <__aeabi_f2d>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	ed1f 1b26 	vldr	d1, [pc, #-152]	@ 8003278 <run_platform+0x750>
 8003312:	ec43 2b10 	vmov	d0, r2, r3
 8003316:	f005 fe55 	bl	8008fc4 <pow>
 800331a:	ec53 2b10 	vmov	r2, r3, d0
 800331e:	4620      	mov	r0, r4
 8003320:	4629      	mov	r1, r5
 8003322:	f7fc ffd3 	bl	80002cc <__adddf3>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	ec43 2b17 	vmov	d7, r2, r3
 800332e:	eeb0 0a47 	vmov.f32	s0, s14
 8003332:	eef0 0a67 	vmov.f32	s1, s15
 8003336:	f005 feb5 	bl	80090a4 <sqrt>
 800333a:	ec53 2b10 	vmov	r2, r3, d0
 800333e:	4610      	mov	r0, r2
 8003340:	4619      	mov	r1, r3
 8003342:	f7fd fc71 	bl	8000c28 <__aeabi_d2f>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	615a      	str	r2, [r3, #20]

}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bdb0      	pop	{r4, r5, r7, pc}

08003354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003358:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0d      	ldr	r2, [pc, #52]	@ (8003394 <HAL_Init+0x40>)
 800335e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_Init+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <HAL_Init+0x40>)
 800336a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800336e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003370:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <HAL_Init+0x40>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a07      	ldr	r2, [pc, #28]	@ (8003394 <HAL_Init+0x40>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337c:	2003      	movs	r0, #3
 800337e:	f000 fe8b 	bl	8004098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003382:	200f      	movs	r0, #15
 8003384:	f000 f808 	bl	8003398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003388:	f7fe fc28 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00

08003398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a0:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <HAL_InitTick+0x54>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <HAL_InitTick+0x58>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fea3 	bl	8004102 <HAL_SYSTICK_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00e      	b.n	80033e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d80a      	bhi.n	80033e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033cc:	2200      	movs	r2, #0
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033d4:	f000 fe6b 	bl	80040ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d8:	4a06      	ldr	r2, [pc, #24]	@ (80033f4 <HAL_InitTick+0x5c>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000000 	.word	0x20000000
 80033f0:	20000008 	.word	0x20000008
 80033f4:	20000004 	.word	0x20000004

080033f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_IncTick+0x20>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_IncTick+0x24>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4413      	add	r3, r2
 8003408:	4a04      	ldr	r2, [pc, #16]	@ (800341c <HAL_IncTick+0x24>)
 800340a:	6013      	str	r3, [r2, #0]
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000008 	.word	0x20000008
 800341c:	200003e4 	.word	0x200003e4

08003420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return uwTick;
 8003424:	4b03      	ldr	r3, [pc, #12]	@ (8003434 <HAL_GetTick+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	200003e4 	.word	0x200003e4

08003438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003440:	f7ff ffee 	bl	8003420 <HAL_GetTick>
 8003444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003450:	d005      	beq.n	800345e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003452:	4b0a      	ldr	r3, [pc, #40]	@ (800347c <HAL_Delay+0x44>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800345e:	bf00      	nop
 8003460:	f7ff ffde 	bl	8003420 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	429a      	cmp	r2, r3
 800346e:	d8f7      	bhi.n	8003460 <HAL_Delay+0x28>
  {
  }
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000008 	.word	0x20000008

08003480 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e033      	b.n	80034fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe fbc4 	bl	8001c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d118      	bne.n	80034f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034c6:	f023 0302 	bic.w	r3, r3, #2
 80034ca:	f043 0202 	orr.w	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fb88 	bl	8003be8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	f043 0201 	orr.w	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80034ee:	e001      	b.n	80034f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d049      	beq.n	80035d0 <HAL_ADC_IRQHandler+0xca>
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d046      	beq.n	80035d0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d12b      	bne.n	80035c0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800356c:	2b00      	cmp	r3, #0
 800356e:	d127      	bne.n	80035c0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800357a:	2b00      	cmp	r3, #0
 800357c:	d006      	beq.n	800358c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003588:	2b00      	cmp	r3, #0
 800358a:	d119      	bne.n	80035c0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0220 	bic.w	r2, r2, #32
 800359a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7fe f837 	bl	8001634 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0212 	mvn.w	r2, #18
 80035ce:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035de:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d057      	beq.n	8003696 <HAL_ADC_IRQHandler+0x190>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d054      	beq.n	8003696 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d105      	bne.n	8003604 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d139      	bne.n	8003686 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800362a:	2b00      	cmp	r3, #0
 800362c:	d12b      	bne.n	8003686 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003638:	2b00      	cmp	r3, #0
 800363a:	d124      	bne.n	8003686 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003646:	2b00      	cmp	r3, #0
 8003648:	d11d      	bne.n	8003686 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003660:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fc2c 	bl	8003ee4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 020c 	mvn.w	r2, #12
 8003694:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d017      	beq.n	80036dc <HAL_ADC_IRQHandler+0x1d6>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d014      	beq.n	80036dc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10d      	bne.n	80036dc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f945 	bl	800395c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f06f 0201 	mvn.w	r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036ea:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d015      	beq.n	800371e <HAL_ADC_IRQHandler+0x218>
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d012      	beq.n	800371e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fc:	f043 0202 	orr.w	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0220 	mvn.w	r2, #32
 800370c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f92e 	bl	8003970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0220 	mvn.w	r2, #32
 800371c:	601a      	str	r2, [r3, #0]
  }
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_ADC_Start_DMA+0x1e>
 8003742:	2302      	movs	r3, #2
 8003744:	e0e9      	b.n	800391a <HAL_ADC_Start_DMA+0x1f2>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d018      	beq.n	800378e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800376c:	4b6d      	ldr	r3, [pc, #436]	@ (8003924 <HAL_ADC_Start_DMA+0x1fc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6d      	ldr	r2, [pc, #436]	@ (8003928 <HAL_ADC_Start_DMA+0x200>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	0c9a      	lsrs	r2, r3, #18
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003780:	e002      	b.n	8003788 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3b01      	subs	r3, #1
 8003786:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f9      	bne.n	8003782 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379c:	d107      	bne.n	80037ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037ac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 80a1 	bne.w	8003900 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fc:	d106      	bne.n	800380c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f023 0206 	bic.w	r2, r3, #6
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	645a      	str	r2, [r3, #68]	@ 0x44
 800380a:	e002      	b.n	8003812 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800381a:	4b44      	ldr	r3, [pc, #272]	@ (800392c <HAL_ADC_Start_DMA+0x204>)
 800381c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003822:	4a43      	ldr	r2, [pc, #268]	@ (8003930 <HAL_ADC_Start_DMA+0x208>)
 8003824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382a:	4a42      	ldr	r2, [pc, #264]	@ (8003934 <HAL_ADC_Start_DMA+0x20c>)
 800382c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	4a41      	ldr	r2, [pc, #260]	@ (8003938 <HAL_ADC_Start_DMA+0x210>)
 8003834:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800383e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800384e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800385e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	334c      	adds	r3, #76	@ 0x4c
 800386a:	4619      	mov	r1, r3
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f000 fd02 	bl	8004278 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2b00      	cmp	r3, #0
 800387e:	d12a      	bne.n	80038d6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2d      	ldr	r2, [pc, #180]	@ (800393c <HAL_ADC_Start_DMA+0x214>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d015      	beq.n	80038b6 <HAL_ADC_Start_DMA+0x18e>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2c      	ldr	r2, [pc, #176]	@ (8003940 <HAL_ADC_Start_DMA+0x218>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d105      	bne.n	80038a0 <HAL_ADC_Start_DMA+0x178>
 8003894:	4b25      	ldr	r3, [pc, #148]	@ (800392c <HAL_ADC_Start_DMA+0x204>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a27      	ldr	r2, [pc, #156]	@ (8003944 <HAL_ADC_Start_DMA+0x21c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d136      	bne.n	8003918 <HAL_ADC_Start_DMA+0x1f0>
 80038aa:	4b20      	ldr	r3, [pc, #128]	@ (800392c <HAL_ADC_Start_DMA+0x204>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d130      	bne.n	8003918 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d129      	bne.n	8003918 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	e020      	b.n	8003918 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a18      	ldr	r2, [pc, #96]	@ (800393c <HAL_ADC_Start_DMA+0x214>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d11b      	bne.n	8003918 <HAL_ADC_Start_DMA+0x1f0>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d114      	bne.n	8003918 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	e00b      	b.n	8003918 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000000 	.word	0x20000000
 8003928:	431bde83 	.word	0x431bde83
 800392c:	40012300 	.word	0x40012300
 8003930:	08003de1 	.word	0x08003de1
 8003934:	08003e9b 	.word	0x08003e9b
 8003938:	08003eb7 	.word	0x08003eb7
 800393c:	40012000 	.word	0x40012000
 8003940:	40012100 	.word	0x40012100
 8003944:	40012200 	.word	0x40012200

08003948 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x1c>
 800399c:	2302      	movs	r3, #2
 800399e:	e113      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x244>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b09      	cmp	r3, #9
 80039ae:	d925      	bls.n	80039fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	3b1e      	subs	r3, #30
 80039c6:	2207      	movs	r2, #7
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43da      	mvns	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	400a      	ands	r2, r1
 80039d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4403      	add	r3, r0
 80039ee:	3b1e      	subs	r3, #30
 80039f0:	409a      	lsls	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e022      	b.n	8003a42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6919      	ldr	r1, [r3, #16]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	2207      	movs	r2, #7
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6919      	ldr	r1, [r3, #16]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4618      	mov	r0, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4403      	add	r3, r0
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	d824      	bhi.n	8003a94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	3b05      	subs	r3, #5
 8003a5c:	221f      	movs	r2, #31
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43da      	mvns	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	400a      	ands	r2, r1
 8003a6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	4618      	mov	r0, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	3b05      	subs	r3, #5
 8003a86:	fa00 f203 	lsl.w	r2, r0, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a92:	e04c      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d824      	bhi.n	8003ae6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b23      	subs	r3, #35	@ 0x23
 8003aae:	221f      	movs	r2, #31
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	400a      	ands	r2, r1
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	4618      	mov	r0, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b23      	subs	r3, #35	@ 0x23
 8003ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ae4:	e023      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	3b41      	subs	r3, #65	@ 0x41
 8003af8:	221f      	movs	r2, #31
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	400a      	ands	r2, r1
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4618      	mov	r0, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	3b41      	subs	r3, #65	@ 0x41
 8003b22:	fa00 f203 	lsl.w	r2, r0, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b2e:	4b29      	ldr	r3, [pc, #164]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x250>)
 8003b30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a28      	ldr	r2, [pc, #160]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x254>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10f      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x1d8>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b12      	cmp	r3, #18
 8003b42:	d10b      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x254>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d12b      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x23a>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bdc <HAL_ADC_ConfigChannel+0x258>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <HAL_ADC_ConfigChannel+0x1f4>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b11      	cmp	r3, #17
 8003b76:	d122      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a11      	ldr	r2, [pc, #68]	@ (8003bdc <HAL_ADC_ConfigChannel+0x258>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d111      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b9a:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <HAL_ADC_ConfigChannel+0x25c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a11      	ldr	r2, [pc, #68]	@ (8003be4 <HAL_ADC_ConfigChannel+0x260>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	0c9a      	lsrs	r2, r3, #18
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003bb0:	e002      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f9      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40012300 	.word	0x40012300
 8003bd8:	40012000 	.word	0x40012000
 8003bdc:	10000012 	.word	0x10000012
 8003be0:	20000000 	.word	0x20000000
 8003be4:	431bde83 	.word	0x431bde83

08003be8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bf0:	4b79      	ldr	r3, [pc, #484]	@ (8003dd8 <ADC_Init+0x1f0>)
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	021a      	lsls	r2, r3, #8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6899      	ldr	r1, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	4a58      	ldr	r2, [pc, #352]	@ (8003ddc <ADC_Init+0x1f4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6899      	ldr	r1, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	e00f      	b.n	8003ce6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0202 	bic.w	r2, r2, #2
 8003cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6899      	ldr	r1, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7e1b      	ldrb	r3, [r3, #24]
 8003d00:	005a      	lsls	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01b      	beq.n	8003d4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d22:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	035a      	lsls	r2, r3, #13
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	e007      	b.n	8003d5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	051a      	lsls	r2, r3, #20
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6899      	ldr	r1, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d9e:	025a      	lsls	r2, r3, #9
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6899      	ldr	r1, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	029a      	lsls	r2, r3, #10
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	40012300 	.word	0x40012300
 8003ddc:	0f000001 	.word	0x0f000001

08003de0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d13c      	bne.n	8003e74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d12b      	bne.n	8003e6c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d127      	bne.n	8003e6c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d119      	bne.n	8003e6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0220 	bic.w	r2, r2, #32
 8003e46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7fd fbe1 	bl	8001634 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e72:	e00e      	b.n	8003e92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fd75 	bl	8003970 <HAL_ADC_ErrorCallback>
}
 8003e86:	e004      	b.n	8003e92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7ff fd4d 	bl	8003948 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2240      	movs	r2, #64	@ 0x40
 8003ec8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fd4a 	bl	8003970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <__NVIC_SetPriorityGrouping+0x44>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f14:	4013      	ands	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f2a:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <__NVIC_SetPriorityGrouping+0x44>)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	60d3      	str	r3, [r2, #12]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f44:	4b04      	ldr	r3, [pc, #16]	@ (8003f58 <__NVIC_GetPriorityGrouping+0x18>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	f003 0307 	and.w	r3, r3, #7
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	db0b      	blt.n	8003f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	4907      	ldr	r1, [pc, #28]	@ (8003f94 <__NVIC_EnableIRQ+0x38>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	e000e100 	.word	0xe000e100

08003f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	db0a      	blt.n	8003fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	490c      	ldr	r1, [pc, #48]	@ (8003fe4 <__NVIC_SetPriority+0x4c>)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	0112      	lsls	r2, r2, #4
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fc0:	e00a      	b.n	8003fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4908      	ldr	r1, [pc, #32]	@ (8003fe8 <__NVIC_SetPriority+0x50>)
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	3b04      	subs	r3, #4
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	761a      	strb	r2, [r3, #24]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000e100 	.word	0xe000e100
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	@ 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f1c3 0307 	rsb	r3, r3, #7
 8004006:	2b04      	cmp	r3, #4
 8004008:	bf28      	it	cs
 800400a:	2304      	movcs	r3, #4
 800400c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3304      	adds	r3, #4
 8004012:	2b06      	cmp	r3, #6
 8004014:	d902      	bls.n	800401c <NVIC_EncodePriority+0x30>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	3b03      	subs	r3, #3
 800401a:	e000      	b.n	800401e <NVIC_EncodePriority+0x32>
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43da      	mvns	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	401a      	ands	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004034:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43d9      	mvns	r1, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004044:	4313      	orrs	r3, r2
         );
}
 8004046:	4618      	mov	r0, r3
 8004048:	3724      	adds	r7, #36	@ 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004064:	d301      	bcc.n	800406a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004066:	2301      	movs	r3, #1
 8004068:	e00f      	b.n	800408a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800406a:	4a0a      	ldr	r2, [pc, #40]	@ (8004094 <SysTick_Config+0x40>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3b01      	subs	r3, #1
 8004070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004072:	210f      	movs	r1, #15
 8004074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004078:	f7ff ff8e 	bl	8003f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <SysTick_Config+0x40>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004082:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <SysTick_Config+0x40>)
 8004084:	2207      	movs	r2, #7
 8004086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	e000e010 	.word	0xe000e010

08004098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff29 	bl	8003ef8 <__NVIC_SetPriorityGrouping>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	4603      	mov	r3, r0
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
 80040ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040c0:	f7ff ff3e 	bl	8003f40 <__NVIC_GetPriorityGrouping>
 80040c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	6978      	ldr	r0, [r7, #20]
 80040cc:	f7ff ff8e 	bl	8003fec <NVIC_EncodePriority>
 80040d0:	4602      	mov	r2, r0
 80040d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff5d 	bl	8003f98 <__NVIC_SetPriority>
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	4603      	mov	r3, r0
 80040ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff ff31 	bl	8003f5c <__NVIC_EnableIRQ>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ffa2 	bl	8004054 <SysTick_Config>
 8004110:	4603      	mov	r3, r0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004128:	f7ff f97a 	bl	8003420 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e099      	b.n	800426c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004158:	e00f      	b.n	800417a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800415a:	f7ff f961 	bl	8003420 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b05      	cmp	r3, #5
 8004166:	d908      	bls.n	800417a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2203      	movs	r2, #3
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e078      	b.n	800426c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e8      	bne.n	800415a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4b38      	ldr	r3, [pc, #224]	@ (8004274 <HAL_DMA_Init+0x158>)
 8004194:	4013      	ands	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d107      	bne.n	80041e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	4313      	orrs	r3, r2
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	2b04      	cmp	r3, #4
 800420c:	d117      	bne.n	800423e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00e      	beq.n	800423e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa6f 	bl	8004704 <DMA_CheckFifoParam>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2240      	movs	r2, #64	@ 0x40
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800423a:	2301      	movs	r3, #1
 800423c:	e016      	b.n	800426c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa26 	bl	8004698 <DMA_CalcBaseAndBitshift>
 800424c:	4603      	mov	r3, r0
 800424e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	223f      	movs	r2, #63	@ 0x3f
 8004256:	409a      	lsls	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	f010803f 	.word	0xf010803f

08004278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_DMA_Start_IT+0x26>
 800429a:	2302      	movs	r3, #2
 800429c:	e040      	b.n	8004320 <HAL_DMA_Start_IT+0xa8>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d12f      	bne.n	8004312 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f9b8 	bl	800463c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	223f      	movs	r2, #63	@ 0x3f
 80042d2:	409a      	lsls	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0216 	orr.w	r2, r2, #22
 80042e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e005      	b.n	800431e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800431a:	2302      	movs	r3, #2
 800431c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004334:	4b8e      	ldr	r3, [pc, #568]	@ (8004570 <HAL_DMA_IRQHandler+0x248>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a8e      	ldr	r2, [pc, #568]	@ (8004574 <HAL_DMA_IRQHandler+0x24c>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	0a9b      	lsrs	r3, r3, #10
 8004340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	2208      	movs	r2, #8
 8004354:	409a      	lsls	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01a      	beq.n	8004394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0204 	bic.w	r2, r2, #4
 800437a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004380:	2208      	movs	r2, #8
 8004382:	409a      	lsls	r2, r3
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	f043 0201 	orr.w	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004398:	2201      	movs	r2, #1
 800439a:	409a      	lsls	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b6:	2201      	movs	r2, #1
 80043b8:	409a      	lsls	r2, r3
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c2:	f043 0202 	orr.w	r2, r3, #2
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ce:	2204      	movs	r2, #4
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ec:	2204      	movs	r2, #4
 80043ee:	409a      	lsls	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f8:	f043 0204 	orr.w	r2, r3, #4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	2210      	movs	r2, #16
 8004406:	409a      	lsls	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d043      	beq.n	8004498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d03c      	beq.n	8004498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	2210      	movs	r2, #16
 8004424:	409a      	lsls	r2, r3
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d018      	beq.n	800446a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d024      	beq.n	8004498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
 8004456:	e01f      	b.n	8004498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01b      	beq.n	8004498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
 8004468:	e016      	b.n	8004498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0208 	bic.w	r2, r2, #8
 8004486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449c:	2220      	movs	r2, #32
 800449e:	409a      	lsls	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 808f 	beq.w	80045c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8087 	beq.w	80045c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044be:	2220      	movs	r2, #32
 80044c0:	409a      	lsls	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d136      	bne.n	8004540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0216 	bic.w	r2, r2, #22
 80044e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <HAL_DMA_IRQHandler+0x1da>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0208 	bic.w	r2, r2, #8
 8004510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004516:	223f      	movs	r2, #63	@ 0x3f
 8004518:	409a      	lsls	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004532:	2b00      	cmp	r3, #0
 8004534:	d07e      	beq.n	8004634 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
        }
        return;
 800453e:	e079      	b.n	8004634 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01d      	beq.n	800458a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10d      	bne.n	8004578 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	2b00      	cmp	r3, #0
 8004562:	d031      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
 800456c:	e02c      	b.n	80045c8 <HAL_DMA_IRQHandler+0x2a0>
 800456e:	bf00      	nop
 8004570:	20000000 	.word	0x20000000
 8004574:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d023      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
 8004588:	e01e      	b.n	80045c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10f      	bne.n	80045b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0210 	bic.w	r2, r2, #16
 80045a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d032      	beq.n	8004636 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d022      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2205      	movs	r2, #5
 80045e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d307      	bcc.n	8004610 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f2      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x2cc>
 800460e:	e000      	b.n	8004612 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004610:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
 8004632:	e000      	b.n	8004636 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004634:	bf00      	nop
    }
  }
}
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b40      	cmp	r3, #64	@ 0x40
 8004668:	d108      	bne.n	800467c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800467a:	e007      	b.n	800468c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	60da      	str	r2, [r3, #12]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	3b10      	subs	r3, #16
 80046a8:	4a14      	ldr	r2, [pc, #80]	@ (80046fc <DMA_CalcBaseAndBitshift+0x64>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046b2:	4a13      	ldr	r2, [pc, #76]	@ (8004700 <DMA_CalcBaseAndBitshift+0x68>)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d909      	bls.n	80046da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	1d1a      	adds	r2, r3, #4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80046d8:	e007      	b.n	80046ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	aaaaaaab 	.word	0xaaaaaaab
 8004700:	0800af08 	.word	0x0800af08

08004704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d11f      	bne.n	800475e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d856      	bhi.n	80047d2 <DMA_CheckFifoParam+0xce>
 8004724:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <DMA_CheckFifoParam+0x28>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800474f 	.word	0x0800474f
 8004734:	0800473d 	.word	0x0800473d
 8004738:	080047d3 	.word	0x080047d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d046      	beq.n	80047d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474c:	e043      	b.n	80047d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004756:	d140      	bne.n	80047da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475c:	e03d      	b.n	80047da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004766:	d121      	bne.n	80047ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b03      	cmp	r3, #3
 800476c:	d837      	bhi.n	80047de <DMA_CheckFifoParam+0xda>
 800476e:	a201      	add	r2, pc, #4	@ (adr r2, 8004774 <DMA_CheckFifoParam+0x70>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004785 	.word	0x08004785
 8004778:	0800478b 	.word	0x0800478b
 800477c:	08004785 	.word	0x08004785
 8004780:	0800479d 	.word	0x0800479d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	e030      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d025      	beq.n	80047e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800479a:	e022      	b.n	80047e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047a4:	d11f      	bne.n	80047e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047aa:	e01c      	b.n	80047e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d903      	bls.n	80047ba <DMA_CheckFifoParam+0xb6>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d003      	beq.n	80047c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047b8:	e018      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
      break;
 80047be:	e015      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00e      	beq.n	80047ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      break;
 80047d0:	e00b      	b.n	80047ea <DMA_CheckFifoParam+0xe6>
      break;
 80047d2:	bf00      	nop
 80047d4:	e00a      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047d6:	bf00      	nop
 80047d8:	e008      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047da:	bf00      	nop
 80047dc:	e006      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047de:	bf00      	nop
 80047e0:	e004      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
 80047e4:	e002      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;   
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
    }
  } 
  
  return status; 
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop

080047fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	@ 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e165      	b.n	8004ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004818:	2201      	movs	r2, #1
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	f040 8154 	bne.w	8004ade <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d005      	beq.n	800484e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484a:	2b02      	cmp	r3, #2
 800484c:	d130      	bne.n	80048b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004884:	2201      	movs	r2, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 0201 	and.w	r2, r3, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d017      	beq.n	80048ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	2203      	movs	r2, #3
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d123      	bne.n	8004940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	08da      	lsrs	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3208      	adds	r2, #8
 8004900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	220f      	movs	r2, #15
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	08da      	lsrs	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3208      	adds	r2, #8
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80ae 	beq.w	8004ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b5d      	ldr	r3, [pc, #372]	@ (8004afc <HAL_GPIO_Init+0x300>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498a:	4a5c      	ldr	r2, [pc, #368]	@ (8004afc <HAL_GPIO_Init+0x300>)
 800498c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004990:	6453      	str	r3, [r2, #68]	@ 0x44
 8004992:	4b5a      	ldr	r3, [pc, #360]	@ (8004afc <HAL_GPIO_Init+0x300>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499e:	4a58      	ldr	r2, [pc, #352]	@ (8004b00 <HAL_GPIO_Init+0x304>)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004b04 <HAL_GPIO_Init+0x308>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d025      	beq.n	8004a16 <HAL_GPIO_Init+0x21a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004b08 <HAL_GPIO_Init+0x30c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01f      	beq.n	8004a12 <HAL_GPIO_Init+0x216>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4d      	ldr	r2, [pc, #308]	@ (8004b0c <HAL_GPIO_Init+0x310>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d019      	beq.n	8004a0e <HAL_GPIO_Init+0x212>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004b10 <HAL_GPIO_Init+0x314>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_GPIO_Init+0x20e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004b14 <HAL_GPIO_Init+0x318>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00d      	beq.n	8004a06 <HAL_GPIO_Init+0x20a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004b18 <HAL_GPIO_Init+0x31c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <HAL_GPIO_Init+0x206>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a49      	ldr	r2, [pc, #292]	@ (8004b1c <HAL_GPIO_Init+0x320>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_GPIO_Init+0x202>
 80049fa:	2306      	movs	r3, #6
 80049fc:	e00c      	b.n	8004a18 <HAL_GPIO_Init+0x21c>
 80049fe:	2307      	movs	r3, #7
 8004a00:	e00a      	b.n	8004a18 <HAL_GPIO_Init+0x21c>
 8004a02:	2305      	movs	r3, #5
 8004a04:	e008      	b.n	8004a18 <HAL_GPIO_Init+0x21c>
 8004a06:	2304      	movs	r3, #4
 8004a08:	e006      	b.n	8004a18 <HAL_GPIO_Init+0x21c>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e004      	b.n	8004a18 <HAL_GPIO_Init+0x21c>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e002      	b.n	8004a18 <HAL_GPIO_Init+0x21c>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_GPIO_Init+0x21c>
 8004a16:	2300      	movs	r3, #0
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	f002 0203 	and.w	r2, r2, #3
 8004a1e:	0092      	lsls	r2, r2, #2
 8004a20:	4093      	lsls	r3, r2
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a28:	4935      	ldr	r1, [pc, #212]	@ (8004b00 <HAL_GPIO_Init+0x304>)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a36:	4b3a      	ldr	r3, [pc, #232]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a5a:	4a31      	ldr	r2, [pc, #196]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a60:	4b2f      	ldr	r3, [pc, #188]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a84:	4a26      	ldr	r2, [pc, #152]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a8a:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aae:	4a1c      	ldr	r2, [pc, #112]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ad8:	4a11      	ldr	r2, [pc, #68]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	f67f ae96 	bls.w	8004818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	3724      	adds	r7, #36	@ 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40013800 	.word	0x40013800
 8004b04:	40020000 	.word	0x40020000
 8004b08:	40020400 	.word	0x40020400
 8004b0c:	40020800 	.word	0x40020800
 8004b10:	40020c00 	.word	0x40020c00
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40021400 	.word	0x40021400
 8004b1c:	40021800 	.word	0x40021800
 8004b20:	40013c00 	.word	0x40013c00

08004b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
 8004b30:	4613      	mov	r3, r2
 8004b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b34:	787b      	ldrb	r3, [r7, #1]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b3a:	887a      	ldrh	r2, [r7, #2]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b40:	e003      	b.n	8004b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b42:	887b      	ldrh	r3, [r7, #2]
 8004b44:	041a      	lsls	r2, r3, #16
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	619a      	str	r2, [r3, #24]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b68:	887a      	ldrh	r2, [r7, #2]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	041a      	lsls	r2, r3, #16
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	43d9      	mvns	r1, r3
 8004b74:	887b      	ldrh	r3, [r7, #2]
 8004b76:	400b      	ands	r3, r1
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	619a      	str	r2, [r3, #24]
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e12b      	b.n	8004df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fd f8d6 	bl	8001d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2224      	movs	r2, #36	@ 0x24
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f000 fdac 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8004bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4a81      	ldr	r2, [pc, #516]	@ (8004e00 <HAL_I2C_Init+0x274>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d807      	bhi.n	8004c10 <HAL_I2C_Init+0x84>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a80      	ldr	r2, [pc, #512]	@ (8004e04 <HAL_I2C_Init+0x278>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bf94      	ite	ls
 8004c08:	2301      	movls	r3, #1
 8004c0a:	2300      	movhi	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e006      	b.n	8004c1e <HAL_I2C_Init+0x92>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a7d      	ldr	r2, [pc, #500]	@ (8004e08 <HAL_I2C_Init+0x27c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	bf94      	ite	ls
 8004c18:	2301      	movls	r3, #1
 8004c1a:	2300      	movhi	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0e7      	b.n	8004df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a78      	ldr	r2, [pc, #480]	@ (8004e0c <HAL_I2C_Init+0x280>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	0c9b      	lsrs	r3, r3, #18
 8004c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a6a      	ldr	r2, [pc, #424]	@ (8004e00 <HAL_I2C_Init+0x274>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d802      	bhi.n	8004c60 <HAL_I2C_Init+0xd4>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	e009      	b.n	8004c74 <HAL_I2C_Init+0xe8>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	4a69      	ldr	r2, [pc, #420]	@ (8004e10 <HAL_I2C_Init+0x284>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	3301      	adds	r3, #1
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	495c      	ldr	r1, [pc, #368]	@ (8004e00 <HAL_I2C_Init+0x274>)
 8004c90:	428b      	cmp	r3, r1
 8004c92:	d819      	bhi.n	8004cc8 <HAL_I2C_Init+0x13c>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1e59      	subs	r1, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca2:	1c59      	adds	r1, r3, #1
 8004ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ca8:	400b      	ands	r3, r1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_I2C_Init+0x138>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1e59      	subs	r1, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc2:	e051      	b.n	8004d68 <HAL_I2C_Init+0x1dc>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	e04f      	b.n	8004d68 <HAL_I2C_Init+0x1dc>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d111      	bne.n	8004cf4 <HAL_I2C_Init+0x168>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1e58      	subs	r0, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	440b      	add	r3, r1
 8004cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e012      	b.n	8004d1a <HAL_I2C_Init+0x18e>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1e58      	subs	r0, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	0099      	lsls	r1, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_Init+0x196>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e022      	b.n	8004d68 <HAL_I2C_Init+0x1dc>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10e      	bne.n	8004d48 <HAL_I2C_Init+0x1bc>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1e58      	subs	r0, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	440b      	add	r3, r1
 8004d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d46:	e00f      	b.n	8004d68 <HAL_I2C_Init+0x1dc>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1e58      	subs	r0, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6859      	ldr	r1, [r3, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	0099      	lsls	r1, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	6809      	ldr	r1, [r1, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6911      	ldr	r1, [r2, #16]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68d2      	ldr	r2, [r2, #12]
 8004da2:	4311      	orrs	r1, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	000186a0 	.word	0x000186a0
 8004e04:	001e847f 	.word	0x001e847f
 8004e08:	003d08ff 	.word	0x003d08ff
 8004e0c:	431bde83 	.word	0x431bde83
 8004e10:	10624dd3 	.word	0x10624dd3

08004e14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	460b      	mov	r3, r1
 8004e22:	817b      	strh	r3, [r7, #10]
 8004e24:	4613      	mov	r3, r2
 8004e26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e28:	f7fe fafa 	bl	8003420 <HAL_GetTick>
 8004e2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	f040 80e0 	bne.w	8004ffc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2319      	movs	r3, #25
 8004e42:	2201      	movs	r2, #1
 8004e44:	4970      	ldr	r1, [pc, #448]	@ (8005008 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f964 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0d3      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_I2C_Master_Transmit+0x50>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0cc      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d007      	beq.n	8004e8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2221      	movs	r2, #33	@ 0x21
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	893a      	ldrh	r2, [r7, #8]
 8004eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a50      	ldr	r2, [pc, #320]	@ (800500c <HAL_I2C_Master_Transmit+0x1f8>)
 8004eca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ecc:	8979      	ldrh	r1, [r7, #10]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6a3a      	ldr	r2, [r7, #32]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f89c 	bl	8005010 <I2C_MasterRequestWrite>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e08d      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ef8:	e066      	b.n	8004fc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	6a39      	ldr	r1, [r7, #32]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fa22 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d107      	bne.n	8004f22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e06b      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d11b      	bne.n	8004f9c <HAL_I2C_Master_Transmit+0x188>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d017      	beq.n	8004f9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	6a39      	ldr	r1, [r7, #32]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fa19 	bl	80053d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d107      	bne.n	8004fc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e01a      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d194      	bne.n	8004efa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	00100002 	.word	0x00100002
 800500c:	ffff0000 	.word	0xffff0000

08005010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	460b      	mov	r3, r1
 800501e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d006      	beq.n	800503a <I2C_MasterRequestWrite+0x2a>
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d003      	beq.n	800503a <I2C_MasterRequestWrite+0x2a>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005038:	d108      	bne.n	800504c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e00b      	b.n	8005064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005050:	2b12      	cmp	r3, #18
 8005052:	d107      	bne.n	8005064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f84f 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800508a:	d103      	bne.n	8005094 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e035      	b.n	8005104 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050a0:	d108      	bne.n	80050b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050a2:	897b      	ldrh	r3, [r7, #10]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050b0:	611a      	str	r2, [r3, #16]
 80050b2:	e01b      	b.n	80050ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050b4:	897b      	ldrh	r3, [r7, #10]
 80050b6:	11db      	asrs	r3, r3, #7
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f003 0306 	and.w	r3, r3, #6
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f063 030f 	orn	r3, r3, #15
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	490e      	ldr	r1, [pc, #56]	@ (800510c <I2C_MasterRequestWrite+0xfc>)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f898 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e010      	b.n	8005104 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4907      	ldr	r1, [pc, #28]	@ (8005110 <I2C_MasterRequestWrite+0x100>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f888 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	00010008 	.word	0x00010008
 8005110:	00010002 	.word	0x00010002

08005114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005124:	e048      	b.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800512c:	d044      	beq.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512e:	f7fe f977 	bl	8003420 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d139      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10d      	bne.n	800516a <I2C_WaitOnFlagUntilTimeout+0x56>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	43da      	mvns	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	e00c      	b.n	8005184 <I2C_WaitOnFlagUntilTimeout+0x70>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	43da      	mvns	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4013      	ands	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	429a      	cmp	r2, r3
 8005188:	d116      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e023      	b.n	8005200 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10d      	bne.n	80051de <I2C_WaitOnFlagUntilTimeout+0xca>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	43da      	mvns	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	e00c      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	43da      	mvns	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d093      	beq.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005216:	e071      	b.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005226:	d123      	bne.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005236:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	f043 0204 	orr.w	r2, r3, #4
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e067      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005276:	d041      	beq.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005278:	f7fe f8d2 	bl	8003420 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d136      	bne.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e00b      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e021      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10c      	bne.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	43da      	mvns	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e00b      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	43da      	mvns	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf14      	ite	ne
 8005332:	2301      	movne	r3, #1
 8005334:	2300      	moveq	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f af6d 	bne.w	8005218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005354:	e034      	b.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f886 	bl	8005468 <I2C_IsAcknowledgeFailed>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e034      	b.n	80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800536c:	d028      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fe f857 	bl	8003420 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11d      	bne.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538e:	2b80      	cmp	r3, #128	@ 0x80
 8005390:	d016      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e007      	b.n	80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ca:	2b80      	cmp	r3, #128	@ 0x80
 80053cc:	d1c3      	bne.n	8005356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e4:	e034      	b.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f83e 	bl	8005468 <I2C_IsAcknowledgeFailed>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e034      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053fc:	d028      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fe f80f 	bl	8003420 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11d      	bne.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b04      	cmp	r3, #4
 8005420:	d016      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e007      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d1c3      	bne.n	80053e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547e:	d11b      	bne.n	80054b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	f043 0204 	orr.w	r2, r3, #4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	4b20      	ldr	r3, [pc, #128]	@ (8005558 <HAL_PWREx_EnableOverDrive+0x90>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <HAL_PWREx_EnableOverDrive+0x90>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <HAL_PWREx_EnableOverDrive+0x90>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054ee:	4b1b      	ldr	r3, [pc, #108]	@ (800555c <HAL_PWREx_EnableOverDrive+0x94>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054f4:	f7fd ff94 	bl	8003420 <HAL_GetTick>
 80054f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054fa:	e009      	b.n	8005510 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054fc:	f7fd ff90 	bl	8003420 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800550a:	d901      	bls.n	8005510 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e01f      	b.n	8005550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005510:	4b13      	ldr	r3, [pc, #76]	@ (8005560 <HAL_PWREx_EnableOverDrive+0x98>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551c:	d1ee      	bne.n	80054fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800551e:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005524:	f7fd ff7c 	bl	8003420 <HAL_GetTick>
 8005528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800552a:	e009      	b.n	8005540 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800552c:	f7fd ff78 	bl	8003420 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800553a:	d901      	bls.n	8005540 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e007      	b.n	8005550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005540:	4b07      	ldr	r3, [pc, #28]	@ (8005560 <HAL_PWREx_EnableOverDrive+0x98>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800554c:	d1ee      	bne.n	800552c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40023800 	.word	0x40023800
 800555c:	420e0040 	.word	0x420e0040
 8005560:	40007000 	.word	0x40007000
 8005564:	420e0044 	.word	0x420e0044

08005568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0cc      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800557c:	4b68      	ldr	r3, [pc, #416]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d90c      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b65      	ldr	r3, [pc, #404]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b63      	ldr	r3, [pc, #396]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0b8      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055bc:	4b59      	ldr	r3, [pc, #356]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a58      	ldr	r2, [pc, #352]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d4:	4b53      	ldr	r3, [pc, #332]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a52      	ldr	r2, [pc, #328]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b50      	ldr	r3, [pc, #320]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	494d      	ldr	r1, [pc, #308]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d044      	beq.n	8005688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	4b47      	ldr	r3, [pc, #284]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d119      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e07f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d003      	beq.n	8005626 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005622:	2b03      	cmp	r3, #3
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005626:	4b3f      	ldr	r3, [pc, #252]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e06f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005636:	4b3b      	ldr	r3, [pc, #236]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e067      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005646:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4934      	ldr	r1, [pc, #208]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005658:	f7fd fee2 	bl	8003420 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005660:	f7fd fede 	bl	8003420 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e04f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	4b2b      	ldr	r3, [pc, #172]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 020c 	and.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1eb      	bne.n	8005660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b25      	ldr	r3, [pc, #148]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d20c      	bcs.n	80056b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b22      	ldr	r3, [pc, #136]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b20      	ldr	r3, [pc, #128]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e032      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056bc:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4916      	ldr	r1, [pc, #88]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056da:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	490e      	ldr	r1, [pc, #56]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056ee:	f000 f855 	bl	800579c <HAL_RCC_GetSysClockFreq>
 80056f2:	4602      	mov	r2, r0
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	490a      	ldr	r1, [pc, #40]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005700:	5ccb      	ldrb	r3, [r1, r3]
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	4a09      	ldr	r2, [pc, #36]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800570a:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <HAL_RCC_ClockConfig+0x1c8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f7fd fe42 	bl	8003398 <HAL_InitTick>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40023c00 	.word	0x40023c00
 8005724:	40023800 	.word	0x40023800
 8005728:	0800aef0 	.word	0x0800aef0
 800572c:	20000000 	.word	0x20000000
 8005730:	20000004 	.word	0x20000004

08005734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005738:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <HAL_RCC_GetHCLKFreq+0x14>)
 800573a:	681b      	ldr	r3, [r3, #0]
}
 800573c:	4618      	mov	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000000 	.word	0x20000000

0800574c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005750:	f7ff fff0 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b05      	ldr	r3, [pc, #20]	@ (800576c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0a9b      	lsrs	r3, r3, #10
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4903      	ldr	r1, [pc, #12]	@ (8005770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005768:	4618      	mov	r0, r3
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40023800 	.word	0x40023800
 8005770:	0800af00 	.word	0x0800af00

08005774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005778:	f7ff ffdc 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	0b5b      	lsrs	r3, r3, #13
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	4903      	ldr	r1, [pc, #12]	@ (8005798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40023800 	.word	0x40023800
 8005798:	0800af00 	.word	0x0800af00

0800579c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800579c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a0:	b0a6      	sub	sp, #152	@ 0x98
 80057a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c2:	4bc8      	ldr	r3, [pc, #800]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b0c      	cmp	r3, #12
 80057cc:	f200 817e 	bhi.w	8005acc <HAL_RCC_GetSysClockFreq+0x330>
 80057d0:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	0800580d 	.word	0x0800580d
 80057dc:	08005acd 	.word	0x08005acd
 80057e0:	08005acd 	.word	0x08005acd
 80057e4:	08005acd 	.word	0x08005acd
 80057e8:	08005815 	.word	0x08005815
 80057ec:	08005acd 	.word	0x08005acd
 80057f0:	08005acd 	.word	0x08005acd
 80057f4:	08005acd 	.word	0x08005acd
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005acd 	.word	0x08005acd
 8005800:	08005acd 	.word	0x08005acd
 8005804:	08005acd 	.word	0x08005acd
 8005808:	08005987 	.word	0x08005987
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800580c:	4bb6      	ldr	r3, [pc, #728]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800580e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005812:	e15f      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005814:	4bb5      	ldr	r3, [pc, #724]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x350>)
 8005816:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800581a:	e15b      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800581c:	4bb1      	ldr	r3, [pc, #708]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005824:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005828:	4bae      	ldr	r3, [pc, #696]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d031      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005834:	4bab      	ldr	r3, [pc, #684]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	2200      	movs	r2, #0
 800583c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800583e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005846:	663b      	str	r3, [r7, #96]	@ 0x60
 8005848:	2300      	movs	r3, #0
 800584a:	667b      	str	r3, [r7, #100]	@ 0x64
 800584c:	4ba7      	ldr	r3, [pc, #668]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x350>)
 800584e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005852:	462a      	mov	r2, r5
 8005854:	fb03 f202 	mul.w	r2, r3, r2
 8005858:	2300      	movs	r3, #0
 800585a:	4621      	mov	r1, r4
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4413      	add	r3, r2
 8005862:	4aa2      	ldr	r2, [pc, #648]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x350>)
 8005864:	4621      	mov	r1, r4
 8005866:	fba1 1202 	umull	r1, r2, r1, r2
 800586a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800586c:	460a      	mov	r2, r1
 800586e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005870:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005872:	4413      	add	r3, r2
 8005874:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800587a:	2200      	movs	r2, #0
 800587c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800587e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005880:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005884:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005888:	f7fb fa1e 	bl	8000cc8 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005896:	e064      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005898:	4b92      	ldr	r3, [pc, #584]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	099b      	lsrs	r3, r3, #6
 800589e:	2200      	movs	r2, #0
 80058a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80058a2:	657a      	str	r2, [r7, #84]	@ 0x54
 80058a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ac:	2300      	movs	r3, #0
 80058ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80058b4:	4622      	mov	r2, r4
 80058b6:	462b      	mov	r3, r5
 80058b8:	f04f 0000 	mov.w	r0, #0
 80058bc:	f04f 0100 	mov.w	r1, #0
 80058c0:	0159      	lsls	r1, r3, #5
 80058c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c6:	0150      	lsls	r0, r2, #5
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4621      	mov	r1, r4
 80058ce:	1a51      	subs	r1, r2, r1
 80058d0:	6139      	str	r1, [r7, #16]
 80058d2:	4629      	mov	r1, r5
 80058d4:	eb63 0301 	sbc.w	r3, r3, r1
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058e6:	4659      	mov	r1, fp
 80058e8:	018b      	lsls	r3, r1, #6
 80058ea:	4651      	mov	r1, sl
 80058ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058f0:	4651      	mov	r1, sl
 80058f2:	018a      	lsls	r2, r1, #6
 80058f4:	4651      	mov	r1, sl
 80058f6:	ebb2 0801 	subs.w	r8, r2, r1
 80058fa:	4659      	mov	r1, fp
 80058fc:	eb63 0901 	sbc.w	r9, r3, r1
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800590c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005910:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005914:	4690      	mov	r8, r2
 8005916:	4699      	mov	r9, r3
 8005918:	4623      	mov	r3, r4
 800591a:	eb18 0303 	adds.w	r3, r8, r3
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	462b      	mov	r3, r5
 8005922:	eb49 0303 	adc.w	r3, r9, r3
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005934:	4629      	mov	r1, r5
 8005936:	028b      	lsls	r3, r1, #10
 8005938:	4621      	mov	r1, r4
 800593a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800593e:	4621      	mov	r1, r4
 8005940:	028a      	lsls	r2, r1, #10
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800594a:	2200      	movs	r2, #0
 800594c:	643b      	str	r3, [r7, #64]	@ 0x40
 800594e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005954:	f7fb f9b8 	bl	8000cc8 <__aeabi_uldivmod>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4613      	mov	r3, r2
 800595e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005962:	4b60      	ldr	r3, [pc, #384]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	0c1b      	lsrs	r3, r3, #16
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	3301      	adds	r3, #1
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005974:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005984:	e0a6      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005986:	4b57      	ldr	r3, [pc, #348]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800598e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005992:	4b54      	ldr	r3, [pc, #336]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d02a      	beq.n	80059f4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800599e:	4b51      	ldr	r3, [pc, #324]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	099b      	lsrs	r3, r3, #6
 80059a4:	2200      	movs	r2, #0
 80059a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059b0:	2100      	movs	r1, #0
 80059b2:	4b4e      	ldr	r3, [pc, #312]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x350>)
 80059b4:	fb03 f201 	mul.w	r2, r3, r1
 80059b8:	2300      	movs	r3, #0
 80059ba:	fb00 f303 	mul.w	r3, r0, r3
 80059be:	4413      	add	r3, r2
 80059c0:	4a4a      	ldr	r2, [pc, #296]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x350>)
 80059c2:	fba0 1202 	umull	r1, r2, r0, r2
 80059c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059c8:	460a      	mov	r2, r1
 80059ca:	673a      	str	r2, [r7, #112]	@ 0x70
 80059cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80059ce:	4413      	add	r3, r2
 80059d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80059d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059d6:	2200      	movs	r2, #0
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059da:	637a      	str	r2, [r7, #52]	@ 0x34
 80059dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80059e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80059e4:	f7fb f970 	bl	8000cc8 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059f2:	e05b      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	099b      	lsrs	r3, r3, #6
 80059fa:	2200      	movs	r2, #0
 80059fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	623b      	str	r3, [r7, #32]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	f04f 0000 	mov.w	r0, #0
 8005a18:	f04f 0100 	mov.w	r1, #0
 8005a1c:	0159      	lsls	r1, r3, #5
 8005a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a22:	0150      	lsls	r0, r2, #5
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4641      	mov	r1, r8
 8005a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a2e:	4649      	mov	r1, r9
 8005a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a48:	ebb2 040a 	subs.w	r4, r2, sl
 8005a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	00eb      	lsls	r3, r5, #3
 8005a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a5e:	00e2      	lsls	r2, r4, #3
 8005a60:	4614      	mov	r4, r2
 8005a62:	461d      	mov	r5, r3
 8005a64:	4643      	mov	r3, r8
 8005a66:	18e3      	adds	r3, r4, r3
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	eb45 0303 	adc.w	r3, r5, r3
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7e:	4629      	mov	r1, r5
 8005a80:	028b      	lsls	r3, r1, #10
 8005a82:	4621      	mov	r1, r4
 8005a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a88:	4621      	mov	r1, r4
 8005a8a:	028a      	lsls	r2, r1, #10
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a94:	2200      	movs	r2, #0
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	61fa      	str	r2, [r7, #28]
 8005a9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a9e:	f7fb f913 	bl	8000cc8 <__aeabi_uldivmod>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005aac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	0f1b      	lsrs	r3, r3, #28
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005aba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005aca:	e003      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005acc:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005ace:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005ad2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3798      	adds	r7, #152	@ 0x98
 8005adc:	46bd      	mov	sp, r7
 8005ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	00f42400 	.word	0x00f42400
 8005aec:	017d7840 	.word	0x017d7840

08005af0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e28d      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8083 	beq.w	8005c16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b10:	4b94      	ldr	r3, [pc, #592]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d019      	beq.n	8005b50 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005b1c:	4b91      	ldr	r3, [pc, #580]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 030c 	and.w	r3, r3, #12
        || \
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d106      	bne.n	8005b36 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005b28:	4b8e      	ldr	r3, [pc, #568]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b34:	d00c      	beq.n	8005b50 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b36:	4b8b      	ldr	r3, [pc, #556]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005b3e:	2b0c      	cmp	r3, #12
 8005b40:	d112      	bne.n	8005b68 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b42:	4b88      	ldr	r3, [pc, #544]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b4e:	d10b      	bne.n	8005b68 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	4b84      	ldr	r3, [pc, #528]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05b      	beq.n	8005c14 <HAL_RCC_OscConfig+0x124>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d157      	bne.n	8005c14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e25a      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b70:	d106      	bne.n	8005b80 <HAL_RCC_OscConfig+0x90>
 8005b72:	4b7c      	ldr	r3, [pc, #496]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a7b      	ldr	r2, [pc, #492]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e01d      	b.n	8005bbc <HAL_RCC_OscConfig+0xcc>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0xb4>
 8005b8a:	4b76      	ldr	r3, [pc, #472]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a75      	ldr	r2, [pc, #468]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b73      	ldr	r3, [pc, #460]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a72      	ldr	r2, [pc, #456]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e00b      	b.n	8005bbc <HAL_RCC_OscConfig+0xcc>
 8005ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d013      	beq.n	8005bec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc4:	f7fd fc2c 	bl	8003420 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fd fc28 	bl	8003420 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	@ 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e21f      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	4b61      	ldr	r3, [pc, #388]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0xdc>
 8005bea:	e014      	b.n	8005c16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fd fc18 	bl	8003420 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fd fc14 	bl	8003420 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	@ 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e20b      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c06:	4b57      	ldr	r3, [pc, #348]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x104>
 8005c12:	e000      	b.n	8005c16 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d06f      	beq.n	8005d02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c22:	4b50      	ldr	r3, [pc, #320]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d017      	beq.n	8005c5e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 030c 	and.w	r3, r3, #12
        || \
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d105      	bne.n	8005c46 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c46:	4b47      	ldr	r3, [pc, #284]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005c4e:	2b0c      	cmp	r3, #12
 8005c50:	d11c      	bne.n	8005c8c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c52:	4b44      	ldr	r3, [pc, #272]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d116      	bne.n	8005c8c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5e:	4b41      	ldr	r3, [pc, #260]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_RCC_OscConfig+0x186>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d001      	beq.n	8005c76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e1d3      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c76:	4b3b      	ldr	r3, [pc, #236]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4937      	ldr	r1, [pc, #220]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c8a:	e03a      	b.n	8005d02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d020      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c94:	4b34      	ldr	r3, [pc, #208]	@ (8005d68 <HAL_RCC_OscConfig+0x278>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fd fbc1 	bl	8003420 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca2:	f7fd fbbd 	bl	8003420 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e1b4      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc0:	4b28      	ldr	r3, [pc, #160]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4925      	ldr	r1, [pc, #148]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	600b      	str	r3, [r1, #0]
 8005cd4:	e015      	b.n	8005d02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd6:	4b24      	ldr	r3, [pc, #144]	@ (8005d68 <HAL_RCC_OscConfig+0x278>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fd fba0 	bl	8003420 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce4:	f7fd fb9c 	bl	8003420 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e193      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1f0      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d036      	beq.n	8005d7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d16:	4b15      	ldr	r3, [pc, #84]	@ (8005d6c <HAL_RCC_OscConfig+0x27c>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fd fb80 	bl	8003420 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d24:	f7fd fb7c 	bl	8003420 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e173      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d36:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x234>
 8005d42:	e01b      	b.n	8005d7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d44:	4b09      	ldr	r3, [pc, #36]	@ (8005d6c <HAL_RCC_OscConfig+0x27c>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fd fb69 	bl	8003420 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d50:	e00e      	b.n	8005d70 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d52:	f7fd fb65 	bl	8003420 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d907      	bls.n	8005d70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e15c      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
 8005d64:	40023800 	.word	0x40023800
 8005d68:	42470000 	.word	0x42470000
 8005d6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d70:	4b8a      	ldr	r3, [pc, #552]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1ea      	bne.n	8005d52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8097 	beq.w	8005eb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d8e:	4b83      	ldr	r3, [pc, #524]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	4a7e      	ldr	r2, [pc, #504]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005daa:	4b7c      	ldr	r3, [pc, #496]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db6:	2301      	movs	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dba:	4b79      	ldr	r3, [pc, #484]	@ (8005fa0 <HAL_RCC_OscConfig+0x4b0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d118      	bne.n	8005df8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dc6:	4b76      	ldr	r3, [pc, #472]	@ (8005fa0 <HAL_RCC_OscConfig+0x4b0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a75      	ldr	r2, [pc, #468]	@ (8005fa0 <HAL_RCC_OscConfig+0x4b0>)
 8005dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd2:	f7fd fb25 	bl	8003420 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dda:	f7fd fb21 	bl	8003420 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e118      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dec:	4b6c      	ldr	r3, [pc, #432]	@ (8005fa0 <HAL_RCC_OscConfig+0x4b0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d106      	bne.n	8005e0e <HAL_RCC_OscConfig+0x31e>
 8005e00:	4b66      	ldr	r3, [pc, #408]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e04:	4a65      	ldr	r2, [pc, #404]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0c:	e01c      	b.n	8005e48 <HAL_RCC_OscConfig+0x358>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x340>
 8005e16:	4b61      	ldr	r3, [pc, #388]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	4a60      	ldr	r2, [pc, #384]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e1c:	f043 0304 	orr.w	r3, r3, #4
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e22:	4b5e      	ldr	r3, [pc, #376]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e26:	4a5d      	ldr	r2, [pc, #372]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e2e:	e00b      	b.n	8005e48 <HAL_RCC_OscConfig+0x358>
 8005e30:	4b5a      	ldr	r3, [pc, #360]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e34:	4a59      	ldr	r2, [pc, #356]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e3c:	4b57      	ldr	r3, [pc, #348]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e40:	4a56      	ldr	r2, [pc, #344]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e42:	f023 0304 	bic.w	r3, r3, #4
 8005e46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d015      	beq.n	8005e7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e50:	f7fd fae6 	bl	8003420 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e56:	e00a      	b.n	8005e6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f7fd fae2 	bl	8003420 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e0d7      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0ee      	beq.n	8005e58 <HAL_RCC_OscConfig+0x368>
 8005e7a:	e014      	b.n	8005ea6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fd fad0 	bl	8003420 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e84:	f7fd facc 	bl	8003420 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e0c1      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e9a:	4b40      	ldr	r3, [pc, #256]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1ee      	bne.n	8005e84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d105      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eac:	4b3b      	ldr	r3, [pc, #236]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80ad 	beq.w	800601c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ec2:	4b36      	ldr	r3, [pc, #216]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d060      	beq.n	8005f90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d145      	bne.n	8005f62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed6:	4b33      	ldr	r3, [pc, #204]	@ (8005fa4 <HAL_RCC_OscConfig+0x4b4>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005edc:	f7fd faa0 	bl	8003420 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee4:	f7fd fa9c 	bl	8003420 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e093      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef6:	4b29      	ldr	r3, [pc, #164]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69da      	ldr	r2, [r3, #28]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	019b      	lsls	r3, r3, #6
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	061b      	lsls	r3, r3, #24
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2c:	071b      	lsls	r3, r3, #28
 8005f2e:	491b      	ldr	r1, [pc, #108]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f34:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <HAL_RCC_OscConfig+0x4b4>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3a:	f7fd fa71 	bl	8003420 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f42:	f7fd fa6d 	bl	8003420 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e064      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f54:	4b11      	ldr	r3, [pc, #68]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x452>
 8005f60:	e05c      	b.n	800601c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <HAL_RCC_OscConfig+0x4b4>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fd fa5a 	bl	8003420 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f70:	f7fd fa56 	bl	8003420 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e04d      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f82:	4b06      	ldr	r3, [pc, #24]	@ (8005f9c <HAL_RCC_OscConfig+0x4ac>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x480>
 8005f8e:	e045      	b.n	800601c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d107      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e040      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	40007000 	.word	0x40007000
 8005fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8006028 <HAL_RCC_OscConfig+0x538>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d030      	beq.n	8006018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d129      	bne.n	8006018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d122      	bne.n	8006018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005fd8:	4013      	ands	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d119      	bne.n	8006018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d10f      	bne.n	8006018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d107      	bne.n	8006018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800

0800602c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e07b      	b.n	8006136 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800604e:	d009      	beq.n	8006064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	61da      	str	r2, [r3, #28]
 8006056:	e005      	b.n	8006064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fb feda 	bl	8001e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800609a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e8:	ea42 0103 	orr.w	r1, r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	f003 0104 	and.w	r1, r3, #4
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	f003 0210 	and.w	r2, r3, #16
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006124:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e042      	b.n	80061d6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7fb fecf 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2224      	movs	r2, #36	@ 0x24
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006180:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f82c 	bl	80061e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006196:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061e4:	b0c0      	sub	sp, #256	@ 0x100
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fc:	68d9      	ldr	r1, [r3, #12]
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	ea40 0301 	orr.w	r3, r0, r1
 8006208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	431a      	orrs	r2, r3
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	431a      	orrs	r2, r3
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006238:	f021 010c 	bic.w	r1, r1, #12
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006246:	430b      	orrs	r3, r1
 8006248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625a:	6999      	ldr	r1, [r3, #24]
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	ea40 0301 	orr.w	r3, r0, r1
 8006266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4b8f      	ldr	r3, [pc, #572]	@ (80064ac <UART_SetConfig+0x2cc>)
 8006270:	429a      	cmp	r2, r3
 8006272:	d005      	beq.n	8006280 <UART_SetConfig+0xa0>
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b8d      	ldr	r3, [pc, #564]	@ (80064b0 <UART_SetConfig+0x2d0>)
 800627c:	429a      	cmp	r2, r3
 800627e:	d104      	bne.n	800628a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006280:	f7ff fa78 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 8006284:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006288:	e003      	b.n	8006292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800628a:	f7ff fa5f 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 800628e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800629c:	f040 810c 	bne.w	80064b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062b2:	4622      	mov	r2, r4
 80062b4:	462b      	mov	r3, r5
 80062b6:	1891      	adds	r1, r2, r2
 80062b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80062ba:	415b      	adcs	r3, r3
 80062bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062c2:	4621      	mov	r1, r4
 80062c4:	eb12 0801 	adds.w	r8, r2, r1
 80062c8:	4629      	mov	r1, r5
 80062ca:	eb43 0901 	adc.w	r9, r3, r1
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062e2:	4690      	mov	r8, r2
 80062e4:	4699      	mov	r9, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	eb18 0303 	adds.w	r3, r8, r3
 80062ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062f0:	462b      	mov	r3, r5
 80062f2:	eb49 0303 	adc.w	r3, r9, r3
 80062f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006306:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800630a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800630e:	460b      	mov	r3, r1
 8006310:	18db      	adds	r3, r3, r3
 8006312:	653b      	str	r3, [r7, #80]	@ 0x50
 8006314:	4613      	mov	r3, r2
 8006316:	eb42 0303 	adc.w	r3, r2, r3
 800631a:	657b      	str	r3, [r7, #84]	@ 0x54
 800631c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006324:	f7fa fcd0 	bl	8000cc8 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4b61      	ldr	r3, [pc, #388]	@ (80064b4 <UART_SetConfig+0x2d4>)
 800632e:	fba3 2302 	umull	r2, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	011c      	lsls	r4, r3, #4
 8006336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800633a:	2200      	movs	r2, #0
 800633c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006340:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	1891      	adds	r1, r2, r2
 800634e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006350:	415b      	adcs	r3, r3
 8006352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006358:	4641      	mov	r1, r8
 800635a:	eb12 0a01 	adds.w	sl, r2, r1
 800635e:	4649      	mov	r1, r9
 8006360:	eb43 0b01 	adc.w	fp, r3, r1
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006378:	4692      	mov	sl, r2
 800637a:	469b      	mov	fp, r3
 800637c:	4643      	mov	r3, r8
 800637e:	eb1a 0303 	adds.w	r3, sl, r3
 8006382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006386:	464b      	mov	r3, r9
 8006388:	eb4b 0303 	adc.w	r3, fp, r3
 800638c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800639c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063a4:	460b      	mov	r3, r1
 80063a6:	18db      	adds	r3, r3, r3
 80063a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063aa:	4613      	mov	r3, r2
 80063ac:	eb42 0303 	adc.w	r3, r2, r3
 80063b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80063b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80063ba:	f7fa fc85 	bl	8000cc8 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	4b3b      	ldr	r3, [pc, #236]	@ (80064b4 <UART_SetConfig+0x2d4>)
 80063c6:	fba3 2301 	umull	r2, r3, r3, r1
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	2264      	movs	r2, #100	@ 0x64
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	1acb      	subs	r3, r1, r3
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80063da:	4b36      	ldr	r3, [pc, #216]	@ (80064b4 <UART_SetConfig+0x2d4>)
 80063dc:	fba3 2302 	umull	r2, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80063e8:	441c      	add	r4, r3
 80063ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80063f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80063fc:	4642      	mov	r2, r8
 80063fe:	464b      	mov	r3, r9
 8006400:	1891      	adds	r1, r2, r2
 8006402:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006404:	415b      	adcs	r3, r3
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800640c:	4641      	mov	r1, r8
 800640e:	1851      	adds	r1, r2, r1
 8006410:	6339      	str	r1, [r7, #48]	@ 0x30
 8006412:	4649      	mov	r1, r9
 8006414:	414b      	adcs	r3, r1
 8006416:	637b      	str	r3, [r7, #52]	@ 0x34
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006424:	4659      	mov	r1, fp
 8006426:	00cb      	lsls	r3, r1, #3
 8006428:	4651      	mov	r1, sl
 800642a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642e:	4651      	mov	r1, sl
 8006430:	00ca      	lsls	r2, r1, #3
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	4603      	mov	r3, r0
 8006438:	4642      	mov	r2, r8
 800643a:	189b      	adds	r3, r3, r2
 800643c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006440:	464b      	mov	r3, r9
 8006442:	460a      	mov	r2, r1
 8006444:	eb42 0303 	adc.w	r3, r2, r3
 8006448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006458:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800645c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006460:	460b      	mov	r3, r1
 8006462:	18db      	adds	r3, r3, r3
 8006464:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006466:	4613      	mov	r3, r2
 8006468:	eb42 0303 	adc.w	r3, r2, r3
 800646c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800646e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006476:	f7fa fc27 	bl	8000cc8 <__aeabi_uldivmod>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4b0d      	ldr	r3, [pc, #52]	@ (80064b4 <UART_SetConfig+0x2d4>)
 8006480:	fba3 1302 	umull	r1, r3, r3, r2
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	2164      	movs	r1, #100	@ 0x64
 8006488:	fb01 f303 	mul.w	r3, r1, r3
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	3332      	adds	r3, #50	@ 0x32
 8006492:	4a08      	ldr	r2, [pc, #32]	@ (80064b4 <UART_SetConfig+0x2d4>)
 8006494:	fba2 2303 	umull	r2, r3, r2, r3
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	f003 0207 	and.w	r2, r3, #7
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4422      	add	r2, r4
 80064a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064a8:	e106      	b.n	80066b8 <UART_SetConfig+0x4d8>
 80064aa:	bf00      	nop
 80064ac:	40011000 	.word	0x40011000
 80064b0:	40011400 	.word	0x40011400
 80064b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80064c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80064ca:	4642      	mov	r2, r8
 80064cc:	464b      	mov	r3, r9
 80064ce:	1891      	adds	r1, r2, r2
 80064d0:	6239      	str	r1, [r7, #32]
 80064d2:	415b      	adcs	r3, r3
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064da:	4641      	mov	r1, r8
 80064dc:	1854      	adds	r4, r2, r1
 80064de:	4649      	mov	r1, r9
 80064e0:	eb43 0501 	adc.w	r5, r3, r1
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	00eb      	lsls	r3, r5, #3
 80064ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064f2:	00e2      	lsls	r2, r4, #3
 80064f4:	4614      	mov	r4, r2
 80064f6:	461d      	mov	r5, r3
 80064f8:	4643      	mov	r3, r8
 80064fa:	18e3      	adds	r3, r4, r3
 80064fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006500:	464b      	mov	r3, r9
 8006502:	eb45 0303 	adc.w	r3, r5, r3
 8006506:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006516:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006526:	4629      	mov	r1, r5
 8006528:	008b      	lsls	r3, r1, #2
 800652a:	4621      	mov	r1, r4
 800652c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006530:	4621      	mov	r1, r4
 8006532:	008a      	lsls	r2, r1, #2
 8006534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006538:	f7fa fbc6 	bl	8000cc8 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4b60      	ldr	r3, [pc, #384]	@ (80066c4 <UART_SetConfig+0x4e4>)
 8006542:	fba3 2302 	umull	r2, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	011c      	lsls	r4, r3, #4
 800654a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006554:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	1891      	adds	r1, r2, r2
 8006562:	61b9      	str	r1, [r7, #24]
 8006564:	415b      	adcs	r3, r3
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800656c:	4641      	mov	r1, r8
 800656e:	1851      	adds	r1, r2, r1
 8006570:	6139      	str	r1, [r7, #16]
 8006572:	4649      	mov	r1, r9
 8006574:	414b      	adcs	r3, r1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006584:	4659      	mov	r1, fp
 8006586:	00cb      	lsls	r3, r1, #3
 8006588:	4651      	mov	r1, sl
 800658a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800658e:	4651      	mov	r1, sl
 8006590:	00ca      	lsls	r2, r1, #3
 8006592:	4610      	mov	r0, r2
 8006594:	4619      	mov	r1, r3
 8006596:	4603      	mov	r3, r0
 8006598:	4642      	mov	r2, r8
 800659a:	189b      	adds	r3, r3, r2
 800659c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065a0:	464b      	mov	r3, r9
 80065a2:	460a      	mov	r2, r1
 80065a4:	eb42 0303 	adc.w	r3, r2, r3
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80065c4:	4649      	mov	r1, r9
 80065c6:	008b      	lsls	r3, r1, #2
 80065c8:	4641      	mov	r1, r8
 80065ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ce:	4641      	mov	r1, r8
 80065d0:	008a      	lsls	r2, r1, #2
 80065d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80065d6:	f7fa fb77 	bl	8000cc8 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	4b38      	ldr	r3, [pc, #224]	@ (80066c4 <UART_SetConfig+0x4e4>)
 80065e2:	fba3 2301 	umull	r2, r3, r3, r1
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	2264      	movs	r2, #100	@ 0x64
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	1acb      	subs	r3, r1, r3
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	3332      	adds	r3, #50	@ 0x32
 80065f4:	4a33      	ldr	r2, [pc, #204]	@ (80066c4 <UART_SetConfig+0x4e4>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006600:	441c      	add	r4, r3
 8006602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006606:	2200      	movs	r2, #0
 8006608:	673b      	str	r3, [r7, #112]	@ 0x70
 800660a:	677a      	str	r2, [r7, #116]	@ 0x74
 800660c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006610:	4642      	mov	r2, r8
 8006612:	464b      	mov	r3, r9
 8006614:	1891      	adds	r1, r2, r2
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	415b      	adcs	r3, r3
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006620:	4641      	mov	r1, r8
 8006622:	1851      	adds	r1, r2, r1
 8006624:	6039      	str	r1, [r7, #0]
 8006626:	4649      	mov	r1, r9
 8006628:	414b      	adcs	r3, r1
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006638:	4659      	mov	r1, fp
 800663a:	00cb      	lsls	r3, r1, #3
 800663c:	4651      	mov	r1, sl
 800663e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006642:	4651      	mov	r1, sl
 8006644:	00ca      	lsls	r2, r1, #3
 8006646:	4610      	mov	r0, r2
 8006648:	4619      	mov	r1, r3
 800664a:	4603      	mov	r3, r0
 800664c:	4642      	mov	r2, r8
 800664e:	189b      	adds	r3, r3, r2
 8006650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006652:	464b      	mov	r3, r9
 8006654:	460a      	mov	r2, r1
 8006656:	eb42 0303 	adc.w	r3, r2, r3
 800665a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	663b      	str	r3, [r7, #96]	@ 0x60
 8006666:	667a      	str	r2, [r7, #100]	@ 0x64
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006674:	4649      	mov	r1, r9
 8006676:	008b      	lsls	r3, r1, #2
 8006678:	4641      	mov	r1, r8
 800667a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800667e:	4641      	mov	r1, r8
 8006680:	008a      	lsls	r2, r1, #2
 8006682:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006686:	f7fa fb1f 	bl	8000cc8 <__aeabi_uldivmod>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <UART_SetConfig+0x4e4>)
 8006690:	fba3 1302 	umull	r1, r3, r3, r2
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	2164      	movs	r1, #100	@ 0x64
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	3332      	adds	r3, #50	@ 0x32
 80066a2:	4a08      	ldr	r2, [pc, #32]	@ (80066c4 <UART_SetConfig+0x4e4>)
 80066a4:	fba2 2303 	umull	r2, r3, r2, r3
 80066a8:	095b      	lsrs	r3, r3, #5
 80066aa:	f003 020f 	and.w	r2, r3, #15
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4422      	add	r2, r4
 80066b6:	609a      	str	r2, [r3, #8]
}
 80066b8:	bf00      	nop
 80066ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80066be:	46bd      	mov	sp, r7
 80066c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066c4:	51eb851f 	.word	0x51eb851f

080066c8 <__cvt>:
 80066c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066cc:	ec57 6b10 	vmov	r6, r7, d0
 80066d0:	2f00      	cmp	r7, #0
 80066d2:	460c      	mov	r4, r1
 80066d4:	4619      	mov	r1, r3
 80066d6:	463b      	mov	r3, r7
 80066d8:	bfbb      	ittet	lt
 80066da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066de:	461f      	movlt	r7, r3
 80066e0:	2300      	movge	r3, #0
 80066e2:	232d      	movlt	r3, #45	@ 0x2d
 80066e4:	700b      	strb	r3, [r1, #0]
 80066e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066ec:	4691      	mov	r9, r2
 80066ee:	f023 0820 	bic.w	r8, r3, #32
 80066f2:	bfbc      	itt	lt
 80066f4:	4632      	movlt	r2, r6
 80066f6:	4616      	movlt	r6, r2
 80066f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066fc:	d005      	beq.n	800670a <__cvt+0x42>
 80066fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006702:	d100      	bne.n	8006706 <__cvt+0x3e>
 8006704:	3401      	adds	r4, #1
 8006706:	2102      	movs	r1, #2
 8006708:	e000      	b.n	800670c <__cvt+0x44>
 800670a:	2103      	movs	r1, #3
 800670c:	ab03      	add	r3, sp, #12
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	ab02      	add	r3, sp, #8
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	ec47 6b10 	vmov	d0, r6, r7
 8006718:	4653      	mov	r3, sl
 800671a:	4622      	mov	r2, r4
 800671c:	f000 fdb0 	bl	8007280 <_dtoa_r>
 8006720:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006724:	4605      	mov	r5, r0
 8006726:	d119      	bne.n	800675c <__cvt+0x94>
 8006728:	f019 0f01 	tst.w	r9, #1
 800672c:	d00e      	beq.n	800674c <__cvt+0x84>
 800672e:	eb00 0904 	add.w	r9, r0, r4
 8006732:	2200      	movs	r2, #0
 8006734:	2300      	movs	r3, #0
 8006736:	4630      	mov	r0, r6
 8006738:	4639      	mov	r1, r7
 800673a:	f7fa f9e5 	bl	8000b08 <__aeabi_dcmpeq>
 800673e:	b108      	cbz	r0, 8006744 <__cvt+0x7c>
 8006740:	f8cd 900c 	str.w	r9, [sp, #12]
 8006744:	2230      	movs	r2, #48	@ 0x30
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	454b      	cmp	r3, r9
 800674a:	d31e      	bcc.n	800678a <__cvt+0xc2>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006750:	1b5b      	subs	r3, r3, r5
 8006752:	4628      	mov	r0, r5
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	b004      	add	sp, #16
 8006758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006760:	eb00 0904 	add.w	r9, r0, r4
 8006764:	d1e5      	bne.n	8006732 <__cvt+0x6a>
 8006766:	7803      	ldrb	r3, [r0, #0]
 8006768:	2b30      	cmp	r3, #48	@ 0x30
 800676a:	d10a      	bne.n	8006782 <__cvt+0xba>
 800676c:	2200      	movs	r2, #0
 800676e:	2300      	movs	r3, #0
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	f7fa f9c8 	bl	8000b08 <__aeabi_dcmpeq>
 8006778:	b918      	cbnz	r0, 8006782 <__cvt+0xba>
 800677a:	f1c4 0401 	rsb	r4, r4, #1
 800677e:	f8ca 4000 	str.w	r4, [sl]
 8006782:	f8da 3000 	ldr.w	r3, [sl]
 8006786:	4499      	add	r9, r3
 8006788:	e7d3      	b.n	8006732 <__cvt+0x6a>
 800678a:	1c59      	adds	r1, r3, #1
 800678c:	9103      	str	r1, [sp, #12]
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e7d9      	b.n	8006746 <__cvt+0x7e>

08006792 <__exponent>:
 8006792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006794:	2900      	cmp	r1, #0
 8006796:	bfba      	itte	lt
 8006798:	4249      	neglt	r1, r1
 800679a:	232d      	movlt	r3, #45	@ 0x2d
 800679c:	232b      	movge	r3, #43	@ 0x2b
 800679e:	2909      	cmp	r1, #9
 80067a0:	7002      	strb	r2, [r0, #0]
 80067a2:	7043      	strb	r3, [r0, #1]
 80067a4:	dd29      	ble.n	80067fa <__exponent+0x68>
 80067a6:	f10d 0307 	add.w	r3, sp, #7
 80067aa:	461d      	mov	r5, r3
 80067ac:	270a      	movs	r7, #10
 80067ae:	461a      	mov	r2, r3
 80067b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80067b4:	fb07 1416 	mls	r4, r7, r6, r1
 80067b8:	3430      	adds	r4, #48	@ 0x30
 80067ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067be:	460c      	mov	r4, r1
 80067c0:	2c63      	cmp	r4, #99	@ 0x63
 80067c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80067c6:	4631      	mov	r1, r6
 80067c8:	dcf1      	bgt.n	80067ae <__exponent+0x1c>
 80067ca:	3130      	adds	r1, #48	@ 0x30
 80067cc:	1e94      	subs	r4, r2, #2
 80067ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067d2:	1c41      	adds	r1, r0, #1
 80067d4:	4623      	mov	r3, r4
 80067d6:	42ab      	cmp	r3, r5
 80067d8:	d30a      	bcc.n	80067f0 <__exponent+0x5e>
 80067da:	f10d 0309 	add.w	r3, sp, #9
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	42ac      	cmp	r4, r5
 80067e2:	bf88      	it	hi
 80067e4:	2300      	movhi	r3, #0
 80067e6:	3302      	adds	r3, #2
 80067e8:	4403      	add	r3, r0
 80067ea:	1a18      	subs	r0, r3, r0
 80067ec:	b003      	add	sp, #12
 80067ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067f8:	e7ed      	b.n	80067d6 <__exponent+0x44>
 80067fa:	2330      	movs	r3, #48	@ 0x30
 80067fc:	3130      	adds	r1, #48	@ 0x30
 80067fe:	7083      	strb	r3, [r0, #2]
 8006800:	70c1      	strb	r1, [r0, #3]
 8006802:	1d03      	adds	r3, r0, #4
 8006804:	e7f1      	b.n	80067ea <__exponent+0x58>
	...

08006808 <_printf_float>:
 8006808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	b08d      	sub	sp, #52	@ 0x34
 800680e:	460c      	mov	r4, r1
 8006810:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006814:	4616      	mov	r6, r2
 8006816:	461f      	mov	r7, r3
 8006818:	4605      	mov	r5, r0
 800681a:	f000 fc77 	bl	800710c <_localeconv_r>
 800681e:	6803      	ldr	r3, [r0, #0]
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	4618      	mov	r0, r3
 8006824:	f7f9 fd44 	bl	80002b0 <strlen>
 8006828:	2300      	movs	r3, #0
 800682a:	930a      	str	r3, [sp, #40]	@ 0x28
 800682c:	f8d8 3000 	ldr.w	r3, [r8]
 8006830:	9005      	str	r0, [sp, #20]
 8006832:	3307      	adds	r3, #7
 8006834:	f023 0307 	bic.w	r3, r3, #7
 8006838:	f103 0208 	add.w	r2, r3, #8
 800683c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006840:	f8d4 b000 	ldr.w	fp, [r4]
 8006844:	f8c8 2000 	str.w	r2, [r8]
 8006848:	e9d3 8900 	ldrd	r8, r9, [r3]
 800684c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006850:	9307      	str	r3, [sp, #28]
 8006852:	f8cd 8018 	str.w	r8, [sp, #24]
 8006856:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800685a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800685e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ad0 <_printf_float+0x2c8>)
 8006860:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006864:	f7fa f982 	bl	8000b6c <__aeabi_dcmpun>
 8006868:	bb70      	cbnz	r0, 80068c8 <_printf_float+0xc0>
 800686a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800686e:	4b98      	ldr	r3, [pc, #608]	@ (8006ad0 <_printf_float+0x2c8>)
 8006870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006874:	f7fa f95c 	bl	8000b30 <__aeabi_dcmple>
 8006878:	bb30      	cbnz	r0, 80068c8 <_printf_float+0xc0>
 800687a:	2200      	movs	r2, #0
 800687c:	2300      	movs	r3, #0
 800687e:	4640      	mov	r0, r8
 8006880:	4649      	mov	r1, r9
 8006882:	f7fa f94b 	bl	8000b1c <__aeabi_dcmplt>
 8006886:	b110      	cbz	r0, 800688e <_printf_float+0x86>
 8006888:	232d      	movs	r3, #45	@ 0x2d
 800688a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800688e:	4a91      	ldr	r2, [pc, #580]	@ (8006ad4 <_printf_float+0x2cc>)
 8006890:	4b91      	ldr	r3, [pc, #580]	@ (8006ad8 <_printf_float+0x2d0>)
 8006892:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006896:	bf94      	ite	ls
 8006898:	4690      	movls	r8, r2
 800689a:	4698      	movhi	r8, r3
 800689c:	2303      	movs	r3, #3
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	f02b 0304 	bic.w	r3, fp, #4
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	f04f 0900 	mov.w	r9, #0
 80068aa:	9700      	str	r7, [sp, #0]
 80068ac:	4633      	mov	r3, r6
 80068ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80068b0:	4621      	mov	r1, r4
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f9d2 	bl	8006c5c <_printf_common>
 80068b8:	3001      	adds	r0, #1
 80068ba:	f040 808d 	bne.w	80069d8 <_printf_float+0x1d0>
 80068be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068c2:	b00d      	add	sp, #52	@ 0x34
 80068c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	4642      	mov	r2, r8
 80068ca:	464b      	mov	r3, r9
 80068cc:	4640      	mov	r0, r8
 80068ce:	4649      	mov	r1, r9
 80068d0:	f7fa f94c 	bl	8000b6c <__aeabi_dcmpun>
 80068d4:	b140      	cbz	r0, 80068e8 <_printf_float+0xe0>
 80068d6:	464b      	mov	r3, r9
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bfbc      	itt	lt
 80068dc:	232d      	movlt	r3, #45	@ 0x2d
 80068de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068e2:	4a7e      	ldr	r2, [pc, #504]	@ (8006adc <_printf_float+0x2d4>)
 80068e4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ae0 <_printf_float+0x2d8>)
 80068e6:	e7d4      	b.n	8006892 <_printf_float+0x8a>
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068ee:	9206      	str	r2, [sp, #24]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	d13b      	bne.n	800696c <_printf_float+0x164>
 80068f4:	2306      	movs	r3, #6
 80068f6:	6063      	str	r3, [r4, #4]
 80068f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068fc:	2300      	movs	r3, #0
 80068fe:	6022      	str	r2, [r4, #0]
 8006900:	9303      	str	r3, [sp, #12]
 8006902:	ab0a      	add	r3, sp, #40	@ 0x28
 8006904:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006908:	ab09      	add	r3, sp, #36	@ 0x24
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	6861      	ldr	r1, [r4, #4]
 800690e:	ec49 8b10 	vmov	d0, r8, r9
 8006912:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006916:	4628      	mov	r0, r5
 8006918:	f7ff fed6 	bl	80066c8 <__cvt>
 800691c:	9b06      	ldr	r3, [sp, #24]
 800691e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006920:	2b47      	cmp	r3, #71	@ 0x47
 8006922:	4680      	mov	r8, r0
 8006924:	d129      	bne.n	800697a <_printf_float+0x172>
 8006926:	1cc8      	adds	r0, r1, #3
 8006928:	db02      	blt.n	8006930 <_printf_float+0x128>
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	4299      	cmp	r1, r3
 800692e:	dd41      	ble.n	80069b4 <_printf_float+0x1ac>
 8006930:	f1aa 0a02 	sub.w	sl, sl, #2
 8006934:	fa5f fa8a 	uxtb.w	sl, sl
 8006938:	3901      	subs	r1, #1
 800693a:	4652      	mov	r2, sl
 800693c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006940:	9109      	str	r1, [sp, #36]	@ 0x24
 8006942:	f7ff ff26 	bl	8006792 <__exponent>
 8006946:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006948:	1813      	adds	r3, r2, r0
 800694a:	2a01      	cmp	r2, #1
 800694c:	4681      	mov	r9, r0
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	dc02      	bgt.n	8006958 <_printf_float+0x150>
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	07d2      	lsls	r2, r2, #31
 8006956:	d501      	bpl.n	800695c <_printf_float+0x154>
 8006958:	3301      	adds	r3, #1
 800695a:	6123      	str	r3, [r4, #16]
 800695c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0a2      	beq.n	80068aa <_printf_float+0xa2>
 8006964:	232d      	movs	r3, #45	@ 0x2d
 8006966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696a:	e79e      	b.n	80068aa <_printf_float+0xa2>
 800696c:	9a06      	ldr	r2, [sp, #24]
 800696e:	2a47      	cmp	r2, #71	@ 0x47
 8006970:	d1c2      	bne.n	80068f8 <_printf_float+0xf0>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1c0      	bne.n	80068f8 <_printf_float+0xf0>
 8006976:	2301      	movs	r3, #1
 8006978:	e7bd      	b.n	80068f6 <_printf_float+0xee>
 800697a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800697e:	d9db      	bls.n	8006938 <_printf_float+0x130>
 8006980:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006984:	d118      	bne.n	80069b8 <_printf_float+0x1b0>
 8006986:	2900      	cmp	r1, #0
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	dd0b      	ble.n	80069a4 <_printf_float+0x19c>
 800698c:	6121      	str	r1, [r4, #16]
 800698e:	b913      	cbnz	r3, 8006996 <_printf_float+0x18e>
 8006990:	6822      	ldr	r2, [r4, #0]
 8006992:	07d0      	lsls	r0, r2, #31
 8006994:	d502      	bpl.n	800699c <_printf_float+0x194>
 8006996:	3301      	adds	r3, #1
 8006998:	440b      	add	r3, r1
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800699e:	f04f 0900 	mov.w	r9, #0
 80069a2:	e7db      	b.n	800695c <_printf_float+0x154>
 80069a4:	b913      	cbnz	r3, 80069ac <_printf_float+0x1a4>
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	07d2      	lsls	r2, r2, #31
 80069aa:	d501      	bpl.n	80069b0 <_printf_float+0x1a8>
 80069ac:	3302      	adds	r3, #2
 80069ae:	e7f4      	b.n	800699a <_printf_float+0x192>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e7f2      	b.n	800699a <_printf_float+0x192>
 80069b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80069b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ba:	4299      	cmp	r1, r3
 80069bc:	db05      	blt.n	80069ca <_printf_float+0x1c2>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	6121      	str	r1, [r4, #16]
 80069c2:	07d8      	lsls	r0, r3, #31
 80069c4:	d5ea      	bpl.n	800699c <_printf_float+0x194>
 80069c6:	1c4b      	adds	r3, r1, #1
 80069c8:	e7e7      	b.n	800699a <_printf_float+0x192>
 80069ca:	2900      	cmp	r1, #0
 80069cc:	bfd4      	ite	le
 80069ce:	f1c1 0202 	rsble	r2, r1, #2
 80069d2:	2201      	movgt	r2, #1
 80069d4:	4413      	add	r3, r2
 80069d6:	e7e0      	b.n	800699a <_printf_float+0x192>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	055a      	lsls	r2, r3, #21
 80069dc:	d407      	bmi.n	80069ee <_printf_float+0x1e6>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	4642      	mov	r2, r8
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	d12b      	bne.n	8006a44 <_printf_float+0x23c>
 80069ec:	e767      	b.n	80068be <_printf_float+0xb6>
 80069ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069f2:	f240 80dd 	bls.w	8006bb0 <_printf_float+0x3a8>
 80069f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069fa:	2200      	movs	r2, #0
 80069fc:	2300      	movs	r3, #0
 80069fe:	f7fa f883 	bl	8000b08 <__aeabi_dcmpeq>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d033      	beq.n	8006a6e <_printf_float+0x266>
 8006a06:	4a37      	ldr	r2, [pc, #220]	@ (8006ae4 <_printf_float+0x2dc>)
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	f43f af54 	beq.w	80068be <_printf_float+0xb6>
 8006a16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a1a:	4543      	cmp	r3, r8
 8006a1c:	db02      	blt.n	8006a24 <_printf_float+0x21c>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	07d8      	lsls	r0, r3, #31
 8006a22:	d50f      	bpl.n	8006a44 <_printf_float+0x23c>
 8006a24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f af45 	beq.w	80068be <_printf_float+0xb6>
 8006a34:	f04f 0900 	mov.w	r9, #0
 8006a38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006a3c:	f104 0a1a 	add.w	sl, r4, #26
 8006a40:	45c8      	cmp	r8, r9
 8006a42:	dc09      	bgt.n	8006a58 <_printf_float+0x250>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	079b      	lsls	r3, r3, #30
 8006a48:	f100 8103 	bmi.w	8006c52 <_printf_float+0x44a>
 8006a4c:	68e0      	ldr	r0, [r4, #12]
 8006a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a50:	4298      	cmp	r0, r3
 8006a52:	bfb8      	it	lt
 8006a54:	4618      	movlt	r0, r3
 8006a56:	e734      	b.n	80068c2 <_printf_float+0xba>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	4652      	mov	r2, sl
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	f43f af2b 	beq.w	80068be <_printf_float+0xb6>
 8006a68:	f109 0901 	add.w	r9, r9, #1
 8006a6c:	e7e8      	b.n	8006a40 <_printf_float+0x238>
 8006a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	dc39      	bgt.n	8006ae8 <_printf_float+0x2e0>
 8006a74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae4 <_printf_float+0x2dc>)
 8006a76:	2301      	movs	r3, #1
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f43f af1d 	beq.w	80068be <_printf_float+0xb6>
 8006a84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a88:	ea59 0303 	orrs.w	r3, r9, r3
 8006a8c:	d102      	bne.n	8006a94 <_printf_float+0x28c>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	07d9      	lsls	r1, r3, #31
 8006a92:	d5d7      	bpl.n	8006a44 <_printf_float+0x23c>
 8006a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f43f af0d 	beq.w	80068be <_printf_float+0xb6>
 8006aa4:	f04f 0a00 	mov.w	sl, #0
 8006aa8:	f104 0b1a 	add.w	fp, r4, #26
 8006aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aae:	425b      	negs	r3, r3
 8006ab0:	4553      	cmp	r3, sl
 8006ab2:	dc01      	bgt.n	8006ab8 <_printf_float+0x2b0>
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	e793      	b.n	80069e0 <_printf_float+0x1d8>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	465a      	mov	r2, fp
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f43f aefb 	beq.w	80068be <_printf_float+0xb6>
 8006ac8:	f10a 0a01 	add.w	sl, sl, #1
 8006acc:	e7ee      	b.n	8006aac <_printf_float+0x2a4>
 8006ace:	bf00      	nop
 8006ad0:	7fefffff 	.word	0x7fefffff
 8006ad4:	0800af10 	.word	0x0800af10
 8006ad8:	0800af14 	.word	0x0800af14
 8006adc:	0800af18 	.word	0x0800af18
 8006ae0:	0800af1c 	.word	0x0800af1c
 8006ae4:	0800af20 	.word	0x0800af20
 8006ae8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006aea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006aee:	4553      	cmp	r3, sl
 8006af0:	bfa8      	it	ge
 8006af2:	4653      	movge	r3, sl
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	4699      	mov	r9, r3
 8006af8:	dc36      	bgt.n	8006b68 <_printf_float+0x360>
 8006afa:	f04f 0b00 	mov.w	fp, #0
 8006afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b02:	f104 021a 	add.w	r2, r4, #26
 8006b06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b08:	9306      	str	r3, [sp, #24]
 8006b0a:	eba3 0309 	sub.w	r3, r3, r9
 8006b0e:	455b      	cmp	r3, fp
 8006b10:	dc31      	bgt.n	8006b76 <_printf_float+0x36e>
 8006b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b14:	459a      	cmp	sl, r3
 8006b16:	dc3a      	bgt.n	8006b8e <_printf_float+0x386>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	07da      	lsls	r2, r3, #31
 8006b1c:	d437      	bmi.n	8006b8e <_printf_float+0x386>
 8006b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b20:	ebaa 0903 	sub.w	r9, sl, r3
 8006b24:	9b06      	ldr	r3, [sp, #24]
 8006b26:	ebaa 0303 	sub.w	r3, sl, r3
 8006b2a:	4599      	cmp	r9, r3
 8006b2c:	bfa8      	it	ge
 8006b2e:	4699      	movge	r9, r3
 8006b30:	f1b9 0f00 	cmp.w	r9, #0
 8006b34:	dc33      	bgt.n	8006b9e <_printf_float+0x396>
 8006b36:	f04f 0800 	mov.w	r8, #0
 8006b3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b3e:	f104 0b1a 	add.w	fp, r4, #26
 8006b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b44:	ebaa 0303 	sub.w	r3, sl, r3
 8006b48:	eba3 0309 	sub.w	r3, r3, r9
 8006b4c:	4543      	cmp	r3, r8
 8006b4e:	f77f af79 	ble.w	8006a44 <_printf_float+0x23c>
 8006b52:	2301      	movs	r3, #1
 8006b54:	465a      	mov	r2, fp
 8006b56:	4631      	mov	r1, r6
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	f43f aeae 	beq.w	80068be <_printf_float+0xb6>
 8006b62:	f108 0801 	add.w	r8, r8, #1
 8006b66:	e7ec      	b.n	8006b42 <_printf_float+0x33a>
 8006b68:	4642      	mov	r2, r8
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	d1c2      	bne.n	8006afa <_printf_float+0x2f2>
 8006b74:	e6a3      	b.n	80068be <_printf_float+0xb6>
 8006b76:	2301      	movs	r3, #1
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	9206      	str	r2, [sp, #24]
 8006b7e:	47b8      	blx	r7
 8006b80:	3001      	adds	r0, #1
 8006b82:	f43f ae9c 	beq.w	80068be <_printf_float+0xb6>
 8006b86:	9a06      	ldr	r2, [sp, #24]
 8006b88:	f10b 0b01 	add.w	fp, fp, #1
 8006b8c:	e7bb      	b.n	8006b06 <_printf_float+0x2fe>
 8006b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b92:	4631      	mov	r1, r6
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b8      	blx	r7
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d1c0      	bne.n	8006b1e <_printf_float+0x316>
 8006b9c:	e68f      	b.n	80068be <_printf_float+0xb6>
 8006b9e:	9a06      	ldr	r2, [sp, #24]
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	4442      	add	r2, r8
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	d1c3      	bne.n	8006b36 <_printf_float+0x32e>
 8006bae:	e686      	b.n	80068be <_printf_float+0xb6>
 8006bb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bb4:	f1ba 0f01 	cmp.w	sl, #1
 8006bb8:	dc01      	bgt.n	8006bbe <_printf_float+0x3b6>
 8006bba:	07db      	lsls	r3, r3, #31
 8006bbc:	d536      	bpl.n	8006c2c <_printf_float+0x424>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b8      	blx	r7
 8006bc8:	3001      	adds	r0, #1
 8006bca:	f43f ae78 	beq.w	80068be <_printf_float+0xb6>
 8006bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	47b8      	blx	r7
 8006bd8:	3001      	adds	r0, #1
 8006bda:	f43f ae70 	beq.w	80068be <_printf_float+0xb6>
 8006bde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006be2:	2200      	movs	r2, #0
 8006be4:	2300      	movs	r3, #0
 8006be6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006bea:	f7f9 ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 8006bee:	b9c0      	cbnz	r0, 8006c22 <_printf_float+0x41a>
 8006bf0:	4653      	mov	r3, sl
 8006bf2:	f108 0201 	add.w	r2, r8, #1
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d10c      	bne.n	8006c1a <_printf_float+0x412>
 8006c00:	e65d      	b.n	80068be <_printf_float+0xb6>
 8006c02:	2301      	movs	r3, #1
 8006c04:	465a      	mov	r2, fp
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f43f ae56 	beq.w	80068be <_printf_float+0xb6>
 8006c12:	f108 0801 	add.w	r8, r8, #1
 8006c16:	45d0      	cmp	r8, sl
 8006c18:	dbf3      	blt.n	8006c02 <_printf_float+0x3fa>
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c20:	e6df      	b.n	80069e2 <_printf_float+0x1da>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	f104 0b1a 	add.w	fp, r4, #26
 8006c2a:	e7f4      	b.n	8006c16 <_printf_float+0x40e>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4642      	mov	r2, r8
 8006c30:	e7e1      	b.n	8006bf6 <_printf_float+0x3ee>
 8006c32:	2301      	movs	r3, #1
 8006c34:	464a      	mov	r2, r9
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f43f ae3e 	beq.w	80068be <_printf_float+0xb6>
 8006c42:	f108 0801 	add.w	r8, r8, #1
 8006c46:	68e3      	ldr	r3, [r4, #12]
 8006c48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c4a:	1a5b      	subs	r3, r3, r1
 8006c4c:	4543      	cmp	r3, r8
 8006c4e:	dcf0      	bgt.n	8006c32 <_printf_float+0x42a>
 8006c50:	e6fc      	b.n	8006a4c <_printf_float+0x244>
 8006c52:	f04f 0800 	mov.w	r8, #0
 8006c56:	f104 0919 	add.w	r9, r4, #25
 8006c5a:	e7f4      	b.n	8006c46 <_printf_float+0x43e>

08006c5c <_printf_common>:
 8006c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	4616      	mov	r6, r2
 8006c62:	4698      	mov	r8, r3
 8006c64:	688a      	ldr	r2, [r1, #8]
 8006c66:	690b      	ldr	r3, [r1, #16]
 8006c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	bfb8      	it	lt
 8006c70:	4613      	movlt	r3, r2
 8006c72:	6033      	str	r3, [r6, #0]
 8006c74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c78:	4607      	mov	r7, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	b10a      	cbz	r2, 8006c82 <_printf_common+0x26>
 8006c7e:	3301      	adds	r3, #1
 8006c80:	6033      	str	r3, [r6, #0]
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	0699      	lsls	r1, r3, #26
 8006c86:	bf42      	ittt	mi
 8006c88:	6833      	ldrmi	r3, [r6, #0]
 8006c8a:	3302      	addmi	r3, #2
 8006c8c:	6033      	strmi	r3, [r6, #0]
 8006c8e:	6825      	ldr	r5, [r4, #0]
 8006c90:	f015 0506 	ands.w	r5, r5, #6
 8006c94:	d106      	bne.n	8006ca4 <_printf_common+0x48>
 8006c96:	f104 0a19 	add.w	sl, r4, #25
 8006c9a:	68e3      	ldr	r3, [r4, #12]
 8006c9c:	6832      	ldr	r2, [r6, #0]
 8006c9e:	1a9b      	subs	r3, r3, r2
 8006ca0:	42ab      	cmp	r3, r5
 8006ca2:	dc26      	bgt.n	8006cf2 <_printf_common+0x96>
 8006ca4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	3b00      	subs	r3, #0
 8006cac:	bf18      	it	ne
 8006cae:	2301      	movne	r3, #1
 8006cb0:	0692      	lsls	r2, r2, #26
 8006cb2:	d42b      	bmi.n	8006d0c <_printf_common+0xb0>
 8006cb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cb8:	4641      	mov	r1, r8
 8006cba:	4638      	mov	r0, r7
 8006cbc:	47c8      	blx	r9
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d01e      	beq.n	8006d00 <_printf_common+0xa4>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	6922      	ldr	r2, [r4, #16]
 8006cc6:	f003 0306 	and.w	r3, r3, #6
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	bf02      	ittt	eq
 8006cce:	68e5      	ldreq	r5, [r4, #12]
 8006cd0:	6833      	ldreq	r3, [r6, #0]
 8006cd2:	1aed      	subeq	r5, r5, r3
 8006cd4:	68a3      	ldr	r3, [r4, #8]
 8006cd6:	bf0c      	ite	eq
 8006cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cdc:	2500      	movne	r5, #0
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	bfc4      	itt	gt
 8006ce2:	1a9b      	subgt	r3, r3, r2
 8006ce4:	18ed      	addgt	r5, r5, r3
 8006ce6:	2600      	movs	r6, #0
 8006ce8:	341a      	adds	r4, #26
 8006cea:	42b5      	cmp	r5, r6
 8006cec:	d11a      	bne.n	8006d24 <_printf_common+0xc8>
 8006cee:	2000      	movs	r0, #0
 8006cf0:	e008      	b.n	8006d04 <_printf_common+0xa8>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4652      	mov	r2, sl
 8006cf6:	4641      	mov	r1, r8
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	47c8      	blx	r9
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d103      	bne.n	8006d08 <_printf_common+0xac>
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d08:	3501      	adds	r5, #1
 8006d0a:	e7c6      	b.n	8006c9a <_printf_common+0x3e>
 8006d0c:	18e1      	adds	r1, r4, r3
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	2030      	movs	r0, #48	@ 0x30
 8006d12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d16:	4422      	add	r2, r4
 8006d18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d20:	3302      	adds	r3, #2
 8006d22:	e7c7      	b.n	8006cb4 <_printf_common+0x58>
 8006d24:	2301      	movs	r3, #1
 8006d26:	4622      	mov	r2, r4
 8006d28:	4641      	mov	r1, r8
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	47c8      	blx	r9
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d0e6      	beq.n	8006d00 <_printf_common+0xa4>
 8006d32:	3601      	adds	r6, #1
 8006d34:	e7d9      	b.n	8006cea <_printf_common+0x8e>
	...

08006d38 <_printf_i>:
 8006d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	7e0f      	ldrb	r7, [r1, #24]
 8006d3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d40:	2f78      	cmp	r7, #120	@ 0x78
 8006d42:	4691      	mov	r9, r2
 8006d44:	4680      	mov	r8, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	469a      	mov	sl, r3
 8006d4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d4e:	d807      	bhi.n	8006d60 <_printf_i+0x28>
 8006d50:	2f62      	cmp	r7, #98	@ 0x62
 8006d52:	d80a      	bhi.n	8006d6a <_printf_i+0x32>
 8006d54:	2f00      	cmp	r7, #0
 8006d56:	f000 80d2 	beq.w	8006efe <_printf_i+0x1c6>
 8006d5a:	2f58      	cmp	r7, #88	@ 0x58
 8006d5c:	f000 80b9 	beq.w	8006ed2 <_printf_i+0x19a>
 8006d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d68:	e03a      	b.n	8006de0 <_printf_i+0xa8>
 8006d6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d6e:	2b15      	cmp	r3, #21
 8006d70:	d8f6      	bhi.n	8006d60 <_printf_i+0x28>
 8006d72:	a101      	add	r1, pc, #4	@ (adr r1, 8006d78 <_printf_i+0x40>)
 8006d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d78:	08006dd1 	.word	0x08006dd1
 8006d7c:	08006de5 	.word	0x08006de5
 8006d80:	08006d61 	.word	0x08006d61
 8006d84:	08006d61 	.word	0x08006d61
 8006d88:	08006d61 	.word	0x08006d61
 8006d8c:	08006d61 	.word	0x08006d61
 8006d90:	08006de5 	.word	0x08006de5
 8006d94:	08006d61 	.word	0x08006d61
 8006d98:	08006d61 	.word	0x08006d61
 8006d9c:	08006d61 	.word	0x08006d61
 8006da0:	08006d61 	.word	0x08006d61
 8006da4:	08006ee5 	.word	0x08006ee5
 8006da8:	08006e0f 	.word	0x08006e0f
 8006dac:	08006e9f 	.word	0x08006e9f
 8006db0:	08006d61 	.word	0x08006d61
 8006db4:	08006d61 	.word	0x08006d61
 8006db8:	08006f07 	.word	0x08006f07
 8006dbc:	08006d61 	.word	0x08006d61
 8006dc0:	08006e0f 	.word	0x08006e0f
 8006dc4:	08006d61 	.word	0x08006d61
 8006dc8:	08006d61 	.word	0x08006d61
 8006dcc:	08006ea7 	.word	0x08006ea7
 8006dd0:	6833      	ldr	r3, [r6, #0]
 8006dd2:	1d1a      	adds	r2, r3, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6032      	str	r2, [r6, #0]
 8006dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ddc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006de0:	2301      	movs	r3, #1
 8006de2:	e09d      	b.n	8006f20 <_printf_i+0x1e8>
 8006de4:	6833      	ldr	r3, [r6, #0]
 8006de6:	6820      	ldr	r0, [r4, #0]
 8006de8:	1d19      	adds	r1, r3, #4
 8006dea:	6031      	str	r1, [r6, #0]
 8006dec:	0606      	lsls	r6, r0, #24
 8006dee:	d501      	bpl.n	8006df4 <_printf_i+0xbc>
 8006df0:	681d      	ldr	r5, [r3, #0]
 8006df2:	e003      	b.n	8006dfc <_printf_i+0xc4>
 8006df4:	0645      	lsls	r5, r0, #25
 8006df6:	d5fb      	bpl.n	8006df0 <_printf_i+0xb8>
 8006df8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dfc:	2d00      	cmp	r5, #0
 8006dfe:	da03      	bge.n	8006e08 <_printf_i+0xd0>
 8006e00:	232d      	movs	r3, #45	@ 0x2d
 8006e02:	426d      	negs	r5, r5
 8006e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e08:	4859      	ldr	r0, [pc, #356]	@ (8006f70 <_printf_i+0x238>)
 8006e0a:	230a      	movs	r3, #10
 8006e0c:	e011      	b.n	8006e32 <_printf_i+0xfa>
 8006e0e:	6821      	ldr	r1, [r4, #0]
 8006e10:	6833      	ldr	r3, [r6, #0]
 8006e12:	0608      	lsls	r0, r1, #24
 8006e14:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e18:	d402      	bmi.n	8006e20 <_printf_i+0xe8>
 8006e1a:	0649      	lsls	r1, r1, #25
 8006e1c:	bf48      	it	mi
 8006e1e:	b2ad      	uxthmi	r5, r5
 8006e20:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e22:	4853      	ldr	r0, [pc, #332]	@ (8006f70 <_printf_i+0x238>)
 8006e24:	6033      	str	r3, [r6, #0]
 8006e26:	bf14      	ite	ne
 8006e28:	230a      	movne	r3, #10
 8006e2a:	2308      	moveq	r3, #8
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e32:	6866      	ldr	r6, [r4, #4]
 8006e34:	60a6      	str	r6, [r4, #8]
 8006e36:	2e00      	cmp	r6, #0
 8006e38:	bfa2      	ittt	ge
 8006e3a:	6821      	ldrge	r1, [r4, #0]
 8006e3c:	f021 0104 	bicge.w	r1, r1, #4
 8006e40:	6021      	strge	r1, [r4, #0]
 8006e42:	b90d      	cbnz	r5, 8006e48 <_printf_i+0x110>
 8006e44:	2e00      	cmp	r6, #0
 8006e46:	d04b      	beq.n	8006ee0 <_printf_i+0x1a8>
 8006e48:	4616      	mov	r6, r2
 8006e4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e4e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e52:	5dc7      	ldrb	r7, [r0, r7]
 8006e54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e58:	462f      	mov	r7, r5
 8006e5a:	42bb      	cmp	r3, r7
 8006e5c:	460d      	mov	r5, r1
 8006e5e:	d9f4      	bls.n	8006e4a <_printf_i+0x112>
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d10b      	bne.n	8006e7c <_printf_i+0x144>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07df      	lsls	r7, r3, #31
 8006e68:	d508      	bpl.n	8006e7c <_printf_i+0x144>
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	6861      	ldr	r1, [r4, #4]
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	bfde      	ittt	le
 8006e72:	2330      	movle	r3, #48	@ 0x30
 8006e74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006e7c:	1b92      	subs	r2, r2, r6
 8006e7e:	6122      	str	r2, [r4, #16]
 8006e80:	f8cd a000 	str.w	sl, [sp]
 8006e84:	464b      	mov	r3, r9
 8006e86:	aa03      	add	r2, sp, #12
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	f7ff fee6 	bl	8006c5c <_printf_common>
 8006e90:	3001      	adds	r0, #1
 8006e92:	d14a      	bne.n	8006f2a <_printf_i+0x1f2>
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e98:	b004      	add	sp, #16
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	f043 0320 	orr.w	r3, r3, #32
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	4833      	ldr	r0, [pc, #204]	@ (8006f74 <_printf_i+0x23c>)
 8006ea8:	2778      	movs	r7, #120	@ 0x78
 8006eaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	6831      	ldr	r1, [r6, #0]
 8006eb2:	061f      	lsls	r7, r3, #24
 8006eb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006eb8:	d402      	bmi.n	8006ec0 <_printf_i+0x188>
 8006eba:	065f      	lsls	r7, r3, #25
 8006ebc:	bf48      	it	mi
 8006ebe:	b2ad      	uxthmi	r5, r5
 8006ec0:	6031      	str	r1, [r6, #0]
 8006ec2:	07d9      	lsls	r1, r3, #31
 8006ec4:	bf44      	itt	mi
 8006ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8006eca:	6023      	strmi	r3, [r4, #0]
 8006ecc:	b11d      	cbz	r5, 8006ed6 <_printf_i+0x19e>
 8006ece:	2310      	movs	r3, #16
 8006ed0:	e7ac      	b.n	8006e2c <_printf_i+0xf4>
 8006ed2:	4827      	ldr	r0, [pc, #156]	@ (8006f70 <_printf_i+0x238>)
 8006ed4:	e7e9      	b.n	8006eaa <_printf_i+0x172>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	f023 0320 	bic.w	r3, r3, #32
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	e7f6      	b.n	8006ece <_printf_i+0x196>
 8006ee0:	4616      	mov	r6, r2
 8006ee2:	e7bd      	b.n	8006e60 <_printf_i+0x128>
 8006ee4:	6833      	ldr	r3, [r6, #0]
 8006ee6:	6825      	ldr	r5, [r4, #0]
 8006ee8:	6961      	ldr	r1, [r4, #20]
 8006eea:	1d18      	adds	r0, r3, #4
 8006eec:	6030      	str	r0, [r6, #0]
 8006eee:	062e      	lsls	r6, r5, #24
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	d501      	bpl.n	8006ef8 <_printf_i+0x1c0>
 8006ef4:	6019      	str	r1, [r3, #0]
 8006ef6:	e002      	b.n	8006efe <_printf_i+0x1c6>
 8006ef8:	0668      	lsls	r0, r5, #25
 8006efa:	d5fb      	bpl.n	8006ef4 <_printf_i+0x1bc>
 8006efc:	8019      	strh	r1, [r3, #0]
 8006efe:	2300      	movs	r3, #0
 8006f00:	6123      	str	r3, [r4, #16]
 8006f02:	4616      	mov	r6, r2
 8006f04:	e7bc      	b.n	8006e80 <_printf_i+0x148>
 8006f06:	6833      	ldr	r3, [r6, #0]
 8006f08:	1d1a      	adds	r2, r3, #4
 8006f0a:	6032      	str	r2, [r6, #0]
 8006f0c:	681e      	ldr	r6, [r3, #0]
 8006f0e:	6862      	ldr	r2, [r4, #4]
 8006f10:	2100      	movs	r1, #0
 8006f12:	4630      	mov	r0, r6
 8006f14:	f7f9 f97c 	bl	8000210 <memchr>
 8006f18:	b108      	cbz	r0, 8006f1e <_printf_i+0x1e6>
 8006f1a:	1b80      	subs	r0, r0, r6
 8006f1c:	6060      	str	r0, [r4, #4]
 8006f1e:	6863      	ldr	r3, [r4, #4]
 8006f20:	6123      	str	r3, [r4, #16]
 8006f22:	2300      	movs	r3, #0
 8006f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f28:	e7aa      	b.n	8006e80 <_printf_i+0x148>
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	4649      	mov	r1, r9
 8006f30:	4640      	mov	r0, r8
 8006f32:	47d0      	blx	sl
 8006f34:	3001      	adds	r0, #1
 8006f36:	d0ad      	beq.n	8006e94 <_printf_i+0x15c>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	079b      	lsls	r3, r3, #30
 8006f3c:	d413      	bmi.n	8006f66 <_printf_i+0x22e>
 8006f3e:	68e0      	ldr	r0, [r4, #12]
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	4298      	cmp	r0, r3
 8006f44:	bfb8      	it	lt
 8006f46:	4618      	movlt	r0, r3
 8006f48:	e7a6      	b.n	8006e98 <_printf_i+0x160>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4640      	mov	r0, r8
 8006f52:	47d0      	blx	sl
 8006f54:	3001      	adds	r0, #1
 8006f56:	d09d      	beq.n	8006e94 <_printf_i+0x15c>
 8006f58:	3501      	adds	r5, #1
 8006f5a:	68e3      	ldr	r3, [r4, #12]
 8006f5c:	9903      	ldr	r1, [sp, #12]
 8006f5e:	1a5b      	subs	r3, r3, r1
 8006f60:	42ab      	cmp	r3, r5
 8006f62:	dcf2      	bgt.n	8006f4a <_printf_i+0x212>
 8006f64:	e7eb      	b.n	8006f3e <_printf_i+0x206>
 8006f66:	2500      	movs	r5, #0
 8006f68:	f104 0619 	add.w	r6, r4, #25
 8006f6c:	e7f5      	b.n	8006f5a <_printf_i+0x222>
 8006f6e:	bf00      	nop
 8006f70:	0800af22 	.word	0x0800af22
 8006f74:	0800af33 	.word	0x0800af33

08006f78 <std>:
 8006f78:	2300      	movs	r3, #0
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f86:	6083      	str	r3, [r0, #8]
 8006f88:	8181      	strh	r1, [r0, #12]
 8006f8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f8c:	81c2      	strh	r2, [r0, #14]
 8006f8e:	6183      	str	r3, [r0, #24]
 8006f90:	4619      	mov	r1, r3
 8006f92:	2208      	movs	r2, #8
 8006f94:	305c      	adds	r0, #92	@ 0x5c
 8006f96:	f000 f8b1 	bl	80070fc <memset>
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <std+0x58>)
 8006f9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd4 <std+0x5c>)
 8006fa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd8 <std+0x60>)
 8006fa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fdc <std+0x64>)
 8006fa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006faa:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe0 <std+0x68>)
 8006fac:	6224      	str	r4, [r4, #32]
 8006fae:	429c      	cmp	r4, r3
 8006fb0:	d006      	beq.n	8006fc0 <std+0x48>
 8006fb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fb6:	4294      	cmp	r4, r2
 8006fb8:	d002      	beq.n	8006fc0 <std+0x48>
 8006fba:	33d0      	adds	r3, #208	@ 0xd0
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	d105      	bne.n	8006fcc <std+0x54>
 8006fc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc8:	f000 b8ce 	b.w	8007168 <__retarget_lock_init_recursive>
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	bf00      	nop
 8006fd0:	080087d1 	.word	0x080087d1
 8006fd4:	080087f3 	.word	0x080087f3
 8006fd8:	0800882b 	.word	0x0800882b
 8006fdc:	0800884f 	.word	0x0800884f
 8006fe0:	200003e8 	.word	0x200003e8

08006fe4 <stdio_exit_handler>:
 8006fe4:	4a02      	ldr	r2, [pc, #8]	@ (8006ff0 <stdio_exit_handler+0xc>)
 8006fe6:	4903      	ldr	r1, [pc, #12]	@ (8006ff4 <stdio_exit_handler+0x10>)
 8006fe8:	4803      	ldr	r0, [pc, #12]	@ (8006ff8 <stdio_exit_handler+0x14>)
 8006fea:	f000 b869 	b.w	80070c0 <_fwalk_sglue>
 8006fee:	bf00      	nop
 8006ff0:	2000000c 	.word	0x2000000c
 8006ff4:	08008065 	.word	0x08008065
 8006ff8:	2000001c 	.word	0x2000001c

08006ffc <cleanup_stdio>:
 8006ffc:	6841      	ldr	r1, [r0, #4]
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8007030 <cleanup_stdio+0x34>)
 8007000:	4299      	cmp	r1, r3
 8007002:	b510      	push	{r4, lr}
 8007004:	4604      	mov	r4, r0
 8007006:	d001      	beq.n	800700c <cleanup_stdio+0x10>
 8007008:	f001 f82c 	bl	8008064 <_fflush_r>
 800700c:	68a1      	ldr	r1, [r4, #8]
 800700e:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <cleanup_stdio+0x38>)
 8007010:	4299      	cmp	r1, r3
 8007012:	d002      	beq.n	800701a <cleanup_stdio+0x1e>
 8007014:	4620      	mov	r0, r4
 8007016:	f001 f825 	bl	8008064 <_fflush_r>
 800701a:	68e1      	ldr	r1, [r4, #12]
 800701c:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <cleanup_stdio+0x3c>)
 800701e:	4299      	cmp	r1, r3
 8007020:	d004      	beq.n	800702c <cleanup_stdio+0x30>
 8007022:	4620      	mov	r0, r4
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	f001 b81c 	b.w	8008064 <_fflush_r>
 800702c:	bd10      	pop	{r4, pc}
 800702e:	bf00      	nop
 8007030:	200003e8 	.word	0x200003e8
 8007034:	20000450 	.word	0x20000450
 8007038:	200004b8 	.word	0x200004b8

0800703c <global_stdio_init.part.0>:
 800703c:	b510      	push	{r4, lr}
 800703e:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <global_stdio_init.part.0+0x30>)
 8007040:	4c0b      	ldr	r4, [pc, #44]	@ (8007070 <global_stdio_init.part.0+0x34>)
 8007042:	4a0c      	ldr	r2, [pc, #48]	@ (8007074 <global_stdio_init.part.0+0x38>)
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	4620      	mov	r0, r4
 8007048:	2200      	movs	r2, #0
 800704a:	2104      	movs	r1, #4
 800704c:	f7ff ff94 	bl	8006f78 <std>
 8007050:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007054:	2201      	movs	r2, #1
 8007056:	2109      	movs	r1, #9
 8007058:	f7ff ff8e 	bl	8006f78 <std>
 800705c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007060:	2202      	movs	r2, #2
 8007062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007066:	2112      	movs	r1, #18
 8007068:	f7ff bf86 	b.w	8006f78 <std>
 800706c:	20000520 	.word	0x20000520
 8007070:	200003e8 	.word	0x200003e8
 8007074:	08006fe5 	.word	0x08006fe5

08007078 <__sfp_lock_acquire>:
 8007078:	4801      	ldr	r0, [pc, #4]	@ (8007080 <__sfp_lock_acquire+0x8>)
 800707a:	f000 b876 	b.w	800716a <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	20000525 	.word	0x20000525

08007084 <__sfp_lock_release>:
 8007084:	4801      	ldr	r0, [pc, #4]	@ (800708c <__sfp_lock_release+0x8>)
 8007086:	f000 b871 	b.w	800716c <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	20000525 	.word	0x20000525

08007090 <__sinit>:
 8007090:	b510      	push	{r4, lr}
 8007092:	4604      	mov	r4, r0
 8007094:	f7ff fff0 	bl	8007078 <__sfp_lock_acquire>
 8007098:	6a23      	ldr	r3, [r4, #32]
 800709a:	b11b      	cbz	r3, 80070a4 <__sinit+0x14>
 800709c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a0:	f7ff bff0 	b.w	8007084 <__sfp_lock_release>
 80070a4:	4b04      	ldr	r3, [pc, #16]	@ (80070b8 <__sinit+0x28>)
 80070a6:	6223      	str	r3, [r4, #32]
 80070a8:	4b04      	ldr	r3, [pc, #16]	@ (80070bc <__sinit+0x2c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f5      	bne.n	800709c <__sinit+0xc>
 80070b0:	f7ff ffc4 	bl	800703c <global_stdio_init.part.0>
 80070b4:	e7f2      	b.n	800709c <__sinit+0xc>
 80070b6:	bf00      	nop
 80070b8:	08006ffd 	.word	0x08006ffd
 80070bc:	20000520 	.word	0x20000520

080070c0 <_fwalk_sglue>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	4607      	mov	r7, r0
 80070c6:	4688      	mov	r8, r1
 80070c8:	4614      	mov	r4, r2
 80070ca:	2600      	movs	r6, #0
 80070cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070d0:	f1b9 0901 	subs.w	r9, r9, #1
 80070d4:	d505      	bpl.n	80070e2 <_fwalk_sglue+0x22>
 80070d6:	6824      	ldr	r4, [r4, #0]
 80070d8:	2c00      	cmp	r4, #0
 80070da:	d1f7      	bne.n	80070cc <_fwalk_sglue+0xc>
 80070dc:	4630      	mov	r0, r6
 80070de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d907      	bls.n	80070f8 <_fwalk_sglue+0x38>
 80070e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ec:	3301      	adds	r3, #1
 80070ee:	d003      	beq.n	80070f8 <_fwalk_sglue+0x38>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4638      	mov	r0, r7
 80070f4:	47c0      	blx	r8
 80070f6:	4306      	orrs	r6, r0
 80070f8:	3568      	adds	r5, #104	@ 0x68
 80070fa:	e7e9      	b.n	80070d0 <_fwalk_sglue+0x10>

080070fc <memset>:
 80070fc:	4402      	add	r2, r0
 80070fe:	4603      	mov	r3, r0
 8007100:	4293      	cmp	r3, r2
 8007102:	d100      	bne.n	8007106 <memset+0xa>
 8007104:	4770      	bx	lr
 8007106:	f803 1b01 	strb.w	r1, [r3], #1
 800710a:	e7f9      	b.n	8007100 <memset+0x4>

0800710c <_localeconv_r>:
 800710c:	4800      	ldr	r0, [pc, #0]	@ (8007110 <_localeconv_r+0x4>)
 800710e:	4770      	bx	lr
 8007110:	20000158 	.word	0x20000158

08007114 <__errno>:
 8007114:	4b01      	ldr	r3, [pc, #4]	@ (800711c <__errno+0x8>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20000018 	.word	0x20000018

08007120 <__libc_init_array>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4d0d      	ldr	r5, [pc, #52]	@ (8007158 <__libc_init_array+0x38>)
 8007124:	4c0d      	ldr	r4, [pc, #52]	@ (800715c <__libc_init_array+0x3c>)
 8007126:	1b64      	subs	r4, r4, r5
 8007128:	10a4      	asrs	r4, r4, #2
 800712a:	2600      	movs	r6, #0
 800712c:	42a6      	cmp	r6, r4
 800712e:	d109      	bne.n	8007144 <__libc_init_array+0x24>
 8007130:	4d0b      	ldr	r5, [pc, #44]	@ (8007160 <__libc_init_array+0x40>)
 8007132:	4c0c      	ldr	r4, [pc, #48]	@ (8007164 <__libc_init_array+0x44>)
 8007134:	f003 fed0 	bl	800aed8 <_init>
 8007138:	1b64      	subs	r4, r4, r5
 800713a:	10a4      	asrs	r4, r4, #2
 800713c:	2600      	movs	r6, #0
 800713e:	42a6      	cmp	r6, r4
 8007140:	d105      	bne.n	800714e <__libc_init_array+0x2e>
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	f855 3b04 	ldr.w	r3, [r5], #4
 8007148:	4798      	blx	r3
 800714a:	3601      	adds	r6, #1
 800714c:	e7ee      	b.n	800712c <__libc_init_array+0xc>
 800714e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007152:	4798      	blx	r3
 8007154:	3601      	adds	r6, #1
 8007156:	e7f2      	b.n	800713e <__libc_init_array+0x1e>
 8007158:	0800b490 	.word	0x0800b490
 800715c:	0800b490 	.word	0x0800b490
 8007160:	0800b490 	.word	0x0800b490
 8007164:	0800b494 	.word	0x0800b494

08007168 <__retarget_lock_init_recursive>:
 8007168:	4770      	bx	lr

0800716a <__retarget_lock_acquire_recursive>:
 800716a:	4770      	bx	lr

0800716c <__retarget_lock_release_recursive>:
 800716c:	4770      	bx	lr

0800716e <quorem>:
 800716e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007172:	6903      	ldr	r3, [r0, #16]
 8007174:	690c      	ldr	r4, [r1, #16]
 8007176:	42a3      	cmp	r3, r4
 8007178:	4607      	mov	r7, r0
 800717a:	db7e      	blt.n	800727a <quorem+0x10c>
 800717c:	3c01      	subs	r4, #1
 800717e:	f101 0814 	add.w	r8, r1, #20
 8007182:	00a3      	lsls	r3, r4, #2
 8007184:	f100 0514 	add.w	r5, r0, #20
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007194:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007198:	3301      	adds	r3, #1
 800719a:	429a      	cmp	r2, r3
 800719c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80071a4:	d32e      	bcc.n	8007204 <quorem+0x96>
 80071a6:	f04f 0a00 	mov.w	sl, #0
 80071aa:	46c4      	mov	ip, r8
 80071ac:	46ae      	mov	lr, r5
 80071ae:	46d3      	mov	fp, sl
 80071b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071b4:	b298      	uxth	r0, r3
 80071b6:	fb06 a000 	mla	r0, r6, r0, sl
 80071ba:	0c02      	lsrs	r2, r0, #16
 80071bc:	0c1b      	lsrs	r3, r3, #16
 80071be:	fb06 2303 	mla	r3, r6, r3, r2
 80071c2:	f8de 2000 	ldr.w	r2, [lr]
 80071c6:	b280      	uxth	r0, r0
 80071c8:	b292      	uxth	r2, r2
 80071ca:	1a12      	subs	r2, r2, r0
 80071cc:	445a      	add	r2, fp
 80071ce:	f8de 0000 	ldr.w	r0, [lr]
 80071d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071e0:	b292      	uxth	r2, r2
 80071e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071e6:	45e1      	cmp	r9, ip
 80071e8:	f84e 2b04 	str.w	r2, [lr], #4
 80071ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071f0:	d2de      	bcs.n	80071b0 <quorem+0x42>
 80071f2:	9b00      	ldr	r3, [sp, #0]
 80071f4:	58eb      	ldr	r3, [r5, r3]
 80071f6:	b92b      	cbnz	r3, 8007204 <quorem+0x96>
 80071f8:	9b01      	ldr	r3, [sp, #4]
 80071fa:	3b04      	subs	r3, #4
 80071fc:	429d      	cmp	r5, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	d32f      	bcc.n	8007262 <quorem+0xf4>
 8007202:	613c      	str	r4, [r7, #16]
 8007204:	4638      	mov	r0, r7
 8007206:	f001 f9db 	bl	80085c0 <__mcmp>
 800720a:	2800      	cmp	r0, #0
 800720c:	db25      	blt.n	800725a <quorem+0xec>
 800720e:	4629      	mov	r1, r5
 8007210:	2000      	movs	r0, #0
 8007212:	f858 2b04 	ldr.w	r2, [r8], #4
 8007216:	f8d1 c000 	ldr.w	ip, [r1]
 800721a:	fa1f fe82 	uxth.w	lr, r2
 800721e:	fa1f f38c 	uxth.w	r3, ip
 8007222:	eba3 030e 	sub.w	r3, r3, lr
 8007226:	4403      	add	r3, r0
 8007228:	0c12      	lsrs	r2, r2, #16
 800722a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800722e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007232:	b29b      	uxth	r3, r3
 8007234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007238:	45c1      	cmp	r9, r8
 800723a:	f841 3b04 	str.w	r3, [r1], #4
 800723e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007242:	d2e6      	bcs.n	8007212 <quorem+0xa4>
 8007244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007248:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800724c:	b922      	cbnz	r2, 8007258 <quorem+0xea>
 800724e:	3b04      	subs	r3, #4
 8007250:	429d      	cmp	r5, r3
 8007252:	461a      	mov	r2, r3
 8007254:	d30b      	bcc.n	800726e <quorem+0x100>
 8007256:	613c      	str	r4, [r7, #16]
 8007258:	3601      	adds	r6, #1
 800725a:	4630      	mov	r0, r6
 800725c:	b003      	add	sp, #12
 800725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	3b04      	subs	r3, #4
 8007266:	2a00      	cmp	r2, #0
 8007268:	d1cb      	bne.n	8007202 <quorem+0x94>
 800726a:	3c01      	subs	r4, #1
 800726c:	e7c6      	b.n	80071fc <quorem+0x8e>
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	3b04      	subs	r3, #4
 8007272:	2a00      	cmp	r2, #0
 8007274:	d1ef      	bne.n	8007256 <quorem+0xe8>
 8007276:	3c01      	subs	r4, #1
 8007278:	e7ea      	b.n	8007250 <quorem+0xe2>
 800727a:	2000      	movs	r0, #0
 800727c:	e7ee      	b.n	800725c <quorem+0xee>
	...

08007280 <_dtoa_r>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	69c7      	ldr	r7, [r0, #28]
 8007286:	b099      	sub	sp, #100	@ 0x64
 8007288:	ed8d 0b02 	vstr	d0, [sp, #8]
 800728c:	ec55 4b10 	vmov	r4, r5, d0
 8007290:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007292:	9109      	str	r1, [sp, #36]	@ 0x24
 8007294:	4683      	mov	fp, r0
 8007296:	920e      	str	r2, [sp, #56]	@ 0x38
 8007298:	9313      	str	r3, [sp, #76]	@ 0x4c
 800729a:	b97f      	cbnz	r7, 80072bc <_dtoa_r+0x3c>
 800729c:	2010      	movs	r0, #16
 800729e:	f000 fdb3 	bl	8007e08 <malloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80072a8:	b920      	cbnz	r0, 80072b4 <_dtoa_r+0x34>
 80072aa:	4ba7      	ldr	r3, [pc, #668]	@ (8007548 <_dtoa_r+0x2c8>)
 80072ac:	21ef      	movs	r1, #239	@ 0xef
 80072ae:	48a7      	ldr	r0, [pc, #668]	@ (800754c <_dtoa_r+0x2cc>)
 80072b0:	f001 fb36 	bl	8008920 <__assert_func>
 80072b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072b8:	6007      	str	r7, [r0, #0]
 80072ba:	60c7      	str	r7, [r0, #12]
 80072bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072c0:	6819      	ldr	r1, [r3, #0]
 80072c2:	b159      	cbz	r1, 80072dc <_dtoa_r+0x5c>
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	604a      	str	r2, [r1, #4]
 80072c8:	2301      	movs	r3, #1
 80072ca:	4093      	lsls	r3, r2
 80072cc:	608b      	str	r3, [r1, #8]
 80072ce:	4658      	mov	r0, fp
 80072d0:	f000 ff3c 	bl	800814c <_Bfree>
 80072d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	1e2b      	subs	r3, r5, #0
 80072de:	bfb9      	ittee	lt
 80072e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072e4:	9303      	strlt	r3, [sp, #12]
 80072e6:	2300      	movge	r3, #0
 80072e8:	6033      	strge	r3, [r6, #0]
 80072ea:	9f03      	ldr	r7, [sp, #12]
 80072ec:	4b98      	ldr	r3, [pc, #608]	@ (8007550 <_dtoa_r+0x2d0>)
 80072ee:	bfbc      	itt	lt
 80072f0:	2201      	movlt	r2, #1
 80072f2:	6032      	strlt	r2, [r6, #0]
 80072f4:	43bb      	bics	r3, r7
 80072f6:	d112      	bne.n	800731e <_dtoa_r+0x9e>
 80072f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007304:	4323      	orrs	r3, r4
 8007306:	f000 854d 	beq.w	8007da4 <_dtoa_r+0xb24>
 800730a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800730c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007564 <_dtoa_r+0x2e4>
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 854f 	beq.w	8007db4 <_dtoa_r+0xb34>
 8007316:	f10a 0303 	add.w	r3, sl, #3
 800731a:	f000 bd49 	b.w	8007db0 <_dtoa_r+0xb30>
 800731e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007322:	2200      	movs	r2, #0
 8007324:	ec51 0b17 	vmov	r0, r1, d7
 8007328:	2300      	movs	r3, #0
 800732a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800732e:	f7f9 fbeb 	bl	8000b08 <__aeabi_dcmpeq>
 8007332:	4680      	mov	r8, r0
 8007334:	b158      	cbz	r0, 800734e <_dtoa_r+0xce>
 8007336:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007338:	2301      	movs	r3, #1
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800733e:	b113      	cbz	r3, 8007346 <_dtoa_r+0xc6>
 8007340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007342:	4b84      	ldr	r3, [pc, #528]	@ (8007554 <_dtoa_r+0x2d4>)
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007568 <_dtoa_r+0x2e8>
 800734a:	f000 bd33 	b.w	8007db4 <_dtoa_r+0xb34>
 800734e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007352:	aa16      	add	r2, sp, #88	@ 0x58
 8007354:	a917      	add	r1, sp, #92	@ 0x5c
 8007356:	4658      	mov	r0, fp
 8007358:	f001 f9e2 	bl	8008720 <__d2b>
 800735c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007360:	4681      	mov	r9, r0
 8007362:	2e00      	cmp	r6, #0
 8007364:	d077      	beq.n	8007456 <_dtoa_r+0x1d6>
 8007366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007368:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800736c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007374:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007378:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800737c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007380:	4619      	mov	r1, r3
 8007382:	2200      	movs	r2, #0
 8007384:	4b74      	ldr	r3, [pc, #464]	@ (8007558 <_dtoa_r+0x2d8>)
 8007386:	f7f8 ff9f 	bl	80002c8 <__aeabi_dsub>
 800738a:	a369      	add	r3, pc, #420	@ (adr r3, 8007530 <_dtoa_r+0x2b0>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f9 f952 	bl	8000638 <__aeabi_dmul>
 8007394:	a368      	add	r3, pc, #416	@ (adr r3, 8007538 <_dtoa_r+0x2b8>)
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f7f8 ff97 	bl	80002cc <__adddf3>
 800739e:	4604      	mov	r4, r0
 80073a0:	4630      	mov	r0, r6
 80073a2:	460d      	mov	r5, r1
 80073a4:	f7f9 f8de 	bl	8000564 <__aeabi_i2d>
 80073a8:	a365      	add	r3, pc, #404	@ (adr r3, 8007540 <_dtoa_r+0x2c0>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f7f9 f943 	bl	8000638 <__aeabi_dmul>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4620      	mov	r0, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7f8 ff87 	bl	80002cc <__adddf3>
 80073be:	4604      	mov	r4, r0
 80073c0:	460d      	mov	r5, r1
 80073c2:	f7f9 fbe9 	bl	8000b98 <__aeabi_d2iz>
 80073c6:	2200      	movs	r2, #0
 80073c8:	4607      	mov	r7, r0
 80073ca:	2300      	movs	r3, #0
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f7f9 fba4 	bl	8000b1c <__aeabi_dcmplt>
 80073d4:	b140      	cbz	r0, 80073e8 <_dtoa_r+0x168>
 80073d6:	4638      	mov	r0, r7
 80073d8:	f7f9 f8c4 	bl	8000564 <__aeabi_i2d>
 80073dc:	4622      	mov	r2, r4
 80073de:	462b      	mov	r3, r5
 80073e0:	f7f9 fb92 	bl	8000b08 <__aeabi_dcmpeq>
 80073e4:	b900      	cbnz	r0, 80073e8 <_dtoa_r+0x168>
 80073e6:	3f01      	subs	r7, #1
 80073e8:	2f16      	cmp	r7, #22
 80073ea:	d851      	bhi.n	8007490 <_dtoa_r+0x210>
 80073ec:	4b5b      	ldr	r3, [pc, #364]	@ (800755c <_dtoa_r+0x2dc>)
 80073ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073fa:	f7f9 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d048      	beq.n	8007494 <_dtoa_r+0x214>
 8007402:	3f01      	subs	r7, #1
 8007404:	2300      	movs	r3, #0
 8007406:	9312      	str	r3, [sp, #72]	@ 0x48
 8007408:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800740a:	1b9b      	subs	r3, r3, r6
 800740c:	1e5a      	subs	r2, r3, #1
 800740e:	bf44      	itt	mi
 8007410:	f1c3 0801 	rsbmi	r8, r3, #1
 8007414:	2300      	movmi	r3, #0
 8007416:	9208      	str	r2, [sp, #32]
 8007418:	bf54      	ite	pl
 800741a:	f04f 0800 	movpl.w	r8, #0
 800741e:	9308      	strmi	r3, [sp, #32]
 8007420:	2f00      	cmp	r7, #0
 8007422:	db39      	blt.n	8007498 <_dtoa_r+0x218>
 8007424:	9b08      	ldr	r3, [sp, #32]
 8007426:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007428:	443b      	add	r3, r7
 800742a:	9308      	str	r3, [sp, #32]
 800742c:	2300      	movs	r3, #0
 800742e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007432:	2b09      	cmp	r3, #9
 8007434:	d864      	bhi.n	8007500 <_dtoa_r+0x280>
 8007436:	2b05      	cmp	r3, #5
 8007438:	bfc4      	itt	gt
 800743a:	3b04      	subgt	r3, #4
 800743c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	f1a3 0302 	sub.w	r3, r3, #2
 8007444:	bfcc      	ite	gt
 8007446:	2400      	movgt	r4, #0
 8007448:	2401      	movle	r4, #1
 800744a:	2b03      	cmp	r3, #3
 800744c:	d863      	bhi.n	8007516 <_dtoa_r+0x296>
 800744e:	e8df f003 	tbb	[pc, r3]
 8007452:	372a      	.short	0x372a
 8007454:	5535      	.short	0x5535
 8007456:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800745a:	441e      	add	r6, r3
 800745c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007460:	2b20      	cmp	r3, #32
 8007462:	bfc1      	itttt	gt
 8007464:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007468:	409f      	lslgt	r7, r3
 800746a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800746e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007472:	bfd6      	itet	le
 8007474:	f1c3 0320 	rsble	r3, r3, #32
 8007478:	ea47 0003 	orrgt.w	r0, r7, r3
 800747c:	fa04 f003 	lslle.w	r0, r4, r3
 8007480:	f7f9 f860 	bl	8000544 <__aeabi_ui2d>
 8007484:	2201      	movs	r2, #1
 8007486:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800748a:	3e01      	subs	r6, #1
 800748c:	9214      	str	r2, [sp, #80]	@ 0x50
 800748e:	e777      	b.n	8007380 <_dtoa_r+0x100>
 8007490:	2301      	movs	r3, #1
 8007492:	e7b8      	b.n	8007406 <_dtoa_r+0x186>
 8007494:	9012      	str	r0, [sp, #72]	@ 0x48
 8007496:	e7b7      	b.n	8007408 <_dtoa_r+0x188>
 8007498:	427b      	negs	r3, r7
 800749a:	930a      	str	r3, [sp, #40]	@ 0x28
 800749c:	2300      	movs	r3, #0
 800749e:	eba8 0807 	sub.w	r8, r8, r7
 80074a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074a4:	e7c4      	b.n	8007430 <_dtoa_r+0x1b0>
 80074a6:	2300      	movs	r3, #0
 80074a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dc35      	bgt.n	800751c <_dtoa_r+0x29c>
 80074b0:	2301      	movs	r3, #1
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	9307      	str	r3, [sp, #28]
 80074b6:	461a      	mov	r2, r3
 80074b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074ba:	e00b      	b.n	80074d4 <_dtoa_r+0x254>
 80074bc:	2301      	movs	r3, #1
 80074be:	e7f3      	b.n	80074a8 <_dtoa_r+0x228>
 80074c0:	2300      	movs	r3, #0
 80074c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	3301      	adds	r3, #1
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	9307      	str	r3, [sp, #28]
 80074d0:	bfb8      	it	lt
 80074d2:	2301      	movlt	r3, #1
 80074d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074d8:	2100      	movs	r1, #0
 80074da:	2204      	movs	r2, #4
 80074dc:	f102 0514 	add.w	r5, r2, #20
 80074e0:	429d      	cmp	r5, r3
 80074e2:	d91f      	bls.n	8007524 <_dtoa_r+0x2a4>
 80074e4:	6041      	str	r1, [r0, #4]
 80074e6:	4658      	mov	r0, fp
 80074e8:	f000 fdf0 	bl	80080cc <_Balloc>
 80074ec:	4682      	mov	sl, r0
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d13c      	bne.n	800756c <_dtoa_r+0x2ec>
 80074f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007560 <_dtoa_r+0x2e0>)
 80074f4:	4602      	mov	r2, r0
 80074f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80074fa:	e6d8      	b.n	80072ae <_dtoa_r+0x2e>
 80074fc:	2301      	movs	r3, #1
 80074fe:	e7e0      	b.n	80074c2 <_dtoa_r+0x242>
 8007500:	2401      	movs	r4, #1
 8007502:	2300      	movs	r3, #0
 8007504:	9309      	str	r3, [sp, #36]	@ 0x24
 8007506:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	9307      	str	r3, [sp, #28]
 8007510:	2200      	movs	r2, #0
 8007512:	2312      	movs	r3, #18
 8007514:	e7d0      	b.n	80074b8 <_dtoa_r+0x238>
 8007516:	2301      	movs	r3, #1
 8007518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800751a:	e7f5      	b.n	8007508 <_dtoa_r+0x288>
 800751c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	9307      	str	r3, [sp, #28]
 8007522:	e7d7      	b.n	80074d4 <_dtoa_r+0x254>
 8007524:	3101      	adds	r1, #1
 8007526:	0052      	lsls	r2, r2, #1
 8007528:	e7d8      	b.n	80074dc <_dtoa_r+0x25c>
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w
 8007530:	636f4361 	.word	0x636f4361
 8007534:	3fd287a7 	.word	0x3fd287a7
 8007538:	8b60c8b3 	.word	0x8b60c8b3
 800753c:	3fc68a28 	.word	0x3fc68a28
 8007540:	509f79fb 	.word	0x509f79fb
 8007544:	3fd34413 	.word	0x3fd34413
 8007548:	0800af51 	.word	0x0800af51
 800754c:	0800af68 	.word	0x0800af68
 8007550:	7ff00000 	.word	0x7ff00000
 8007554:	0800af21 	.word	0x0800af21
 8007558:	3ff80000 	.word	0x3ff80000
 800755c:	0800b060 	.word	0x0800b060
 8007560:	0800afc0 	.word	0x0800afc0
 8007564:	0800af4d 	.word	0x0800af4d
 8007568:	0800af20 	.word	0x0800af20
 800756c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007570:	6018      	str	r0, [r3, #0]
 8007572:	9b07      	ldr	r3, [sp, #28]
 8007574:	2b0e      	cmp	r3, #14
 8007576:	f200 80a4 	bhi.w	80076c2 <_dtoa_r+0x442>
 800757a:	2c00      	cmp	r4, #0
 800757c:	f000 80a1 	beq.w	80076c2 <_dtoa_r+0x442>
 8007580:	2f00      	cmp	r7, #0
 8007582:	dd33      	ble.n	80075ec <_dtoa_r+0x36c>
 8007584:	4bad      	ldr	r3, [pc, #692]	@ (800783c <_dtoa_r+0x5bc>)
 8007586:	f007 020f 	and.w	r2, r7, #15
 800758a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800758e:	ed93 7b00 	vldr	d7, [r3]
 8007592:	05f8      	lsls	r0, r7, #23
 8007594:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007598:	ea4f 1427 	mov.w	r4, r7, asr #4
 800759c:	d516      	bpl.n	80075cc <_dtoa_r+0x34c>
 800759e:	4ba8      	ldr	r3, [pc, #672]	@ (8007840 <_dtoa_r+0x5c0>)
 80075a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075a8:	f7f9 f970 	bl	800088c <__aeabi_ddiv>
 80075ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b0:	f004 040f 	and.w	r4, r4, #15
 80075b4:	2603      	movs	r6, #3
 80075b6:	4da2      	ldr	r5, [pc, #648]	@ (8007840 <_dtoa_r+0x5c0>)
 80075b8:	b954      	cbnz	r4, 80075d0 <_dtoa_r+0x350>
 80075ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c2:	f7f9 f963 	bl	800088c <__aeabi_ddiv>
 80075c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ca:	e028      	b.n	800761e <_dtoa_r+0x39e>
 80075cc:	2602      	movs	r6, #2
 80075ce:	e7f2      	b.n	80075b6 <_dtoa_r+0x336>
 80075d0:	07e1      	lsls	r1, r4, #31
 80075d2:	d508      	bpl.n	80075e6 <_dtoa_r+0x366>
 80075d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075dc:	f7f9 f82c 	bl	8000638 <__aeabi_dmul>
 80075e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075e4:	3601      	adds	r6, #1
 80075e6:	1064      	asrs	r4, r4, #1
 80075e8:	3508      	adds	r5, #8
 80075ea:	e7e5      	b.n	80075b8 <_dtoa_r+0x338>
 80075ec:	f000 80d2 	beq.w	8007794 <_dtoa_r+0x514>
 80075f0:	427c      	negs	r4, r7
 80075f2:	4b92      	ldr	r3, [pc, #584]	@ (800783c <_dtoa_r+0x5bc>)
 80075f4:	4d92      	ldr	r5, [pc, #584]	@ (8007840 <_dtoa_r+0x5c0>)
 80075f6:	f004 020f 	and.w	r2, r4, #15
 80075fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007606:	f7f9 f817 	bl	8000638 <__aeabi_dmul>
 800760a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800760e:	1124      	asrs	r4, r4, #4
 8007610:	2300      	movs	r3, #0
 8007612:	2602      	movs	r6, #2
 8007614:	2c00      	cmp	r4, #0
 8007616:	f040 80b2 	bne.w	800777e <_dtoa_r+0x4fe>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1d3      	bne.n	80075c6 <_dtoa_r+0x346>
 800761e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007620:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 80b7 	beq.w	8007798 <_dtoa_r+0x518>
 800762a:	4b86      	ldr	r3, [pc, #536]	@ (8007844 <_dtoa_r+0x5c4>)
 800762c:	2200      	movs	r2, #0
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f7f9 fa73 	bl	8000b1c <__aeabi_dcmplt>
 8007636:	2800      	cmp	r0, #0
 8007638:	f000 80ae 	beq.w	8007798 <_dtoa_r+0x518>
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 80aa 	beq.w	8007798 <_dtoa_r+0x518>
 8007644:	9b00      	ldr	r3, [sp, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	dd37      	ble.n	80076ba <_dtoa_r+0x43a>
 800764a:	1e7b      	subs	r3, r7, #1
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	4620      	mov	r0, r4
 8007650:	4b7d      	ldr	r3, [pc, #500]	@ (8007848 <_dtoa_r+0x5c8>)
 8007652:	2200      	movs	r2, #0
 8007654:	4629      	mov	r1, r5
 8007656:	f7f8 ffef 	bl	8000638 <__aeabi_dmul>
 800765a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800765e:	9c00      	ldr	r4, [sp, #0]
 8007660:	3601      	adds	r6, #1
 8007662:	4630      	mov	r0, r6
 8007664:	f7f8 ff7e 	bl	8000564 <__aeabi_i2d>
 8007668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800766c:	f7f8 ffe4 	bl	8000638 <__aeabi_dmul>
 8007670:	4b76      	ldr	r3, [pc, #472]	@ (800784c <_dtoa_r+0x5cc>)
 8007672:	2200      	movs	r2, #0
 8007674:	f7f8 fe2a 	bl	80002cc <__adddf3>
 8007678:	4605      	mov	r5, r0
 800767a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800767e:	2c00      	cmp	r4, #0
 8007680:	f040 808d 	bne.w	800779e <_dtoa_r+0x51e>
 8007684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007688:	4b71      	ldr	r3, [pc, #452]	@ (8007850 <_dtoa_r+0x5d0>)
 800768a:	2200      	movs	r2, #0
 800768c:	f7f8 fe1c 	bl	80002c8 <__aeabi_dsub>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007698:	462a      	mov	r2, r5
 800769a:	4633      	mov	r3, r6
 800769c:	f7f9 fa5c 	bl	8000b58 <__aeabi_dcmpgt>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	f040 828b 	bne.w	8007bbc <_dtoa_r+0x93c>
 80076a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076aa:	462a      	mov	r2, r5
 80076ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076b0:	f7f9 fa34 	bl	8000b1c <__aeabi_dcmplt>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f040 8128 	bne.w	800790a <_dtoa_r+0x68a>
 80076ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f2c0 815a 	blt.w	800797e <_dtoa_r+0x6fe>
 80076ca:	2f0e      	cmp	r7, #14
 80076cc:	f300 8157 	bgt.w	800797e <_dtoa_r+0x6fe>
 80076d0:	4b5a      	ldr	r3, [pc, #360]	@ (800783c <_dtoa_r+0x5bc>)
 80076d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076d6:	ed93 7b00 	vldr	d7, [r3]
 80076da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	ed8d 7b00 	vstr	d7, [sp]
 80076e2:	da03      	bge.n	80076ec <_dtoa_r+0x46c>
 80076e4:	9b07      	ldr	r3, [sp, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f340 8101 	ble.w	80078ee <_dtoa_r+0x66e>
 80076ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076f0:	4656      	mov	r6, sl
 80076f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076f6:	4620      	mov	r0, r4
 80076f8:	4629      	mov	r1, r5
 80076fa:	f7f9 f8c7 	bl	800088c <__aeabi_ddiv>
 80076fe:	f7f9 fa4b 	bl	8000b98 <__aeabi_d2iz>
 8007702:	4680      	mov	r8, r0
 8007704:	f7f8 ff2e 	bl	8000564 <__aeabi_i2d>
 8007708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800770c:	f7f8 ff94 	bl	8000638 <__aeabi_dmul>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4620      	mov	r0, r4
 8007716:	4629      	mov	r1, r5
 8007718:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800771c:	f7f8 fdd4 	bl	80002c8 <__aeabi_dsub>
 8007720:	f806 4b01 	strb.w	r4, [r6], #1
 8007724:	9d07      	ldr	r5, [sp, #28]
 8007726:	eba6 040a 	sub.w	r4, r6, sl
 800772a:	42a5      	cmp	r5, r4
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	f040 8117 	bne.w	8007962 <_dtoa_r+0x6e2>
 8007734:	f7f8 fdca 	bl	80002cc <__adddf3>
 8007738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800773c:	4604      	mov	r4, r0
 800773e:	460d      	mov	r5, r1
 8007740:	f7f9 fa0a 	bl	8000b58 <__aeabi_dcmpgt>
 8007744:	2800      	cmp	r0, #0
 8007746:	f040 80f9 	bne.w	800793c <_dtoa_r+0x6bc>
 800774a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f9 f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 8007756:	b118      	cbz	r0, 8007760 <_dtoa_r+0x4e0>
 8007758:	f018 0f01 	tst.w	r8, #1
 800775c:	f040 80ee 	bne.w	800793c <_dtoa_r+0x6bc>
 8007760:	4649      	mov	r1, r9
 8007762:	4658      	mov	r0, fp
 8007764:	f000 fcf2 	bl	800814c <_Bfree>
 8007768:	2300      	movs	r3, #0
 800776a:	7033      	strb	r3, [r6, #0]
 800776c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800776e:	3701      	adds	r7, #1
 8007770:	601f      	str	r7, [r3, #0]
 8007772:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 831d 	beq.w	8007db4 <_dtoa_r+0xb34>
 800777a:	601e      	str	r6, [r3, #0]
 800777c:	e31a      	b.n	8007db4 <_dtoa_r+0xb34>
 800777e:	07e2      	lsls	r2, r4, #31
 8007780:	d505      	bpl.n	800778e <_dtoa_r+0x50e>
 8007782:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007786:	f7f8 ff57 	bl	8000638 <__aeabi_dmul>
 800778a:	3601      	adds	r6, #1
 800778c:	2301      	movs	r3, #1
 800778e:	1064      	asrs	r4, r4, #1
 8007790:	3508      	adds	r5, #8
 8007792:	e73f      	b.n	8007614 <_dtoa_r+0x394>
 8007794:	2602      	movs	r6, #2
 8007796:	e742      	b.n	800761e <_dtoa_r+0x39e>
 8007798:	9c07      	ldr	r4, [sp, #28]
 800779a:	9704      	str	r7, [sp, #16]
 800779c:	e761      	b.n	8007662 <_dtoa_r+0x3e2>
 800779e:	4b27      	ldr	r3, [pc, #156]	@ (800783c <_dtoa_r+0x5bc>)
 80077a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077aa:	4454      	add	r4, sl
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d053      	beq.n	8007858 <_dtoa_r+0x5d8>
 80077b0:	4928      	ldr	r1, [pc, #160]	@ (8007854 <_dtoa_r+0x5d4>)
 80077b2:	2000      	movs	r0, #0
 80077b4:	f7f9 f86a 	bl	800088c <__aeabi_ddiv>
 80077b8:	4633      	mov	r3, r6
 80077ba:	462a      	mov	r2, r5
 80077bc:	f7f8 fd84 	bl	80002c8 <__aeabi_dsub>
 80077c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077c4:	4656      	mov	r6, sl
 80077c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ca:	f7f9 f9e5 	bl	8000b98 <__aeabi_d2iz>
 80077ce:	4605      	mov	r5, r0
 80077d0:	f7f8 fec8 	bl	8000564 <__aeabi_i2d>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077dc:	f7f8 fd74 	bl	80002c8 <__aeabi_dsub>
 80077e0:	3530      	adds	r5, #48	@ 0x30
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077ea:	f806 5b01 	strb.w	r5, [r6], #1
 80077ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077f2:	f7f9 f993 	bl	8000b1c <__aeabi_dcmplt>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d171      	bne.n	80078de <_dtoa_r+0x65e>
 80077fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077fe:	4911      	ldr	r1, [pc, #68]	@ (8007844 <_dtoa_r+0x5c4>)
 8007800:	2000      	movs	r0, #0
 8007802:	f7f8 fd61 	bl	80002c8 <__aeabi_dsub>
 8007806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800780a:	f7f9 f987 	bl	8000b1c <__aeabi_dcmplt>
 800780e:	2800      	cmp	r0, #0
 8007810:	f040 8095 	bne.w	800793e <_dtoa_r+0x6be>
 8007814:	42a6      	cmp	r6, r4
 8007816:	f43f af50 	beq.w	80076ba <_dtoa_r+0x43a>
 800781a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800781e:	4b0a      	ldr	r3, [pc, #40]	@ (8007848 <_dtoa_r+0x5c8>)
 8007820:	2200      	movs	r2, #0
 8007822:	f7f8 ff09 	bl	8000638 <__aeabi_dmul>
 8007826:	4b08      	ldr	r3, [pc, #32]	@ (8007848 <_dtoa_r+0x5c8>)
 8007828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800782c:	2200      	movs	r2, #0
 800782e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007832:	f7f8 ff01 	bl	8000638 <__aeabi_dmul>
 8007836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800783a:	e7c4      	b.n	80077c6 <_dtoa_r+0x546>
 800783c:	0800b060 	.word	0x0800b060
 8007840:	0800b038 	.word	0x0800b038
 8007844:	3ff00000 	.word	0x3ff00000
 8007848:	40240000 	.word	0x40240000
 800784c:	401c0000 	.word	0x401c0000
 8007850:	40140000 	.word	0x40140000
 8007854:	3fe00000 	.word	0x3fe00000
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	f7f8 feec 	bl	8000638 <__aeabi_dmul>
 8007860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007864:	9415      	str	r4, [sp, #84]	@ 0x54
 8007866:	4656      	mov	r6, sl
 8007868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800786c:	f7f9 f994 	bl	8000b98 <__aeabi_d2iz>
 8007870:	4605      	mov	r5, r0
 8007872:	f7f8 fe77 	bl	8000564 <__aeabi_i2d>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787e:	f7f8 fd23 	bl	80002c8 <__aeabi_dsub>
 8007882:	3530      	adds	r5, #48	@ 0x30
 8007884:	f806 5b01 	strb.w	r5, [r6], #1
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	42a6      	cmp	r6, r4
 800788e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	d124      	bne.n	80078e2 <_dtoa_r+0x662>
 8007898:	4bac      	ldr	r3, [pc, #688]	@ (8007b4c <_dtoa_r+0x8cc>)
 800789a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800789e:	f7f8 fd15 	bl	80002cc <__adddf3>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078aa:	f7f9 f955 	bl	8000b58 <__aeabi_dcmpgt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d145      	bne.n	800793e <_dtoa_r+0x6be>
 80078b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078b6:	49a5      	ldr	r1, [pc, #660]	@ (8007b4c <_dtoa_r+0x8cc>)
 80078b8:	2000      	movs	r0, #0
 80078ba:	f7f8 fd05 	bl	80002c8 <__aeabi_dsub>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c6:	f7f9 f929 	bl	8000b1c <__aeabi_dcmplt>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f43f aef5 	beq.w	80076ba <_dtoa_r+0x43a>
 80078d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078d2:	1e73      	subs	r3, r6, #1
 80078d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80078d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078da:	2b30      	cmp	r3, #48	@ 0x30
 80078dc:	d0f8      	beq.n	80078d0 <_dtoa_r+0x650>
 80078de:	9f04      	ldr	r7, [sp, #16]
 80078e0:	e73e      	b.n	8007760 <_dtoa_r+0x4e0>
 80078e2:	4b9b      	ldr	r3, [pc, #620]	@ (8007b50 <_dtoa_r+0x8d0>)
 80078e4:	f7f8 fea8 	bl	8000638 <__aeabi_dmul>
 80078e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ec:	e7bc      	b.n	8007868 <_dtoa_r+0x5e8>
 80078ee:	d10c      	bne.n	800790a <_dtoa_r+0x68a>
 80078f0:	4b98      	ldr	r3, [pc, #608]	@ (8007b54 <_dtoa_r+0x8d4>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078f8:	f7f8 fe9e 	bl	8000638 <__aeabi_dmul>
 80078fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007900:	f7f9 f920 	bl	8000b44 <__aeabi_dcmpge>
 8007904:	2800      	cmp	r0, #0
 8007906:	f000 8157 	beq.w	8007bb8 <_dtoa_r+0x938>
 800790a:	2400      	movs	r4, #0
 800790c:	4625      	mov	r5, r4
 800790e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007910:	43db      	mvns	r3, r3
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	4656      	mov	r6, sl
 8007916:	2700      	movs	r7, #0
 8007918:	4621      	mov	r1, r4
 800791a:	4658      	mov	r0, fp
 800791c:	f000 fc16 	bl	800814c <_Bfree>
 8007920:	2d00      	cmp	r5, #0
 8007922:	d0dc      	beq.n	80078de <_dtoa_r+0x65e>
 8007924:	b12f      	cbz	r7, 8007932 <_dtoa_r+0x6b2>
 8007926:	42af      	cmp	r7, r5
 8007928:	d003      	beq.n	8007932 <_dtoa_r+0x6b2>
 800792a:	4639      	mov	r1, r7
 800792c:	4658      	mov	r0, fp
 800792e:	f000 fc0d 	bl	800814c <_Bfree>
 8007932:	4629      	mov	r1, r5
 8007934:	4658      	mov	r0, fp
 8007936:	f000 fc09 	bl	800814c <_Bfree>
 800793a:	e7d0      	b.n	80078de <_dtoa_r+0x65e>
 800793c:	9704      	str	r7, [sp, #16]
 800793e:	4633      	mov	r3, r6
 8007940:	461e      	mov	r6, r3
 8007942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007946:	2a39      	cmp	r2, #57	@ 0x39
 8007948:	d107      	bne.n	800795a <_dtoa_r+0x6da>
 800794a:	459a      	cmp	sl, r3
 800794c:	d1f8      	bne.n	8007940 <_dtoa_r+0x6c0>
 800794e:	9a04      	ldr	r2, [sp, #16]
 8007950:	3201      	adds	r2, #1
 8007952:	9204      	str	r2, [sp, #16]
 8007954:	2230      	movs	r2, #48	@ 0x30
 8007956:	f88a 2000 	strb.w	r2, [sl]
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	3201      	adds	r2, #1
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	e7bd      	b.n	80078de <_dtoa_r+0x65e>
 8007962:	4b7b      	ldr	r3, [pc, #492]	@ (8007b50 <_dtoa_r+0x8d0>)
 8007964:	2200      	movs	r2, #0
 8007966:	f7f8 fe67 	bl	8000638 <__aeabi_dmul>
 800796a:	2200      	movs	r2, #0
 800796c:	2300      	movs	r3, #0
 800796e:	4604      	mov	r4, r0
 8007970:	460d      	mov	r5, r1
 8007972:	f7f9 f8c9 	bl	8000b08 <__aeabi_dcmpeq>
 8007976:	2800      	cmp	r0, #0
 8007978:	f43f aebb 	beq.w	80076f2 <_dtoa_r+0x472>
 800797c:	e6f0      	b.n	8007760 <_dtoa_r+0x4e0>
 800797e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007980:	2a00      	cmp	r2, #0
 8007982:	f000 80db 	beq.w	8007b3c <_dtoa_r+0x8bc>
 8007986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007988:	2a01      	cmp	r2, #1
 800798a:	f300 80bf 	bgt.w	8007b0c <_dtoa_r+0x88c>
 800798e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007990:	2a00      	cmp	r2, #0
 8007992:	f000 80b7 	beq.w	8007b04 <_dtoa_r+0x884>
 8007996:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800799a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800799c:	4646      	mov	r6, r8
 800799e:	9a08      	ldr	r2, [sp, #32]
 80079a0:	2101      	movs	r1, #1
 80079a2:	441a      	add	r2, r3
 80079a4:	4658      	mov	r0, fp
 80079a6:	4498      	add	r8, r3
 80079a8:	9208      	str	r2, [sp, #32]
 80079aa:	f000 fc83 	bl	80082b4 <__i2b>
 80079ae:	4605      	mov	r5, r0
 80079b0:	b15e      	cbz	r6, 80079ca <_dtoa_r+0x74a>
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dd08      	ble.n	80079ca <_dtoa_r+0x74a>
 80079b8:	42b3      	cmp	r3, r6
 80079ba:	9a08      	ldr	r2, [sp, #32]
 80079bc:	bfa8      	it	ge
 80079be:	4633      	movge	r3, r6
 80079c0:	eba8 0803 	sub.w	r8, r8, r3
 80079c4:	1af6      	subs	r6, r6, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	9308      	str	r3, [sp, #32]
 80079ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079cc:	b1f3      	cbz	r3, 8007a0c <_dtoa_r+0x78c>
 80079ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80b7 	beq.w	8007b44 <_dtoa_r+0x8c4>
 80079d6:	b18c      	cbz	r4, 80079fc <_dtoa_r+0x77c>
 80079d8:	4629      	mov	r1, r5
 80079da:	4622      	mov	r2, r4
 80079dc:	4658      	mov	r0, fp
 80079de:	f000 fd29 	bl	8008434 <__pow5mult>
 80079e2:	464a      	mov	r2, r9
 80079e4:	4601      	mov	r1, r0
 80079e6:	4605      	mov	r5, r0
 80079e8:	4658      	mov	r0, fp
 80079ea:	f000 fc79 	bl	80082e0 <__multiply>
 80079ee:	4649      	mov	r1, r9
 80079f0:	9004      	str	r0, [sp, #16]
 80079f2:	4658      	mov	r0, fp
 80079f4:	f000 fbaa 	bl	800814c <_Bfree>
 80079f8:	9b04      	ldr	r3, [sp, #16]
 80079fa:	4699      	mov	r9, r3
 80079fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079fe:	1b1a      	subs	r2, r3, r4
 8007a00:	d004      	beq.n	8007a0c <_dtoa_r+0x78c>
 8007a02:	4649      	mov	r1, r9
 8007a04:	4658      	mov	r0, fp
 8007a06:	f000 fd15 	bl	8008434 <__pow5mult>
 8007a0a:	4681      	mov	r9, r0
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	4658      	mov	r0, fp
 8007a10:	f000 fc50 	bl	80082b4 <__i2b>
 8007a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a16:	4604      	mov	r4, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 81cf 	beq.w	8007dbc <_dtoa_r+0xb3c>
 8007a1e:	461a      	mov	r2, r3
 8007a20:	4601      	mov	r1, r0
 8007a22:	4658      	mov	r0, fp
 8007a24:	f000 fd06 	bl	8008434 <__pow5mult>
 8007a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	f300 8095 	bgt.w	8007b5c <_dtoa_r+0x8dc>
 8007a32:	9b02      	ldr	r3, [sp, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f040 8087 	bne.w	8007b48 <_dtoa_r+0x8c8>
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f040 8089 	bne.w	8007b58 <_dtoa_r+0x8d8>
 8007a46:	9b03      	ldr	r3, [sp, #12]
 8007a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a4c:	0d1b      	lsrs	r3, r3, #20
 8007a4e:	051b      	lsls	r3, r3, #20
 8007a50:	b12b      	cbz	r3, 8007a5e <_dtoa_r+0x7de>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	3301      	adds	r3, #1
 8007a56:	9308      	str	r3, [sp, #32]
 8007a58:	f108 0801 	add.w	r8, r8, #1
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 81b0 	beq.w	8007dc8 <_dtoa_r+0xb48>
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a6e:	6918      	ldr	r0, [r3, #16]
 8007a70:	f000 fbd4 	bl	800821c <__hi0bits>
 8007a74:	f1c0 0020 	rsb	r0, r0, #32
 8007a78:	9b08      	ldr	r3, [sp, #32]
 8007a7a:	4418      	add	r0, r3
 8007a7c:	f010 001f 	ands.w	r0, r0, #31
 8007a80:	d077      	beq.n	8007b72 <_dtoa_r+0x8f2>
 8007a82:	f1c0 0320 	rsb	r3, r0, #32
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	dd6b      	ble.n	8007b62 <_dtoa_r+0x8e2>
 8007a8a:	9b08      	ldr	r3, [sp, #32]
 8007a8c:	f1c0 001c 	rsb	r0, r0, #28
 8007a90:	4403      	add	r3, r0
 8007a92:	4480      	add	r8, r0
 8007a94:	4406      	add	r6, r0
 8007a96:	9308      	str	r3, [sp, #32]
 8007a98:	f1b8 0f00 	cmp.w	r8, #0
 8007a9c:	dd05      	ble.n	8007aaa <_dtoa_r+0x82a>
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	4658      	mov	r0, fp
 8007aa4:	f000 fd20 	bl	80084e8 <__lshift>
 8007aa8:	4681      	mov	r9, r0
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dd05      	ble.n	8007abc <_dtoa_r+0x83c>
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4658      	mov	r0, fp
 8007ab6:	f000 fd17 	bl	80084e8 <__lshift>
 8007aba:	4604      	mov	r4, r0
 8007abc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d059      	beq.n	8007b76 <_dtoa_r+0x8f6>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4648      	mov	r0, r9
 8007ac6:	f000 fd7b 	bl	80085c0 <__mcmp>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	da53      	bge.n	8007b76 <_dtoa_r+0x8f6>
 8007ace:	1e7b      	subs	r3, r7, #1
 8007ad0:	9304      	str	r3, [sp, #16]
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	4658      	mov	r0, fp
 8007ada:	f000 fb59 	bl	8008190 <__multadd>
 8007ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ae0:	4681      	mov	r9, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 8172 	beq.w	8007dcc <_dtoa_r+0xb4c>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4629      	mov	r1, r5
 8007aec:	220a      	movs	r2, #10
 8007aee:	4658      	mov	r0, fp
 8007af0:	f000 fb4e 	bl	8008190 <__multadd>
 8007af4:	9b00      	ldr	r3, [sp, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	4605      	mov	r5, r0
 8007afa:	dc67      	bgt.n	8007bcc <_dtoa_r+0x94c>
 8007afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	dc41      	bgt.n	8007b86 <_dtoa_r+0x906>
 8007b02:	e063      	b.n	8007bcc <_dtoa_r+0x94c>
 8007b04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b0a:	e746      	b.n	800799a <_dtoa_r+0x71a>
 8007b0c:	9b07      	ldr	r3, [sp, #28]
 8007b0e:	1e5c      	subs	r4, r3, #1
 8007b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b12:	42a3      	cmp	r3, r4
 8007b14:	bfbf      	itttt	lt
 8007b16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b1c:	1ae3      	sublt	r3, r4, r3
 8007b1e:	bfb4      	ite	lt
 8007b20:	18d2      	addlt	r2, r2, r3
 8007b22:	1b1c      	subge	r4, r3, r4
 8007b24:	9b07      	ldr	r3, [sp, #28]
 8007b26:	bfbc      	itt	lt
 8007b28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b2a:	2400      	movlt	r4, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfb5      	itete	lt
 8007b30:	eba8 0603 	sublt.w	r6, r8, r3
 8007b34:	9b07      	ldrge	r3, [sp, #28]
 8007b36:	2300      	movlt	r3, #0
 8007b38:	4646      	movge	r6, r8
 8007b3a:	e730      	b.n	800799e <_dtoa_r+0x71e>
 8007b3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b40:	4646      	mov	r6, r8
 8007b42:	e735      	b.n	80079b0 <_dtoa_r+0x730>
 8007b44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b46:	e75c      	b.n	8007a02 <_dtoa_r+0x782>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e788      	b.n	8007a5e <_dtoa_r+0x7de>
 8007b4c:	3fe00000 	.word	0x3fe00000
 8007b50:	40240000 	.word	0x40240000
 8007b54:	40140000 	.word	0x40140000
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	e780      	b.n	8007a5e <_dtoa_r+0x7de>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b60:	e782      	b.n	8007a68 <_dtoa_r+0x7e8>
 8007b62:	d099      	beq.n	8007a98 <_dtoa_r+0x818>
 8007b64:	9a08      	ldr	r2, [sp, #32]
 8007b66:	331c      	adds	r3, #28
 8007b68:	441a      	add	r2, r3
 8007b6a:	4498      	add	r8, r3
 8007b6c:	441e      	add	r6, r3
 8007b6e:	9208      	str	r2, [sp, #32]
 8007b70:	e792      	b.n	8007a98 <_dtoa_r+0x818>
 8007b72:	4603      	mov	r3, r0
 8007b74:	e7f6      	b.n	8007b64 <_dtoa_r+0x8e4>
 8007b76:	9b07      	ldr	r3, [sp, #28]
 8007b78:	9704      	str	r7, [sp, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dc20      	bgt.n	8007bc0 <_dtoa_r+0x940>
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	dd1e      	ble.n	8007bc4 <_dtoa_r+0x944>
 8007b86:	9b00      	ldr	r3, [sp, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f aec0 	bne.w	800790e <_dtoa_r+0x68e>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	2205      	movs	r2, #5
 8007b92:	4658      	mov	r0, fp
 8007b94:	f000 fafc 	bl	8008190 <__multadd>
 8007b98:	4601      	mov	r1, r0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4648      	mov	r0, r9
 8007b9e:	f000 fd0f 	bl	80085c0 <__mcmp>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	f77f aeb3 	ble.w	800790e <_dtoa_r+0x68e>
 8007ba8:	4656      	mov	r6, sl
 8007baa:	2331      	movs	r3, #49	@ 0x31
 8007bac:	f806 3b01 	strb.w	r3, [r6], #1
 8007bb0:	9b04      	ldr	r3, [sp, #16]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	e6ae      	b.n	8007916 <_dtoa_r+0x696>
 8007bb8:	9c07      	ldr	r4, [sp, #28]
 8007bba:	9704      	str	r7, [sp, #16]
 8007bbc:	4625      	mov	r5, r4
 8007bbe:	e7f3      	b.n	8007ba8 <_dtoa_r+0x928>
 8007bc0:	9b07      	ldr	r3, [sp, #28]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8104 	beq.w	8007dd4 <_dtoa_r+0xb54>
 8007bcc:	2e00      	cmp	r6, #0
 8007bce:	dd05      	ble.n	8007bdc <_dtoa_r+0x95c>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	4658      	mov	r0, fp
 8007bd6:	f000 fc87 	bl	80084e8 <__lshift>
 8007bda:	4605      	mov	r5, r0
 8007bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d05a      	beq.n	8007c98 <_dtoa_r+0xa18>
 8007be2:	6869      	ldr	r1, [r5, #4]
 8007be4:	4658      	mov	r0, fp
 8007be6:	f000 fa71 	bl	80080cc <_Balloc>
 8007bea:	4606      	mov	r6, r0
 8007bec:	b928      	cbnz	r0, 8007bfa <_dtoa_r+0x97a>
 8007bee:	4b84      	ldr	r3, [pc, #528]	@ (8007e00 <_dtoa_r+0xb80>)
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bf6:	f7ff bb5a 	b.w	80072ae <_dtoa_r+0x2e>
 8007bfa:	692a      	ldr	r2, [r5, #16]
 8007bfc:	3202      	adds	r2, #2
 8007bfe:	0092      	lsls	r2, r2, #2
 8007c00:	f105 010c 	add.w	r1, r5, #12
 8007c04:	300c      	adds	r0, #12
 8007c06:	f000 fe7d 	bl	8008904 <memcpy>
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4658      	mov	r0, fp
 8007c10:	f000 fc6a 	bl	80084e8 <__lshift>
 8007c14:	f10a 0301 	add.w	r3, sl, #1
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	9b00      	ldr	r3, [sp, #0]
 8007c1c:	4453      	add	r3, sl
 8007c1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c20:	9b02      	ldr	r3, [sp, #8]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	462f      	mov	r7, r5
 8007c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	4621      	mov	r1, r4
 8007c30:	3b01      	subs	r3, #1
 8007c32:	4648      	mov	r0, r9
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	f7ff fa9a 	bl	800716e <quorem>
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	9002      	str	r0, [sp, #8]
 8007c3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c42:	4648      	mov	r0, r9
 8007c44:	f000 fcbc 	bl	80085c0 <__mcmp>
 8007c48:	462a      	mov	r2, r5
 8007c4a:	9008      	str	r0, [sp, #32]
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4658      	mov	r0, fp
 8007c50:	f000 fcd2 	bl	80085f8 <__mdiff>
 8007c54:	68c2      	ldr	r2, [r0, #12]
 8007c56:	4606      	mov	r6, r0
 8007c58:	bb02      	cbnz	r2, 8007c9c <_dtoa_r+0xa1c>
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	f000 fcaf 	bl	80085c0 <__mcmp>
 8007c62:	4602      	mov	r2, r0
 8007c64:	4631      	mov	r1, r6
 8007c66:	4658      	mov	r0, fp
 8007c68:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c6a:	f000 fa6f 	bl	800814c <_Bfree>
 8007c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c72:	9e07      	ldr	r6, [sp, #28]
 8007c74:	ea43 0102 	orr.w	r1, r3, r2
 8007c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c7a:	4319      	orrs	r1, r3
 8007c7c:	d110      	bne.n	8007ca0 <_dtoa_r+0xa20>
 8007c7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c82:	d029      	beq.n	8007cd8 <_dtoa_r+0xa58>
 8007c84:	9b08      	ldr	r3, [sp, #32]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	dd02      	ble.n	8007c90 <_dtoa_r+0xa10>
 8007c8a:	9b02      	ldr	r3, [sp, #8]
 8007c8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	f883 8000 	strb.w	r8, [r3]
 8007c96:	e63f      	b.n	8007918 <_dtoa_r+0x698>
 8007c98:	4628      	mov	r0, r5
 8007c9a:	e7bb      	b.n	8007c14 <_dtoa_r+0x994>
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	e7e1      	b.n	8007c64 <_dtoa_r+0x9e4>
 8007ca0:	9b08      	ldr	r3, [sp, #32]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	db04      	blt.n	8007cb0 <_dtoa_r+0xa30>
 8007ca6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cac:	430b      	orrs	r3, r1
 8007cae:	d120      	bne.n	8007cf2 <_dtoa_r+0xa72>
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	dded      	ble.n	8007c90 <_dtoa_r+0xa10>
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	4658      	mov	r0, fp
 8007cba:	f000 fc15 	bl	80084e8 <__lshift>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4681      	mov	r9, r0
 8007cc2:	f000 fc7d 	bl	80085c0 <__mcmp>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	dc03      	bgt.n	8007cd2 <_dtoa_r+0xa52>
 8007cca:	d1e1      	bne.n	8007c90 <_dtoa_r+0xa10>
 8007ccc:	f018 0f01 	tst.w	r8, #1
 8007cd0:	d0de      	beq.n	8007c90 <_dtoa_r+0xa10>
 8007cd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cd6:	d1d8      	bne.n	8007c8a <_dtoa_r+0xa0a>
 8007cd8:	9a00      	ldr	r2, [sp, #0]
 8007cda:	2339      	movs	r3, #57	@ 0x39
 8007cdc:	7013      	strb	r3, [r2, #0]
 8007cde:	4633      	mov	r3, r6
 8007ce0:	461e      	mov	r6, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ce8:	2a39      	cmp	r2, #57	@ 0x39
 8007cea:	d052      	beq.n	8007d92 <_dtoa_r+0xb12>
 8007cec:	3201      	adds	r2, #1
 8007cee:	701a      	strb	r2, [r3, #0]
 8007cf0:	e612      	b.n	8007918 <_dtoa_r+0x698>
 8007cf2:	2a00      	cmp	r2, #0
 8007cf4:	dd07      	ble.n	8007d06 <_dtoa_r+0xa86>
 8007cf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cfa:	d0ed      	beq.n	8007cd8 <_dtoa_r+0xa58>
 8007cfc:	9a00      	ldr	r2, [sp, #0]
 8007cfe:	f108 0301 	add.w	r3, r8, #1
 8007d02:	7013      	strb	r3, [r2, #0]
 8007d04:	e608      	b.n	8007918 <_dtoa_r+0x698>
 8007d06:	9b07      	ldr	r3, [sp, #28]
 8007d08:	9a07      	ldr	r2, [sp, #28]
 8007d0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d028      	beq.n	8007d66 <_dtoa_r+0xae6>
 8007d14:	4649      	mov	r1, r9
 8007d16:	2300      	movs	r3, #0
 8007d18:	220a      	movs	r2, #10
 8007d1a:	4658      	mov	r0, fp
 8007d1c:	f000 fa38 	bl	8008190 <__multadd>
 8007d20:	42af      	cmp	r7, r5
 8007d22:	4681      	mov	r9, r0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	f04f 020a 	mov.w	r2, #10
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	4658      	mov	r0, fp
 8007d30:	d107      	bne.n	8007d42 <_dtoa_r+0xac2>
 8007d32:	f000 fa2d 	bl	8008190 <__multadd>
 8007d36:	4607      	mov	r7, r0
 8007d38:	4605      	mov	r5, r0
 8007d3a:	9b07      	ldr	r3, [sp, #28]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	e774      	b.n	8007c2c <_dtoa_r+0x9ac>
 8007d42:	f000 fa25 	bl	8008190 <__multadd>
 8007d46:	4629      	mov	r1, r5
 8007d48:	4607      	mov	r7, r0
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	220a      	movs	r2, #10
 8007d4e:	4658      	mov	r0, fp
 8007d50:	f000 fa1e 	bl	8008190 <__multadd>
 8007d54:	4605      	mov	r5, r0
 8007d56:	e7f0      	b.n	8007d3a <_dtoa_r+0xaba>
 8007d58:	9b00      	ldr	r3, [sp, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfcc      	ite	gt
 8007d5e:	461e      	movgt	r6, r3
 8007d60:	2601      	movle	r6, #1
 8007d62:	4456      	add	r6, sl
 8007d64:	2700      	movs	r7, #0
 8007d66:	4649      	mov	r1, r9
 8007d68:	2201      	movs	r2, #1
 8007d6a:	4658      	mov	r0, fp
 8007d6c:	f000 fbbc 	bl	80084e8 <__lshift>
 8007d70:	4621      	mov	r1, r4
 8007d72:	4681      	mov	r9, r0
 8007d74:	f000 fc24 	bl	80085c0 <__mcmp>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	dcb0      	bgt.n	8007cde <_dtoa_r+0xa5e>
 8007d7c:	d102      	bne.n	8007d84 <_dtoa_r+0xb04>
 8007d7e:	f018 0f01 	tst.w	r8, #1
 8007d82:	d1ac      	bne.n	8007cde <_dtoa_r+0xa5e>
 8007d84:	4633      	mov	r3, r6
 8007d86:	461e      	mov	r6, r3
 8007d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d8c:	2a30      	cmp	r2, #48	@ 0x30
 8007d8e:	d0fa      	beq.n	8007d86 <_dtoa_r+0xb06>
 8007d90:	e5c2      	b.n	8007918 <_dtoa_r+0x698>
 8007d92:	459a      	cmp	sl, r3
 8007d94:	d1a4      	bne.n	8007ce0 <_dtoa_r+0xa60>
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	2331      	movs	r3, #49	@ 0x31
 8007d9e:	f88a 3000 	strb.w	r3, [sl]
 8007da2:	e5b9      	b.n	8007918 <_dtoa_r+0x698>
 8007da4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007da6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e04 <_dtoa_r+0xb84>
 8007daa:	b11b      	cbz	r3, 8007db4 <_dtoa_r+0xb34>
 8007dac:	f10a 0308 	add.w	r3, sl, #8
 8007db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	4650      	mov	r0, sl
 8007db6:	b019      	add	sp, #100	@ 0x64
 8007db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	f77f ae37 	ble.w	8007a32 <_dtoa_r+0x7b2>
 8007dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dc8:	2001      	movs	r0, #1
 8007dca:	e655      	b.n	8007a78 <_dtoa_r+0x7f8>
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f77f aed6 	ble.w	8007b80 <_dtoa_r+0x900>
 8007dd4:	4656      	mov	r6, sl
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4648      	mov	r0, r9
 8007dda:	f7ff f9c8 	bl	800716e <quorem>
 8007dde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007de2:	f806 8b01 	strb.w	r8, [r6], #1
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	eba6 020a 	sub.w	r2, r6, sl
 8007dec:	4293      	cmp	r3, r2
 8007dee:	ddb3      	ble.n	8007d58 <_dtoa_r+0xad8>
 8007df0:	4649      	mov	r1, r9
 8007df2:	2300      	movs	r3, #0
 8007df4:	220a      	movs	r2, #10
 8007df6:	4658      	mov	r0, fp
 8007df8:	f000 f9ca 	bl	8008190 <__multadd>
 8007dfc:	4681      	mov	r9, r0
 8007dfe:	e7ea      	b.n	8007dd6 <_dtoa_r+0xb56>
 8007e00:	0800afc0 	.word	0x0800afc0
 8007e04:	0800af44 	.word	0x0800af44

08007e08 <malloc>:
 8007e08:	4b02      	ldr	r3, [pc, #8]	@ (8007e14 <malloc+0xc>)
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	f000 b825 	b.w	8007e5c <_malloc_r>
 8007e12:	bf00      	nop
 8007e14:	20000018 	.word	0x20000018

08007e18 <sbrk_aligned>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8007e58 <sbrk_aligned+0x40>)
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	6831      	ldr	r1, [r6, #0]
 8007e20:	4605      	mov	r5, r0
 8007e22:	b911      	cbnz	r1, 8007e2a <sbrk_aligned+0x12>
 8007e24:	f000 fd4c 	bl	80088c0 <_sbrk_r>
 8007e28:	6030      	str	r0, [r6, #0]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f000 fd47 	bl	80088c0 <_sbrk_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	d103      	bne.n	8007e3e <sbrk_aligned+0x26>
 8007e36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	1cc4      	adds	r4, r0, #3
 8007e40:	f024 0403 	bic.w	r4, r4, #3
 8007e44:	42a0      	cmp	r0, r4
 8007e46:	d0f8      	beq.n	8007e3a <sbrk_aligned+0x22>
 8007e48:	1a21      	subs	r1, r4, r0
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 fd38 	bl	80088c0 <_sbrk_r>
 8007e50:	3001      	adds	r0, #1
 8007e52:	d1f2      	bne.n	8007e3a <sbrk_aligned+0x22>
 8007e54:	e7ef      	b.n	8007e36 <sbrk_aligned+0x1e>
 8007e56:	bf00      	nop
 8007e58:	20000528 	.word	0x20000528

08007e5c <_malloc_r>:
 8007e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e60:	1ccd      	adds	r5, r1, #3
 8007e62:	f025 0503 	bic.w	r5, r5, #3
 8007e66:	3508      	adds	r5, #8
 8007e68:	2d0c      	cmp	r5, #12
 8007e6a:	bf38      	it	cc
 8007e6c:	250c      	movcc	r5, #12
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	4606      	mov	r6, r0
 8007e72:	db01      	blt.n	8007e78 <_malloc_r+0x1c>
 8007e74:	42a9      	cmp	r1, r5
 8007e76:	d904      	bls.n	8007e82 <_malloc_r+0x26>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f58 <_malloc_r+0xfc>
 8007e86:	f000 f915 	bl	80080b4 <__malloc_lock>
 8007e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8e:	461c      	mov	r4, r3
 8007e90:	bb44      	cbnz	r4, 8007ee4 <_malloc_r+0x88>
 8007e92:	4629      	mov	r1, r5
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7ff ffbf 	bl	8007e18 <sbrk_aligned>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	d158      	bne.n	8007f52 <_malloc_r+0xf6>
 8007ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ea4:	4627      	mov	r7, r4
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	d143      	bne.n	8007f32 <_malloc_r+0xd6>
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	d04b      	beq.n	8007f46 <_malloc_r+0xea>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	eb04 0903 	add.w	r9, r4, r3
 8007eb8:	f000 fd02 	bl	80088c0 <_sbrk_r>
 8007ebc:	4581      	cmp	r9, r0
 8007ebe:	d142      	bne.n	8007f46 <_malloc_r+0xea>
 8007ec0:	6821      	ldr	r1, [r4, #0]
 8007ec2:	1a6d      	subs	r5, r5, r1
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff ffa6 	bl	8007e18 <sbrk_aligned>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d03a      	beq.n	8007f46 <_malloc_r+0xea>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	442b      	add	r3, r5
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	bb62      	cbnz	r2, 8007f38 <_malloc_r+0xdc>
 8007ede:	f8c8 7000 	str.w	r7, [r8]
 8007ee2:	e00f      	b.n	8007f04 <_malloc_r+0xa8>
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	1b52      	subs	r2, r2, r5
 8007ee8:	d420      	bmi.n	8007f2c <_malloc_r+0xd0>
 8007eea:	2a0b      	cmp	r2, #11
 8007eec:	d917      	bls.n	8007f1e <_malloc_r+0xc2>
 8007eee:	1961      	adds	r1, r4, r5
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	6025      	str	r5, [r4, #0]
 8007ef4:	bf18      	it	ne
 8007ef6:	6059      	strne	r1, [r3, #4]
 8007ef8:	6863      	ldr	r3, [r4, #4]
 8007efa:	bf08      	it	eq
 8007efc:	f8c8 1000 	streq.w	r1, [r8]
 8007f00:	5162      	str	r2, [r4, r5]
 8007f02:	604b      	str	r3, [r1, #4]
 8007f04:	4630      	mov	r0, r6
 8007f06:	f000 f8db 	bl	80080c0 <__malloc_unlock>
 8007f0a:	f104 000b 	add.w	r0, r4, #11
 8007f0e:	1d23      	adds	r3, r4, #4
 8007f10:	f020 0007 	bic.w	r0, r0, #7
 8007f14:	1ac2      	subs	r2, r0, r3
 8007f16:	bf1c      	itt	ne
 8007f18:	1a1b      	subne	r3, r3, r0
 8007f1a:	50a3      	strne	r3, [r4, r2]
 8007f1c:	e7af      	b.n	8007e7e <_malloc_r+0x22>
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	bf0c      	ite	eq
 8007f24:	f8c8 2000 	streq.w	r2, [r8]
 8007f28:	605a      	strne	r2, [r3, #4]
 8007f2a:	e7eb      	b.n	8007f04 <_malloc_r+0xa8>
 8007f2c:	4623      	mov	r3, r4
 8007f2e:	6864      	ldr	r4, [r4, #4]
 8007f30:	e7ae      	b.n	8007e90 <_malloc_r+0x34>
 8007f32:	463c      	mov	r4, r7
 8007f34:	687f      	ldr	r7, [r7, #4]
 8007f36:	e7b6      	b.n	8007ea6 <_malloc_r+0x4a>
 8007f38:	461a      	mov	r2, r3
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d1fb      	bne.n	8007f38 <_malloc_r+0xdc>
 8007f40:	2300      	movs	r3, #0
 8007f42:	6053      	str	r3, [r2, #4]
 8007f44:	e7de      	b.n	8007f04 <_malloc_r+0xa8>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f000 f8b8 	bl	80080c0 <__malloc_unlock>
 8007f50:	e794      	b.n	8007e7c <_malloc_r+0x20>
 8007f52:	6005      	str	r5, [r0, #0]
 8007f54:	e7d6      	b.n	8007f04 <_malloc_r+0xa8>
 8007f56:	bf00      	nop
 8007f58:	2000052c 	.word	0x2000052c

08007f5c <__sflush_r>:
 8007f5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f64:	0716      	lsls	r6, r2, #28
 8007f66:	4605      	mov	r5, r0
 8007f68:	460c      	mov	r4, r1
 8007f6a:	d454      	bmi.n	8008016 <__sflush_r+0xba>
 8007f6c:	684b      	ldr	r3, [r1, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	dc02      	bgt.n	8007f78 <__sflush_r+0x1c>
 8007f72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dd48      	ble.n	800800a <__sflush_r+0xae>
 8007f78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	d045      	beq.n	800800a <__sflush_r+0xae>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f84:	682f      	ldr	r7, [r5, #0]
 8007f86:	6a21      	ldr	r1, [r4, #32]
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	d030      	beq.n	8007fee <__sflush_r+0x92>
 8007f8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	0759      	lsls	r1, r3, #29
 8007f92:	d505      	bpl.n	8007fa0 <__sflush_r+0x44>
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	1ad2      	subs	r2, r2, r3
 8007f98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f9a:	b10b      	cbz	r3, 8007fa0 <__sflush_r+0x44>
 8007f9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fa4:	6a21      	ldr	r1, [r4, #32]
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b0      	blx	r6
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	d106      	bne.n	8007fbe <__sflush_r+0x62>
 8007fb0:	6829      	ldr	r1, [r5, #0]
 8007fb2:	291d      	cmp	r1, #29
 8007fb4:	d82b      	bhi.n	800800e <__sflush_r+0xb2>
 8007fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8008060 <__sflush_r+0x104>)
 8007fb8:	410a      	asrs	r2, r1
 8007fba:	07d6      	lsls	r6, r2, #31
 8007fbc:	d427      	bmi.n	800800e <__sflush_r+0xb2>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	6062      	str	r2, [r4, #4]
 8007fc2:	04d9      	lsls	r1, r3, #19
 8007fc4:	6922      	ldr	r2, [r4, #16]
 8007fc6:	6022      	str	r2, [r4, #0]
 8007fc8:	d504      	bpl.n	8007fd4 <__sflush_r+0x78>
 8007fca:	1c42      	adds	r2, r0, #1
 8007fcc:	d101      	bne.n	8007fd2 <__sflush_r+0x76>
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	b903      	cbnz	r3, 8007fd4 <__sflush_r+0x78>
 8007fd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fd6:	602f      	str	r7, [r5, #0]
 8007fd8:	b1b9      	cbz	r1, 800800a <__sflush_r+0xae>
 8007fda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fde:	4299      	cmp	r1, r3
 8007fe0:	d002      	beq.n	8007fe8 <__sflush_r+0x8c>
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f000 fcce 	bl	8008984 <_free_r>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fec:	e00d      	b.n	800800a <__sflush_r+0xae>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b0      	blx	r6
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	1c50      	adds	r0, r2, #1
 8007ff8:	d1c9      	bne.n	8007f8e <__sflush_r+0x32>
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d0c6      	beq.n	8007f8e <__sflush_r+0x32>
 8008000:	2b1d      	cmp	r3, #29
 8008002:	d001      	beq.n	8008008 <__sflush_r+0xac>
 8008004:	2b16      	cmp	r3, #22
 8008006:	d11e      	bne.n	8008046 <__sflush_r+0xea>
 8008008:	602f      	str	r7, [r5, #0]
 800800a:	2000      	movs	r0, #0
 800800c:	e022      	b.n	8008054 <__sflush_r+0xf8>
 800800e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008012:	b21b      	sxth	r3, r3
 8008014:	e01b      	b.n	800804e <__sflush_r+0xf2>
 8008016:	690f      	ldr	r7, [r1, #16]
 8008018:	2f00      	cmp	r7, #0
 800801a:	d0f6      	beq.n	800800a <__sflush_r+0xae>
 800801c:	0793      	lsls	r3, r2, #30
 800801e:	680e      	ldr	r6, [r1, #0]
 8008020:	bf08      	it	eq
 8008022:	694b      	ldreq	r3, [r1, #20]
 8008024:	600f      	str	r7, [r1, #0]
 8008026:	bf18      	it	ne
 8008028:	2300      	movne	r3, #0
 800802a:	eba6 0807 	sub.w	r8, r6, r7
 800802e:	608b      	str	r3, [r1, #8]
 8008030:	f1b8 0f00 	cmp.w	r8, #0
 8008034:	dde9      	ble.n	800800a <__sflush_r+0xae>
 8008036:	6a21      	ldr	r1, [r4, #32]
 8008038:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800803a:	4643      	mov	r3, r8
 800803c:	463a      	mov	r2, r7
 800803e:	4628      	mov	r0, r5
 8008040:	47b0      	blx	r6
 8008042:	2800      	cmp	r0, #0
 8008044:	dc08      	bgt.n	8008058 <__sflush_r+0xfc>
 8008046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800804a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008058:	4407      	add	r7, r0
 800805a:	eba8 0800 	sub.w	r8, r8, r0
 800805e:	e7e7      	b.n	8008030 <__sflush_r+0xd4>
 8008060:	dfbffffe 	.word	0xdfbffffe

08008064 <_fflush_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	690b      	ldr	r3, [r1, #16]
 8008068:	4605      	mov	r5, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b913      	cbnz	r3, 8008074 <_fflush_r+0x10>
 800806e:	2500      	movs	r5, #0
 8008070:	4628      	mov	r0, r5
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	b118      	cbz	r0, 800807e <_fflush_r+0x1a>
 8008076:	6a03      	ldr	r3, [r0, #32]
 8008078:	b90b      	cbnz	r3, 800807e <_fflush_r+0x1a>
 800807a:	f7ff f809 	bl	8007090 <__sinit>
 800807e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0f3      	beq.n	800806e <_fflush_r+0xa>
 8008086:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008088:	07d0      	lsls	r0, r2, #31
 800808a:	d404      	bmi.n	8008096 <_fflush_r+0x32>
 800808c:	0599      	lsls	r1, r3, #22
 800808e:	d402      	bmi.n	8008096 <_fflush_r+0x32>
 8008090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008092:	f7ff f86a 	bl	800716a <__retarget_lock_acquire_recursive>
 8008096:	4628      	mov	r0, r5
 8008098:	4621      	mov	r1, r4
 800809a:	f7ff ff5f 	bl	8007f5c <__sflush_r>
 800809e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080a0:	07da      	lsls	r2, r3, #31
 80080a2:	4605      	mov	r5, r0
 80080a4:	d4e4      	bmi.n	8008070 <_fflush_r+0xc>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	059b      	lsls	r3, r3, #22
 80080aa:	d4e1      	bmi.n	8008070 <_fflush_r+0xc>
 80080ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ae:	f7ff f85d 	bl	800716c <__retarget_lock_release_recursive>
 80080b2:	e7dd      	b.n	8008070 <_fflush_r+0xc>

080080b4 <__malloc_lock>:
 80080b4:	4801      	ldr	r0, [pc, #4]	@ (80080bc <__malloc_lock+0x8>)
 80080b6:	f7ff b858 	b.w	800716a <__retarget_lock_acquire_recursive>
 80080ba:	bf00      	nop
 80080bc:	20000524 	.word	0x20000524

080080c0 <__malloc_unlock>:
 80080c0:	4801      	ldr	r0, [pc, #4]	@ (80080c8 <__malloc_unlock+0x8>)
 80080c2:	f7ff b853 	b.w	800716c <__retarget_lock_release_recursive>
 80080c6:	bf00      	nop
 80080c8:	20000524 	.word	0x20000524

080080cc <_Balloc>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	69c6      	ldr	r6, [r0, #28]
 80080d0:	4604      	mov	r4, r0
 80080d2:	460d      	mov	r5, r1
 80080d4:	b976      	cbnz	r6, 80080f4 <_Balloc+0x28>
 80080d6:	2010      	movs	r0, #16
 80080d8:	f7ff fe96 	bl	8007e08 <malloc>
 80080dc:	4602      	mov	r2, r0
 80080de:	61e0      	str	r0, [r4, #28]
 80080e0:	b920      	cbnz	r0, 80080ec <_Balloc+0x20>
 80080e2:	4b18      	ldr	r3, [pc, #96]	@ (8008144 <_Balloc+0x78>)
 80080e4:	4818      	ldr	r0, [pc, #96]	@ (8008148 <_Balloc+0x7c>)
 80080e6:	216b      	movs	r1, #107	@ 0x6b
 80080e8:	f000 fc1a 	bl	8008920 <__assert_func>
 80080ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080f0:	6006      	str	r6, [r0, #0]
 80080f2:	60c6      	str	r6, [r0, #12]
 80080f4:	69e6      	ldr	r6, [r4, #28]
 80080f6:	68f3      	ldr	r3, [r6, #12]
 80080f8:	b183      	cbz	r3, 800811c <_Balloc+0x50>
 80080fa:	69e3      	ldr	r3, [r4, #28]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008102:	b9b8      	cbnz	r0, 8008134 <_Balloc+0x68>
 8008104:	2101      	movs	r1, #1
 8008106:	fa01 f605 	lsl.w	r6, r1, r5
 800810a:	1d72      	adds	r2, r6, #5
 800810c:	0092      	lsls	r2, r2, #2
 800810e:	4620      	mov	r0, r4
 8008110:	f000 fc24 	bl	800895c <_calloc_r>
 8008114:	b160      	cbz	r0, 8008130 <_Balloc+0x64>
 8008116:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800811a:	e00e      	b.n	800813a <_Balloc+0x6e>
 800811c:	2221      	movs	r2, #33	@ 0x21
 800811e:	2104      	movs	r1, #4
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fc1b 	bl	800895c <_calloc_r>
 8008126:	69e3      	ldr	r3, [r4, #28]
 8008128:	60f0      	str	r0, [r6, #12]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e4      	bne.n	80080fa <_Balloc+0x2e>
 8008130:	2000      	movs	r0, #0
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	6802      	ldr	r2, [r0, #0]
 8008136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800813a:	2300      	movs	r3, #0
 800813c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008140:	e7f7      	b.n	8008132 <_Balloc+0x66>
 8008142:	bf00      	nop
 8008144:	0800af51 	.word	0x0800af51
 8008148:	0800afd1 	.word	0x0800afd1

0800814c <_Bfree>:
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	69c6      	ldr	r6, [r0, #28]
 8008150:	4605      	mov	r5, r0
 8008152:	460c      	mov	r4, r1
 8008154:	b976      	cbnz	r6, 8008174 <_Bfree+0x28>
 8008156:	2010      	movs	r0, #16
 8008158:	f7ff fe56 	bl	8007e08 <malloc>
 800815c:	4602      	mov	r2, r0
 800815e:	61e8      	str	r0, [r5, #28]
 8008160:	b920      	cbnz	r0, 800816c <_Bfree+0x20>
 8008162:	4b09      	ldr	r3, [pc, #36]	@ (8008188 <_Bfree+0x3c>)
 8008164:	4809      	ldr	r0, [pc, #36]	@ (800818c <_Bfree+0x40>)
 8008166:	218f      	movs	r1, #143	@ 0x8f
 8008168:	f000 fbda 	bl	8008920 <__assert_func>
 800816c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008170:	6006      	str	r6, [r0, #0]
 8008172:	60c6      	str	r6, [r0, #12]
 8008174:	b13c      	cbz	r4, 8008186 <_Bfree+0x3a>
 8008176:	69eb      	ldr	r3, [r5, #28]
 8008178:	6862      	ldr	r2, [r4, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008180:	6021      	str	r1, [r4, #0]
 8008182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	0800af51 	.word	0x0800af51
 800818c:	0800afd1 	.word	0x0800afd1

08008190 <__multadd>:
 8008190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008194:	690d      	ldr	r5, [r1, #16]
 8008196:	4607      	mov	r7, r0
 8008198:	460c      	mov	r4, r1
 800819a:	461e      	mov	r6, r3
 800819c:	f101 0c14 	add.w	ip, r1, #20
 80081a0:	2000      	movs	r0, #0
 80081a2:	f8dc 3000 	ldr.w	r3, [ip]
 80081a6:	b299      	uxth	r1, r3
 80081a8:	fb02 6101 	mla	r1, r2, r1, r6
 80081ac:	0c1e      	lsrs	r6, r3, #16
 80081ae:	0c0b      	lsrs	r3, r1, #16
 80081b0:	fb02 3306 	mla	r3, r2, r6, r3
 80081b4:	b289      	uxth	r1, r1
 80081b6:	3001      	adds	r0, #1
 80081b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081bc:	4285      	cmp	r5, r0
 80081be:	f84c 1b04 	str.w	r1, [ip], #4
 80081c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081c6:	dcec      	bgt.n	80081a2 <__multadd+0x12>
 80081c8:	b30e      	cbz	r6, 800820e <__multadd+0x7e>
 80081ca:	68a3      	ldr	r3, [r4, #8]
 80081cc:	42ab      	cmp	r3, r5
 80081ce:	dc19      	bgt.n	8008204 <__multadd+0x74>
 80081d0:	6861      	ldr	r1, [r4, #4]
 80081d2:	4638      	mov	r0, r7
 80081d4:	3101      	adds	r1, #1
 80081d6:	f7ff ff79 	bl	80080cc <_Balloc>
 80081da:	4680      	mov	r8, r0
 80081dc:	b928      	cbnz	r0, 80081ea <__multadd+0x5a>
 80081de:	4602      	mov	r2, r0
 80081e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008214 <__multadd+0x84>)
 80081e2:	480d      	ldr	r0, [pc, #52]	@ (8008218 <__multadd+0x88>)
 80081e4:	21ba      	movs	r1, #186	@ 0xba
 80081e6:	f000 fb9b 	bl	8008920 <__assert_func>
 80081ea:	6922      	ldr	r2, [r4, #16]
 80081ec:	3202      	adds	r2, #2
 80081ee:	f104 010c 	add.w	r1, r4, #12
 80081f2:	0092      	lsls	r2, r2, #2
 80081f4:	300c      	adds	r0, #12
 80081f6:	f000 fb85 	bl	8008904 <memcpy>
 80081fa:	4621      	mov	r1, r4
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff ffa5 	bl	800814c <_Bfree>
 8008202:	4644      	mov	r4, r8
 8008204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008208:	3501      	adds	r5, #1
 800820a:	615e      	str	r6, [r3, #20]
 800820c:	6125      	str	r5, [r4, #16]
 800820e:	4620      	mov	r0, r4
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008214:	0800afc0 	.word	0x0800afc0
 8008218:	0800afd1 	.word	0x0800afd1

0800821c <__hi0bits>:
 800821c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008220:	4603      	mov	r3, r0
 8008222:	bf36      	itet	cc
 8008224:	0403      	lslcc	r3, r0, #16
 8008226:	2000      	movcs	r0, #0
 8008228:	2010      	movcc	r0, #16
 800822a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800822e:	bf3c      	itt	cc
 8008230:	021b      	lslcc	r3, r3, #8
 8008232:	3008      	addcc	r0, #8
 8008234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008238:	bf3c      	itt	cc
 800823a:	011b      	lslcc	r3, r3, #4
 800823c:	3004      	addcc	r0, #4
 800823e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008242:	bf3c      	itt	cc
 8008244:	009b      	lslcc	r3, r3, #2
 8008246:	3002      	addcc	r0, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	db05      	blt.n	8008258 <__hi0bits+0x3c>
 800824c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008250:	f100 0001 	add.w	r0, r0, #1
 8008254:	bf08      	it	eq
 8008256:	2020      	moveq	r0, #32
 8008258:	4770      	bx	lr

0800825a <__lo0bits>:
 800825a:	6803      	ldr	r3, [r0, #0]
 800825c:	4602      	mov	r2, r0
 800825e:	f013 0007 	ands.w	r0, r3, #7
 8008262:	d00b      	beq.n	800827c <__lo0bits+0x22>
 8008264:	07d9      	lsls	r1, r3, #31
 8008266:	d421      	bmi.n	80082ac <__lo0bits+0x52>
 8008268:	0798      	lsls	r0, r3, #30
 800826a:	bf49      	itett	mi
 800826c:	085b      	lsrmi	r3, r3, #1
 800826e:	089b      	lsrpl	r3, r3, #2
 8008270:	2001      	movmi	r0, #1
 8008272:	6013      	strmi	r3, [r2, #0]
 8008274:	bf5c      	itt	pl
 8008276:	6013      	strpl	r3, [r2, #0]
 8008278:	2002      	movpl	r0, #2
 800827a:	4770      	bx	lr
 800827c:	b299      	uxth	r1, r3
 800827e:	b909      	cbnz	r1, 8008284 <__lo0bits+0x2a>
 8008280:	0c1b      	lsrs	r3, r3, #16
 8008282:	2010      	movs	r0, #16
 8008284:	b2d9      	uxtb	r1, r3
 8008286:	b909      	cbnz	r1, 800828c <__lo0bits+0x32>
 8008288:	3008      	adds	r0, #8
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	0719      	lsls	r1, r3, #28
 800828e:	bf04      	itt	eq
 8008290:	091b      	lsreq	r3, r3, #4
 8008292:	3004      	addeq	r0, #4
 8008294:	0799      	lsls	r1, r3, #30
 8008296:	bf04      	itt	eq
 8008298:	089b      	lsreq	r3, r3, #2
 800829a:	3002      	addeq	r0, #2
 800829c:	07d9      	lsls	r1, r3, #31
 800829e:	d403      	bmi.n	80082a8 <__lo0bits+0x4e>
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	f100 0001 	add.w	r0, r0, #1
 80082a6:	d003      	beq.n	80082b0 <__lo0bits+0x56>
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	4770      	bx	lr
 80082ac:	2000      	movs	r0, #0
 80082ae:	4770      	bx	lr
 80082b0:	2020      	movs	r0, #32
 80082b2:	4770      	bx	lr

080082b4 <__i2b>:
 80082b4:	b510      	push	{r4, lr}
 80082b6:	460c      	mov	r4, r1
 80082b8:	2101      	movs	r1, #1
 80082ba:	f7ff ff07 	bl	80080cc <_Balloc>
 80082be:	4602      	mov	r2, r0
 80082c0:	b928      	cbnz	r0, 80082ce <__i2b+0x1a>
 80082c2:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <__i2b+0x24>)
 80082c4:	4805      	ldr	r0, [pc, #20]	@ (80082dc <__i2b+0x28>)
 80082c6:	f240 1145 	movw	r1, #325	@ 0x145
 80082ca:	f000 fb29 	bl	8008920 <__assert_func>
 80082ce:	2301      	movs	r3, #1
 80082d0:	6144      	str	r4, [r0, #20]
 80082d2:	6103      	str	r3, [r0, #16]
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	bf00      	nop
 80082d8:	0800afc0 	.word	0x0800afc0
 80082dc:	0800afd1 	.word	0x0800afd1

080082e0 <__multiply>:
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	4614      	mov	r4, r2
 80082e6:	690a      	ldr	r2, [r1, #16]
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	bfa8      	it	ge
 80082ee:	4623      	movge	r3, r4
 80082f0:	460f      	mov	r7, r1
 80082f2:	bfa4      	itt	ge
 80082f4:	460c      	movge	r4, r1
 80082f6:	461f      	movge	r7, r3
 80082f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80082fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008300:	68a3      	ldr	r3, [r4, #8]
 8008302:	6861      	ldr	r1, [r4, #4]
 8008304:	eb0a 0609 	add.w	r6, sl, r9
 8008308:	42b3      	cmp	r3, r6
 800830a:	b085      	sub	sp, #20
 800830c:	bfb8      	it	lt
 800830e:	3101      	addlt	r1, #1
 8008310:	f7ff fedc 	bl	80080cc <_Balloc>
 8008314:	b930      	cbnz	r0, 8008324 <__multiply+0x44>
 8008316:	4602      	mov	r2, r0
 8008318:	4b44      	ldr	r3, [pc, #272]	@ (800842c <__multiply+0x14c>)
 800831a:	4845      	ldr	r0, [pc, #276]	@ (8008430 <__multiply+0x150>)
 800831c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008320:	f000 fafe 	bl	8008920 <__assert_func>
 8008324:	f100 0514 	add.w	r5, r0, #20
 8008328:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800832c:	462b      	mov	r3, r5
 800832e:	2200      	movs	r2, #0
 8008330:	4543      	cmp	r3, r8
 8008332:	d321      	bcc.n	8008378 <__multiply+0x98>
 8008334:	f107 0114 	add.w	r1, r7, #20
 8008338:	f104 0214 	add.w	r2, r4, #20
 800833c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008340:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008344:	9302      	str	r3, [sp, #8]
 8008346:	1b13      	subs	r3, r2, r4
 8008348:	3b15      	subs	r3, #21
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	3304      	adds	r3, #4
 8008350:	f104 0715 	add.w	r7, r4, #21
 8008354:	42ba      	cmp	r2, r7
 8008356:	bf38      	it	cc
 8008358:	2304      	movcc	r3, #4
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	9b02      	ldr	r3, [sp, #8]
 800835e:	9103      	str	r1, [sp, #12]
 8008360:	428b      	cmp	r3, r1
 8008362:	d80c      	bhi.n	800837e <__multiply+0x9e>
 8008364:	2e00      	cmp	r6, #0
 8008366:	dd03      	ble.n	8008370 <__multiply+0x90>
 8008368:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800836c:	2b00      	cmp	r3, #0
 800836e:	d05b      	beq.n	8008428 <__multiply+0x148>
 8008370:	6106      	str	r6, [r0, #16]
 8008372:	b005      	add	sp, #20
 8008374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008378:	f843 2b04 	str.w	r2, [r3], #4
 800837c:	e7d8      	b.n	8008330 <__multiply+0x50>
 800837e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008382:	f1ba 0f00 	cmp.w	sl, #0
 8008386:	d024      	beq.n	80083d2 <__multiply+0xf2>
 8008388:	f104 0e14 	add.w	lr, r4, #20
 800838c:	46a9      	mov	r9, r5
 800838e:	f04f 0c00 	mov.w	ip, #0
 8008392:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008396:	f8d9 3000 	ldr.w	r3, [r9]
 800839a:	fa1f fb87 	uxth.w	fp, r7
 800839e:	b29b      	uxth	r3, r3
 80083a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80083a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80083a8:	f8d9 7000 	ldr.w	r7, [r9]
 80083ac:	4463      	add	r3, ip
 80083ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80083b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80083c0:	4572      	cmp	r2, lr
 80083c2:	f849 3b04 	str.w	r3, [r9], #4
 80083c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083ca:	d8e2      	bhi.n	8008392 <__multiply+0xb2>
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	f845 c003 	str.w	ip, [r5, r3]
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80083d8:	3104      	adds	r1, #4
 80083da:	f1b9 0f00 	cmp.w	r9, #0
 80083de:	d021      	beq.n	8008424 <__multiply+0x144>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	f104 0c14 	add.w	ip, r4, #20
 80083e6:	46ae      	mov	lr, r5
 80083e8:	f04f 0a00 	mov.w	sl, #0
 80083ec:	f8bc b000 	ldrh.w	fp, [ip]
 80083f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80083f4:	fb09 770b 	mla	r7, r9, fp, r7
 80083f8:	4457      	add	r7, sl
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008400:	f84e 3b04 	str.w	r3, [lr], #4
 8008404:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008408:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800840c:	f8be 3000 	ldrh.w	r3, [lr]
 8008410:	fb09 330a 	mla	r3, r9, sl, r3
 8008414:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008418:	4562      	cmp	r2, ip
 800841a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800841e:	d8e5      	bhi.n	80083ec <__multiply+0x10c>
 8008420:	9f01      	ldr	r7, [sp, #4]
 8008422:	51eb      	str	r3, [r5, r7]
 8008424:	3504      	adds	r5, #4
 8008426:	e799      	b.n	800835c <__multiply+0x7c>
 8008428:	3e01      	subs	r6, #1
 800842a:	e79b      	b.n	8008364 <__multiply+0x84>
 800842c:	0800afc0 	.word	0x0800afc0
 8008430:	0800afd1 	.word	0x0800afd1

08008434 <__pow5mult>:
 8008434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008438:	4615      	mov	r5, r2
 800843a:	f012 0203 	ands.w	r2, r2, #3
 800843e:	4607      	mov	r7, r0
 8008440:	460e      	mov	r6, r1
 8008442:	d007      	beq.n	8008454 <__pow5mult+0x20>
 8008444:	4c25      	ldr	r4, [pc, #148]	@ (80084dc <__pow5mult+0xa8>)
 8008446:	3a01      	subs	r2, #1
 8008448:	2300      	movs	r3, #0
 800844a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800844e:	f7ff fe9f 	bl	8008190 <__multadd>
 8008452:	4606      	mov	r6, r0
 8008454:	10ad      	asrs	r5, r5, #2
 8008456:	d03d      	beq.n	80084d4 <__pow5mult+0xa0>
 8008458:	69fc      	ldr	r4, [r7, #28]
 800845a:	b97c      	cbnz	r4, 800847c <__pow5mult+0x48>
 800845c:	2010      	movs	r0, #16
 800845e:	f7ff fcd3 	bl	8007e08 <malloc>
 8008462:	4602      	mov	r2, r0
 8008464:	61f8      	str	r0, [r7, #28]
 8008466:	b928      	cbnz	r0, 8008474 <__pow5mult+0x40>
 8008468:	4b1d      	ldr	r3, [pc, #116]	@ (80084e0 <__pow5mult+0xac>)
 800846a:	481e      	ldr	r0, [pc, #120]	@ (80084e4 <__pow5mult+0xb0>)
 800846c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008470:	f000 fa56 	bl	8008920 <__assert_func>
 8008474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008478:	6004      	str	r4, [r0, #0]
 800847a:	60c4      	str	r4, [r0, #12]
 800847c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008484:	b94c      	cbnz	r4, 800849a <__pow5mult+0x66>
 8008486:	f240 2171 	movw	r1, #625	@ 0x271
 800848a:	4638      	mov	r0, r7
 800848c:	f7ff ff12 	bl	80082b4 <__i2b>
 8008490:	2300      	movs	r3, #0
 8008492:	f8c8 0008 	str.w	r0, [r8, #8]
 8008496:	4604      	mov	r4, r0
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	f04f 0900 	mov.w	r9, #0
 800849e:	07eb      	lsls	r3, r5, #31
 80084a0:	d50a      	bpl.n	80084b8 <__pow5mult+0x84>
 80084a2:	4631      	mov	r1, r6
 80084a4:	4622      	mov	r2, r4
 80084a6:	4638      	mov	r0, r7
 80084a8:	f7ff ff1a 	bl	80082e0 <__multiply>
 80084ac:	4631      	mov	r1, r6
 80084ae:	4680      	mov	r8, r0
 80084b0:	4638      	mov	r0, r7
 80084b2:	f7ff fe4b 	bl	800814c <_Bfree>
 80084b6:	4646      	mov	r6, r8
 80084b8:	106d      	asrs	r5, r5, #1
 80084ba:	d00b      	beq.n	80084d4 <__pow5mult+0xa0>
 80084bc:	6820      	ldr	r0, [r4, #0]
 80084be:	b938      	cbnz	r0, 80084d0 <__pow5mult+0x9c>
 80084c0:	4622      	mov	r2, r4
 80084c2:	4621      	mov	r1, r4
 80084c4:	4638      	mov	r0, r7
 80084c6:	f7ff ff0b 	bl	80082e0 <__multiply>
 80084ca:	6020      	str	r0, [r4, #0]
 80084cc:	f8c0 9000 	str.w	r9, [r0]
 80084d0:	4604      	mov	r4, r0
 80084d2:	e7e4      	b.n	800849e <__pow5mult+0x6a>
 80084d4:	4630      	mov	r0, r6
 80084d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084da:	bf00      	nop
 80084dc:	0800b02c 	.word	0x0800b02c
 80084e0:	0800af51 	.word	0x0800af51
 80084e4:	0800afd1 	.word	0x0800afd1

080084e8 <__lshift>:
 80084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	460c      	mov	r4, r1
 80084ee:	6849      	ldr	r1, [r1, #4]
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	4607      	mov	r7, r0
 80084fa:	4691      	mov	r9, r2
 80084fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008500:	f108 0601 	add.w	r6, r8, #1
 8008504:	42b3      	cmp	r3, r6
 8008506:	db0b      	blt.n	8008520 <__lshift+0x38>
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff fddf 	bl	80080cc <_Balloc>
 800850e:	4605      	mov	r5, r0
 8008510:	b948      	cbnz	r0, 8008526 <__lshift+0x3e>
 8008512:	4602      	mov	r2, r0
 8008514:	4b28      	ldr	r3, [pc, #160]	@ (80085b8 <__lshift+0xd0>)
 8008516:	4829      	ldr	r0, [pc, #164]	@ (80085bc <__lshift+0xd4>)
 8008518:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800851c:	f000 fa00 	bl	8008920 <__assert_func>
 8008520:	3101      	adds	r1, #1
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	e7ee      	b.n	8008504 <__lshift+0x1c>
 8008526:	2300      	movs	r3, #0
 8008528:	f100 0114 	add.w	r1, r0, #20
 800852c:	f100 0210 	add.w	r2, r0, #16
 8008530:	4618      	mov	r0, r3
 8008532:	4553      	cmp	r3, sl
 8008534:	db33      	blt.n	800859e <__lshift+0xb6>
 8008536:	6920      	ldr	r0, [r4, #16]
 8008538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800853c:	f104 0314 	add.w	r3, r4, #20
 8008540:	f019 091f 	ands.w	r9, r9, #31
 8008544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008548:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800854c:	d02b      	beq.n	80085a6 <__lshift+0xbe>
 800854e:	f1c9 0e20 	rsb	lr, r9, #32
 8008552:	468a      	mov	sl, r1
 8008554:	2200      	movs	r2, #0
 8008556:	6818      	ldr	r0, [r3, #0]
 8008558:	fa00 f009 	lsl.w	r0, r0, r9
 800855c:	4310      	orrs	r0, r2
 800855e:	f84a 0b04 	str.w	r0, [sl], #4
 8008562:	f853 2b04 	ldr.w	r2, [r3], #4
 8008566:	459c      	cmp	ip, r3
 8008568:	fa22 f20e 	lsr.w	r2, r2, lr
 800856c:	d8f3      	bhi.n	8008556 <__lshift+0x6e>
 800856e:	ebac 0304 	sub.w	r3, ip, r4
 8008572:	3b15      	subs	r3, #21
 8008574:	f023 0303 	bic.w	r3, r3, #3
 8008578:	3304      	adds	r3, #4
 800857a:	f104 0015 	add.w	r0, r4, #21
 800857e:	4584      	cmp	ip, r0
 8008580:	bf38      	it	cc
 8008582:	2304      	movcc	r3, #4
 8008584:	50ca      	str	r2, [r1, r3]
 8008586:	b10a      	cbz	r2, 800858c <__lshift+0xa4>
 8008588:	f108 0602 	add.w	r6, r8, #2
 800858c:	3e01      	subs	r6, #1
 800858e:	4638      	mov	r0, r7
 8008590:	612e      	str	r6, [r5, #16]
 8008592:	4621      	mov	r1, r4
 8008594:	f7ff fdda 	bl	800814c <_Bfree>
 8008598:	4628      	mov	r0, r5
 800859a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859e:	f842 0f04 	str.w	r0, [r2, #4]!
 80085a2:	3301      	adds	r3, #1
 80085a4:	e7c5      	b.n	8008532 <__lshift+0x4a>
 80085a6:	3904      	subs	r1, #4
 80085a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80085b0:	459c      	cmp	ip, r3
 80085b2:	d8f9      	bhi.n	80085a8 <__lshift+0xc0>
 80085b4:	e7ea      	b.n	800858c <__lshift+0xa4>
 80085b6:	bf00      	nop
 80085b8:	0800afc0 	.word	0x0800afc0
 80085bc:	0800afd1 	.word	0x0800afd1

080085c0 <__mcmp>:
 80085c0:	690a      	ldr	r2, [r1, #16]
 80085c2:	4603      	mov	r3, r0
 80085c4:	6900      	ldr	r0, [r0, #16]
 80085c6:	1a80      	subs	r0, r0, r2
 80085c8:	b530      	push	{r4, r5, lr}
 80085ca:	d10e      	bne.n	80085ea <__mcmp+0x2a>
 80085cc:	3314      	adds	r3, #20
 80085ce:	3114      	adds	r1, #20
 80085d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085e0:	4295      	cmp	r5, r2
 80085e2:	d003      	beq.n	80085ec <__mcmp+0x2c>
 80085e4:	d205      	bcs.n	80085f2 <__mcmp+0x32>
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085ea:	bd30      	pop	{r4, r5, pc}
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	d3f3      	bcc.n	80085d8 <__mcmp+0x18>
 80085f0:	e7fb      	b.n	80085ea <__mcmp+0x2a>
 80085f2:	2001      	movs	r0, #1
 80085f4:	e7f9      	b.n	80085ea <__mcmp+0x2a>
	...

080085f8 <__mdiff>:
 80085f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	4689      	mov	r9, r1
 80085fe:	4606      	mov	r6, r0
 8008600:	4611      	mov	r1, r2
 8008602:	4648      	mov	r0, r9
 8008604:	4614      	mov	r4, r2
 8008606:	f7ff ffdb 	bl	80085c0 <__mcmp>
 800860a:	1e05      	subs	r5, r0, #0
 800860c:	d112      	bne.n	8008634 <__mdiff+0x3c>
 800860e:	4629      	mov	r1, r5
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff fd5b 	bl	80080cc <_Balloc>
 8008616:	4602      	mov	r2, r0
 8008618:	b928      	cbnz	r0, 8008626 <__mdiff+0x2e>
 800861a:	4b3f      	ldr	r3, [pc, #252]	@ (8008718 <__mdiff+0x120>)
 800861c:	f240 2137 	movw	r1, #567	@ 0x237
 8008620:	483e      	ldr	r0, [pc, #248]	@ (800871c <__mdiff+0x124>)
 8008622:	f000 f97d 	bl	8008920 <__assert_func>
 8008626:	2301      	movs	r3, #1
 8008628:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800862c:	4610      	mov	r0, r2
 800862e:	b003      	add	sp, #12
 8008630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008634:	bfbc      	itt	lt
 8008636:	464b      	movlt	r3, r9
 8008638:	46a1      	movlt	r9, r4
 800863a:	4630      	mov	r0, r6
 800863c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008640:	bfba      	itte	lt
 8008642:	461c      	movlt	r4, r3
 8008644:	2501      	movlt	r5, #1
 8008646:	2500      	movge	r5, #0
 8008648:	f7ff fd40 	bl	80080cc <_Balloc>
 800864c:	4602      	mov	r2, r0
 800864e:	b918      	cbnz	r0, 8008658 <__mdiff+0x60>
 8008650:	4b31      	ldr	r3, [pc, #196]	@ (8008718 <__mdiff+0x120>)
 8008652:	f240 2145 	movw	r1, #581	@ 0x245
 8008656:	e7e3      	b.n	8008620 <__mdiff+0x28>
 8008658:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800865c:	6926      	ldr	r6, [r4, #16]
 800865e:	60c5      	str	r5, [r0, #12]
 8008660:	f109 0310 	add.w	r3, r9, #16
 8008664:	f109 0514 	add.w	r5, r9, #20
 8008668:	f104 0e14 	add.w	lr, r4, #20
 800866c:	f100 0b14 	add.w	fp, r0, #20
 8008670:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008674:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	46d9      	mov	r9, fp
 800867c:	f04f 0c00 	mov.w	ip, #0
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008686:	f853 af04 	ldr.w	sl, [r3, #4]!
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	fa1f f38a 	uxth.w	r3, sl
 8008690:	4619      	mov	r1, r3
 8008692:	b283      	uxth	r3, r0
 8008694:	1acb      	subs	r3, r1, r3
 8008696:	0c00      	lsrs	r0, r0, #16
 8008698:	4463      	add	r3, ip
 800869a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800869e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086a8:	4576      	cmp	r6, lr
 80086aa:	f849 3b04 	str.w	r3, [r9], #4
 80086ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086b2:	d8e5      	bhi.n	8008680 <__mdiff+0x88>
 80086b4:	1b33      	subs	r3, r6, r4
 80086b6:	3b15      	subs	r3, #21
 80086b8:	f023 0303 	bic.w	r3, r3, #3
 80086bc:	3415      	adds	r4, #21
 80086be:	3304      	adds	r3, #4
 80086c0:	42a6      	cmp	r6, r4
 80086c2:	bf38      	it	cc
 80086c4:	2304      	movcc	r3, #4
 80086c6:	441d      	add	r5, r3
 80086c8:	445b      	add	r3, fp
 80086ca:	461e      	mov	r6, r3
 80086cc:	462c      	mov	r4, r5
 80086ce:	4544      	cmp	r4, r8
 80086d0:	d30e      	bcc.n	80086f0 <__mdiff+0xf8>
 80086d2:	f108 0103 	add.w	r1, r8, #3
 80086d6:	1b49      	subs	r1, r1, r5
 80086d8:	f021 0103 	bic.w	r1, r1, #3
 80086dc:	3d03      	subs	r5, #3
 80086de:	45a8      	cmp	r8, r5
 80086e0:	bf38      	it	cc
 80086e2:	2100      	movcc	r1, #0
 80086e4:	440b      	add	r3, r1
 80086e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086ea:	b191      	cbz	r1, 8008712 <__mdiff+0x11a>
 80086ec:	6117      	str	r7, [r2, #16]
 80086ee:	e79d      	b.n	800862c <__mdiff+0x34>
 80086f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80086f4:	46e6      	mov	lr, ip
 80086f6:	0c08      	lsrs	r0, r1, #16
 80086f8:	fa1c fc81 	uxtah	ip, ip, r1
 80086fc:	4471      	add	r1, lr
 80086fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008702:	b289      	uxth	r1, r1
 8008704:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008708:	f846 1b04 	str.w	r1, [r6], #4
 800870c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008710:	e7dd      	b.n	80086ce <__mdiff+0xd6>
 8008712:	3f01      	subs	r7, #1
 8008714:	e7e7      	b.n	80086e6 <__mdiff+0xee>
 8008716:	bf00      	nop
 8008718:	0800afc0 	.word	0x0800afc0
 800871c:	0800afd1 	.word	0x0800afd1

08008720 <__d2b>:
 8008720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008724:	460f      	mov	r7, r1
 8008726:	2101      	movs	r1, #1
 8008728:	ec59 8b10 	vmov	r8, r9, d0
 800872c:	4616      	mov	r6, r2
 800872e:	f7ff fccd 	bl	80080cc <_Balloc>
 8008732:	4604      	mov	r4, r0
 8008734:	b930      	cbnz	r0, 8008744 <__d2b+0x24>
 8008736:	4602      	mov	r2, r0
 8008738:	4b23      	ldr	r3, [pc, #140]	@ (80087c8 <__d2b+0xa8>)
 800873a:	4824      	ldr	r0, [pc, #144]	@ (80087cc <__d2b+0xac>)
 800873c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008740:	f000 f8ee 	bl	8008920 <__assert_func>
 8008744:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800874c:	b10d      	cbz	r5, 8008752 <__d2b+0x32>
 800874e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	f1b8 0300 	subs.w	r3, r8, #0
 8008758:	d023      	beq.n	80087a2 <__d2b+0x82>
 800875a:	4668      	mov	r0, sp
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	f7ff fd7c 	bl	800825a <__lo0bits>
 8008762:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008766:	b1d0      	cbz	r0, 800879e <__d2b+0x7e>
 8008768:	f1c0 0320 	rsb	r3, r0, #32
 800876c:	fa02 f303 	lsl.w	r3, r2, r3
 8008770:	430b      	orrs	r3, r1
 8008772:	40c2      	lsrs	r2, r0
 8008774:	6163      	str	r3, [r4, #20]
 8008776:	9201      	str	r2, [sp, #4]
 8008778:	9b01      	ldr	r3, [sp, #4]
 800877a:	61a3      	str	r3, [r4, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	bf0c      	ite	eq
 8008780:	2201      	moveq	r2, #1
 8008782:	2202      	movne	r2, #2
 8008784:	6122      	str	r2, [r4, #16]
 8008786:	b1a5      	cbz	r5, 80087b2 <__d2b+0x92>
 8008788:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800878c:	4405      	add	r5, r0
 800878e:	603d      	str	r5, [r7, #0]
 8008790:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008794:	6030      	str	r0, [r6, #0]
 8008796:	4620      	mov	r0, r4
 8008798:	b003      	add	sp, #12
 800879a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800879e:	6161      	str	r1, [r4, #20]
 80087a0:	e7ea      	b.n	8008778 <__d2b+0x58>
 80087a2:	a801      	add	r0, sp, #4
 80087a4:	f7ff fd59 	bl	800825a <__lo0bits>
 80087a8:	9b01      	ldr	r3, [sp, #4]
 80087aa:	6163      	str	r3, [r4, #20]
 80087ac:	3020      	adds	r0, #32
 80087ae:	2201      	movs	r2, #1
 80087b0:	e7e8      	b.n	8008784 <__d2b+0x64>
 80087b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80087ba:	6038      	str	r0, [r7, #0]
 80087bc:	6918      	ldr	r0, [r3, #16]
 80087be:	f7ff fd2d 	bl	800821c <__hi0bits>
 80087c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087c6:	e7e5      	b.n	8008794 <__d2b+0x74>
 80087c8:	0800afc0 	.word	0x0800afc0
 80087cc:	0800afd1 	.word	0x0800afd1

080087d0 <__sread>:
 80087d0:	b510      	push	{r4, lr}
 80087d2:	460c      	mov	r4, r1
 80087d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d8:	f000 f860 	bl	800889c <_read_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	bfab      	itete	ge
 80087e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087e2:	89a3      	ldrhlt	r3, [r4, #12]
 80087e4:	181b      	addge	r3, r3, r0
 80087e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087ea:	bfac      	ite	ge
 80087ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087ee:	81a3      	strhlt	r3, [r4, #12]
 80087f0:	bd10      	pop	{r4, pc}

080087f2 <__swrite>:
 80087f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	461f      	mov	r7, r3
 80087f8:	898b      	ldrh	r3, [r1, #12]
 80087fa:	05db      	lsls	r3, r3, #23
 80087fc:	4605      	mov	r5, r0
 80087fe:	460c      	mov	r4, r1
 8008800:	4616      	mov	r6, r2
 8008802:	d505      	bpl.n	8008810 <__swrite+0x1e>
 8008804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008808:	2302      	movs	r3, #2
 800880a:	2200      	movs	r2, #0
 800880c:	f000 f834 	bl	8008878 <_lseek_r>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	4632      	mov	r2, r6
 800881e:	463b      	mov	r3, r7
 8008820:	4628      	mov	r0, r5
 8008822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	f000 b85b 	b.w	80088e0 <_write_r>

0800882a <__sseek>:
 800882a:	b510      	push	{r4, lr}
 800882c:	460c      	mov	r4, r1
 800882e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008832:	f000 f821 	bl	8008878 <_lseek_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	bf15      	itete	ne
 800883c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800883e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008846:	81a3      	strheq	r3, [r4, #12]
 8008848:	bf18      	it	ne
 800884a:	81a3      	strhne	r3, [r4, #12]
 800884c:	bd10      	pop	{r4, pc}

0800884e <__sclose>:
 800884e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008852:	f000 b801 	b.w	8008858 <_close_r>
	...

08008858 <_close_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d06      	ldr	r5, [pc, #24]	@ (8008874 <_close_r+0x1c>)
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	f7f9 fc38 	bl	80020d8 <_close>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_close_r+0x1a>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_close_r+0x1a>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	20000530 	.word	0x20000530

08008878 <_lseek_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d07      	ldr	r5, [pc, #28]	@ (8008898 <_lseek_r+0x20>)
 800887c:	4604      	mov	r4, r0
 800887e:	4608      	mov	r0, r1
 8008880:	4611      	mov	r1, r2
 8008882:	2200      	movs	r2, #0
 8008884:	602a      	str	r2, [r5, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	f7f9 fc4d 	bl	8002126 <_lseek>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_lseek_r+0x1e>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_lseek_r+0x1e>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20000530 	.word	0x20000530

0800889c <_read_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4d07      	ldr	r5, [pc, #28]	@ (80088bc <_read_r+0x20>)
 80088a0:	4604      	mov	r4, r0
 80088a2:	4608      	mov	r0, r1
 80088a4:	4611      	mov	r1, r2
 80088a6:	2200      	movs	r2, #0
 80088a8:	602a      	str	r2, [r5, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f7f9 fbdb 	bl	8002066 <_read>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_read_r+0x1e>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_read_r+0x1e>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20000530 	.word	0x20000530

080088c0 <_sbrk_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d06      	ldr	r5, [pc, #24]	@ (80088dc <_sbrk_r+0x1c>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7f9 fc38 	bl	8002140 <_sbrk>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_sbrk_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_sbrk_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20000530 	.word	0x20000530

080088e0 <_write_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4d07      	ldr	r5, [pc, #28]	@ (8008900 <_write_r+0x20>)
 80088e4:	4604      	mov	r4, r0
 80088e6:	4608      	mov	r0, r1
 80088e8:	4611      	mov	r1, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	602a      	str	r2, [r5, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f7f9 fbd6 	bl	80020a0 <_write>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_write_r+0x1e>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_write_r+0x1e>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20000530 	.word	0x20000530

08008904 <memcpy>:
 8008904:	440a      	add	r2, r1
 8008906:	4291      	cmp	r1, r2
 8008908:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800890c:	d100      	bne.n	8008910 <memcpy+0xc>
 800890e:	4770      	bx	lr
 8008910:	b510      	push	{r4, lr}
 8008912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800891a:	4291      	cmp	r1, r2
 800891c:	d1f9      	bne.n	8008912 <memcpy+0xe>
 800891e:	bd10      	pop	{r4, pc}

08008920 <__assert_func>:
 8008920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008922:	4614      	mov	r4, r2
 8008924:	461a      	mov	r2, r3
 8008926:	4b09      	ldr	r3, [pc, #36]	@ (800894c <__assert_func+0x2c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4605      	mov	r5, r0
 800892c:	68d8      	ldr	r0, [r3, #12]
 800892e:	b954      	cbnz	r4, 8008946 <__assert_func+0x26>
 8008930:	4b07      	ldr	r3, [pc, #28]	@ (8008950 <__assert_func+0x30>)
 8008932:	461c      	mov	r4, r3
 8008934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008938:	9100      	str	r1, [sp, #0]
 800893a:	462b      	mov	r3, r5
 800893c:	4905      	ldr	r1, [pc, #20]	@ (8008954 <__assert_func+0x34>)
 800893e:	f000 f87d 	bl	8008a3c <fiprintf>
 8008942:	f000 f89a 	bl	8008a7a <abort>
 8008946:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <__assert_func+0x38>)
 8008948:	e7f4      	b.n	8008934 <__assert_func+0x14>
 800894a:	bf00      	nop
 800894c:	20000018 	.word	0x20000018
 8008950:	0800b26e 	.word	0x0800b26e
 8008954:	0800b240 	.word	0x0800b240
 8008958:	0800b233 	.word	0x0800b233

0800895c <_calloc_r>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	fba1 5402 	umull	r5, r4, r1, r2
 8008962:	b93c      	cbnz	r4, 8008974 <_calloc_r+0x18>
 8008964:	4629      	mov	r1, r5
 8008966:	f7ff fa79 	bl	8007e5c <_malloc_r>
 800896a:	4606      	mov	r6, r0
 800896c:	b928      	cbnz	r0, 800897a <_calloc_r+0x1e>
 800896e:	2600      	movs	r6, #0
 8008970:	4630      	mov	r0, r6
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	220c      	movs	r2, #12
 8008976:	6002      	str	r2, [r0, #0]
 8008978:	e7f9      	b.n	800896e <_calloc_r+0x12>
 800897a:	462a      	mov	r2, r5
 800897c:	4621      	mov	r1, r4
 800897e:	f7fe fbbd 	bl	80070fc <memset>
 8008982:	e7f5      	b.n	8008970 <_calloc_r+0x14>

08008984 <_free_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4605      	mov	r5, r0
 8008988:	2900      	cmp	r1, #0
 800898a:	d041      	beq.n	8008a10 <_free_r+0x8c>
 800898c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008990:	1f0c      	subs	r4, r1, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfb8      	it	lt
 8008996:	18e4      	addlt	r4, r4, r3
 8008998:	f7ff fb8c 	bl	80080b4 <__malloc_lock>
 800899c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a14 <_free_r+0x90>)
 800899e:	6813      	ldr	r3, [r2, #0]
 80089a0:	b933      	cbnz	r3, 80089b0 <_free_r+0x2c>
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	6014      	str	r4, [r2, #0]
 80089a6:	4628      	mov	r0, r5
 80089a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ac:	f7ff bb88 	b.w	80080c0 <__malloc_unlock>
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d908      	bls.n	80089c6 <_free_r+0x42>
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	1821      	adds	r1, r4, r0
 80089b8:	428b      	cmp	r3, r1
 80089ba:	bf01      	itttt	eq
 80089bc:	6819      	ldreq	r1, [r3, #0]
 80089be:	685b      	ldreq	r3, [r3, #4]
 80089c0:	1809      	addeq	r1, r1, r0
 80089c2:	6021      	streq	r1, [r4, #0]
 80089c4:	e7ed      	b.n	80089a2 <_free_r+0x1e>
 80089c6:	461a      	mov	r2, r3
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	b10b      	cbz	r3, 80089d0 <_free_r+0x4c>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d9fa      	bls.n	80089c6 <_free_r+0x42>
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	1850      	adds	r0, r2, r1
 80089d4:	42a0      	cmp	r0, r4
 80089d6:	d10b      	bne.n	80089f0 <_free_r+0x6c>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	4401      	add	r1, r0
 80089dc:	1850      	adds	r0, r2, r1
 80089de:	4283      	cmp	r3, r0
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	d1e0      	bne.n	80089a6 <_free_r+0x22>
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	6053      	str	r3, [r2, #4]
 80089ea:	4408      	add	r0, r1
 80089ec:	6010      	str	r0, [r2, #0]
 80089ee:	e7da      	b.n	80089a6 <_free_r+0x22>
 80089f0:	d902      	bls.n	80089f8 <_free_r+0x74>
 80089f2:	230c      	movs	r3, #12
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	e7d6      	b.n	80089a6 <_free_r+0x22>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	1821      	adds	r1, r4, r0
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf04      	itt	eq
 8008a00:	6819      	ldreq	r1, [r3, #0]
 8008a02:	685b      	ldreq	r3, [r3, #4]
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	bf04      	itt	eq
 8008a08:	1809      	addeq	r1, r1, r0
 8008a0a:	6021      	streq	r1, [r4, #0]
 8008a0c:	6054      	str	r4, [r2, #4]
 8008a0e:	e7ca      	b.n	80089a6 <_free_r+0x22>
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
 8008a12:	bf00      	nop
 8008a14:	2000052c 	.word	0x2000052c

08008a18 <__ascii_mbtowc>:
 8008a18:	b082      	sub	sp, #8
 8008a1a:	b901      	cbnz	r1, 8008a1e <__ascii_mbtowc+0x6>
 8008a1c:	a901      	add	r1, sp, #4
 8008a1e:	b142      	cbz	r2, 8008a32 <__ascii_mbtowc+0x1a>
 8008a20:	b14b      	cbz	r3, 8008a36 <__ascii_mbtowc+0x1e>
 8008a22:	7813      	ldrb	r3, [r2, #0]
 8008a24:	600b      	str	r3, [r1, #0]
 8008a26:	7812      	ldrb	r2, [r2, #0]
 8008a28:	1e10      	subs	r0, r2, #0
 8008a2a:	bf18      	it	ne
 8008a2c:	2001      	movne	r0, #1
 8008a2e:	b002      	add	sp, #8
 8008a30:	4770      	bx	lr
 8008a32:	4610      	mov	r0, r2
 8008a34:	e7fb      	b.n	8008a2e <__ascii_mbtowc+0x16>
 8008a36:	f06f 0001 	mvn.w	r0, #1
 8008a3a:	e7f8      	b.n	8008a2e <__ascii_mbtowc+0x16>

08008a3c <fiprintf>:
 8008a3c:	b40e      	push	{r1, r2, r3}
 8008a3e:	b503      	push	{r0, r1, lr}
 8008a40:	4601      	mov	r1, r0
 8008a42:	ab03      	add	r3, sp, #12
 8008a44:	4805      	ldr	r0, [pc, #20]	@ (8008a5c <fiprintf+0x20>)
 8008a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a4a:	6800      	ldr	r0, [r0, #0]
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	f000 f845 	bl	8008adc <_vfiprintf_r>
 8008a52:	b002      	add	sp, #8
 8008a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a58:	b003      	add	sp, #12
 8008a5a:	4770      	bx	lr
 8008a5c:	20000018 	.word	0x20000018

08008a60 <__ascii_wctomb>:
 8008a60:	4603      	mov	r3, r0
 8008a62:	4608      	mov	r0, r1
 8008a64:	b141      	cbz	r1, 8008a78 <__ascii_wctomb+0x18>
 8008a66:	2aff      	cmp	r2, #255	@ 0xff
 8008a68:	d904      	bls.n	8008a74 <__ascii_wctomb+0x14>
 8008a6a:	228a      	movs	r2, #138	@ 0x8a
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a72:	4770      	bx	lr
 8008a74:	700a      	strb	r2, [r1, #0]
 8008a76:	2001      	movs	r0, #1
 8008a78:	4770      	bx	lr

08008a7a <abort>:
 8008a7a:	b508      	push	{r3, lr}
 8008a7c:	2006      	movs	r0, #6
 8008a7e:	f000 fa85 	bl	8008f8c <raise>
 8008a82:	2001      	movs	r0, #1
 8008a84:	f7f9 fae4 	bl	8002050 <_exit>

08008a88 <__sfputc_r>:
 8008a88:	6893      	ldr	r3, [r2, #8]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	b410      	push	{r4}
 8008a90:	6093      	str	r3, [r2, #8]
 8008a92:	da08      	bge.n	8008aa6 <__sfputc_r+0x1e>
 8008a94:	6994      	ldr	r4, [r2, #24]
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	db01      	blt.n	8008a9e <__sfputc_r+0x16>
 8008a9a:	290a      	cmp	r1, #10
 8008a9c:	d103      	bne.n	8008aa6 <__sfputc_r+0x1e>
 8008a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa2:	f000 b933 	b.w	8008d0c <__swbuf_r>
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	1c58      	adds	r0, r3, #1
 8008aaa:	6010      	str	r0, [r2, #0]
 8008aac:	7019      	strb	r1, [r3, #0]
 8008aae:	4608      	mov	r0, r1
 8008ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <__sfputs_r>:
 8008ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab8:	4606      	mov	r6, r0
 8008aba:	460f      	mov	r7, r1
 8008abc:	4614      	mov	r4, r2
 8008abe:	18d5      	adds	r5, r2, r3
 8008ac0:	42ac      	cmp	r4, r5
 8008ac2:	d101      	bne.n	8008ac8 <__sfputs_r+0x12>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e007      	b.n	8008ad8 <__sfputs_r+0x22>
 8008ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008acc:	463a      	mov	r2, r7
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7ff ffda 	bl	8008a88 <__sfputc_r>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d1f3      	bne.n	8008ac0 <__sfputs_r+0xa>
 8008ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008adc <_vfiprintf_r>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	b09d      	sub	sp, #116	@ 0x74
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	4698      	mov	r8, r3
 8008ae8:	4606      	mov	r6, r0
 8008aea:	b118      	cbz	r0, 8008af4 <_vfiprintf_r+0x18>
 8008aec:	6a03      	ldr	r3, [r0, #32]
 8008aee:	b90b      	cbnz	r3, 8008af4 <_vfiprintf_r+0x18>
 8008af0:	f7fe face 	bl	8007090 <__sinit>
 8008af4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008af6:	07d9      	lsls	r1, r3, #31
 8008af8:	d405      	bmi.n	8008b06 <_vfiprintf_r+0x2a>
 8008afa:	89ab      	ldrh	r3, [r5, #12]
 8008afc:	059a      	lsls	r2, r3, #22
 8008afe:	d402      	bmi.n	8008b06 <_vfiprintf_r+0x2a>
 8008b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b02:	f7fe fb32 	bl	800716a <__retarget_lock_acquire_recursive>
 8008b06:	89ab      	ldrh	r3, [r5, #12]
 8008b08:	071b      	lsls	r3, r3, #28
 8008b0a:	d501      	bpl.n	8008b10 <_vfiprintf_r+0x34>
 8008b0c:	692b      	ldr	r3, [r5, #16]
 8008b0e:	b99b      	cbnz	r3, 8008b38 <_vfiprintf_r+0x5c>
 8008b10:	4629      	mov	r1, r5
 8008b12:	4630      	mov	r0, r6
 8008b14:	f000 f938 	bl	8008d88 <__swsetup_r>
 8008b18:	b170      	cbz	r0, 8008b38 <_vfiprintf_r+0x5c>
 8008b1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b1c:	07dc      	lsls	r4, r3, #31
 8008b1e:	d504      	bpl.n	8008b2a <_vfiprintf_r+0x4e>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b24:	b01d      	add	sp, #116	@ 0x74
 8008b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2a:	89ab      	ldrh	r3, [r5, #12]
 8008b2c:	0598      	lsls	r0, r3, #22
 8008b2e:	d4f7      	bmi.n	8008b20 <_vfiprintf_r+0x44>
 8008b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b32:	f7fe fb1b 	bl	800716c <__retarget_lock_release_recursive>
 8008b36:	e7f3      	b.n	8008b20 <_vfiprintf_r+0x44>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b46:	2330      	movs	r3, #48	@ 0x30
 8008b48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008cf8 <_vfiprintf_r+0x21c>
 8008b4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b50:	f04f 0901 	mov.w	r9, #1
 8008b54:	4623      	mov	r3, r4
 8008b56:	469a      	mov	sl, r3
 8008b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b5c:	b10a      	cbz	r2, 8008b62 <_vfiprintf_r+0x86>
 8008b5e:	2a25      	cmp	r2, #37	@ 0x25
 8008b60:	d1f9      	bne.n	8008b56 <_vfiprintf_r+0x7a>
 8008b62:	ebba 0b04 	subs.w	fp, sl, r4
 8008b66:	d00b      	beq.n	8008b80 <_vfiprintf_r+0xa4>
 8008b68:	465b      	mov	r3, fp
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7ff ffa1 	bl	8008ab6 <__sfputs_r>
 8008b74:	3001      	adds	r0, #1
 8008b76:	f000 80a7 	beq.w	8008cc8 <_vfiprintf_r+0x1ec>
 8008b7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b7c:	445a      	add	r2, fp
 8008b7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b80:	f89a 3000 	ldrb.w	r3, [sl]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 809f 	beq.w	8008cc8 <_vfiprintf_r+0x1ec>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b94:	f10a 0a01 	add.w	sl, sl, #1
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ba0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ba2:	4654      	mov	r4, sl
 8008ba4:	2205      	movs	r2, #5
 8008ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008baa:	4853      	ldr	r0, [pc, #332]	@ (8008cf8 <_vfiprintf_r+0x21c>)
 8008bac:	f7f7 fb30 	bl	8000210 <memchr>
 8008bb0:	9a04      	ldr	r2, [sp, #16]
 8008bb2:	b9d8      	cbnz	r0, 8008bec <_vfiprintf_r+0x110>
 8008bb4:	06d1      	lsls	r1, r2, #27
 8008bb6:	bf44      	itt	mi
 8008bb8:	2320      	movmi	r3, #32
 8008bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bbe:	0713      	lsls	r3, r2, #28
 8008bc0:	bf44      	itt	mi
 8008bc2:	232b      	movmi	r3, #43	@ 0x2b
 8008bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bce:	d015      	beq.n	8008bfc <_vfiprintf_r+0x120>
 8008bd0:	9a07      	ldr	r2, [sp, #28]
 8008bd2:	4654      	mov	r4, sl
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f04f 0c0a 	mov.w	ip, #10
 8008bda:	4621      	mov	r1, r4
 8008bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008be0:	3b30      	subs	r3, #48	@ 0x30
 8008be2:	2b09      	cmp	r3, #9
 8008be4:	d94b      	bls.n	8008c7e <_vfiprintf_r+0x1a2>
 8008be6:	b1b0      	cbz	r0, 8008c16 <_vfiprintf_r+0x13a>
 8008be8:	9207      	str	r2, [sp, #28]
 8008bea:	e014      	b.n	8008c16 <_vfiprintf_r+0x13a>
 8008bec:	eba0 0308 	sub.w	r3, r0, r8
 8008bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	9304      	str	r3, [sp, #16]
 8008bf8:	46a2      	mov	sl, r4
 8008bfa:	e7d2      	b.n	8008ba2 <_vfiprintf_r+0xc6>
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	1d19      	adds	r1, r3, #4
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	9103      	str	r1, [sp, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	bfbb      	ittet	lt
 8008c08:	425b      	neglt	r3, r3
 8008c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c0e:	9307      	strge	r3, [sp, #28]
 8008c10:	9307      	strlt	r3, [sp, #28]
 8008c12:	bfb8      	it	lt
 8008c14:	9204      	strlt	r2, [sp, #16]
 8008c16:	7823      	ldrb	r3, [r4, #0]
 8008c18:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c1a:	d10a      	bne.n	8008c32 <_vfiprintf_r+0x156>
 8008c1c:	7863      	ldrb	r3, [r4, #1]
 8008c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c20:	d132      	bne.n	8008c88 <_vfiprintf_r+0x1ac>
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	1d1a      	adds	r2, r3, #4
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	9203      	str	r2, [sp, #12]
 8008c2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c2e:	3402      	adds	r4, #2
 8008c30:	9305      	str	r3, [sp, #20]
 8008c32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d08 <_vfiprintf_r+0x22c>
 8008c36:	7821      	ldrb	r1, [r4, #0]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	4650      	mov	r0, sl
 8008c3c:	f7f7 fae8 	bl	8000210 <memchr>
 8008c40:	b138      	cbz	r0, 8008c52 <_vfiprintf_r+0x176>
 8008c42:	9b04      	ldr	r3, [sp, #16]
 8008c44:	eba0 000a 	sub.w	r0, r0, sl
 8008c48:	2240      	movs	r2, #64	@ 0x40
 8008c4a:	4082      	lsls	r2, r0
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	3401      	adds	r4, #1
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c56:	4829      	ldr	r0, [pc, #164]	@ (8008cfc <_vfiprintf_r+0x220>)
 8008c58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c5c:	2206      	movs	r2, #6
 8008c5e:	f7f7 fad7 	bl	8000210 <memchr>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d03f      	beq.n	8008ce6 <_vfiprintf_r+0x20a>
 8008c66:	4b26      	ldr	r3, [pc, #152]	@ (8008d00 <_vfiprintf_r+0x224>)
 8008c68:	bb1b      	cbnz	r3, 8008cb2 <_vfiprintf_r+0x1d6>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	3307      	adds	r3, #7
 8008c6e:	f023 0307 	bic.w	r3, r3, #7
 8008c72:	3308      	adds	r3, #8
 8008c74:	9303      	str	r3, [sp, #12]
 8008c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c78:	443b      	add	r3, r7
 8008c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c7c:	e76a      	b.n	8008b54 <_vfiprintf_r+0x78>
 8008c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c82:	460c      	mov	r4, r1
 8008c84:	2001      	movs	r0, #1
 8008c86:	e7a8      	b.n	8008bda <_vfiprintf_r+0xfe>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	3401      	adds	r4, #1
 8008c8c:	9305      	str	r3, [sp, #20]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	f04f 0c0a 	mov.w	ip, #10
 8008c94:	4620      	mov	r0, r4
 8008c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c9a:	3a30      	subs	r2, #48	@ 0x30
 8008c9c:	2a09      	cmp	r2, #9
 8008c9e:	d903      	bls.n	8008ca8 <_vfiprintf_r+0x1cc>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d0c6      	beq.n	8008c32 <_vfiprintf_r+0x156>
 8008ca4:	9105      	str	r1, [sp, #20]
 8008ca6:	e7c4      	b.n	8008c32 <_vfiprintf_r+0x156>
 8008ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cac:	4604      	mov	r4, r0
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e7f0      	b.n	8008c94 <_vfiprintf_r+0x1b8>
 8008cb2:	ab03      	add	r3, sp, #12
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4b12      	ldr	r3, [pc, #72]	@ (8008d04 <_vfiprintf_r+0x228>)
 8008cba:	a904      	add	r1, sp, #16
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7fd fda3 	bl	8006808 <_printf_float>
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	1c78      	adds	r0, r7, #1
 8008cc6:	d1d6      	bne.n	8008c76 <_vfiprintf_r+0x19a>
 8008cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cca:	07d9      	lsls	r1, r3, #31
 8008ccc:	d405      	bmi.n	8008cda <_vfiprintf_r+0x1fe>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	059a      	lsls	r2, r3, #22
 8008cd2:	d402      	bmi.n	8008cda <_vfiprintf_r+0x1fe>
 8008cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cd6:	f7fe fa49 	bl	800716c <__retarget_lock_release_recursive>
 8008cda:	89ab      	ldrh	r3, [r5, #12]
 8008cdc:	065b      	lsls	r3, r3, #25
 8008cde:	f53f af1f 	bmi.w	8008b20 <_vfiprintf_r+0x44>
 8008ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ce4:	e71e      	b.n	8008b24 <_vfiprintf_r+0x48>
 8008ce6:	ab03      	add	r3, sp, #12
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	462a      	mov	r2, r5
 8008cec:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <_vfiprintf_r+0x228>)
 8008cee:	a904      	add	r1, sp, #16
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7fe f821 	bl	8006d38 <_printf_i>
 8008cf6:	e7e4      	b.n	8008cc2 <_vfiprintf_r+0x1e6>
 8008cf8:	0800b26f 	.word	0x0800b26f
 8008cfc:	0800b279 	.word	0x0800b279
 8008d00:	08006809 	.word	0x08006809
 8008d04:	08008ab7 	.word	0x08008ab7
 8008d08:	0800b275 	.word	0x0800b275

08008d0c <__swbuf_r>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	460e      	mov	r6, r1
 8008d10:	4614      	mov	r4, r2
 8008d12:	4605      	mov	r5, r0
 8008d14:	b118      	cbz	r0, 8008d1e <__swbuf_r+0x12>
 8008d16:	6a03      	ldr	r3, [r0, #32]
 8008d18:	b90b      	cbnz	r3, 8008d1e <__swbuf_r+0x12>
 8008d1a:	f7fe f9b9 	bl	8007090 <__sinit>
 8008d1e:	69a3      	ldr	r3, [r4, #24]
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	071a      	lsls	r2, r3, #28
 8008d26:	d501      	bpl.n	8008d2c <__swbuf_r+0x20>
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	b943      	cbnz	r3, 8008d3e <__swbuf_r+0x32>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 f82a 	bl	8008d88 <__swsetup_r>
 8008d34:	b118      	cbz	r0, 8008d3e <__swbuf_r+0x32>
 8008d36:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	6922      	ldr	r2, [r4, #16]
 8008d42:	1a98      	subs	r0, r3, r2
 8008d44:	6963      	ldr	r3, [r4, #20]
 8008d46:	b2f6      	uxtb	r6, r6
 8008d48:	4283      	cmp	r3, r0
 8008d4a:	4637      	mov	r7, r6
 8008d4c:	dc05      	bgt.n	8008d5a <__swbuf_r+0x4e>
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4628      	mov	r0, r5
 8008d52:	f7ff f987 	bl	8008064 <_fflush_r>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d1ed      	bne.n	8008d36 <__swbuf_r+0x2a>
 8008d5a:	68a3      	ldr	r3, [r4, #8]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	60a3      	str	r3, [r4, #8]
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	1c5a      	adds	r2, r3, #1
 8008d64:	6022      	str	r2, [r4, #0]
 8008d66:	701e      	strb	r6, [r3, #0]
 8008d68:	6962      	ldr	r2, [r4, #20]
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d004      	beq.n	8008d7a <__swbuf_r+0x6e>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	07db      	lsls	r3, r3, #31
 8008d74:	d5e1      	bpl.n	8008d3a <__swbuf_r+0x2e>
 8008d76:	2e0a      	cmp	r6, #10
 8008d78:	d1df      	bne.n	8008d3a <__swbuf_r+0x2e>
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f7ff f971 	bl	8008064 <_fflush_r>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d0d9      	beq.n	8008d3a <__swbuf_r+0x2e>
 8008d86:	e7d6      	b.n	8008d36 <__swbuf_r+0x2a>

08008d88 <__swsetup_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4b29      	ldr	r3, [pc, #164]	@ (8008e30 <__swsetup_r+0xa8>)
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	460c      	mov	r4, r1
 8008d92:	b118      	cbz	r0, 8008d9c <__swsetup_r+0x14>
 8008d94:	6a03      	ldr	r3, [r0, #32]
 8008d96:	b90b      	cbnz	r3, 8008d9c <__swsetup_r+0x14>
 8008d98:	f7fe f97a 	bl	8007090 <__sinit>
 8008d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da0:	0719      	lsls	r1, r3, #28
 8008da2:	d422      	bmi.n	8008dea <__swsetup_r+0x62>
 8008da4:	06da      	lsls	r2, r3, #27
 8008da6:	d407      	bmi.n	8008db8 <__swsetup_r+0x30>
 8008da8:	2209      	movs	r2, #9
 8008daa:	602a      	str	r2, [r5, #0]
 8008dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008db6:	e033      	b.n	8008e20 <__swsetup_r+0x98>
 8008db8:	0758      	lsls	r0, r3, #29
 8008dba:	d512      	bpl.n	8008de2 <__swsetup_r+0x5a>
 8008dbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dbe:	b141      	cbz	r1, 8008dd2 <__swsetup_r+0x4a>
 8008dc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	d002      	beq.n	8008dce <__swsetup_r+0x46>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f7ff fddb 	bl	8008984 <_free_r>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6063      	str	r3, [r4, #4]
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	f043 0308 	orr.w	r3, r3, #8
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	b94b      	cbnz	r3, 8008e02 <__swsetup_r+0x7a>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008df8:	d003      	beq.n	8008e02 <__swsetup_r+0x7a>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f000 f83f 	bl	8008e80 <__smakebuf_r>
 8008e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e06:	f013 0201 	ands.w	r2, r3, #1
 8008e0a:	d00a      	beq.n	8008e22 <__swsetup_r+0x9a>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	60a2      	str	r2, [r4, #8]
 8008e10:	6962      	ldr	r2, [r4, #20]
 8008e12:	4252      	negs	r2, r2
 8008e14:	61a2      	str	r2, [r4, #24]
 8008e16:	6922      	ldr	r2, [r4, #16]
 8008e18:	b942      	cbnz	r2, 8008e2c <__swsetup_r+0xa4>
 8008e1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e1e:	d1c5      	bne.n	8008dac <__swsetup_r+0x24>
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	0799      	lsls	r1, r3, #30
 8008e24:	bf58      	it	pl
 8008e26:	6962      	ldrpl	r2, [r4, #20]
 8008e28:	60a2      	str	r2, [r4, #8]
 8008e2a:	e7f4      	b.n	8008e16 <__swsetup_r+0x8e>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e7f7      	b.n	8008e20 <__swsetup_r+0x98>
 8008e30:	20000018 	.word	0x20000018

08008e34 <__swhatbuf_r>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	b096      	sub	sp, #88	@ 0x58
 8008e40:	4615      	mov	r5, r2
 8008e42:	461e      	mov	r6, r3
 8008e44:	da0d      	bge.n	8008e62 <__swhatbuf_r+0x2e>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e4c:	f04f 0100 	mov.w	r1, #0
 8008e50:	bf14      	ite	ne
 8008e52:	2340      	movne	r3, #64	@ 0x40
 8008e54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e58:	2000      	movs	r0, #0
 8008e5a:	6031      	str	r1, [r6, #0]
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	b016      	add	sp, #88	@ 0x58
 8008e60:	bd70      	pop	{r4, r5, r6, pc}
 8008e62:	466a      	mov	r2, sp
 8008e64:	f000 f848 	bl	8008ef8 <_fstat_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	dbec      	blt.n	8008e46 <__swhatbuf_r+0x12>
 8008e6c:	9901      	ldr	r1, [sp, #4]
 8008e6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e76:	4259      	negs	r1, r3
 8008e78:	4159      	adcs	r1, r3
 8008e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e7e:	e7eb      	b.n	8008e58 <__swhatbuf_r+0x24>

08008e80 <__smakebuf_r>:
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e84:	079d      	lsls	r5, r3, #30
 8008e86:	4606      	mov	r6, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	d507      	bpl.n	8008e9c <__smakebuf_r+0x1c>
 8008e8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2301      	movs	r3, #1
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	b003      	add	sp, #12
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	ab01      	add	r3, sp, #4
 8008e9e:	466a      	mov	r2, sp
 8008ea0:	f7ff ffc8 	bl	8008e34 <__swhatbuf_r>
 8008ea4:	9f00      	ldr	r7, [sp, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7fe ffd6 	bl	8007e5c <_malloc_r>
 8008eb0:	b948      	cbnz	r0, 8008ec6 <__smakebuf_r+0x46>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	059a      	lsls	r2, r3, #22
 8008eb8:	d4ee      	bmi.n	8008e98 <__smakebuf_r+0x18>
 8008eba:	f023 0303 	bic.w	r3, r3, #3
 8008ebe:	f043 0302 	orr.w	r3, r3, #2
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	e7e2      	b.n	8008e8c <__smakebuf_r+0xc>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	6020      	str	r0, [r4, #0]
 8008eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ed6:	b15b      	cbz	r3, 8008ef0 <__smakebuf_r+0x70>
 8008ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f81d 	bl	8008f1c <_isatty_r>
 8008ee2:	b128      	cbz	r0, 8008ef0 <__smakebuf_r+0x70>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	431d      	orrs	r5, r3
 8008ef4:	81a5      	strh	r5, [r4, #12]
 8008ef6:	e7cf      	b.n	8008e98 <__smakebuf_r+0x18>

08008ef8 <_fstat_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d07      	ldr	r5, [pc, #28]	@ (8008f18 <_fstat_r+0x20>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	4611      	mov	r1, r2
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	f7f9 f8f3 	bl	80020f0 <_fstat>
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	d102      	bne.n	8008f14 <_fstat_r+0x1c>
 8008f0e:	682b      	ldr	r3, [r5, #0]
 8008f10:	b103      	cbz	r3, 8008f14 <_fstat_r+0x1c>
 8008f12:	6023      	str	r3, [r4, #0]
 8008f14:	bd38      	pop	{r3, r4, r5, pc}
 8008f16:	bf00      	nop
 8008f18:	20000530 	.word	0x20000530

08008f1c <_isatty_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d06      	ldr	r5, [pc, #24]	@ (8008f38 <_isatty_r+0x1c>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	f7f9 f8f2 	bl	8002110 <_isatty>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_isatty_r+0x1a>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_isatty_r+0x1a>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20000530 	.word	0x20000530

08008f3c <_raise_r>:
 8008f3c:	291f      	cmp	r1, #31
 8008f3e:	b538      	push	{r3, r4, r5, lr}
 8008f40:	4605      	mov	r5, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	d904      	bls.n	8008f50 <_raise_r+0x14>
 8008f46:	2316      	movs	r3, #22
 8008f48:	6003      	str	r3, [r0, #0]
 8008f4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f52:	b112      	cbz	r2, 8008f5a <_raise_r+0x1e>
 8008f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f58:	b94b      	cbnz	r3, 8008f6e <_raise_r+0x32>
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f000 f830 	bl	8008fc0 <_getpid_r>
 8008f60:	4622      	mov	r2, r4
 8008f62:	4601      	mov	r1, r0
 8008f64:	4628      	mov	r0, r5
 8008f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f6a:	f000 b817 	b.w	8008f9c <_kill_r>
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d00a      	beq.n	8008f88 <_raise_r+0x4c>
 8008f72:	1c59      	adds	r1, r3, #1
 8008f74:	d103      	bne.n	8008f7e <_raise_r+0x42>
 8008f76:	2316      	movs	r3, #22
 8008f78:	6003      	str	r3, [r0, #0]
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	e7e7      	b.n	8008f4e <_raise_r+0x12>
 8008f7e:	2100      	movs	r1, #0
 8008f80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f84:	4620      	mov	r0, r4
 8008f86:	4798      	blx	r3
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e7e0      	b.n	8008f4e <_raise_r+0x12>

08008f8c <raise>:
 8008f8c:	4b02      	ldr	r3, [pc, #8]	@ (8008f98 <raise+0xc>)
 8008f8e:	4601      	mov	r1, r0
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f7ff bfd3 	b.w	8008f3c <_raise_r>
 8008f96:	bf00      	nop
 8008f98:	20000018 	.word	0x20000018

08008f9c <_kill_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4d07      	ldr	r5, [pc, #28]	@ (8008fbc <_kill_r+0x20>)
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	f7f9 f841 	bl	8002030 <_kill>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	d102      	bne.n	8008fb8 <_kill_r+0x1c>
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	b103      	cbz	r3, 8008fb8 <_kill_r+0x1c>
 8008fb6:	6023      	str	r3, [r4, #0]
 8008fb8:	bd38      	pop	{r3, r4, r5, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000530 	.word	0x20000530

08008fc0 <_getpid_r>:
 8008fc0:	f7f9 b82e 	b.w	8002020 <_getpid>

08008fc4 <pow>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	ed2d 8b02 	vpush	{d8}
 8008fca:	eeb0 8a40 	vmov.f32	s16, s0
 8008fce:	eef0 8a60 	vmov.f32	s17, s1
 8008fd2:	ec55 4b11 	vmov	r4, r5, d1
 8008fd6:	f000 fa23 	bl	8009420 <__ieee754_pow>
 8008fda:	4622      	mov	r2, r4
 8008fdc:	462b      	mov	r3, r5
 8008fde:	4620      	mov	r0, r4
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	ec57 6b10 	vmov	r6, r7, d0
 8008fe6:	f7f7 fdc1 	bl	8000b6c <__aeabi_dcmpun>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d13b      	bne.n	8009066 <pow+0xa2>
 8008fee:	ec51 0b18 	vmov	r0, r1, d8
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f7f7 fd87 	bl	8000b08 <__aeabi_dcmpeq>
 8008ffa:	b1b8      	cbz	r0, 800902c <pow+0x68>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2300      	movs	r3, #0
 8009000:	4620      	mov	r0, r4
 8009002:	4629      	mov	r1, r5
 8009004:	f7f7 fd80 	bl	8000b08 <__aeabi_dcmpeq>
 8009008:	2800      	cmp	r0, #0
 800900a:	d146      	bne.n	800909a <pow+0xd6>
 800900c:	ec45 4b10 	vmov	d0, r4, r5
 8009010:	f000 f8ca 	bl	80091a8 <finite>
 8009014:	b338      	cbz	r0, 8009066 <pow+0xa2>
 8009016:	2200      	movs	r2, #0
 8009018:	2300      	movs	r3, #0
 800901a:	4620      	mov	r0, r4
 800901c:	4629      	mov	r1, r5
 800901e:	f7f7 fd7d 	bl	8000b1c <__aeabi_dcmplt>
 8009022:	b300      	cbz	r0, 8009066 <pow+0xa2>
 8009024:	f7fe f876 	bl	8007114 <__errno>
 8009028:	2322      	movs	r3, #34	@ 0x22
 800902a:	e01b      	b.n	8009064 <pow+0xa0>
 800902c:	ec47 6b10 	vmov	d0, r6, r7
 8009030:	f000 f8ba 	bl	80091a8 <finite>
 8009034:	b9e0      	cbnz	r0, 8009070 <pow+0xac>
 8009036:	eeb0 0a48 	vmov.f32	s0, s16
 800903a:	eef0 0a68 	vmov.f32	s1, s17
 800903e:	f000 f8b3 	bl	80091a8 <finite>
 8009042:	b1a8      	cbz	r0, 8009070 <pow+0xac>
 8009044:	ec45 4b10 	vmov	d0, r4, r5
 8009048:	f000 f8ae 	bl	80091a8 <finite>
 800904c:	b180      	cbz	r0, 8009070 <pow+0xac>
 800904e:	4632      	mov	r2, r6
 8009050:	463b      	mov	r3, r7
 8009052:	4630      	mov	r0, r6
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 fd89 	bl	8000b6c <__aeabi_dcmpun>
 800905a:	2800      	cmp	r0, #0
 800905c:	d0e2      	beq.n	8009024 <pow+0x60>
 800905e:	f7fe f859 	bl	8007114 <__errno>
 8009062:	2321      	movs	r3, #33	@ 0x21
 8009064:	6003      	str	r3, [r0, #0]
 8009066:	ecbd 8b02 	vpop	{d8}
 800906a:	ec47 6b10 	vmov	d0, r6, r7
 800906e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009070:	2200      	movs	r2, #0
 8009072:	2300      	movs	r3, #0
 8009074:	4630      	mov	r0, r6
 8009076:	4639      	mov	r1, r7
 8009078:	f7f7 fd46 	bl	8000b08 <__aeabi_dcmpeq>
 800907c:	2800      	cmp	r0, #0
 800907e:	d0f2      	beq.n	8009066 <pow+0xa2>
 8009080:	eeb0 0a48 	vmov.f32	s0, s16
 8009084:	eef0 0a68 	vmov.f32	s1, s17
 8009088:	f000 f88e 	bl	80091a8 <finite>
 800908c:	2800      	cmp	r0, #0
 800908e:	d0ea      	beq.n	8009066 <pow+0xa2>
 8009090:	ec45 4b10 	vmov	d0, r4, r5
 8009094:	f000 f888 	bl	80091a8 <finite>
 8009098:	e7c3      	b.n	8009022 <pow+0x5e>
 800909a:	4f01      	ldr	r7, [pc, #4]	@ (80090a0 <pow+0xdc>)
 800909c:	2600      	movs	r6, #0
 800909e:	e7e2      	b.n	8009066 <pow+0xa2>
 80090a0:	3ff00000 	.word	0x3ff00000

080090a4 <sqrt>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	ed2d 8b02 	vpush	{d8}
 80090aa:	ec55 4b10 	vmov	r4, r5, d0
 80090ae:	f000 f8db 	bl	8009268 <__ieee754_sqrt>
 80090b2:	4622      	mov	r2, r4
 80090b4:	462b      	mov	r3, r5
 80090b6:	4620      	mov	r0, r4
 80090b8:	4629      	mov	r1, r5
 80090ba:	eeb0 8a40 	vmov.f32	s16, s0
 80090be:	eef0 8a60 	vmov.f32	s17, s1
 80090c2:	f7f7 fd53 	bl	8000b6c <__aeabi_dcmpun>
 80090c6:	b990      	cbnz	r0, 80090ee <sqrt+0x4a>
 80090c8:	2200      	movs	r2, #0
 80090ca:	2300      	movs	r3, #0
 80090cc:	4620      	mov	r0, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	f7f7 fd24 	bl	8000b1c <__aeabi_dcmplt>
 80090d4:	b158      	cbz	r0, 80090ee <sqrt+0x4a>
 80090d6:	f7fe f81d 	bl	8007114 <__errno>
 80090da:	2321      	movs	r3, #33	@ 0x21
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	2200      	movs	r2, #0
 80090e0:	2300      	movs	r3, #0
 80090e2:	4610      	mov	r0, r2
 80090e4:	4619      	mov	r1, r3
 80090e6:	f7f7 fbd1 	bl	800088c <__aeabi_ddiv>
 80090ea:	ec41 0b18 	vmov	d8, r0, r1
 80090ee:	eeb0 0a48 	vmov.f32	s0, s16
 80090f2:	eef0 0a68 	vmov.f32	s1, s17
 80090f6:	ecbd 8b02 	vpop	{d8}
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	0000      	movs	r0, r0
	...

08009100 <cos>:
 8009100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009102:	ec53 2b10 	vmov	r2, r3, d0
 8009106:	4826      	ldr	r0, [pc, #152]	@ (80091a0 <cos+0xa0>)
 8009108:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800910c:	4281      	cmp	r1, r0
 800910e:	d806      	bhi.n	800911e <cos+0x1e>
 8009110:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009198 <cos+0x98>
 8009114:	b005      	add	sp, #20
 8009116:	f85d eb04 	ldr.w	lr, [sp], #4
 800911a:	f001 bc55 	b.w	800a9c8 <__kernel_cos>
 800911e:	4821      	ldr	r0, [pc, #132]	@ (80091a4 <cos+0xa4>)
 8009120:	4281      	cmp	r1, r0
 8009122:	d908      	bls.n	8009136 <cos+0x36>
 8009124:	4610      	mov	r0, r2
 8009126:	4619      	mov	r1, r3
 8009128:	f7f7 f8ce 	bl	80002c8 <__aeabi_dsub>
 800912c:	ec41 0b10 	vmov	d0, r0, r1
 8009130:	b005      	add	sp, #20
 8009132:	f85d fb04 	ldr.w	pc, [sp], #4
 8009136:	4668      	mov	r0, sp
 8009138:	f000 feb6 	bl	8009ea8 <__ieee754_rem_pio2>
 800913c:	f000 0003 	and.w	r0, r0, #3
 8009140:	2801      	cmp	r0, #1
 8009142:	d00b      	beq.n	800915c <cos+0x5c>
 8009144:	2802      	cmp	r0, #2
 8009146:	d015      	beq.n	8009174 <cos+0x74>
 8009148:	b9d8      	cbnz	r0, 8009182 <cos+0x82>
 800914a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800914e:	ed9d 0b00 	vldr	d0, [sp]
 8009152:	f001 fc39 	bl	800a9c8 <__kernel_cos>
 8009156:	ec51 0b10 	vmov	r0, r1, d0
 800915a:	e7e7      	b.n	800912c <cos+0x2c>
 800915c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009160:	ed9d 0b00 	vldr	d0, [sp]
 8009164:	f001 fcf8 	bl	800ab58 <__kernel_sin>
 8009168:	ec53 2b10 	vmov	r2, r3, d0
 800916c:	4610      	mov	r0, r2
 800916e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009172:	e7db      	b.n	800912c <cos+0x2c>
 8009174:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009178:	ed9d 0b00 	vldr	d0, [sp]
 800917c:	f001 fc24 	bl	800a9c8 <__kernel_cos>
 8009180:	e7f2      	b.n	8009168 <cos+0x68>
 8009182:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009186:	ed9d 0b00 	vldr	d0, [sp]
 800918a:	2001      	movs	r0, #1
 800918c:	f001 fce4 	bl	800ab58 <__kernel_sin>
 8009190:	e7e1      	b.n	8009156 <cos+0x56>
 8009192:	bf00      	nop
 8009194:	f3af 8000 	nop.w
	...
 80091a0:	3fe921fb 	.word	0x3fe921fb
 80091a4:	7fefffff 	.word	0x7fefffff

080091a8 <finite>:
 80091a8:	b082      	sub	sp, #8
 80091aa:	ed8d 0b00 	vstr	d0, [sp]
 80091ae:	9801      	ldr	r0, [sp, #4]
 80091b0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80091b4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80091b8:	0fc0      	lsrs	r0, r0, #31
 80091ba:	b002      	add	sp, #8
 80091bc:	4770      	bx	lr
	...

080091c0 <sin>:
 80091c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091c2:	ec53 2b10 	vmov	r2, r3, d0
 80091c6:	4826      	ldr	r0, [pc, #152]	@ (8009260 <sin+0xa0>)
 80091c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80091cc:	4281      	cmp	r1, r0
 80091ce:	d807      	bhi.n	80091e0 <sin+0x20>
 80091d0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009258 <sin+0x98>
 80091d4:	2000      	movs	r0, #0
 80091d6:	b005      	add	sp, #20
 80091d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091dc:	f001 bcbc 	b.w	800ab58 <__kernel_sin>
 80091e0:	4820      	ldr	r0, [pc, #128]	@ (8009264 <sin+0xa4>)
 80091e2:	4281      	cmp	r1, r0
 80091e4:	d908      	bls.n	80091f8 <sin+0x38>
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	f7f7 f86d 	bl	80002c8 <__aeabi_dsub>
 80091ee:	ec41 0b10 	vmov	d0, r0, r1
 80091f2:	b005      	add	sp, #20
 80091f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80091f8:	4668      	mov	r0, sp
 80091fa:	f000 fe55 	bl	8009ea8 <__ieee754_rem_pio2>
 80091fe:	f000 0003 	and.w	r0, r0, #3
 8009202:	2801      	cmp	r0, #1
 8009204:	d00c      	beq.n	8009220 <sin+0x60>
 8009206:	2802      	cmp	r0, #2
 8009208:	d011      	beq.n	800922e <sin+0x6e>
 800920a:	b9e8      	cbnz	r0, 8009248 <sin+0x88>
 800920c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009210:	ed9d 0b00 	vldr	d0, [sp]
 8009214:	2001      	movs	r0, #1
 8009216:	f001 fc9f 	bl	800ab58 <__kernel_sin>
 800921a:	ec51 0b10 	vmov	r0, r1, d0
 800921e:	e7e6      	b.n	80091ee <sin+0x2e>
 8009220:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009224:	ed9d 0b00 	vldr	d0, [sp]
 8009228:	f001 fbce 	bl	800a9c8 <__kernel_cos>
 800922c:	e7f5      	b.n	800921a <sin+0x5a>
 800922e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009232:	ed9d 0b00 	vldr	d0, [sp]
 8009236:	2001      	movs	r0, #1
 8009238:	f001 fc8e 	bl	800ab58 <__kernel_sin>
 800923c:	ec53 2b10 	vmov	r2, r3, d0
 8009240:	4610      	mov	r0, r2
 8009242:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009246:	e7d2      	b.n	80091ee <sin+0x2e>
 8009248:	ed9d 1b02 	vldr	d1, [sp, #8]
 800924c:	ed9d 0b00 	vldr	d0, [sp]
 8009250:	f001 fbba 	bl	800a9c8 <__kernel_cos>
 8009254:	e7f2      	b.n	800923c <sin+0x7c>
 8009256:	bf00      	nop
	...
 8009260:	3fe921fb 	.word	0x3fe921fb
 8009264:	7fefffff 	.word	0x7fefffff

08009268 <__ieee754_sqrt>:
 8009268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	4a68      	ldr	r2, [pc, #416]	@ (8009410 <__ieee754_sqrt+0x1a8>)
 800926e:	ec55 4b10 	vmov	r4, r5, d0
 8009272:	43aa      	bics	r2, r5
 8009274:	462b      	mov	r3, r5
 8009276:	4621      	mov	r1, r4
 8009278:	d110      	bne.n	800929c <__ieee754_sqrt+0x34>
 800927a:	4622      	mov	r2, r4
 800927c:	4620      	mov	r0, r4
 800927e:	4629      	mov	r1, r5
 8009280:	f7f7 f9da 	bl	8000638 <__aeabi_dmul>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	f7f7 f81e 	bl	80002cc <__adddf3>
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	ec45 4b10 	vmov	d0, r4, r5
 8009298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	2d00      	cmp	r5, #0
 800929e:	dc0e      	bgt.n	80092be <__ieee754_sqrt+0x56>
 80092a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80092a4:	4322      	orrs	r2, r4
 80092a6:	d0f5      	beq.n	8009294 <__ieee754_sqrt+0x2c>
 80092a8:	b19d      	cbz	r5, 80092d2 <__ieee754_sqrt+0x6a>
 80092aa:	4622      	mov	r2, r4
 80092ac:	4620      	mov	r0, r4
 80092ae:	4629      	mov	r1, r5
 80092b0:	f7f7 f80a 	bl	80002c8 <__aeabi_dsub>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	f7f7 fae8 	bl	800088c <__aeabi_ddiv>
 80092bc:	e7e8      	b.n	8009290 <__ieee754_sqrt+0x28>
 80092be:	152a      	asrs	r2, r5, #20
 80092c0:	d115      	bne.n	80092ee <__ieee754_sqrt+0x86>
 80092c2:	2000      	movs	r0, #0
 80092c4:	e009      	b.n	80092da <__ieee754_sqrt+0x72>
 80092c6:	0acb      	lsrs	r3, r1, #11
 80092c8:	3a15      	subs	r2, #21
 80092ca:	0549      	lsls	r1, r1, #21
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0fa      	beq.n	80092c6 <__ieee754_sqrt+0x5e>
 80092d0:	e7f7      	b.n	80092c2 <__ieee754_sqrt+0x5a>
 80092d2:	462a      	mov	r2, r5
 80092d4:	e7fa      	b.n	80092cc <__ieee754_sqrt+0x64>
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	3001      	adds	r0, #1
 80092da:	02dc      	lsls	r4, r3, #11
 80092dc:	d5fb      	bpl.n	80092d6 <__ieee754_sqrt+0x6e>
 80092de:	1e44      	subs	r4, r0, #1
 80092e0:	1b12      	subs	r2, r2, r4
 80092e2:	f1c0 0420 	rsb	r4, r0, #32
 80092e6:	fa21 f404 	lsr.w	r4, r1, r4
 80092ea:	4323      	orrs	r3, r4
 80092ec:	4081      	lsls	r1, r0
 80092ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80092f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092fa:	07d2      	lsls	r2, r2, #31
 80092fc:	bf5c      	itt	pl
 80092fe:	005b      	lslpl	r3, r3, #1
 8009300:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009304:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009308:	bf58      	it	pl
 800930a:	0049      	lslpl	r1, r1, #1
 800930c:	2600      	movs	r6, #0
 800930e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009312:	106d      	asrs	r5, r5, #1
 8009314:	0049      	lsls	r1, r1, #1
 8009316:	2016      	movs	r0, #22
 8009318:	4632      	mov	r2, r6
 800931a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800931e:	1917      	adds	r7, r2, r4
 8009320:	429f      	cmp	r7, r3
 8009322:	bfde      	ittt	le
 8009324:	193a      	addle	r2, r7, r4
 8009326:	1bdb      	suble	r3, r3, r7
 8009328:	1936      	addle	r6, r6, r4
 800932a:	0fcf      	lsrs	r7, r1, #31
 800932c:	3801      	subs	r0, #1
 800932e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009332:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009336:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800933a:	d1f0      	bne.n	800931e <__ieee754_sqrt+0xb6>
 800933c:	4604      	mov	r4, r0
 800933e:	2720      	movs	r7, #32
 8009340:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009344:	429a      	cmp	r2, r3
 8009346:	eb00 0e0c 	add.w	lr, r0, ip
 800934a:	db02      	blt.n	8009352 <__ieee754_sqrt+0xea>
 800934c:	d113      	bne.n	8009376 <__ieee754_sqrt+0x10e>
 800934e:	458e      	cmp	lr, r1
 8009350:	d811      	bhi.n	8009376 <__ieee754_sqrt+0x10e>
 8009352:	f1be 0f00 	cmp.w	lr, #0
 8009356:	eb0e 000c 	add.w	r0, lr, ip
 800935a:	da42      	bge.n	80093e2 <__ieee754_sqrt+0x17a>
 800935c:	2800      	cmp	r0, #0
 800935e:	db40      	blt.n	80093e2 <__ieee754_sqrt+0x17a>
 8009360:	f102 0801 	add.w	r8, r2, #1
 8009364:	1a9b      	subs	r3, r3, r2
 8009366:	458e      	cmp	lr, r1
 8009368:	bf88      	it	hi
 800936a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800936e:	eba1 010e 	sub.w	r1, r1, lr
 8009372:	4464      	add	r4, ip
 8009374:	4642      	mov	r2, r8
 8009376:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800937a:	3f01      	subs	r7, #1
 800937c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009380:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009384:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009388:	d1dc      	bne.n	8009344 <__ieee754_sqrt+0xdc>
 800938a:	4319      	orrs	r1, r3
 800938c:	d01b      	beq.n	80093c6 <__ieee754_sqrt+0x15e>
 800938e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009414 <__ieee754_sqrt+0x1ac>
 8009392:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009418 <__ieee754_sqrt+0x1b0>
 8009396:	e9da 0100 	ldrd	r0, r1, [sl]
 800939a:	e9db 2300 	ldrd	r2, r3, [fp]
 800939e:	f7f6 ff93 	bl	80002c8 <__aeabi_dsub>
 80093a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4640      	mov	r0, r8
 80093ac:	4649      	mov	r1, r9
 80093ae:	f7f7 fbbf 	bl	8000b30 <__aeabi_dcmple>
 80093b2:	b140      	cbz	r0, 80093c6 <__ieee754_sqrt+0x15e>
 80093b4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80093b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80093bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80093c0:	d111      	bne.n	80093e6 <__ieee754_sqrt+0x17e>
 80093c2:	3601      	adds	r6, #1
 80093c4:	463c      	mov	r4, r7
 80093c6:	1072      	asrs	r2, r6, #1
 80093c8:	0863      	lsrs	r3, r4, #1
 80093ca:	07f1      	lsls	r1, r6, #31
 80093cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80093d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80093d4:	bf48      	it	mi
 80093d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80093da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80093de:	4618      	mov	r0, r3
 80093e0:	e756      	b.n	8009290 <__ieee754_sqrt+0x28>
 80093e2:	4690      	mov	r8, r2
 80093e4:	e7be      	b.n	8009364 <__ieee754_sqrt+0xfc>
 80093e6:	f7f6 ff71 	bl	80002cc <__adddf3>
 80093ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4640      	mov	r0, r8
 80093f4:	4649      	mov	r1, r9
 80093f6:	f7f7 fb91 	bl	8000b1c <__aeabi_dcmplt>
 80093fa:	b120      	cbz	r0, 8009406 <__ieee754_sqrt+0x19e>
 80093fc:	1ca0      	adds	r0, r4, #2
 80093fe:	bf08      	it	eq
 8009400:	3601      	addeq	r6, #1
 8009402:	3402      	adds	r4, #2
 8009404:	e7df      	b.n	80093c6 <__ieee754_sqrt+0x15e>
 8009406:	1c63      	adds	r3, r4, #1
 8009408:	f023 0401 	bic.w	r4, r3, #1
 800940c:	e7db      	b.n	80093c6 <__ieee754_sqrt+0x15e>
 800940e:	bf00      	nop
 8009410:	7ff00000 	.word	0x7ff00000
 8009414:	200001e0 	.word	0x200001e0
 8009418:	200001d8 	.word	0x200001d8
 800941c:	00000000 	.word	0x00000000

08009420 <__ieee754_pow>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	b091      	sub	sp, #68	@ 0x44
 8009426:	ed8d 1b00 	vstr	d1, [sp]
 800942a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800942e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009432:	ea5a 0001 	orrs.w	r0, sl, r1
 8009436:	ec57 6b10 	vmov	r6, r7, d0
 800943a:	d113      	bne.n	8009464 <__ieee754_pow+0x44>
 800943c:	19b3      	adds	r3, r6, r6
 800943e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009442:	4152      	adcs	r2, r2
 8009444:	4298      	cmp	r0, r3
 8009446:	4b98      	ldr	r3, [pc, #608]	@ (80096a8 <__ieee754_pow+0x288>)
 8009448:	4193      	sbcs	r3, r2
 800944a:	f080 84ea 	bcs.w	8009e22 <__ieee754_pow+0xa02>
 800944e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009452:	4630      	mov	r0, r6
 8009454:	4639      	mov	r1, r7
 8009456:	f7f6 ff39 	bl	80002cc <__adddf3>
 800945a:	ec41 0b10 	vmov	d0, r0, r1
 800945e:	b011      	add	sp, #68	@ 0x44
 8009460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009464:	4a91      	ldr	r2, [pc, #580]	@ (80096ac <__ieee754_pow+0x28c>)
 8009466:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800946a:	4590      	cmp	r8, r2
 800946c:	463d      	mov	r5, r7
 800946e:	4633      	mov	r3, r6
 8009470:	d806      	bhi.n	8009480 <__ieee754_pow+0x60>
 8009472:	d101      	bne.n	8009478 <__ieee754_pow+0x58>
 8009474:	2e00      	cmp	r6, #0
 8009476:	d1ea      	bne.n	800944e <__ieee754_pow+0x2e>
 8009478:	4592      	cmp	sl, r2
 800947a:	d801      	bhi.n	8009480 <__ieee754_pow+0x60>
 800947c:	d10e      	bne.n	800949c <__ieee754_pow+0x7c>
 800947e:	b169      	cbz	r1, 800949c <__ieee754_pow+0x7c>
 8009480:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009484:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009488:	431d      	orrs	r5, r3
 800948a:	d1e0      	bne.n	800944e <__ieee754_pow+0x2e>
 800948c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009490:	18db      	adds	r3, r3, r3
 8009492:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009496:	4152      	adcs	r2, r2
 8009498:	429d      	cmp	r5, r3
 800949a:	e7d4      	b.n	8009446 <__ieee754_pow+0x26>
 800949c:	2d00      	cmp	r5, #0
 800949e:	46c3      	mov	fp, r8
 80094a0:	da3a      	bge.n	8009518 <__ieee754_pow+0xf8>
 80094a2:	4a83      	ldr	r2, [pc, #524]	@ (80096b0 <__ieee754_pow+0x290>)
 80094a4:	4592      	cmp	sl, r2
 80094a6:	d84d      	bhi.n	8009544 <__ieee754_pow+0x124>
 80094a8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80094ac:	4592      	cmp	sl, r2
 80094ae:	f240 84c7 	bls.w	8009e40 <__ieee754_pow+0xa20>
 80094b2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80094b6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80094ba:	2a14      	cmp	r2, #20
 80094bc:	dd0f      	ble.n	80094de <__ieee754_pow+0xbe>
 80094be:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80094c2:	fa21 f402 	lsr.w	r4, r1, r2
 80094c6:	fa04 f202 	lsl.w	r2, r4, r2
 80094ca:	428a      	cmp	r2, r1
 80094cc:	f040 84b8 	bne.w	8009e40 <__ieee754_pow+0xa20>
 80094d0:	f004 0401 	and.w	r4, r4, #1
 80094d4:	f1c4 0402 	rsb	r4, r4, #2
 80094d8:	2900      	cmp	r1, #0
 80094da:	d158      	bne.n	800958e <__ieee754_pow+0x16e>
 80094dc:	e00e      	b.n	80094fc <__ieee754_pow+0xdc>
 80094de:	2900      	cmp	r1, #0
 80094e0:	d154      	bne.n	800958c <__ieee754_pow+0x16c>
 80094e2:	f1c2 0214 	rsb	r2, r2, #20
 80094e6:	fa4a f402 	asr.w	r4, sl, r2
 80094ea:	fa04 f202 	lsl.w	r2, r4, r2
 80094ee:	4552      	cmp	r2, sl
 80094f0:	f040 84a3 	bne.w	8009e3a <__ieee754_pow+0xa1a>
 80094f4:	f004 0401 	and.w	r4, r4, #1
 80094f8:	f1c4 0402 	rsb	r4, r4, #2
 80094fc:	4a6d      	ldr	r2, [pc, #436]	@ (80096b4 <__ieee754_pow+0x294>)
 80094fe:	4592      	cmp	sl, r2
 8009500:	d12e      	bne.n	8009560 <__ieee754_pow+0x140>
 8009502:	f1b9 0f00 	cmp.w	r9, #0
 8009506:	f280 8494 	bge.w	8009e32 <__ieee754_pow+0xa12>
 800950a:	496a      	ldr	r1, [pc, #424]	@ (80096b4 <__ieee754_pow+0x294>)
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	2000      	movs	r0, #0
 8009512:	f7f7 f9bb 	bl	800088c <__aeabi_ddiv>
 8009516:	e7a0      	b.n	800945a <__ieee754_pow+0x3a>
 8009518:	2400      	movs	r4, #0
 800951a:	bbc1      	cbnz	r1, 800958e <__ieee754_pow+0x16e>
 800951c:	4a63      	ldr	r2, [pc, #396]	@ (80096ac <__ieee754_pow+0x28c>)
 800951e:	4592      	cmp	sl, r2
 8009520:	d1ec      	bne.n	80094fc <__ieee754_pow+0xdc>
 8009522:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009526:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800952a:	431a      	orrs	r2, r3
 800952c:	f000 8479 	beq.w	8009e22 <__ieee754_pow+0xa02>
 8009530:	4b61      	ldr	r3, [pc, #388]	@ (80096b8 <__ieee754_pow+0x298>)
 8009532:	4598      	cmp	r8, r3
 8009534:	d908      	bls.n	8009548 <__ieee754_pow+0x128>
 8009536:	f1b9 0f00 	cmp.w	r9, #0
 800953a:	f2c0 8476 	blt.w	8009e2a <__ieee754_pow+0xa0a>
 800953e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009542:	e78a      	b.n	800945a <__ieee754_pow+0x3a>
 8009544:	2402      	movs	r4, #2
 8009546:	e7e8      	b.n	800951a <__ieee754_pow+0xfa>
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	f04f 0000 	mov.w	r0, #0
 8009550:	f04f 0100 	mov.w	r1, #0
 8009554:	da81      	bge.n	800945a <__ieee754_pow+0x3a>
 8009556:	e9dd 0300 	ldrd	r0, r3, [sp]
 800955a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800955e:	e77c      	b.n	800945a <__ieee754_pow+0x3a>
 8009560:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009564:	d106      	bne.n	8009574 <__ieee754_pow+0x154>
 8009566:	4632      	mov	r2, r6
 8009568:	463b      	mov	r3, r7
 800956a:	4630      	mov	r0, r6
 800956c:	4639      	mov	r1, r7
 800956e:	f7f7 f863 	bl	8000638 <__aeabi_dmul>
 8009572:	e772      	b.n	800945a <__ieee754_pow+0x3a>
 8009574:	4a51      	ldr	r2, [pc, #324]	@ (80096bc <__ieee754_pow+0x29c>)
 8009576:	4591      	cmp	r9, r2
 8009578:	d109      	bne.n	800958e <__ieee754_pow+0x16e>
 800957a:	2d00      	cmp	r5, #0
 800957c:	db07      	blt.n	800958e <__ieee754_pow+0x16e>
 800957e:	ec47 6b10 	vmov	d0, r6, r7
 8009582:	b011      	add	sp, #68	@ 0x44
 8009584:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	f7ff be6e 	b.w	8009268 <__ieee754_sqrt>
 800958c:	2400      	movs	r4, #0
 800958e:	ec47 6b10 	vmov	d0, r6, r7
 8009592:	9302      	str	r3, [sp, #8]
 8009594:	f001 fb9a 	bl	800accc <fabs>
 8009598:	9b02      	ldr	r3, [sp, #8]
 800959a:	ec51 0b10 	vmov	r0, r1, d0
 800959e:	bb53      	cbnz	r3, 80095f6 <__ieee754_pow+0x1d6>
 80095a0:	4b44      	ldr	r3, [pc, #272]	@ (80096b4 <__ieee754_pow+0x294>)
 80095a2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d002      	beq.n	80095b0 <__ieee754_pow+0x190>
 80095aa:	f1b8 0f00 	cmp.w	r8, #0
 80095ae:	d122      	bne.n	80095f6 <__ieee754_pow+0x1d6>
 80095b0:	f1b9 0f00 	cmp.w	r9, #0
 80095b4:	da05      	bge.n	80095c2 <__ieee754_pow+0x1a2>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	2000      	movs	r0, #0
 80095bc:	493d      	ldr	r1, [pc, #244]	@ (80096b4 <__ieee754_pow+0x294>)
 80095be:	f7f7 f965 	bl	800088c <__aeabi_ddiv>
 80095c2:	2d00      	cmp	r5, #0
 80095c4:	f6bf af49 	bge.w	800945a <__ieee754_pow+0x3a>
 80095c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80095cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80095d0:	ea58 0804 	orrs.w	r8, r8, r4
 80095d4:	d108      	bne.n	80095e8 <__ieee754_pow+0x1c8>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4610      	mov	r0, r2
 80095dc:	4619      	mov	r1, r3
 80095de:	f7f6 fe73 	bl	80002c8 <__aeabi_dsub>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	e794      	b.n	8009512 <__ieee754_pow+0xf2>
 80095e8:	2c01      	cmp	r4, #1
 80095ea:	f47f af36 	bne.w	800945a <__ieee754_pow+0x3a>
 80095ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095f2:	4619      	mov	r1, r3
 80095f4:	e731      	b.n	800945a <__ieee754_pow+0x3a>
 80095f6:	0feb      	lsrs	r3, r5, #31
 80095f8:	3b01      	subs	r3, #1
 80095fa:	ea53 0204 	orrs.w	r2, r3, r4
 80095fe:	d102      	bne.n	8009606 <__ieee754_pow+0x1e6>
 8009600:	4632      	mov	r2, r6
 8009602:	463b      	mov	r3, r7
 8009604:	e7e9      	b.n	80095da <__ieee754_pow+0x1ba>
 8009606:	3c01      	subs	r4, #1
 8009608:	431c      	orrs	r4, r3
 800960a:	d016      	beq.n	800963a <__ieee754_pow+0x21a>
 800960c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009698 <__ieee754_pow+0x278>
 8009610:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009618:	f240 8112 	bls.w	8009840 <__ieee754_pow+0x420>
 800961c:	4b28      	ldr	r3, [pc, #160]	@ (80096c0 <__ieee754_pow+0x2a0>)
 800961e:	459a      	cmp	sl, r3
 8009620:	4b25      	ldr	r3, [pc, #148]	@ (80096b8 <__ieee754_pow+0x298>)
 8009622:	d916      	bls.n	8009652 <__ieee754_pow+0x232>
 8009624:	4598      	cmp	r8, r3
 8009626:	d80b      	bhi.n	8009640 <__ieee754_pow+0x220>
 8009628:	f1b9 0f00 	cmp.w	r9, #0
 800962c:	da0b      	bge.n	8009646 <__ieee754_pow+0x226>
 800962e:	2000      	movs	r0, #0
 8009630:	b011      	add	sp, #68	@ 0x44
 8009632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009636:	f000 be67 	b.w	800a308 <__math_oflow>
 800963a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80096a0 <__ieee754_pow+0x280>
 800963e:	e7e7      	b.n	8009610 <__ieee754_pow+0x1f0>
 8009640:	f1b9 0f00 	cmp.w	r9, #0
 8009644:	dcf3      	bgt.n	800962e <__ieee754_pow+0x20e>
 8009646:	2000      	movs	r0, #0
 8009648:	b011      	add	sp, #68	@ 0x44
 800964a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964e:	f000 be53 	b.w	800a2f8 <__math_uflow>
 8009652:	4598      	cmp	r8, r3
 8009654:	d20c      	bcs.n	8009670 <__ieee754_pow+0x250>
 8009656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800965a:	2200      	movs	r2, #0
 800965c:	2300      	movs	r3, #0
 800965e:	f7f7 fa5d 	bl	8000b1c <__aeabi_dcmplt>
 8009662:	3800      	subs	r0, #0
 8009664:	bf18      	it	ne
 8009666:	2001      	movne	r0, #1
 8009668:	f1b9 0f00 	cmp.w	r9, #0
 800966c:	daec      	bge.n	8009648 <__ieee754_pow+0x228>
 800966e:	e7df      	b.n	8009630 <__ieee754_pow+0x210>
 8009670:	4b10      	ldr	r3, [pc, #64]	@ (80096b4 <__ieee754_pow+0x294>)
 8009672:	4598      	cmp	r8, r3
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	d924      	bls.n	80096c4 <__ieee754_pow+0x2a4>
 800967a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800967e:	2300      	movs	r3, #0
 8009680:	f7f7 fa4c 	bl	8000b1c <__aeabi_dcmplt>
 8009684:	3800      	subs	r0, #0
 8009686:	bf18      	it	ne
 8009688:	2001      	movne	r0, #1
 800968a:	f1b9 0f00 	cmp.w	r9, #0
 800968e:	dccf      	bgt.n	8009630 <__ieee754_pow+0x210>
 8009690:	e7da      	b.n	8009648 <__ieee754_pow+0x228>
 8009692:	bf00      	nop
 8009694:	f3af 8000 	nop.w
 8009698:	00000000 	.word	0x00000000
 800969c:	3ff00000 	.word	0x3ff00000
 80096a0:	00000000 	.word	0x00000000
 80096a4:	bff00000 	.word	0xbff00000
 80096a8:	fff00000 	.word	0xfff00000
 80096ac:	7ff00000 	.word	0x7ff00000
 80096b0:	433fffff 	.word	0x433fffff
 80096b4:	3ff00000 	.word	0x3ff00000
 80096b8:	3fefffff 	.word	0x3fefffff
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	43f00000 	.word	0x43f00000
 80096c4:	4b5a      	ldr	r3, [pc, #360]	@ (8009830 <__ieee754_pow+0x410>)
 80096c6:	f7f6 fdff 	bl	80002c8 <__aeabi_dsub>
 80096ca:	a351      	add	r3, pc, #324	@ (adr r3, 8009810 <__ieee754_pow+0x3f0>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	f7f6 ffb0 	bl	8000638 <__aeabi_dmul>
 80096d8:	a34f      	add	r3, pc, #316	@ (adr r3, 8009818 <__ieee754_pow+0x3f8>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	4606      	mov	r6, r0
 80096e0:	460f      	mov	r7, r1
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 ffa7 	bl	8000638 <__aeabi_dmul>
 80096ea:	4b52      	ldr	r3, [pc, #328]	@ (8009834 <__ieee754_pow+0x414>)
 80096ec:	4682      	mov	sl, r0
 80096ee:	468b      	mov	fp, r1
 80096f0:	2200      	movs	r2, #0
 80096f2:	4620      	mov	r0, r4
 80096f4:	4629      	mov	r1, r5
 80096f6:	f7f6 ff9f 	bl	8000638 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	a148      	add	r1, pc, #288	@ (adr r1, 8009820 <__ieee754_pow+0x400>)
 8009700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009704:	f7f6 fde0 	bl	80002c8 <__aeabi_dsub>
 8009708:	4622      	mov	r2, r4
 800970a:	462b      	mov	r3, r5
 800970c:	f7f6 ff94 	bl	8000638 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	2000      	movs	r0, #0
 8009716:	4948      	ldr	r1, [pc, #288]	@ (8009838 <__ieee754_pow+0x418>)
 8009718:	f7f6 fdd6 	bl	80002c8 <__aeabi_dsub>
 800971c:	4622      	mov	r2, r4
 800971e:	4680      	mov	r8, r0
 8009720:	4689      	mov	r9, r1
 8009722:	462b      	mov	r3, r5
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f7f6 ff86 	bl	8000638 <__aeabi_dmul>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	f7f6 ff80 	bl	8000638 <__aeabi_dmul>
 8009738:	a33b      	add	r3, pc, #236	@ (adr r3, 8009828 <__ieee754_pow+0x408>)
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	f7f6 ff7b 	bl	8000638 <__aeabi_dmul>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4650      	mov	r0, sl
 8009748:	4659      	mov	r1, fp
 800974a:	f7f6 fdbd 	bl	80002c8 <__aeabi_dsub>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4680      	mov	r8, r0
 8009754:	4689      	mov	r9, r1
 8009756:	4630      	mov	r0, r6
 8009758:	4639      	mov	r1, r7
 800975a:	f7f6 fdb7 	bl	80002cc <__adddf3>
 800975e:	2400      	movs	r4, #0
 8009760:	4632      	mov	r2, r6
 8009762:	463b      	mov	r3, r7
 8009764:	4620      	mov	r0, r4
 8009766:	460d      	mov	r5, r1
 8009768:	f7f6 fdae 	bl	80002c8 <__aeabi_dsub>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4640      	mov	r0, r8
 8009772:	4649      	mov	r1, r9
 8009774:	f7f6 fda8 	bl	80002c8 <__aeabi_dsub>
 8009778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800977c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009780:	2300      	movs	r3, #0
 8009782:	9304      	str	r3, [sp, #16]
 8009784:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009788:	4606      	mov	r6, r0
 800978a:	460f      	mov	r7, r1
 800978c:	4652      	mov	r2, sl
 800978e:	465b      	mov	r3, fp
 8009790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009794:	f7f6 fd98 	bl	80002c8 <__aeabi_dsub>
 8009798:	4622      	mov	r2, r4
 800979a:	462b      	mov	r3, r5
 800979c:	f7f6 ff4c 	bl	8000638 <__aeabi_dmul>
 80097a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097a4:	4680      	mov	r8, r0
 80097a6:	4689      	mov	r9, r1
 80097a8:	4630      	mov	r0, r6
 80097aa:	4639      	mov	r1, r7
 80097ac:	f7f6 ff44 	bl	8000638 <__aeabi_dmul>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4640      	mov	r0, r8
 80097b6:	4649      	mov	r1, r9
 80097b8:	f7f6 fd88 	bl	80002cc <__adddf3>
 80097bc:	4652      	mov	r2, sl
 80097be:	465b      	mov	r3, fp
 80097c0:	4606      	mov	r6, r0
 80097c2:	460f      	mov	r7, r1
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	f7f6 ff36 	bl	8000638 <__aeabi_dmul>
 80097cc:	460b      	mov	r3, r1
 80097ce:	4602      	mov	r2, r0
 80097d0:	4680      	mov	r8, r0
 80097d2:	4689      	mov	r9, r1
 80097d4:	4630      	mov	r0, r6
 80097d6:	4639      	mov	r1, r7
 80097d8:	f7f6 fd78 	bl	80002cc <__adddf3>
 80097dc:	4b17      	ldr	r3, [pc, #92]	@ (800983c <__ieee754_pow+0x41c>)
 80097de:	4299      	cmp	r1, r3
 80097e0:	4604      	mov	r4, r0
 80097e2:	460d      	mov	r5, r1
 80097e4:	468a      	mov	sl, r1
 80097e6:	468b      	mov	fp, r1
 80097e8:	f340 82ef 	ble.w	8009dca <__ieee754_pow+0x9aa>
 80097ec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80097f0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80097f4:	4303      	orrs	r3, r0
 80097f6:	f000 81e8 	beq.w	8009bca <__ieee754_pow+0x7aa>
 80097fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097fe:	2200      	movs	r2, #0
 8009800:	2300      	movs	r3, #0
 8009802:	f7f7 f98b 	bl	8000b1c <__aeabi_dcmplt>
 8009806:	3800      	subs	r0, #0
 8009808:	bf18      	it	ne
 800980a:	2001      	movne	r0, #1
 800980c:	e710      	b.n	8009630 <__ieee754_pow+0x210>
 800980e:	bf00      	nop
 8009810:	60000000 	.word	0x60000000
 8009814:	3ff71547 	.word	0x3ff71547
 8009818:	f85ddf44 	.word	0xf85ddf44
 800981c:	3e54ae0b 	.word	0x3e54ae0b
 8009820:	55555555 	.word	0x55555555
 8009824:	3fd55555 	.word	0x3fd55555
 8009828:	652b82fe 	.word	0x652b82fe
 800982c:	3ff71547 	.word	0x3ff71547
 8009830:	3ff00000 	.word	0x3ff00000
 8009834:	3fd00000 	.word	0x3fd00000
 8009838:	3fe00000 	.word	0x3fe00000
 800983c:	408fffff 	.word	0x408fffff
 8009840:	4bd5      	ldr	r3, [pc, #852]	@ (8009b98 <__ieee754_pow+0x778>)
 8009842:	402b      	ands	r3, r5
 8009844:	2200      	movs	r2, #0
 8009846:	b92b      	cbnz	r3, 8009854 <__ieee754_pow+0x434>
 8009848:	4bd4      	ldr	r3, [pc, #848]	@ (8009b9c <__ieee754_pow+0x77c>)
 800984a:	f7f6 fef5 	bl	8000638 <__aeabi_dmul>
 800984e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009852:	468b      	mov	fp, r1
 8009854:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009858:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800985c:	4413      	add	r3, r2
 800985e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009860:	4bcf      	ldr	r3, [pc, #828]	@ (8009ba0 <__ieee754_pow+0x780>)
 8009862:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009866:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800986a:	459b      	cmp	fp, r3
 800986c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009870:	dd08      	ble.n	8009884 <__ieee754_pow+0x464>
 8009872:	4bcc      	ldr	r3, [pc, #816]	@ (8009ba4 <__ieee754_pow+0x784>)
 8009874:	459b      	cmp	fp, r3
 8009876:	f340 81a5 	ble.w	8009bc4 <__ieee754_pow+0x7a4>
 800987a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800987c:	3301      	adds	r3, #1
 800987e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009880:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009884:	f04f 0a00 	mov.w	sl, #0
 8009888:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800988c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800988e:	4bc6      	ldr	r3, [pc, #792]	@ (8009ba8 <__ieee754_pow+0x788>)
 8009890:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009894:	ed93 7b00 	vldr	d7, [r3]
 8009898:	4629      	mov	r1, r5
 800989a:	ec53 2b17 	vmov	r2, r3, d7
 800989e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80098a6:	f7f6 fd0f 	bl	80002c8 <__aeabi_dsub>
 80098aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80098ae:	4606      	mov	r6, r0
 80098b0:	460f      	mov	r7, r1
 80098b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098b6:	f7f6 fd09 	bl	80002cc <__adddf3>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	2000      	movs	r0, #0
 80098c0:	49ba      	ldr	r1, [pc, #744]	@ (8009bac <__ieee754_pow+0x78c>)
 80098c2:	f7f6 ffe3 	bl	800088c <__aeabi_ddiv>
 80098c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	4630      	mov	r0, r6
 80098d0:	4639      	mov	r1, r7
 80098d2:	f7f6 feb1 	bl	8000638 <__aeabi_dmul>
 80098d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80098de:	106d      	asrs	r5, r5, #1
 80098e0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80098e4:	f04f 0b00 	mov.w	fp, #0
 80098e8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80098ec:	4661      	mov	r1, ip
 80098ee:	2200      	movs	r2, #0
 80098f0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80098f4:	4658      	mov	r0, fp
 80098f6:	46e1      	mov	r9, ip
 80098f8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80098fc:	4614      	mov	r4, r2
 80098fe:	461d      	mov	r5, r3
 8009900:	f7f6 fe9a 	bl	8000638 <__aeabi_dmul>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f6 fcdc 	bl	80002c8 <__aeabi_dsub>
 8009910:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009914:	4606      	mov	r6, r0
 8009916:	460f      	mov	r7, r1
 8009918:	4620      	mov	r0, r4
 800991a:	4629      	mov	r1, r5
 800991c:	f7f6 fcd4 	bl	80002c8 <__aeabi_dsub>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009928:	f7f6 fcce 	bl	80002c8 <__aeabi_dsub>
 800992c:	465a      	mov	r2, fp
 800992e:	464b      	mov	r3, r9
 8009930:	f7f6 fe82 	bl	8000638 <__aeabi_dmul>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4630      	mov	r0, r6
 800993a:	4639      	mov	r1, r7
 800993c:	f7f6 fcc4 	bl	80002c8 <__aeabi_dsub>
 8009940:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009944:	f7f6 fe78 	bl	8000638 <__aeabi_dmul>
 8009948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800994c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009950:	4610      	mov	r0, r2
 8009952:	4619      	mov	r1, r3
 8009954:	f7f6 fe70 	bl	8000638 <__aeabi_dmul>
 8009958:	a37d      	add	r3, pc, #500	@ (adr r3, 8009b50 <__ieee754_pow+0x730>)
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	4604      	mov	r4, r0
 8009960:	460d      	mov	r5, r1
 8009962:	f7f6 fe69 	bl	8000638 <__aeabi_dmul>
 8009966:	a37c      	add	r3, pc, #496	@ (adr r3, 8009b58 <__ieee754_pow+0x738>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	f7f6 fcae 	bl	80002cc <__adddf3>
 8009970:	4622      	mov	r2, r4
 8009972:	462b      	mov	r3, r5
 8009974:	f7f6 fe60 	bl	8000638 <__aeabi_dmul>
 8009978:	a379      	add	r3, pc, #484	@ (adr r3, 8009b60 <__ieee754_pow+0x740>)
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	f7f6 fca5 	bl	80002cc <__adddf3>
 8009982:	4622      	mov	r2, r4
 8009984:	462b      	mov	r3, r5
 8009986:	f7f6 fe57 	bl	8000638 <__aeabi_dmul>
 800998a:	a377      	add	r3, pc, #476	@ (adr r3, 8009b68 <__ieee754_pow+0x748>)
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f7f6 fc9c 	bl	80002cc <__adddf3>
 8009994:	4622      	mov	r2, r4
 8009996:	462b      	mov	r3, r5
 8009998:	f7f6 fe4e 	bl	8000638 <__aeabi_dmul>
 800999c:	a374      	add	r3, pc, #464	@ (adr r3, 8009b70 <__ieee754_pow+0x750>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f7f6 fc93 	bl	80002cc <__adddf3>
 80099a6:	4622      	mov	r2, r4
 80099a8:	462b      	mov	r3, r5
 80099aa:	f7f6 fe45 	bl	8000638 <__aeabi_dmul>
 80099ae:	a372      	add	r3, pc, #456	@ (adr r3, 8009b78 <__ieee754_pow+0x758>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	f7f6 fc8a 	bl	80002cc <__adddf3>
 80099b8:	4622      	mov	r2, r4
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	462b      	mov	r3, r5
 80099c0:	4620      	mov	r0, r4
 80099c2:	4629      	mov	r1, r5
 80099c4:	f7f6 fe38 	bl	8000638 <__aeabi_dmul>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f6 fe32 	bl	8000638 <__aeabi_dmul>
 80099d4:	465a      	mov	r2, fp
 80099d6:	4604      	mov	r4, r0
 80099d8:	460d      	mov	r5, r1
 80099da:	464b      	mov	r3, r9
 80099dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e0:	f7f6 fc74 	bl	80002cc <__adddf3>
 80099e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099e8:	f7f6 fe26 	bl	8000638 <__aeabi_dmul>
 80099ec:	4622      	mov	r2, r4
 80099ee:	462b      	mov	r3, r5
 80099f0:	f7f6 fc6c 	bl	80002cc <__adddf3>
 80099f4:	465a      	mov	r2, fp
 80099f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099fa:	464b      	mov	r3, r9
 80099fc:	4658      	mov	r0, fp
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fe1a 	bl	8000638 <__aeabi_dmul>
 8009a04:	4b6a      	ldr	r3, [pc, #424]	@ (8009bb0 <__ieee754_pow+0x790>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	4606      	mov	r6, r0
 8009a0a:	460f      	mov	r7, r1
 8009a0c:	f7f6 fc5e 	bl	80002cc <__adddf3>
 8009a10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a14:	f7f6 fc5a 	bl	80002cc <__adddf3>
 8009a18:	46d8      	mov	r8, fp
 8009a1a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009a1e:	460d      	mov	r5, r1
 8009a20:	465a      	mov	r2, fp
 8009a22:	460b      	mov	r3, r1
 8009a24:	4640      	mov	r0, r8
 8009a26:	4649      	mov	r1, r9
 8009a28:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009a2c:	f7f6 fe04 	bl	8000638 <__aeabi_dmul>
 8009a30:	465c      	mov	r4, fp
 8009a32:	4680      	mov	r8, r0
 8009a34:	4689      	mov	r9, r1
 8009a36:	4b5e      	ldr	r3, [pc, #376]	@ (8009bb0 <__ieee754_pow+0x790>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	f7f6 fc43 	bl	80002c8 <__aeabi_dsub>
 8009a42:	4632      	mov	r2, r6
 8009a44:	463b      	mov	r3, r7
 8009a46:	f7f6 fc3f 	bl	80002c8 <__aeabi_dsub>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a52:	f7f6 fc39 	bl	80002c8 <__aeabi_dsub>
 8009a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a5a:	f7f6 fded 	bl	8000638 <__aeabi_dmul>
 8009a5e:	4622      	mov	r2, r4
 8009a60:	4606      	mov	r6, r0
 8009a62:	460f      	mov	r7, r1
 8009a64:	462b      	mov	r3, r5
 8009a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a6a:	f7f6 fde5 	bl	8000638 <__aeabi_dmul>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4630      	mov	r0, r6
 8009a74:	4639      	mov	r1, r7
 8009a76:	f7f6 fc29 	bl	80002cc <__adddf3>
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4640      	mov	r0, r8
 8009a84:	4649      	mov	r1, r9
 8009a86:	f7f6 fc21 	bl	80002cc <__adddf3>
 8009a8a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009a8e:	a33c      	add	r3, pc, #240	@ (adr r3, 8009b80 <__ieee754_pow+0x760>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	4658      	mov	r0, fp
 8009a96:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	f7f6 fdcc 	bl	8000638 <__aeabi_dmul>
 8009aa0:	465c      	mov	r4, fp
 8009aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aa6:	4642      	mov	r2, r8
 8009aa8:	464b      	mov	r3, r9
 8009aaa:	4620      	mov	r0, r4
 8009aac:	4629      	mov	r1, r5
 8009aae:	f7f6 fc0b 	bl	80002c8 <__aeabi_dsub>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	4639      	mov	r1, r7
 8009aba:	f7f6 fc05 	bl	80002c8 <__aeabi_dsub>
 8009abe:	a332      	add	r3, pc, #200	@ (adr r3, 8009b88 <__ieee754_pow+0x768>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fdb8 	bl	8000638 <__aeabi_dmul>
 8009ac8:	a331      	add	r3, pc, #196	@ (adr r3, 8009b90 <__ieee754_pow+0x770>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	4606      	mov	r6, r0
 8009ad0:	460f      	mov	r7, r1
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f7f6 fdaf 	bl	8000638 <__aeabi_dmul>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	f7f6 fbf3 	bl	80002cc <__adddf3>
 8009ae6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009ae8:	4b32      	ldr	r3, [pc, #200]	@ (8009bb4 <__ieee754_pow+0x794>)
 8009aea:	4413      	add	r3, r2
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fbec 	bl	80002cc <__adddf3>
 8009af4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009af8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009afa:	f7f6 fd33 	bl	8000564 <__aeabi_i2d>
 8009afe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b00:	4b2d      	ldr	r3, [pc, #180]	@ (8009bb8 <__ieee754_pow+0x798>)
 8009b02:	4413      	add	r3, r2
 8009b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b08:	4606      	mov	r6, r0
 8009b0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b0e:	460f      	mov	r7, r1
 8009b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b14:	f7f6 fbda 	bl	80002cc <__adddf3>
 8009b18:	4642      	mov	r2, r8
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	f7f6 fbd6 	bl	80002cc <__adddf3>
 8009b20:	4632      	mov	r2, r6
 8009b22:	463b      	mov	r3, r7
 8009b24:	f7f6 fbd2 	bl	80002cc <__adddf3>
 8009b28:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	463b      	mov	r3, r7
 8009b30:	4658      	mov	r0, fp
 8009b32:	460d      	mov	r5, r1
 8009b34:	f7f6 fbc8 	bl	80002c8 <__aeabi_dsub>
 8009b38:	4642      	mov	r2, r8
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	f7f6 fbc4 	bl	80002c8 <__aeabi_dsub>
 8009b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b44:	f7f6 fbc0 	bl	80002c8 <__aeabi_dsub>
 8009b48:	465c      	mov	r4, fp
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	e036      	b.n	8009bbc <__ieee754_pow+0x79c>
 8009b4e:	bf00      	nop
 8009b50:	4a454eef 	.word	0x4a454eef
 8009b54:	3fca7e28 	.word	0x3fca7e28
 8009b58:	93c9db65 	.word	0x93c9db65
 8009b5c:	3fcd864a 	.word	0x3fcd864a
 8009b60:	a91d4101 	.word	0xa91d4101
 8009b64:	3fd17460 	.word	0x3fd17460
 8009b68:	518f264d 	.word	0x518f264d
 8009b6c:	3fd55555 	.word	0x3fd55555
 8009b70:	db6fabff 	.word	0xdb6fabff
 8009b74:	3fdb6db6 	.word	0x3fdb6db6
 8009b78:	33333303 	.word	0x33333303
 8009b7c:	3fe33333 	.word	0x3fe33333
 8009b80:	e0000000 	.word	0xe0000000
 8009b84:	3feec709 	.word	0x3feec709
 8009b88:	dc3a03fd 	.word	0xdc3a03fd
 8009b8c:	3feec709 	.word	0x3feec709
 8009b90:	145b01f5 	.word	0x145b01f5
 8009b94:	be3e2fe0 	.word	0xbe3e2fe0
 8009b98:	7ff00000 	.word	0x7ff00000
 8009b9c:	43400000 	.word	0x43400000
 8009ba0:	0003988e 	.word	0x0003988e
 8009ba4:	000bb679 	.word	0x000bb679
 8009ba8:	0800b2a0 	.word	0x0800b2a0
 8009bac:	3ff00000 	.word	0x3ff00000
 8009bb0:	40080000 	.word	0x40080000
 8009bb4:	0800b280 	.word	0x0800b280
 8009bb8:	0800b290 	.word	0x0800b290
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bc2:	e5d7      	b.n	8009774 <__ieee754_pow+0x354>
 8009bc4:	f04f 0a01 	mov.w	sl, #1
 8009bc8:	e65e      	b.n	8009888 <__ieee754_pow+0x468>
 8009bca:	a3b4      	add	r3, pc, #720	@ (adr r3, 8009e9c <__ieee754_pow+0xa7c>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	f7f6 fb7a 	bl	80002cc <__adddf3>
 8009bd8:	4642      	mov	r2, r8
 8009bda:	e9cd 0100 	strd	r0, r1, [sp]
 8009bde:	464b      	mov	r3, r9
 8009be0:	4620      	mov	r0, r4
 8009be2:	4629      	mov	r1, r5
 8009be4:	f7f6 fb70 	bl	80002c8 <__aeabi_dsub>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bf0:	f7f6 ffb2 	bl	8000b58 <__aeabi_dcmpgt>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f47f ae00 	bne.w	80097fa <__ieee754_pow+0x3da>
 8009bfa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009bfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009c02:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009c06:	fa43 fa0a 	asr.w	sl, r3, sl
 8009c0a:	44da      	add	sl, fp
 8009c0c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009c10:	489d      	ldr	r0, [pc, #628]	@ (8009e88 <__ieee754_pow+0xa68>)
 8009c12:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009c16:	4108      	asrs	r0, r1
 8009c18:	ea00 030a 	and.w	r3, r0, sl
 8009c1c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009c20:	f1c1 0114 	rsb	r1, r1, #20
 8009c24:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009c28:	fa4a fa01 	asr.w	sl, sl, r1
 8009c2c:	f1bb 0f00 	cmp.w	fp, #0
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	bfb8      	it	lt
 8009c3a:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c3e:	f7f6 fb43 	bl	80002c8 <__aeabi_dsub>
 8009c42:	4680      	mov	r8, r0
 8009c44:	4689      	mov	r9, r1
 8009c46:	4632      	mov	r2, r6
 8009c48:	463b      	mov	r3, r7
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fb3d 	bl	80002cc <__adddf3>
 8009c52:	2400      	movs	r4, #0
 8009c54:	a37c      	add	r3, pc, #496	@ (adr r3, 8009e48 <__ieee754_pow+0xa28>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	460d      	mov	r5, r1
 8009c5e:	f7f6 fceb 	bl	8000638 <__aeabi_dmul>
 8009c62:	4642      	mov	r2, r8
 8009c64:	e9cd 0100 	strd	r0, r1, [sp]
 8009c68:	464b      	mov	r3, r9
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	f7f6 fb2b 	bl	80002c8 <__aeabi_dsub>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4630      	mov	r0, r6
 8009c78:	4639      	mov	r1, r7
 8009c7a:	f7f6 fb25 	bl	80002c8 <__aeabi_dsub>
 8009c7e:	a374      	add	r3, pc, #464	@ (adr r3, 8009e50 <__ieee754_pow+0xa30>)
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 fcd8 	bl	8000638 <__aeabi_dmul>
 8009c88:	a373      	add	r3, pc, #460	@ (adr r3, 8009e58 <__ieee754_pow+0xa38>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	4680      	mov	r8, r0
 8009c90:	4689      	mov	r9, r1
 8009c92:	4620      	mov	r0, r4
 8009c94:	4629      	mov	r1, r5
 8009c96:	f7f6 fccf 	bl	8000638 <__aeabi_dmul>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	f7f6 fb13 	bl	80002cc <__adddf3>
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	460d      	mov	r5, r1
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cb2:	f7f6 fb0b 	bl	80002cc <__adddf3>
 8009cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cba:	4680      	mov	r8, r0
 8009cbc:	4689      	mov	r9, r1
 8009cbe:	f7f6 fb03 	bl	80002c8 <__aeabi_dsub>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7f6 fafd 	bl	80002c8 <__aeabi_dsub>
 8009cce:	4642      	mov	r2, r8
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	460f      	mov	r7, r1
 8009cd4:	464b      	mov	r3, r9
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f7f6 fcad 	bl	8000638 <__aeabi_dmul>
 8009cde:	a360      	add	r3, pc, #384	@ (adr r3, 8009e60 <__ieee754_pow+0xa40>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	460d      	mov	r5, r1
 8009ce8:	f7f6 fca6 	bl	8000638 <__aeabi_dmul>
 8009cec:	a35e      	add	r3, pc, #376	@ (adr r3, 8009e68 <__ieee754_pow+0xa48>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f7f6 fae9 	bl	80002c8 <__aeabi_dsub>
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	f7f6 fc9d 	bl	8000638 <__aeabi_dmul>
 8009cfe:	a35c      	add	r3, pc, #368	@ (adr r3, 8009e70 <__ieee754_pow+0xa50>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f7f6 fae2 	bl	80002cc <__adddf3>
 8009d08:	4622      	mov	r2, r4
 8009d0a:	462b      	mov	r3, r5
 8009d0c:	f7f6 fc94 	bl	8000638 <__aeabi_dmul>
 8009d10:	a359      	add	r3, pc, #356	@ (adr r3, 8009e78 <__ieee754_pow+0xa58>)
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7f6 fad7 	bl	80002c8 <__aeabi_dsub>
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	462b      	mov	r3, r5
 8009d1e:	f7f6 fc8b 	bl	8000638 <__aeabi_dmul>
 8009d22:	a357      	add	r3, pc, #348	@ (adr r3, 8009e80 <__ieee754_pow+0xa60>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7f6 fad0 	bl	80002cc <__adddf3>
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	462b      	mov	r3, r5
 8009d30:	f7f6 fc82 	bl	8000638 <__aeabi_dmul>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	f7f6 fac4 	bl	80002c8 <__aeabi_dsub>
 8009d40:	4604      	mov	r4, r0
 8009d42:	460d      	mov	r5, r1
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4640      	mov	r0, r8
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	f7f6 fc74 	bl	8000638 <__aeabi_dmul>
 8009d50:	2200      	movs	r2, #0
 8009d52:	e9cd 0100 	strd	r0, r1, [sp]
 8009d56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	f7f6 fab3 	bl	80002c8 <__aeabi_dsub>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d6a:	f7f6 fd8f 	bl	800088c <__aeabi_ddiv>
 8009d6e:	4632      	mov	r2, r6
 8009d70:	4604      	mov	r4, r0
 8009d72:	460d      	mov	r5, r1
 8009d74:	463b      	mov	r3, r7
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f7f6 fc5d 	bl	8000638 <__aeabi_dmul>
 8009d7e:	4632      	mov	r2, r6
 8009d80:	463b      	mov	r3, r7
 8009d82:	f7f6 faa3 	bl	80002cc <__adddf3>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fa9b 	bl	80002c8 <__aeabi_dsub>
 8009d92:	4642      	mov	r2, r8
 8009d94:	464b      	mov	r3, r9
 8009d96:	f7f6 fa97 	bl	80002c8 <__aeabi_dsub>
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	493b      	ldr	r1, [pc, #236]	@ (8009e8c <__ieee754_pow+0xa6c>)
 8009da0:	2000      	movs	r0, #0
 8009da2:	f7f6 fa91 	bl	80002c8 <__aeabi_dsub>
 8009da6:	ec41 0b10 	vmov	d0, r0, r1
 8009daa:	ee10 3a90 	vmov	r3, s1
 8009dae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009db6:	da30      	bge.n	8009e1a <__ieee754_pow+0x9fa>
 8009db8:	4650      	mov	r0, sl
 8009dba:	f000 ff91 	bl	800ace0 <scalbn>
 8009dbe:	ec51 0b10 	vmov	r0, r1, d0
 8009dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dc6:	f7ff bbd2 	b.w	800956e <__ieee754_pow+0x14e>
 8009dca:	4c31      	ldr	r4, [pc, #196]	@ (8009e90 <__ieee754_pow+0xa70>)
 8009dcc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	d91a      	bls.n	8009e0a <__ieee754_pow+0x9ea>
 8009dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8009e94 <__ieee754_pow+0xa74>)
 8009dd6:	440b      	add	r3, r1
 8009dd8:	4303      	orrs	r3, r0
 8009dda:	d009      	beq.n	8009df0 <__ieee754_pow+0x9d0>
 8009ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009de0:	2200      	movs	r2, #0
 8009de2:	2300      	movs	r3, #0
 8009de4:	f7f6 fe9a 	bl	8000b1c <__aeabi_dcmplt>
 8009de8:	3800      	subs	r0, #0
 8009dea:	bf18      	it	ne
 8009dec:	2001      	movne	r0, #1
 8009dee:	e42b      	b.n	8009648 <__ieee754_pow+0x228>
 8009df0:	4642      	mov	r2, r8
 8009df2:	464b      	mov	r3, r9
 8009df4:	f7f6 fa68 	bl	80002c8 <__aeabi_dsub>
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	f7f6 fea2 	bl	8000b44 <__aeabi_dcmpge>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1eb      	bne.n	8009ddc <__ieee754_pow+0x9bc>
 8009e04:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8009ea4 <__ieee754_pow+0xa84>
 8009e08:	e6f7      	b.n	8009bfa <__ieee754_pow+0x7da>
 8009e0a:	469a      	mov	sl, r3
 8009e0c:	4b22      	ldr	r3, [pc, #136]	@ (8009e98 <__ieee754_pow+0xa78>)
 8009e0e:	459a      	cmp	sl, r3
 8009e10:	f63f aef3 	bhi.w	8009bfa <__ieee754_pow+0x7da>
 8009e14:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009e18:	e715      	b.n	8009c46 <__ieee754_pow+0x826>
 8009e1a:	ec51 0b10 	vmov	r0, r1, d0
 8009e1e:	4619      	mov	r1, r3
 8009e20:	e7cf      	b.n	8009dc2 <__ieee754_pow+0x9a2>
 8009e22:	491a      	ldr	r1, [pc, #104]	@ (8009e8c <__ieee754_pow+0xa6c>)
 8009e24:	2000      	movs	r0, #0
 8009e26:	f7ff bb18 	b.w	800945a <__ieee754_pow+0x3a>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	f7ff bb14 	b.w	800945a <__ieee754_pow+0x3a>
 8009e32:	4630      	mov	r0, r6
 8009e34:	4639      	mov	r1, r7
 8009e36:	f7ff bb10 	b.w	800945a <__ieee754_pow+0x3a>
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	f7ff bb5e 	b.w	80094fc <__ieee754_pow+0xdc>
 8009e40:	2400      	movs	r4, #0
 8009e42:	f7ff bb49 	b.w	80094d8 <__ieee754_pow+0xb8>
 8009e46:	bf00      	nop
 8009e48:	00000000 	.word	0x00000000
 8009e4c:	3fe62e43 	.word	0x3fe62e43
 8009e50:	fefa39ef 	.word	0xfefa39ef
 8009e54:	3fe62e42 	.word	0x3fe62e42
 8009e58:	0ca86c39 	.word	0x0ca86c39
 8009e5c:	be205c61 	.word	0xbe205c61
 8009e60:	72bea4d0 	.word	0x72bea4d0
 8009e64:	3e663769 	.word	0x3e663769
 8009e68:	c5d26bf1 	.word	0xc5d26bf1
 8009e6c:	3ebbbd41 	.word	0x3ebbbd41
 8009e70:	af25de2c 	.word	0xaf25de2c
 8009e74:	3f11566a 	.word	0x3f11566a
 8009e78:	16bebd93 	.word	0x16bebd93
 8009e7c:	3f66c16c 	.word	0x3f66c16c
 8009e80:	5555553e 	.word	0x5555553e
 8009e84:	3fc55555 	.word	0x3fc55555
 8009e88:	fff00000 	.word	0xfff00000
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	4090cbff 	.word	0x4090cbff
 8009e94:	3f6f3400 	.word	0x3f6f3400
 8009e98:	3fe00000 	.word	0x3fe00000
 8009e9c:	652b82fe 	.word	0x652b82fe
 8009ea0:	3c971547 	.word	0x3c971547
 8009ea4:	4090cc00 	.word	0x4090cc00

08009ea8 <__ieee754_rem_pio2>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	ec57 6b10 	vmov	r6, r7, d0
 8009eb0:	4bc5      	ldr	r3, [pc, #788]	@ (800a1c8 <__ieee754_rem_pio2+0x320>)
 8009eb2:	b08d      	sub	sp, #52	@ 0x34
 8009eb4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009eb8:	4598      	cmp	r8, r3
 8009eba:	4604      	mov	r4, r0
 8009ebc:	9704      	str	r7, [sp, #16]
 8009ebe:	d807      	bhi.n	8009ed0 <__ieee754_rem_pio2+0x28>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	ed80 0b00 	vstr	d0, [r0]
 8009ec8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009ecc:	2500      	movs	r5, #0
 8009ece:	e028      	b.n	8009f22 <__ieee754_rem_pio2+0x7a>
 8009ed0:	4bbe      	ldr	r3, [pc, #760]	@ (800a1cc <__ieee754_rem_pio2+0x324>)
 8009ed2:	4598      	cmp	r8, r3
 8009ed4:	d878      	bhi.n	8009fc8 <__ieee754_rem_pio2+0x120>
 8009ed6:	9b04      	ldr	r3, [sp, #16]
 8009ed8:	4dbd      	ldr	r5, [pc, #756]	@ (800a1d0 <__ieee754_rem_pio2+0x328>)
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	4630      	mov	r0, r6
 8009ede:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a190 <__ieee754_rem_pio2+0x2e8>)
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	dd38      	ble.n	8009f5a <__ieee754_rem_pio2+0xb2>
 8009ee8:	f7f6 f9ee 	bl	80002c8 <__aeabi_dsub>
 8009eec:	45a8      	cmp	r8, r5
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	d01a      	beq.n	8009f2a <__ieee754_rem_pio2+0x82>
 8009ef4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a198 <__ieee754_rem_pio2+0x2f0>)
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	f7f6 f9e5 	bl	80002c8 <__aeabi_dsub>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4680      	mov	r8, r0
 8009f04:	4689      	mov	r9, r1
 8009f06:	4630      	mov	r0, r6
 8009f08:	4639      	mov	r1, r7
 8009f0a:	f7f6 f9dd 	bl	80002c8 <__aeabi_dsub>
 8009f0e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a198 <__ieee754_rem_pio2+0x2f0>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	f7f6 f9d8 	bl	80002c8 <__aeabi_dsub>
 8009f18:	e9c4 8900 	strd	r8, r9, [r4]
 8009f1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f20:	2501      	movs	r5, #1
 8009f22:	4628      	mov	r0, r5
 8009f24:	b00d      	add	sp, #52	@ 0x34
 8009f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2a:	a39d      	add	r3, pc, #628	@ (adr r3, 800a1a0 <__ieee754_rem_pio2+0x2f8>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 f9ca 	bl	80002c8 <__aeabi_dsub>
 8009f34:	a39c      	add	r3, pc, #624	@ (adr r3, 800a1a8 <__ieee754_rem_pio2+0x300>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	460f      	mov	r7, r1
 8009f3e:	f7f6 f9c3 	bl	80002c8 <__aeabi_dsub>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	4680      	mov	r8, r0
 8009f48:	4689      	mov	r9, r1
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	f7f6 f9bb 	bl	80002c8 <__aeabi_dsub>
 8009f52:	a395      	add	r3, pc, #596	@ (adr r3, 800a1a8 <__ieee754_rem_pio2+0x300>)
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	e7dc      	b.n	8009f14 <__ieee754_rem_pio2+0x6c>
 8009f5a:	f7f6 f9b7 	bl	80002cc <__adddf3>
 8009f5e:	45a8      	cmp	r8, r5
 8009f60:	4606      	mov	r6, r0
 8009f62:	460f      	mov	r7, r1
 8009f64:	d018      	beq.n	8009f98 <__ieee754_rem_pio2+0xf0>
 8009f66:	a38c      	add	r3, pc, #560	@ (adr r3, 800a198 <__ieee754_rem_pio2+0x2f0>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f7f6 f9ae 	bl	80002cc <__adddf3>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4680      	mov	r8, r0
 8009f76:	4689      	mov	r9, r1
 8009f78:	4630      	mov	r0, r6
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	f7f6 f9a4 	bl	80002c8 <__aeabi_dsub>
 8009f80:	a385      	add	r3, pc, #532	@ (adr r3, 800a198 <__ieee754_rem_pio2+0x2f0>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f9a1 	bl	80002cc <__adddf3>
 8009f8a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009f8e:	e9c4 8900 	strd	r8, r9, [r4]
 8009f92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f96:	e7c4      	b.n	8009f22 <__ieee754_rem_pio2+0x7a>
 8009f98:	a381      	add	r3, pc, #516	@ (adr r3, 800a1a0 <__ieee754_rem_pio2+0x2f8>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 f995 	bl	80002cc <__adddf3>
 8009fa2:	a381      	add	r3, pc, #516	@ (adr r3, 800a1a8 <__ieee754_rem_pio2+0x300>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	4606      	mov	r6, r0
 8009faa:	460f      	mov	r7, r1
 8009fac:	f7f6 f98e 	bl	80002cc <__adddf3>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	4689      	mov	r9, r1
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 f984 	bl	80002c8 <__aeabi_dsub>
 8009fc0:	a379      	add	r3, pc, #484	@ (adr r3, 800a1a8 <__ieee754_rem_pio2+0x300>)
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	e7de      	b.n	8009f86 <__ieee754_rem_pio2+0xde>
 8009fc8:	4b82      	ldr	r3, [pc, #520]	@ (800a1d4 <__ieee754_rem_pio2+0x32c>)
 8009fca:	4598      	cmp	r8, r3
 8009fcc:	f200 80d1 	bhi.w	800a172 <__ieee754_rem_pio2+0x2ca>
 8009fd0:	f000 fe7c 	bl	800accc <fabs>
 8009fd4:	ec57 6b10 	vmov	r6, r7, d0
 8009fd8:	a375      	add	r3, pc, #468	@ (adr r3, 800a1b0 <__ieee754_rem_pio2+0x308>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	4630      	mov	r0, r6
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	f7f6 fb29 	bl	8000638 <__aeabi_dmul>
 8009fe6:	4b7c      	ldr	r3, [pc, #496]	@ (800a1d8 <__ieee754_rem_pio2+0x330>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f7f6 f96f 	bl	80002cc <__adddf3>
 8009fee:	f7f6 fdd3 	bl	8000b98 <__aeabi_d2iz>
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	f7f6 fab6 	bl	8000564 <__aeabi_i2d>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a000:	a363      	add	r3, pc, #396	@ (adr r3, 800a190 <__ieee754_rem_pio2+0x2e8>)
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f7f6 fb17 	bl	8000638 <__aeabi_dmul>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4630      	mov	r0, r6
 800a010:	4639      	mov	r1, r7
 800a012:	f7f6 f959 	bl	80002c8 <__aeabi_dsub>
 800a016:	a360      	add	r3, pc, #384	@ (adr r3, 800a198 <__ieee754_rem_pio2+0x2f0>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	4682      	mov	sl, r0
 800a01e:	468b      	mov	fp, r1
 800a020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a024:	f7f6 fb08 	bl	8000638 <__aeabi_dmul>
 800a028:	2d1f      	cmp	r5, #31
 800a02a:	4606      	mov	r6, r0
 800a02c:	460f      	mov	r7, r1
 800a02e:	dc0c      	bgt.n	800a04a <__ieee754_rem_pio2+0x1a2>
 800a030:	4b6a      	ldr	r3, [pc, #424]	@ (800a1dc <__ieee754_rem_pio2+0x334>)
 800a032:	1e6a      	subs	r2, r5, #1
 800a034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a038:	4543      	cmp	r3, r8
 800a03a:	d006      	beq.n	800a04a <__ieee754_rem_pio2+0x1a2>
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	4650      	mov	r0, sl
 800a042:	4659      	mov	r1, fp
 800a044:	f7f6 f940 	bl	80002c8 <__aeabi_dsub>
 800a048:	e00e      	b.n	800a068 <__ieee754_rem_pio2+0x1c0>
 800a04a:	463b      	mov	r3, r7
 800a04c:	4632      	mov	r2, r6
 800a04e:	4650      	mov	r0, sl
 800a050:	4659      	mov	r1, fp
 800a052:	f7f6 f939 	bl	80002c8 <__aeabi_dsub>
 800a056:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a05a:	9305      	str	r3, [sp, #20]
 800a05c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a060:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a064:	2b10      	cmp	r3, #16
 800a066:	dc02      	bgt.n	800a06e <__ieee754_rem_pio2+0x1c6>
 800a068:	e9c4 0100 	strd	r0, r1, [r4]
 800a06c:	e039      	b.n	800a0e2 <__ieee754_rem_pio2+0x23a>
 800a06e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a1a0 <__ieee754_rem_pio2+0x2f8>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a078:	f7f6 fade 	bl	8000638 <__aeabi_dmul>
 800a07c:	4606      	mov	r6, r0
 800a07e:	460f      	mov	r7, r1
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	4650      	mov	r0, sl
 800a086:	4659      	mov	r1, fp
 800a088:	f7f6 f91e 	bl	80002c8 <__aeabi_dsub>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4680      	mov	r8, r0
 800a092:	4689      	mov	r9, r1
 800a094:	4650      	mov	r0, sl
 800a096:	4659      	mov	r1, fp
 800a098:	f7f6 f916 	bl	80002c8 <__aeabi_dsub>
 800a09c:	4632      	mov	r2, r6
 800a09e:	463b      	mov	r3, r7
 800a0a0:	f7f6 f912 	bl	80002c8 <__aeabi_dsub>
 800a0a4:	a340      	add	r3, pc, #256	@ (adr r3, 800a1a8 <__ieee754_rem_pio2+0x300>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b2:	f7f6 fac1 	bl	8000638 <__aeabi_dmul>
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	f7f6 f905 	bl	80002c8 <__aeabi_dsub>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460f      	mov	r7, r1
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	f7f6 f8fd 	bl	80002c8 <__aeabi_dsub>
 800a0ce:	9a05      	ldr	r2, [sp, #20]
 800a0d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	2b31      	cmp	r3, #49	@ 0x31
 800a0d8:	dc20      	bgt.n	800a11c <__ieee754_rem_pio2+0x274>
 800a0da:	e9c4 0100 	strd	r0, r1, [r4]
 800a0de:	46c2      	mov	sl, r8
 800a0e0:	46cb      	mov	fp, r9
 800a0e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a0e6:	4650      	mov	r0, sl
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	464b      	mov	r3, r9
 800a0ec:	4659      	mov	r1, fp
 800a0ee:	f7f6 f8eb 	bl	80002c8 <__aeabi_dsub>
 800a0f2:	463b      	mov	r3, r7
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	f7f6 f8e7 	bl	80002c8 <__aeabi_dsub>
 800a0fa:	9b04      	ldr	r3, [sp, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a102:	f6bf af0e 	bge.w	8009f22 <__ieee754_rem_pio2+0x7a>
 800a106:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a10a:	6063      	str	r3, [r4, #4]
 800a10c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a110:	f8c4 8000 	str.w	r8, [r4]
 800a114:	60a0      	str	r0, [r4, #8]
 800a116:	60e3      	str	r3, [r4, #12]
 800a118:	426d      	negs	r5, r5
 800a11a:	e702      	b.n	8009f22 <__ieee754_rem_pio2+0x7a>
 800a11c:	a326      	add	r3, pc, #152	@ (adr r3, 800a1b8 <__ieee754_rem_pio2+0x310>)
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a126:	f7f6 fa87 	bl	8000638 <__aeabi_dmul>
 800a12a:	4606      	mov	r6, r0
 800a12c:	460f      	mov	r7, r1
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4640      	mov	r0, r8
 800a134:	4649      	mov	r1, r9
 800a136:	f7f6 f8c7 	bl	80002c8 <__aeabi_dsub>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4682      	mov	sl, r0
 800a140:	468b      	mov	fp, r1
 800a142:	4640      	mov	r0, r8
 800a144:	4649      	mov	r1, r9
 800a146:	f7f6 f8bf 	bl	80002c8 <__aeabi_dsub>
 800a14a:	4632      	mov	r2, r6
 800a14c:	463b      	mov	r3, r7
 800a14e:	f7f6 f8bb 	bl	80002c8 <__aeabi_dsub>
 800a152:	a31b      	add	r3, pc, #108	@ (adr r3, 800a1c0 <__ieee754_rem_pio2+0x318>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	4606      	mov	r6, r0
 800a15a:	460f      	mov	r7, r1
 800a15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a160:	f7f6 fa6a 	bl	8000638 <__aeabi_dmul>
 800a164:	4632      	mov	r2, r6
 800a166:	463b      	mov	r3, r7
 800a168:	f7f6 f8ae 	bl	80002c8 <__aeabi_dsub>
 800a16c:	4606      	mov	r6, r0
 800a16e:	460f      	mov	r7, r1
 800a170:	e764      	b.n	800a03c <__ieee754_rem_pio2+0x194>
 800a172:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e0 <__ieee754_rem_pio2+0x338>)
 800a174:	4598      	cmp	r8, r3
 800a176:	d935      	bls.n	800a1e4 <__ieee754_rem_pio2+0x33c>
 800a178:	4632      	mov	r2, r6
 800a17a:	463b      	mov	r3, r7
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 f8a2 	bl	80002c8 <__aeabi_dsub>
 800a184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a188:	e9c4 0100 	strd	r0, r1, [r4]
 800a18c:	e69e      	b.n	8009ecc <__ieee754_rem_pio2+0x24>
 800a18e:	bf00      	nop
 800a190:	54400000 	.word	0x54400000
 800a194:	3ff921fb 	.word	0x3ff921fb
 800a198:	1a626331 	.word	0x1a626331
 800a19c:	3dd0b461 	.word	0x3dd0b461
 800a1a0:	1a600000 	.word	0x1a600000
 800a1a4:	3dd0b461 	.word	0x3dd0b461
 800a1a8:	2e037073 	.word	0x2e037073
 800a1ac:	3ba3198a 	.word	0x3ba3198a
 800a1b0:	6dc9c883 	.word	0x6dc9c883
 800a1b4:	3fe45f30 	.word	0x3fe45f30
 800a1b8:	2e000000 	.word	0x2e000000
 800a1bc:	3ba3198a 	.word	0x3ba3198a
 800a1c0:	252049c1 	.word	0x252049c1
 800a1c4:	397b839a 	.word	0x397b839a
 800a1c8:	3fe921fb 	.word	0x3fe921fb
 800a1cc:	4002d97b 	.word	0x4002d97b
 800a1d0:	3ff921fb 	.word	0x3ff921fb
 800a1d4:	413921fb 	.word	0x413921fb
 800a1d8:	3fe00000 	.word	0x3fe00000
 800a1dc:	0800b2b0 	.word	0x0800b2b0
 800a1e0:	7fefffff 	.word	0x7fefffff
 800a1e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a1e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a1ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	460f      	mov	r7, r1
 800a1f4:	f7f6 fcd0 	bl	8000b98 <__aeabi_d2iz>
 800a1f8:	f7f6 f9b4 	bl	8000564 <__aeabi_i2d>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4630      	mov	r0, r6
 800a202:	4639      	mov	r1, r7
 800a204:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a208:	f7f6 f85e 	bl	80002c8 <__aeabi_dsub>
 800a20c:	4b22      	ldr	r3, [pc, #136]	@ (800a298 <__ieee754_rem_pio2+0x3f0>)
 800a20e:	2200      	movs	r2, #0
 800a210:	f7f6 fa12 	bl	8000638 <__aeabi_dmul>
 800a214:	460f      	mov	r7, r1
 800a216:	4606      	mov	r6, r0
 800a218:	f7f6 fcbe 	bl	8000b98 <__aeabi_d2iz>
 800a21c:	f7f6 f9a2 	bl	8000564 <__aeabi_i2d>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4630      	mov	r0, r6
 800a226:	4639      	mov	r1, r7
 800a228:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a22c:	f7f6 f84c 	bl	80002c8 <__aeabi_dsub>
 800a230:	4b19      	ldr	r3, [pc, #100]	@ (800a298 <__ieee754_rem_pio2+0x3f0>)
 800a232:	2200      	movs	r2, #0
 800a234:	f7f6 fa00 	bl	8000638 <__aeabi_dmul>
 800a238:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a23c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a240:	f04f 0803 	mov.w	r8, #3
 800a244:	2600      	movs	r6, #0
 800a246:	2700      	movs	r7, #0
 800a248:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	46c2      	mov	sl, r8
 800a252:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a256:	f7f6 fc57 	bl	8000b08 <__aeabi_dcmpeq>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d1f4      	bne.n	800a248 <__ieee754_rem_pio2+0x3a0>
 800a25e:	4b0f      	ldr	r3, [pc, #60]	@ (800a29c <__ieee754_rem_pio2+0x3f4>)
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	2302      	movs	r3, #2
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	462a      	mov	r2, r5
 800a268:	4653      	mov	r3, sl
 800a26a:	4621      	mov	r1, r4
 800a26c:	a806      	add	r0, sp, #24
 800a26e:	f000 f853 	bl	800a318 <__kernel_rem_pio2>
 800a272:	9b04      	ldr	r3, [sp, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	4605      	mov	r5, r0
 800a278:	f6bf ae53 	bge.w	8009f22 <__ieee754_rem_pio2+0x7a>
 800a27c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a280:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a284:	e9c4 2300 	strd	r2, r3, [r4]
 800a288:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a28c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a290:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a294:	e740      	b.n	800a118 <__ieee754_rem_pio2+0x270>
 800a296:	bf00      	nop
 800a298:	41700000 	.word	0x41700000
 800a29c:	0800b330 	.word	0x0800b330

0800a2a0 <with_errno>:
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	ed2d 8b02 	vpush	{d8}
 800a2a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a2aa:	eef0 8a60 	vmov.f32	s17, s1
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	f7fc ff30 	bl	8007114 <__errno>
 800a2b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a2b8:	eef0 0a68 	vmov.f32	s1, s17
 800a2bc:	ecbd 8b02 	vpop	{d8}
 800a2c0:	6004      	str	r4, [r0, #0]
 800a2c2:	bd10      	pop	{r4, pc}

0800a2c4 <xflow>:
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	b507      	push	{r0, r1, r2, lr}
 800a2c8:	ec51 0b10 	vmov	r0, r1, d0
 800a2cc:	b183      	cbz	r3, 800a2f0 <xflow+0x2c>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2d4:	e9cd 2300 	strd	r2, r3, [sp]
 800a2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2dc:	f7f6 f9ac 	bl	8000638 <__aeabi_dmul>
 800a2e0:	ec41 0b10 	vmov	d0, r0, r1
 800a2e4:	2022      	movs	r0, #34	@ 0x22
 800a2e6:	b003      	add	sp, #12
 800a2e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2ec:	f7ff bfd8 	b.w	800a2a0 <with_errno>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	e7ee      	b.n	800a2d4 <xflow+0x10>
	...

0800a2f8 <__math_uflow>:
 800a2f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a300 <__math_uflow+0x8>
 800a2fc:	f7ff bfe2 	b.w	800a2c4 <xflow>
 800a300:	00000000 	.word	0x00000000
 800a304:	10000000 	.word	0x10000000

0800a308 <__math_oflow>:
 800a308:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a310 <__math_oflow+0x8>
 800a30c:	f7ff bfda 	b.w	800a2c4 <xflow>
 800a310:	00000000 	.word	0x00000000
 800a314:	70000000 	.word	0x70000000

0800a318 <__kernel_rem_pio2>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	ed2d 8b02 	vpush	{d8}
 800a320:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a324:	f112 0f14 	cmn.w	r2, #20
 800a328:	9306      	str	r3, [sp, #24]
 800a32a:	9104      	str	r1, [sp, #16]
 800a32c:	4bbe      	ldr	r3, [pc, #760]	@ (800a628 <__kernel_rem_pio2+0x310>)
 800a32e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a330:	9008      	str	r0, [sp, #32]
 800a332:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	9b06      	ldr	r3, [sp, #24]
 800a33a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a33e:	bfa8      	it	ge
 800a340:	1ed4      	subge	r4, r2, #3
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	bfb2      	itee	lt
 800a346:	2400      	movlt	r4, #0
 800a348:	2318      	movge	r3, #24
 800a34a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a34e:	f06f 0317 	mvn.w	r3, #23
 800a352:	fb04 3303 	mla	r3, r4, r3, r3
 800a356:	eb03 0b02 	add.w	fp, r3, r2
 800a35a:	9b00      	ldr	r3, [sp, #0]
 800a35c:	9a05      	ldr	r2, [sp, #20]
 800a35e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800a618 <__kernel_rem_pio2+0x300>
 800a362:	eb03 0802 	add.w	r8, r3, r2
 800a366:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a368:	1aa7      	subs	r7, r4, r2
 800a36a:	ae20      	add	r6, sp, #128	@ 0x80
 800a36c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a370:	2500      	movs	r5, #0
 800a372:	4545      	cmp	r5, r8
 800a374:	dd13      	ble.n	800a39e <__kernel_rem_pio2+0x86>
 800a376:	9b06      	ldr	r3, [sp, #24]
 800a378:	aa20      	add	r2, sp, #128	@ 0x80
 800a37a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a37e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a382:	f04f 0800 	mov.w	r8, #0
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	4598      	cmp	r8, r3
 800a38a:	dc31      	bgt.n	800a3f0 <__kernel_rem_pio2+0xd8>
 800a38c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800a618 <__kernel_rem_pio2+0x300>
 800a390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a394:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a398:	462f      	mov	r7, r5
 800a39a:	2600      	movs	r6, #0
 800a39c:	e01b      	b.n	800a3d6 <__kernel_rem_pio2+0xbe>
 800a39e:	42ef      	cmn	r7, r5
 800a3a0:	d407      	bmi.n	800a3b2 <__kernel_rem_pio2+0x9a>
 800a3a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a3a6:	f7f6 f8dd 	bl	8000564 <__aeabi_i2d>
 800a3aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a3ae:	3501      	adds	r5, #1
 800a3b0:	e7df      	b.n	800a372 <__kernel_rem_pio2+0x5a>
 800a3b2:	ec51 0b18 	vmov	r0, r1, d8
 800a3b6:	e7f8      	b.n	800a3aa <__kernel_rem_pio2+0x92>
 800a3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a3c0:	f7f6 f93a 	bl	8000638 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3cc:	f7f5 ff7e 	bl	80002cc <__adddf3>
 800a3d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	9b05      	ldr	r3, [sp, #20]
 800a3d8:	429e      	cmp	r6, r3
 800a3da:	f1a7 0708 	sub.w	r7, r7, #8
 800a3de:	ddeb      	ble.n	800a3b8 <__kernel_rem_pio2+0xa0>
 800a3e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3e4:	f108 0801 	add.w	r8, r8, #1
 800a3e8:	ecaa 7b02 	vstmia	sl!, {d7}
 800a3ec:	3508      	adds	r5, #8
 800a3ee:	e7ca      	b.n	800a386 <__kernel_rem_pio2+0x6e>
 800a3f0:	9b00      	ldr	r3, [sp, #0]
 800a3f2:	f8dd 8000 	ldr.w	r8, [sp]
 800a3f6:	aa0c      	add	r2, sp, #48	@ 0x30
 800a3f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a400:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a404:	9309      	str	r3, [sp, #36]	@ 0x24
 800a406:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a40c:	ab98      	add	r3, sp, #608	@ 0x260
 800a40e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a412:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a416:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a41a:	ac0c      	add	r4, sp, #48	@ 0x30
 800a41c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a41e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a422:	46a1      	mov	r9, r4
 800a424:	46c2      	mov	sl, r8
 800a426:	f1ba 0f00 	cmp.w	sl, #0
 800a42a:	f1a5 0508 	sub.w	r5, r5, #8
 800a42e:	dc77      	bgt.n	800a520 <__kernel_rem_pio2+0x208>
 800a430:	4658      	mov	r0, fp
 800a432:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a436:	f000 fc53 	bl	800ace0 <scalbn>
 800a43a:	ec57 6b10 	vmov	r6, r7, d0
 800a43e:	2200      	movs	r2, #0
 800a440:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a444:	4630      	mov	r0, r6
 800a446:	4639      	mov	r1, r7
 800a448:	f7f6 f8f6 	bl	8000638 <__aeabi_dmul>
 800a44c:	ec41 0b10 	vmov	d0, r0, r1
 800a450:	f000 fcc6 	bl	800ade0 <floor>
 800a454:	4b75      	ldr	r3, [pc, #468]	@ (800a62c <__kernel_rem_pio2+0x314>)
 800a456:	ec51 0b10 	vmov	r0, r1, d0
 800a45a:	2200      	movs	r2, #0
 800a45c:	f7f6 f8ec 	bl	8000638 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4630      	mov	r0, r6
 800a466:	4639      	mov	r1, r7
 800a468:	f7f5 ff2e 	bl	80002c8 <__aeabi_dsub>
 800a46c:	460f      	mov	r7, r1
 800a46e:	4606      	mov	r6, r0
 800a470:	f7f6 fb92 	bl	8000b98 <__aeabi_d2iz>
 800a474:	9002      	str	r0, [sp, #8]
 800a476:	f7f6 f875 	bl	8000564 <__aeabi_i2d>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4630      	mov	r0, r6
 800a480:	4639      	mov	r1, r7
 800a482:	f7f5 ff21 	bl	80002c8 <__aeabi_dsub>
 800a486:	f1bb 0f00 	cmp.w	fp, #0
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	dd6c      	ble.n	800a56a <__kernel_rem_pio2+0x252>
 800a490:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800a494:	ab0c      	add	r3, sp, #48	@ 0x30
 800a496:	9d02      	ldr	r5, [sp, #8]
 800a498:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a49c:	f1cb 0018 	rsb	r0, fp, #24
 800a4a0:	fa43 f200 	asr.w	r2, r3, r0
 800a4a4:	4415      	add	r5, r2
 800a4a6:	4082      	lsls	r2, r0
 800a4a8:	1a9b      	subs	r3, r3, r2
 800a4aa:	aa0c      	add	r2, sp, #48	@ 0x30
 800a4ac:	9502      	str	r5, [sp, #8]
 800a4ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a4b2:	f1cb 0217 	rsb	r2, fp, #23
 800a4b6:	fa43 f902 	asr.w	r9, r3, r2
 800a4ba:	f1b9 0f00 	cmp.w	r9, #0
 800a4be:	dd64      	ble.n	800a58a <__kernel_rem_pio2+0x272>
 800a4c0:	9b02      	ldr	r3, [sp, #8]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	9302      	str	r3, [sp, #8]
 800a4c8:	4615      	mov	r5, r2
 800a4ca:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a4ce:	4590      	cmp	r8, r2
 800a4d0:	f300 80b8 	bgt.w	800a644 <__kernel_rem_pio2+0x32c>
 800a4d4:	f1bb 0f00 	cmp.w	fp, #0
 800a4d8:	dd07      	ble.n	800a4ea <__kernel_rem_pio2+0x1d2>
 800a4da:	f1bb 0f01 	cmp.w	fp, #1
 800a4de:	f000 80bf 	beq.w	800a660 <__kernel_rem_pio2+0x348>
 800a4e2:	f1bb 0f02 	cmp.w	fp, #2
 800a4e6:	f000 80c6 	beq.w	800a676 <__kernel_rem_pio2+0x35e>
 800a4ea:	f1b9 0f02 	cmp.w	r9, #2
 800a4ee:	d14c      	bne.n	800a58a <__kernel_rem_pio2+0x272>
 800a4f0:	4632      	mov	r2, r6
 800a4f2:	463b      	mov	r3, r7
 800a4f4:	494e      	ldr	r1, [pc, #312]	@ (800a630 <__kernel_rem_pio2+0x318>)
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	f7f5 fee6 	bl	80002c8 <__aeabi_dsub>
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	2d00      	cmp	r5, #0
 800a502:	d042      	beq.n	800a58a <__kernel_rem_pio2+0x272>
 800a504:	4658      	mov	r0, fp
 800a506:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800a620 <__kernel_rem_pio2+0x308>
 800a50a:	f000 fbe9 	bl	800ace0 <scalbn>
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	ec53 2b10 	vmov	r2, r3, d0
 800a516:	f7f5 fed7 	bl	80002c8 <__aeabi_dsub>
 800a51a:	4606      	mov	r6, r0
 800a51c:	460f      	mov	r7, r1
 800a51e:	e034      	b.n	800a58a <__kernel_rem_pio2+0x272>
 800a520:	4b44      	ldr	r3, [pc, #272]	@ (800a634 <__kernel_rem_pio2+0x31c>)
 800a522:	2200      	movs	r2, #0
 800a524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a528:	f7f6 f886 	bl	8000638 <__aeabi_dmul>
 800a52c:	f7f6 fb34 	bl	8000b98 <__aeabi_d2iz>
 800a530:	f7f6 f818 	bl	8000564 <__aeabi_i2d>
 800a534:	4b40      	ldr	r3, [pc, #256]	@ (800a638 <__kernel_rem_pio2+0x320>)
 800a536:	2200      	movs	r2, #0
 800a538:	4606      	mov	r6, r0
 800a53a:	460f      	mov	r7, r1
 800a53c:	f7f6 f87c 	bl	8000638 <__aeabi_dmul>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a548:	f7f5 febe 	bl	80002c8 <__aeabi_dsub>
 800a54c:	f7f6 fb24 	bl	8000b98 <__aeabi_d2iz>
 800a550:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a554:	f849 0b04 	str.w	r0, [r9], #4
 800a558:	4639      	mov	r1, r7
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7f5 feb6 	bl	80002cc <__adddf3>
 800a560:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a568:	e75d      	b.n	800a426 <__kernel_rem_pio2+0x10e>
 800a56a:	d107      	bne.n	800a57c <__kernel_rem_pio2+0x264>
 800a56c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800a570:	aa0c      	add	r2, sp, #48	@ 0x30
 800a572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a576:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a57a:	e79e      	b.n	800a4ba <__kernel_rem_pio2+0x1a2>
 800a57c:	4b2f      	ldr	r3, [pc, #188]	@ (800a63c <__kernel_rem_pio2+0x324>)
 800a57e:	2200      	movs	r2, #0
 800a580:	f7f6 fae0 	bl	8000b44 <__aeabi_dcmpge>
 800a584:	2800      	cmp	r0, #0
 800a586:	d143      	bne.n	800a610 <__kernel_rem_pio2+0x2f8>
 800a588:	4681      	mov	r9, r0
 800a58a:	2200      	movs	r2, #0
 800a58c:	2300      	movs	r3, #0
 800a58e:	4630      	mov	r0, r6
 800a590:	4639      	mov	r1, r7
 800a592:	f7f6 fab9 	bl	8000b08 <__aeabi_dcmpeq>
 800a596:	2800      	cmp	r0, #0
 800a598:	f000 80bf 	beq.w	800a71a <__kernel_rem_pio2+0x402>
 800a59c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	9900      	ldr	r1, [sp, #0]
 800a5a4:	428b      	cmp	r3, r1
 800a5a6:	da6e      	bge.n	800a686 <__kernel_rem_pio2+0x36e>
 800a5a8:	2a00      	cmp	r2, #0
 800a5aa:	f000 8089 	beq.w	800a6c0 <__kernel_rem_pio2+0x3a8>
 800a5ae:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a5b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800a5b4:	f1ab 0b18 	sub.w	fp, fp, #24
 800a5b8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0f6      	beq.n	800a5ae <__kernel_rem_pio2+0x296>
 800a5c0:	4658      	mov	r0, fp
 800a5c2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800a620 <__kernel_rem_pio2+0x308>
 800a5c6:	f000 fb8b 	bl	800ace0 <scalbn>
 800a5ca:	f108 0301 	add.w	r3, r8, #1
 800a5ce:	00da      	lsls	r2, r3, #3
 800a5d0:	9205      	str	r2, [sp, #20]
 800a5d2:	ec55 4b10 	vmov	r4, r5, d0
 800a5d6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a5d8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800a634 <__kernel_rem_pio2+0x31c>
 800a5dc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a5e0:	4646      	mov	r6, r8
 800a5e2:	f04f 0a00 	mov.w	sl, #0
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	f280 80cf 	bge.w	800a78a <__kernel_rem_pio2+0x472>
 800a5ec:	4644      	mov	r4, r8
 800a5ee:	2c00      	cmp	r4, #0
 800a5f0:	f2c0 80fd 	blt.w	800a7ee <__kernel_rem_pio2+0x4d6>
 800a5f4:	4b12      	ldr	r3, [pc, #72]	@ (800a640 <__kernel_rem_pio2+0x328>)
 800a5f6:	461f      	mov	r7, r3
 800a5f8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a5fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5fe:	9306      	str	r3, [sp, #24]
 800a600:	f04f 0a00 	mov.w	sl, #0
 800a604:	f04f 0b00 	mov.w	fp, #0
 800a608:	2600      	movs	r6, #0
 800a60a:	eba8 0504 	sub.w	r5, r8, r4
 800a60e:	e0e2      	b.n	800a7d6 <__kernel_rem_pio2+0x4be>
 800a610:	f04f 0902 	mov.w	r9, #2
 800a614:	e754      	b.n	800a4c0 <__kernel_rem_pio2+0x1a8>
 800a616:	bf00      	nop
	...
 800a624:	3ff00000 	.word	0x3ff00000
 800a628:	0800b478 	.word	0x0800b478
 800a62c:	40200000 	.word	0x40200000
 800a630:	3ff00000 	.word	0x3ff00000
 800a634:	3e700000 	.word	0x3e700000
 800a638:	41700000 	.word	0x41700000
 800a63c:	3fe00000 	.word	0x3fe00000
 800a640:	0800b438 	.word	0x0800b438
 800a644:	f854 3b04 	ldr.w	r3, [r4], #4
 800a648:	b945      	cbnz	r5, 800a65c <__kernel_rem_pio2+0x344>
 800a64a:	b123      	cbz	r3, 800a656 <__kernel_rem_pio2+0x33e>
 800a64c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a650:	f844 3c04 	str.w	r3, [r4, #-4]
 800a654:	2301      	movs	r3, #1
 800a656:	3201      	adds	r2, #1
 800a658:	461d      	mov	r5, r3
 800a65a:	e738      	b.n	800a4ce <__kernel_rem_pio2+0x1b6>
 800a65c:	1acb      	subs	r3, r1, r3
 800a65e:	e7f7      	b.n	800a650 <__kernel_rem_pio2+0x338>
 800a660:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800a664:	ab0c      	add	r3, sp, #48	@ 0x30
 800a666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a66e:	a90c      	add	r1, sp, #48	@ 0x30
 800a670:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a674:	e739      	b.n	800a4ea <__kernel_rem_pio2+0x1d2>
 800a676:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800a67a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a680:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a684:	e7f3      	b.n	800a66e <__kernel_rem_pio2+0x356>
 800a686:	a90c      	add	r1, sp, #48	@ 0x30
 800a688:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	430a      	orrs	r2, r1
 800a690:	e787      	b.n	800a5a2 <__kernel_rem_pio2+0x28a>
 800a692:	3401      	adds	r4, #1
 800a694:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a698:	2a00      	cmp	r2, #0
 800a69a:	d0fa      	beq.n	800a692 <__kernel_rem_pio2+0x37a>
 800a69c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a69e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a6a2:	eb0d 0503 	add.w	r5, sp, r3
 800a6a6:	9b06      	ldr	r3, [sp, #24]
 800a6a8:	aa20      	add	r2, sp, #128	@ 0x80
 800a6aa:	4443      	add	r3, r8
 800a6ac:	f108 0701 	add.w	r7, r8, #1
 800a6b0:	3d98      	subs	r5, #152	@ 0x98
 800a6b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a6b6:	4444      	add	r4, r8
 800a6b8:	42bc      	cmp	r4, r7
 800a6ba:	da04      	bge.n	800a6c6 <__kernel_rem_pio2+0x3ae>
 800a6bc:	46a0      	mov	r8, r4
 800a6be:	e6a2      	b.n	800a406 <__kernel_rem_pio2+0xee>
 800a6c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6c2:	2401      	movs	r4, #1
 800a6c4:	e7e6      	b.n	800a694 <__kernel_rem_pio2+0x37c>
 800a6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a6cc:	f7f5 ff4a 	bl	8000564 <__aeabi_i2d>
 800a6d0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a998 <__kernel_rem_pio2+0x680>
 800a6d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a6d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a6dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6e0:	46b2      	mov	sl, r6
 800a6e2:	f04f 0800 	mov.w	r8, #0
 800a6e6:	9b05      	ldr	r3, [sp, #20]
 800a6e8:	4598      	cmp	r8, r3
 800a6ea:	dd05      	ble.n	800a6f8 <__kernel_rem_pio2+0x3e0>
 800a6ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6f0:	3701      	adds	r7, #1
 800a6f2:	eca5 7b02 	vstmia	r5!, {d7}
 800a6f6:	e7df      	b.n	800a6b8 <__kernel_rem_pio2+0x3a0>
 800a6f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a6fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a700:	f7f5 ff9a 	bl	8000638 <__aeabi_dmul>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a70c:	f7f5 fdde 	bl	80002cc <__adddf3>
 800a710:	f108 0801 	add.w	r8, r8, #1
 800a714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a718:	e7e5      	b.n	800a6e6 <__kernel_rem_pio2+0x3ce>
 800a71a:	f1cb 0000 	rsb	r0, fp, #0
 800a71e:	ec47 6b10 	vmov	d0, r6, r7
 800a722:	f000 fadd 	bl	800ace0 <scalbn>
 800a726:	ec55 4b10 	vmov	r4, r5, d0
 800a72a:	4b9d      	ldr	r3, [pc, #628]	@ (800a9a0 <__kernel_rem_pio2+0x688>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	4620      	mov	r0, r4
 800a730:	4629      	mov	r1, r5
 800a732:	f7f6 fa07 	bl	8000b44 <__aeabi_dcmpge>
 800a736:	b300      	cbz	r0, 800a77a <__kernel_rem_pio2+0x462>
 800a738:	4b9a      	ldr	r3, [pc, #616]	@ (800a9a4 <__kernel_rem_pio2+0x68c>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	4620      	mov	r0, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	f7f5 ff7a 	bl	8000638 <__aeabi_dmul>
 800a744:	f7f6 fa28 	bl	8000b98 <__aeabi_d2iz>
 800a748:	4606      	mov	r6, r0
 800a74a:	f7f5 ff0b 	bl	8000564 <__aeabi_i2d>
 800a74e:	4b94      	ldr	r3, [pc, #592]	@ (800a9a0 <__kernel_rem_pio2+0x688>)
 800a750:	2200      	movs	r2, #0
 800a752:	f7f5 ff71 	bl	8000638 <__aeabi_dmul>
 800a756:	460b      	mov	r3, r1
 800a758:	4602      	mov	r2, r0
 800a75a:	4629      	mov	r1, r5
 800a75c:	4620      	mov	r0, r4
 800a75e:	f7f5 fdb3 	bl	80002c8 <__aeabi_dsub>
 800a762:	f7f6 fa19 	bl	8000b98 <__aeabi_d2iz>
 800a766:	ab0c      	add	r3, sp, #48	@ 0x30
 800a768:	f10b 0b18 	add.w	fp, fp, #24
 800a76c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a770:	f108 0801 	add.w	r8, r8, #1
 800a774:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a778:	e722      	b.n	800a5c0 <__kernel_rem_pio2+0x2a8>
 800a77a:	4620      	mov	r0, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	f7f6 fa0b 	bl	8000b98 <__aeabi_d2iz>
 800a782:	ab0c      	add	r3, sp, #48	@ 0x30
 800a784:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a788:	e71a      	b.n	800a5c0 <__kernel_rem_pio2+0x2a8>
 800a78a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a78c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a790:	f7f5 fee8 	bl	8000564 <__aeabi_i2d>
 800a794:	4622      	mov	r2, r4
 800a796:	462b      	mov	r3, r5
 800a798:	f7f5 ff4e 	bl	8000638 <__aeabi_dmul>
 800a79c:	4652      	mov	r2, sl
 800a79e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a7a2:	465b      	mov	r3, fp
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f7f5 ff46 	bl	8000638 <__aeabi_dmul>
 800a7ac:	3e01      	subs	r6, #1
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	e718      	b.n	800a5e6 <__kernel_rem_pio2+0x2ce>
 800a7b4:	9906      	ldr	r1, [sp, #24]
 800a7b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a7ba:	9106      	str	r1, [sp, #24]
 800a7bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a7c0:	f7f5 ff3a 	bl	8000638 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	4659      	mov	r1, fp
 800a7cc:	f7f5 fd7e 	bl	80002cc <__adddf3>
 800a7d0:	3601      	adds	r6, #1
 800a7d2:	4682      	mov	sl, r0
 800a7d4:	468b      	mov	fp, r1
 800a7d6:	9b00      	ldr	r3, [sp, #0]
 800a7d8:	429e      	cmp	r6, r3
 800a7da:	dc01      	bgt.n	800a7e0 <__kernel_rem_pio2+0x4c8>
 800a7dc:	42b5      	cmp	r5, r6
 800a7de:	dae9      	bge.n	800a7b4 <__kernel_rem_pio2+0x49c>
 800a7e0:	ab48      	add	r3, sp, #288	@ 0x120
 800a7e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a7e6:	e9c5 ab00 	strd	sl, fp, [r5]
 800a7ea:	3c01      	subs	r4, #1
 800a7ec:	e6ff      	b.n	800a5ee <__kernel_rem_pio2+0x2d6>
 800a7ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	dc0b      	bgt.n	800a80c <__kernel_rem_pio2+0x4f4>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dc39      	bgt.n	800a86c <__kernel_rem_pio2+0x554>
 800a7f8:	d05d      	beq.n	800a8b6 <__kernel_rem_pio2+0x59e>
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	f003 0007 	and.w	r0, r3, #7
 800a800:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a804:	ecbd 8b02 	vpop	{d8}
 800a808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d1f3      	bne.n	800a7fa <__kernel_rem_pio2+0x4e2>
 800a812:	9b05      	ldr	r3, [sp, #20]
 800a814:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a818:	eb0d 0403 	add.w	r4, sp, r3
 800a81c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a820:	4625      	mov	r5, r4
 800a822:	46c2      	mov	sl, r8
 800a824:	f1ba 0f00 	cmp.w	sl, #0
 800a828:	f1a5 0508 	sub.w	r5, r5, #8
 800a82c:	dc6b      	bgt.n	800a906 <__kernel_rem_pio2+0x5ee>
 800a82e:	4645      	mov	r5, r8
 800a830:	2d01      	cmp	r5, #1
 800a832:	f1a4 0408 	sub.w	r4, r4, #8
 800a836:	f300 8087 	bgt.w	800a948 <__kernel_rem_pio2+0x630>
 800a83a:	9c05      	ldr	r4, [sp, #20]
 800a83c:	ab48      	add	r3, sp, #288	@ 0x120
 800a83e:	441c      	add	r4, r3
 800a840:	2000      	movs	r0, #0
 800a842:	2100      	movs	r1, #0
 800a844:	f1b8 0f01 	cmp.w	r8, #1
 800a848:	f300 809c 	bgt.w	800a984 <__kernel_rem_pio2+0x66c>
 800a84c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a850:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a854:	f1b9 0f00 	cmp.w	r9, #0
 800a858:	f040 80a6 	bne.w	800a9a8 <__kernel_rem_pio2+0x690>
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	e9c3 7800 	strd	r7, r8, [r3]
 800a862:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a866:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a86a:	e7c6      	b.n	800a7fa <__kernel_rem_pio2+0x4e2>
 800a86c:	9d05      	ldr	r5, [sp, #20]
 800a86e:	ab48      	add	r3, sp, #288	@ 0x120
 800a870:	441d      	add	r5, r3
 800a872:	4644      	mov	r4, r8
 800a874:	2000      	movs	r0, #0
 800a876:	2100      	movs	r1, #0
 800a878:	2c00      	cmp	r4, #0
 800a87a:	da35      	bge.n	800a8e8 <__kernel_rem_pio2+0x5d0>
 800a87c:	f1b9 0f00 	cmp.w	r9, #0
 800a880:	d038      	beq.n	800a8f4 <__kernel_rem_pio2+0x5dc>
 800a882:	4602      	mov	r2, r0
 800a884:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a888:	9c04      	ldr	r4, [sp, #16]
 800a88a:	e9c4 2300 	strd	r2, r3, [r4]
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a896:	f7f5 fd17 	bl	80002c8 <__aeabi_dsub>
 800a89a:	ad4a      	add	r5, sp, #296	@ 0x128
 800a89c:	2401      	movs	r4, #1
 800a89e:	45a0      	cmp	r8, r4
 800a8a0:	da2b      	bge.n	800a8fa <__kernel_rem_pio2+0x5e2>
 800a8a2:	f1b9 0f00 	cmp.w	r9, #0
 800a8a6:	d002      	beq.n	800a8ae <__kernel_rem_pio2+0x596>
 800a8a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	9b04      	ldr	r3, [sp, #16]
 800a8b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a8b4:	e7a1      	b.n	800a7fa <__kernel_rem_pio2+0x4e2>
 800a8b6:	9c05      	ldr	r4, [sp, #20]
 800a8b8:	ab48      	add	r3, sp, #288	@ 0x120
 800a8ba:	441c      	add	r4, r3
 800a8bc:	2000      	movs	r0, #0
 800a8be:	2100      	movs	r1, #0
 800a8c0:	f1b8 0f00 	cmp.w	r8, #0
 800a8c4:	da09      	bge.n	800a8da <__kernel_rem_pio2+0x5c2>
 800a8c6:	f1b9 0f00 	cmp.w	r9, #0
 800a8ca:	d002      	beq.n	800a8d2 <__kernel_rem_pio2+0x5ba>
 800a8cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	9b04      	ldr	r3, [sp, #16]
 800a8d4:	e9c3 0100 	strd	r0, r1, [r3]
 800a8d8:	e78f      	b.n	800a7fa <__kernel_rem_pio2+0x4e2>
 800a8da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a8de:	f7f5 fcf5 	bl	80002cc <__adddf3>
 800a8e2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a8e6:	e7eb      	b.n	800a8c0 <__kernel_rem_pio2+0x5a8>
 800a8e8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a8ec:	f7f5 fcee 	bl	80002cc <__adddf3>
 800a8f0:	3c01      	subs	r4, #1
 800a8f2:	e7c1      	b.n	800a878 <__kernel_rem_pio2+0x560>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	e7c6      	b.n	800a888 <__kernel_rem_pio2+0x570>
 800a8fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a8fe:	f7f5 fce5 	bl	80002cc <__adddf3>
 800a902:	3401      	adds	r4, #1
 800a904:	e7cb      	b.n	800a89e <__kernel_rem_pio2+0x586>
 800a906:	ed95 7b00 	vldr	d7, [r5]
 800a90a:	ed8d 7b00 	vstr	d7, [sp]
 800a90e:	ed95 7b02 	vldr	d7, [r5, #8]
 800a912:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a916:	ec53 2b17 	vmov	r2, r3, d7
 800a91a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a91e:	f7f5 fcd5 	bl	80002cc <__adddf3>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a92e:	f7f5 fccb 	bl	80002c8 <__aeabi_dsub>
 800a932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a936:	f7f5 fcc9 	bl	80002cc <__adddf3>
 800a93a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a93e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a942:	e9c5 6700 	strd	r6, r7, [r5]
 800a946:	e76d      	b.n	800a824 <__kernel_rem_pio2+0x50c>
 800a948:	ed94 7b00 	vldr	d7, [r4]
 800a94c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a950:	ec51 0b17 	vmov	r0, r1, d7
 800a954:	4652      	mov	r2, sl
 800a956:	465b      	mov	r3, fp
 800a958:	ed8d 7b00 	vstr	d7, [sp]
 800a95c:	f7f5 fcb6 	bl	80002cc <__adddf3>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a96c:	f7f5 fcac 	bl	80002c8 <__aeabi_dsub>
 800a970:	4652      	mov	r2, sl
 800a972:	465b      	mov	r3, fp
 800a974:	f7f5 fcaa 	bl	80002cc <__adddf3>
 800a978:	3d01      	subs	r5, #1
 800a97a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a97e:	e9c4 6700 	strd	r6, r7, [r4]
 800a982:	e755      	b.n	800a830 <__kernel_rem_pio2+0x518>
 800a984:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a988:	f7f5 fca0 	bl	80002cc <__adddf3>
 800a98c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a990:	e758      	b.n	800a844 <__kernel_rem_pio2+0x52c>
 800a992:	bf00      	nop
 800a994:	f3af 8000 	nop.w
	...
 800a9a0:	41700000 	.word	0x41700000
 800a9a4:	3e700000 	.word	0x3e700000
 800a9a8:	9b04      	ldr	r3, [sp, #16]
 800a9aa:	9a04      	ldr	r2, [sp, #16]
 800a9ac:	601f      	str	r7, [r3, #0]
 800a9ae:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a9b2:	605c      	str	r4, [r3, #4]
 800a9b4:	609d      	str	r5, [r3, #8]
 800a9b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a9ba:	60d3      	str	r3, [r2, #12]
 800a9bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9c0:	6110      	str	r0, [r2, #16]
 800a9c2:	6153      	str	r3, [r2, #20]
 800a9c4:	e719      	b.n	800a7fa <__kernel_rem_pio2+0x4e2>
 800a9c6:	bf00      	nop

0800a9c8 <__kernel_cos>:
 800a9c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	ec57 6b10 	vmov	r6, r7, d0
 800a9d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a9d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a9d8:	ed8d 1b00 	vstr	d1, [sp]
 800a9dc:	d206      	bcs.n	800a9ec <__kernel_cos+0x24>
 800a9de:	4630      	mov	r0, r6
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	f7f6 f8d9 	bl	8000b98 <__aeabi_d2iz>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f000 8088 	beq.w	800aafc <__kernel_cos+0x134>
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	463b      	mov	r3, r7
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	f7f5 fe20 	bl	8000638 <__aeabi_dmul>
 800a9f8:	4b51      	ldr	r3, [pc, #324]	@ (800ab40 <__kernel_cos+0x178>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	460d      	mov	r5, r1
 800aa00:	f7f5 fe1a 	bl	8000638 <__aeabi_dmul>
 800aa04:	a340      	add	r3, pc, #256	@ (adr r3, 800ab08 <__kernel_cos+0x140>)
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	4682      	mov	sl, r0
 800aa0c:	468b      	mov	fp, r1
 800aa0e:	4620      	mov	r0, r4
 800aa10:	4629      	mov	r1, r5
 800aa12:	f7f5 fe11 	bl	8000638 <__aeabi_dmul>
 800aa16:	a33e      	add	r3, pc, #248	@ (adr r3, 800ab10 <__kernel_cos+0x148>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fc56 	bl	80002cc <__adddf3>
 800aa20:	4622      	mov	r2, r4
 800aa22:	462b      	mov	r3, r5
 800aa24:	f7f5 fe08 	bl	8000638 <__aeabi_dmul>
 800aa28:	a33b      	add	r3, pc, #236	@ (adr r3, 800ab18 <__kernel_cos+0x150>)
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fc4b 	bl	80002c8 <__aeabi_dsub>
 800aa32:	4622      	mov	r2, r4
 800aa34:	462b      	mov	r3, r5
 800aa36:	f7f5 fdff 	bl	8000638 <__aeabi_dmul>
 800aa3a:	a339      	add	r3, pc, #228	@ (adr r3, 800ab20 <__kernel_cos+0x158>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fc44 	bl	80002cc <__adddf3>
 800aa44:	4622      	mov	r2, r4
 800aa46:	462b      	mov	r3, r5
 800aa48:	f7f5 fdf6 	bl	8000638 <__aeabi_dmul>
 800aa4c:	a336      	add	r3, pc, #216	@ (adr r3, 800ab28 <__kernel_cos+0x160>)
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 fc39 	bl	80002c8 <__aeabi_dsub>
 800aa56:	4622      	mov	r2, r4
 800aa58:	462b      	mov	r3, r5
 800aa5a:	f7f5 fded 	bl	8000638 <__aeabi_dmul>
 800aa5e:	a334      	add	r3, pc, #208	@ (adr r3, 800ab30 <__kernel_cos+0x168>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	f7f5 fc32 	bl	80002cc <__adddf3>
 800aa68:	4622      	mov	r2, r4
 800aa6a:	462b      	mov	r3, r5
 800aa6c:	f7f5 fde4 	bl	8000638 <__aeabi_dmul>
 800aa70:	4622      	mov	r2, r4
 800aa72:	462b      	mov	r3, r5
 800aa74:	f7f5 fde0 	bl	8000638 <__aeabi_dmul>
 800aa78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	460d      	mov	r5, r1
 800aa80:	4630      	mov	r0, r6
 800aa82:	4639      	mov	r1, r7
 800aa84:	f7f5 fdd8 	bl	8000638 <__aeabi_dmul>
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f7f5 fc1a 	bl	80002c8 <__aeabi_dsub>
 800aa94:	4b2b      	ldr	r3, [pc, #172]	@ (800ab44 <__kernel_cos+0x17c>)
 800aa96:	4598      	cmp	r8, r3
 800aa98:	4606      	mov	r6, r0
 800aa9a:	460f      	mov	r7, r1
 800aa9c:	d810      	bhi.n	800aac0 <__kernel_cos+0xf8>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4650      	mov	r0, sl
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	f7f5 fc0f 	bl	80002c8 <__aeabi_dsub>
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4926      	ldr	r1, [pc, #152]	@ (800ab48 <__kernel_cos+0x180>)
 800aaae:	4602      	mov	r2, r0
 800aab0:	2000      	movs	r0, #0
 800aab2:	f7f5 fc09 	bl	80002c8 <__aeabi_dsub>
 800aab6:	ec41 0b10 	vmov	d0, r0, r1
 800aaba:	b003      	add	sp, #12
 800aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac0:	4b22      	ldr	r3, [pc, #136]	@ (800ab4c <__kernel_cos+0x184>)
 800aac2:	4921      	ldr	r1, [pc, #132]	@ (800ab48 <__kernel_cos+0x180>)
 800aac4:	4598      	cmp	r8, r3
 800aac6:	bf8c      	ite	hi
 800aac8:	4d21      	ldrhi	r5, [pc, #132]	@ (800ab50 <__kernel_cos+0x188>)
 800aaca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800aace:	2400      	movs	r4, #0
 800aad0:	4622      	mov	r2, r4
 800aad2:	462b      	mov	r3, r5
 800aad4:	2000      	movs	r0, #0
 800aad6:	f7f5 fbf7 	bl	80002c8 <__aeabi_dsub>
 800aada:	4622      	mov	r2, r4
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	462b      	mov	r3, r5
 800aae2:	4650      	mov	r0, sl
 800aae4:	4659      	mov	r1, fp
 800aae6:	f7f5 fbef 	bl	80002c8 <__aeabi_dsub>
 800aaea:	4632      	mov	r2, r6
 800aaec:	463b      	mov	r3, r7
 800aaee:	f7f5 fbeb 	bl	80002c8 <__aeabi_dsub>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	4649      	mov	r1, r9
 800aafa:	e7da      	b.n	800aab2 <__kernel_cos+0xea>
 800aafc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800ab38 <__kernel_cos+0x170>
 800ab00:	e7db      	b.n	800aaba <__kernel_cos+0xf2>
 800ab02:	bf00      	nop
 800ab04:	f3af 8000 	nop.w
 800ab08:	be8838d4 	.word	0xbe8838d4
 800ab0c:	bda8fae9 	.word	0xbda8fae9
 800ab10:	bdb4b1c4 	.word	0xbdb4b1c4
 800ab14:	3e21ee9e 	.word	0x3e21ee9e
 800ab18:	809c52ad 	.word	0x809c52ad
 800ab1c:	3e927e4f 	.word	0x3e927e4f
 800ab20:	19cb1590 	.word	0x19cb1590
 800ab24:	3efa01a0 	.word	0x3efa01a0
 800ab28:	16c15177 	.word	0x16c15177
 800ab2c:	3f56c16c 	.word	0x3f56c16c
 800ab30:	5555554c 	.word	0x5555554c
 800ab34:	3fa55555 	.word	0x3fa55555
 800ab38:	00000000 	.word	0x00000000
 800ab3c:	3ff00000 	.word	0x3ff00000
 800ab40:	3fe00000 	.word	0x3fe00000
 800ab44:	3fd33332 	.word	0x3fd33332
 800ab48:	3ff00000 	.word	0x3ff00000
 800ab4c:	3fe90000 	.word	0x3fe90000
 800ab50:	3fd20000 	.word	0x3fd20000
 800ab54:	00000000 	.word	0x00000000

0800ab58 <__kernel_sin>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	ec55 4b10 	vmov	r4, r5, d0
 800ab60:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ab64:	b085      	sub	sp, #20
 800ab66:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ab6a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ab6e:	4680      	mov	r8, r0
 800ab70:	d205      	bcs.n	800ab7e <__kernel_sin+0x26>
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7f6 f80f 	bl	8000b98 <__aeabi_d2iz>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d052      	beq.n	800ac24 <__kernel_sin+0xcc>
 800ab7e:	4622      	mov	r2, r4
 800ab80:	462b      	mov	r3, r5
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7f5 fd57 	bl	8000638 <__aeabi_dmul>
 800ab8a:	4682      	mov	sl, r0
 800ab8c:	468b      	mov	fp, r1
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	4620      	mov	r0, r4
 800ab94:	4629      	mov	r1, r5
 800ab96:	f7f5 fd4f 	bl	8000638 <__aeabi_dmul>
 800ab9a:	a342      	add	r3, pc, #264	@ (adr r3, 800aca4 <__kernel_sin+0x14c>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	e9cd 0100 	strd	r0, r1, [sp]
 800aba4:	4650      	mov	r0, sl
 800aba6:	4659      	mov	r1, fp
 800aba8:	f7f5 fd46 	bl	8000638 <__aeabi_dmul>
 800abac:	a33f      	add	r3, pc, #252	@ (adr r3, 800acac <__kernel_sin+0x154>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fb89 	bl	80002c8 <__aeabi_dsub>
 800abb6:	4652      	mov	r2, sl
 800abb8:	465b      	mov	r3, fp
 800abba:	f7f5 fd3d 	bl	8000638 <__aeabi_dmul>
 800abbe:	a33d      	add	r3, pc, #244	@ (adr r3, 800acb4 <__kernel_sin+0x15c>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f7f5 fb82 	bl	80002cc <__adddf3>
 800abc8:	4652      	mov	r2, sl
 800abca:	465b      	mov	r3, fp
 800abcc:	f7f5 fd34 	bl	8000638 <__aeabi_dmul>
 800abd0:	a33a      	add	r3, pc, #232	@ (adr r3, 800acbc <__kernel_sin+0x164>)
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	f7f5 fb77 	bl	80002c8 <__aeabi_dsub>
 800abda:	4652      	mov	r2, sl
 800abdc:	465b      	mov	r3, fp
 800abde:	f7f5 fd2b 	bl	8000638 <__aeabi_dmul>
 800abe2:	a338      	add	r3, pc, #224	@ (adr r3, 800acc4 <__kernel_sin+0x16c>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	f7f5 fb70 	bl	80002cc <__adddf3>
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	f1b8 0f00 	cmp.w	r8, #0
 800abf4:	d11b      	bne.n	800ac2e <__kernel_sin+0xd6>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	4650      	mov	r0, sl
 800abfc:	4659      	mov	r1, fp
 800abfe:	f7f5 fd1b 	bl	8000638 <__aeabi_dmul>
 800ac02:	a325      	add	r3, pc, #148	@ (adr r3, 800ac98 <__kernel_sin+0x140>)
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	f7f5 fb5e 	bl	80002c8 <__aeabi_dsub>
 800ac0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac10:	f7f5 fd12 	bl	8000638 <__aeabi_dmul>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4620      	mov	r0, r4
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	f7f5 fb56 	bl	80002cc <__adddf3>
 800ac20:	4604      	mov	r4, r0
 800ac22:	460d      	mov	r5, r1
 800ac24:	ec45 4b10 	vmov	d0, r4, r5
 800ac28:	b005      	add	sp, #20
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac32:	4b1b      	ldr	r3, [pc, #108]	@ (800aca0 <__kernel_sin+0x148>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	f7f5 fcff 	bl	8000638 <__aeabi_dmul>
 800ac3a:	4632      	mov	r2, r6
 800ac3c:	4680      	mov	r8, r0
 800ac3e:	4689      	mov	r9, r1
 800ac40:	463b      	mov	r3, r7
 800ac42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac46:	f7f5 fcf7 	bl	8000638 <__aeabi_dmul>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	f7f5 fb39 	bl	80002c8 <__aeabi_dsub>
 800ac56:	4652      	mov	r2, sl
 800ac58:	465b      	mov	r3, fp
 800ac5a:	f7f5 fced 	bl	8000638 <__aeabi_dmul>
 800ac5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac62:	f7f5 fb31 	bl	80002c8 <__aeabi_dsub>
 800ac66:	a30c      	add	r3, pc, #48	@ (adr r3, 800ac98 <__kernel_sin+0x140>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	460f      	mov	r7, r1
 800ac70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac74:	f7f5 fce0 	bl	8000638 <__aeabi_dmul>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f7f5 fb24 	bl	80002cc <__adddf3>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	f7f5 fb1c 	bl	80002c8 <__aeabi_dsub>
 800ac90:	e7c6      	b.n	800ac20 <__kernel_sin+0xc8>
 800ac92:	bf00      	nop
 800ac94:	f3af 8000 	nop.w
 800ac98:	55555549 	.word	0x55555549
 800ac9c:	3fc55555 	.word	0x3fc55555
 800aca0:	3fe00000 	.word	0x3fe00000
 800aca4:	5acfd57c 	.word	0x5acfd57c
 800aca8:	3de5d93a 	.word	0x3de5d93a
 800acac:	8a2b9ceb 	.word	0x8a2b9ceb
 800acb0:	3e5ae5e6 	.word	0x3e5ae5e6
 800acb4:	57b1fe7d 	.word	0x57b1fe7d
 800acb8:	3ec71de3 	.word	0x3ec71de3
 800acbc:	19c161d5 	.word	0x19c161d5
 800acc0:	3f2a01a0 	.word	0x3f2a01a0
 800acc4:	1110f8a6 	.word	0x1110f8a6
 800acc8:	3f811111 	.word	0x3f811111

0800accc <fabs>:
 800accc:	ec51 0b10 	vmov	r0, r1, d0
 800acd0:	4602      	mov	r2, r0
 800acd2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800acd6:	ec43 2b10 	vmov	d0, r2, r3
 800acda:	4770      	bx	lr
 800acdc:	0000      	movs	r0, r0
	...

0800ace0 <scalbn>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	ec55 4b10 	vmov	r4, r5, d0
 800ace6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800acea:	4606      	mov	r6, r0
 800acec:	462b      	mov	r3, r5
 800acee:	b991      	cbnz	r1, 800ad16 <scalbn+0x36>
 800acf0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800acf4:	4323      	orrs	r3, r4
 800acf6:	d03d      	beq.n	800ad74 <scalbn+0x94>
 800acf8:	4b35      	ldr	r3, [pc, #212]	@ (800add0 <scalbn+0xf0>)
 800acfa:	4620      	mov	r0, r4
 800acfc:	4629      	mov	r1, r5
 800acfe:	2200      	movs	r2, #0
 800ad00:	f7f5 fc9a 	bl	8000638 <__aeabi_dmul>
 800ad04:	4b33      	ldr	r3, [pc, #204]	@ (800add4 <scalbn+0xf4>)
 800ad06:	429e      	cmp	r6, r3
 800ad08:	4604      	mov	r4, r0
 800ad0a:	460d      	mov	r5, r1
 800ad0c:	da0f      	bge.n	800ad2e <scalbn+0x4e>
 800ad0e:	a328      	add	r3, pc, #160	@ (adr r3, 800adb0 <scalbn+0xd0>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	e01e      	b.n	800ad54 <scalbn+0x74>
 800ad16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ad1a:	4291      	cmp	r1, r2
 800ad1c:	d10b      	bne.n	800ad36 <scalbn+0x56>
 800ad1e:	4622      	mov	r2, r4
 800ad20:	4620      	mov	r0, r4
 800ad22:	4629      	mov	r1, r5
 800ad24:	f7f5 fad2 	bl	80002cc <__adddf3>
 800ad28:	4604      	mov	r4, r0
 800ad2a:	460d      	mov	r5, r1
 800ad2c:	e022      	b.n	800ad74 <scalbn+0x94>
 800ad2e:	460b      	mov	r3, r1
 800ad30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ad34:	3936      	subs	r1, #54	@ 0x36
 800ad36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ad3a:	4296      	cmp	r6, r2
 800ad3c:	dd0d      	ble.n	800ad5a <scalbn+0x7a>
 800ad3e:	2d00      	cmp	r5, #0
 800ad40:	a11d      	add	r1, pc, #116	@ (adr r1, 800adb8 <scalbn+0xd8>)
 800ad42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad46:	da02      	bge.n	800ad4e <scalbn+0x6e>
 800ad48:	a11d      	add	r1, pc, #116	@ (adr r1, 800adc0 <scalbn+0xe0>)
 800ad4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4e:	a31a      	add	r3, pc, #104	@ (adr r3, 800adb8 <scalbn+0xd8>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	f7f5 fc70 	bl	8000638 <__aeabi_dmul>
 800ad58:	e7e6      	b.n	800ad28 <scalbn+0x48>
 800ad5a:	1872      	adds	r2, r6, r1
 800ad5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ad60:	428a      	cmp	r2, r1
 800ad62:	dcec      	bgt.n	800ad3e <scalbn+0x5e>
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	dd08      	ble.n	800ad7a <scalbn+0x9a>
 800ad68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ad6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ad70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad74:	ec45 4b10 	vmov	d0, r4, r5
 800ad78:	bd70      	pop	{r4, r5, r6, pc}
 800ad7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ad7e:	da08      	bge.n	800ad92 <scalbn+0xb2>
 800ad80:	2d00      	cmp	r5, #0
 800ad82:	a10b      	add	r1, pc, #44	@ (adr r1, 800adb0 <scalbn+0xd0>)
 800ad84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad88:	dac1      	bge.n	800ad0e <scalbn+0x2e>
 800ad8a:	a10f      	add	r1, pc, #60	@ (adr r1, 800adc8 <scalbn+0xe8>)
 800ad8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad90:	e7bd      	b.n	800ad0e <scalbn+0x2e>
 800ad92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ad96:	3236      	adds	r2, #54	@ 0x36
 800ad98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ad9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ada0:	4620      	mov	r0, r4
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <scalbn+0xf8>)
 800ada4:	4629      	mov	r1, r5
 800ada6:	2200      	movs	r2, #0
 800ada8:	e7d4      	b.n	800ad54 <scalbn+0x74>
 800adaa:	bf00      	nop
 800adac:	f3af 8000 	nop.w
 800adb0:	c2f8f359 	.word	0xc2f8f359
 800adb4:	01a56e1f 	.word	0x01a56e1f
 800adb8:	8800759c 	.word	0x8800759c
 800adbc:	7e37e43c 	.word	0x7e37e43c
 800adc0:	8800759c 	.word	0x8800759c
 800adc4:	fe37e43c 	.word	0xfe37e43c
 800adc8:	c2f8f359 	.word	0xc2f8f359
 800adcc:	81a56e1f 	.word	0x81a56e1f
 800add0:	43500000 	.word	0x43500000
 800add4:	ffff3cb0 	.word	0xffff3cb0
 800add8:	3c900000 	.word	0x3c900000
 800addc:	00000000 	.word	0x00000000

0800ade0 <floor>:
 800ade0:	ec51 0b10 	vmov	r0, r1, d0
 800ade4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800adf0:	2e13      	cmp	r6, #19
 800adf2:	460c      	mov	r4, r1
 800adf4:	4605      	mov	r5, r0
 800adf6:	4680      	mov	r8, r0
 800adf8:	dc34      	bgt.n	800ae64 <floor+0x84>
 800adfa:	2e00      	cmp	r6, #0
 800adfc:	da17      	bge.n	800ae2e <floor+0x4e>
 800adfe:	a332      	add	r3, pc, #200	@ (adr r3, 800aec8 <floor+0xe8>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	f7f5 fa62 	bl	80002cc <__adddf3>
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f7f5 fea4 	bl	8000b58 <__aeabi_dcmpgt>
 800ae10:	b150      	cbz	r0, 800ae28 <floor+0x48>
 800ae12:	2c00      	cmp	r4, #0
 800ae14:	da55      	bge.n	800aec2 <floor+0xe2>
 800ae16:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ae1a:	432c      	orrs	r4, r5
 800ae1c:	2500      	movs	r5, #0
 800ae1e:	42ac      	cmp	r4, r5
 800ae20:	4c2b      	ldr	r4, [pc, #172]	@ (800aed0 <floor+0xf0>)
 800ae22:	bf08      	it	eq
 800ae24:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	e023      	b.n	800ae76 <floor+0x96>
 800ae2e:	4f29      	ldr	r7, [pc, #164]	@ (800aed4 <floor+0xf4>)
 800ae30:	4137      	asrs	r7, r6
 800ae32:	ea01 0307 	and.w	r3, r1, r7
 800ae36:	4303      	orrs	r3, r0
 800ae38:	d01d      	beq.n	800ae76 <floor+0x96>
 800ae3a:	a323      	add	r3, pc, #140	@ (adr r3, 800aec8 <floor+0xe8>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	f7f5 fa44 	bl	80002cc <__adddf3>
 800ae44:	2200      	movs	r2, #0
 800ae46:	2300      	movs	r3, #0
 800ae48:	f7f5 fe86 	bl	8000b58 <__aeabi_dcmpgt>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d0eb      	beq.n	800ae28 <floor+0x48>
 800ae50:	2c00      	cmp	r4, #0
 800ae52:	bfbe      	ittt	lt
 800ae54:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ae58:	4133      	asrlt	r3, r6
 800ae5a:	18e4      	addlt	r4, r4, r3
 800ae5c:	ea24 0407 	bic.w	r4, r4, r7
 800ae60:	2500      	movs	r5, #0
 800ae62:	e7e1      	b.n	800ae28 <floor+0x48>
 800ae64:	2e33      	cmp	r6, #51	@ 0x33
 800ae66:	dd0a      	ble.n	800ae7e <floor+0x9e>
 800ae68:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ae6c:	d103      	bne.n	800ae76 <floor+0x96>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	f7f5 fa2b 	bl	80002cc <__adddf3>
 800ae76:	ec41 0b10 	vmov	d0, r0, r1
 800ae7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ae82:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ae86:	40df      	lsrs	r7, r3
 800ae88:	4207      	tst	r7, r0
 800ae8a:	d0f4      	beq.n	800ae76 <floor+0x96>
 800ae8c:	a30e      	add	r3, pc, #56	@ (adr r3, 800aec8 <floor+0xe8>)
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	f7f5 fa1b 	bl	80002cc <__adddf3>
 800ae96:	2200      	movs	r2, #0
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f7f5 fe5d 	bl	8000b58 <__aeabi_dcmpgt>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d0c2      	beq.n	800ae28 <floor+0x48>
 800aea2:	2c00      	cmp	r4, #0
 800aea4:	da0a      	bge.n	800aebc <floor+0xdc>
 800aea6:	2e14      	cmp	r6, #20
 800aea8:	d101      	bne.n	800aeae <floor+0xce>
 800aeaa:	3401      	adds	r4, #1
 800aeac:	e006      	b.n	800aebc <floor+0xdc>
 800aeae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	40b3      	lsls	r3, r6
 800aeb6:	441d      	add	r5, r3
 800aeb8:	4545      	cmp	r5, r8
 800aeba:	d3f6      	bcc.n	800aeaa <floor+0xca>
 800aebc:	ea25 0507 	bic.w	r5, r5, r7
 800aec0:	e7b2      	b.n	800ae28 <floor+0x48>
 800aec2:	2500      	movs	r5, #0
 800aec4:	462c      	mov	r4, r5
 800aec6:	e7af      	b.n	800ae28 <floor+0x48>
 800aec8:	8800759c 	.word	0x8800759c
 800aecc:	7e37e43c 	.word	0x7e37e43c
 800aed0:	bff00000 	.word	0xbff00000
 800aed4:	000fffff 	.word	0x000fffff

0800aed8 <_init>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	bf00      	nop
 800aedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aede:	bc08      	pop	{r3}
 800aee0:	469e      	mov	lr, r3
 800aee2:	4770      	bx	lr

0800aee4 <_fini>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	bf00      	nop
 800aee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeea:	bc08      	pop	{r3}
 800aeec:	469e      	mov	lr, r3
 800aeee:	4770      	bx	lr
